/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 102.0, "minX": 0.0, "maxY": 120802.0, "series": [{"data": [[0.0, 204.0], [0.1, 205.0], [0.2, 205.0], [0.3, 206.0], [0.4, 207.0], [0.5, 207.0], [0.6, 208.0], [0.7, 209.0], [0.8, 209.0], [0.9, 306.0], [1.0, 307.0], [1.1, 309.0], [1.2, 309.0], [1.3, 309.0], [1.4, 309.0], [1.5, 309.0], [1.6, 309.0], [1.7, 309.0], [1.8, 309.0], [1.9, 309.0], [2.0, 309.0], [2.1, 309.0], [2.2, 309.0], [2.3, 309.0], [2.4, 309.0], [2.5, 309.0], [2.6, 309.0], [2.7, 309.0], [2.8, 310.0], [2.9, 310.0], [3.0, 310.0], [3.1, 310.0], [3.2, 310.0], [3.3, 310.0], [3.4, 310.0], [3.5, 310.0], [3.6, 310.0], [3.7, 310.0], [3.8, 310.0], [3.9, 310.0], [4.0, 310.0], [4.1, 310.0], [4.2, 310.0], [4.3, 310.0], [4.4, 310.0], [4.5, 310.0], [4.6, 310.0], [4.7, 310.0], [4.8, 310.0], [4.9, 310.0], [5.0, 311.0], [5.1, 311.0], [5.2, 311.0], [5.3, 311.0], [5.4, 311.0], [5.5, 311.0], [5.6, 311.0], [5.7, 311.0], [5.8, 311.0], [5.9, 311.0], [6.0, 311.0], [6.1, 311.0], [6.2, 311.0], [6.3, 311.0], [6.4, 311.0], [6.5, 311.0], [6.6, 311.0], [6.7, 311.0], [6.8, 311.0], [6.9, 311.0], [7.0, 311.0], [7.1, 311.0], [7.2, 311.0], [7.3, 311.0], [7.4, 311.0], [7.5, 311.0], [7.6, 311.0], [7.7, 311.0], [7.8, 311.0], [7.9, 311.0], [8.0, 311.0], [8.1, 311.0], [8.2, 311.0], [8.3, 311.0], [8.4, 311.0], [8.5, 311.0], [8.6, 311.0], [8.7, 311.0], [8.8, 311.0], [8.9, 312.0], [9.0, 312.0], [9.1, 312.0], [9.2, 312.0], [9.3, 312.0], [9.4, 312.0], [9.5, 312.0], [9.6, 312.0], [9.7, 312.0], [9.8, 312.0], [9.9, 312.0], [10.0, 312.0], [10.1, 312.0], [10.2, 312.0], [10.3, 312.0], [10.4, 312.0], [10.5, 312.0], [10.6, 312.0], [10.7, 312.0], [10.8, 312.0], [10.9, 312.0], [11.0, 312.0], [11.1, 312.0], [11.2, 312.0], [11.3, 312.0], [11.4, 312.0], [11.5, 312.0], [11.6, 312.0], [11.7, 312.0], [11.8, 312.0], [11.9, 312.0], [12.0, 312.0], [12.1, 312.0], [12.2, 312.0], [12.3, 312.0], [12.4, 313.0], [12.5, 313.0], [12.6, 313.0], [12.7, 313.0], [12.8, 313.0], [12.9, 313.0], [13.0, 313.0], [13.1, 313.0], [13.2, 313.0], [13.3, 313.0], [13.4, 313.0], [13.5, 313.0], [13.6, 313.0], [13.7, 313.0], [13.8, 313.0], [13.9, 313.0], [14.0, 313.0], [14.1, 313.0], [14.2, 313.0], [14.3, 313.0], [14.4, 313.0], [14.5, 313.0], [14.6, 313.0], [14.7, 313.0], [14.8, 313.0], [14.9, 313.0], [15.0, 313.0], [15.1, 313.0], [15.2, 313.0], [15.3, 313.0], [15.4, 313.0], [15.5, 313.0], [15.6, 313.0], [15.7, 313.0], [15.8, 313.0], [15.9, 313.0], [16.0, 313.0], [16.1, 313.0], [16.2, 313.0], [16.3, 313.0], [16.4, 313.0], [16.5, 314.0], [16.6, 314.0], [16.7, 314.0], [16.8, 314.0], [16.9, 314.0], [17.0, 314.0], [17.1, 314.0], [17.2, 314.0], [17.3, 314.0], [17.4, 314.0], [17.5, 314.0], [17.6, 314.0], [17.7, 314.0], [17.8, 314.0], [17.9, 314.0], [18.0, 314.0], [18.1, 314.0], [18.2, 314.0], [18.3, 314.0], [18.4, 314.0], [18.5, 314.0], [18.6, 314.0], [18.7, 314.0], [18.8, 314.0], [18.9, 314.0], [19.0, 314.0], [19.1, 314.0], [19.2, 314.0], [19.3, 315.0], [19.4, 315.0], [19.5, 315.0], [19.6, 315.0], [19.7, 315.0], [19.8, 315.0], [19.9, 315.0], [20.0, 315.0], [20.1, 315.0], [20.2, 315.0], [20.3, 315.0], [20.4, 315.0], [20.5, 315.0], [20.6, 315.0], [20.7, 315.0], [20.8, 315.0], [20.9, 315.0], [21.0, 315.0], [21.1, 315.0], [21.2, 315.0], [21.3, 315.0], [21.4, 315.0], [21.5, 316.0], [21.6, 316.0], [21.7, 316.0], [21.8, 316.0], [21.9, 316.0], [22.0, 316.0], [22.1, 316.0], [22.2, 316.0], [22.3, 316.0], [22.4, 316.0], [22.5, 316.0], [22.6, 316.0], [22.7, 316.0], [22.8, 316.0], [22.9, 316.0], [23.0, 317.0], [23.1, 317.0], [23.2, 317.0], [23.3, 317.0], [23.4, 317.0], [23.5, 317.0], [23.6, 317.0], [23.7, 317.0], [23.8, 317.0], [23.9, 317.0], [24.0, 317.0], [24.1, 317.0], [24.2, 317.0], [24.3, 317.0], [24.4, 317.0], [24.5, 317.0], [24.6, 317.0], [24.7, 317.0], [24.8, 318.0], [24.9, 318.0], [25.0, 318.0], [25.1, 318.0], [25.2, 318.0], [25.3, 318.0], [25.4, 318.0], [25.5, 319.0], [25.6, 319.0], [25.7, 319.0], [25.8, 320.0], [25.9, 320.0], [26.0, 320.0], [26.1, 320.0], [26.2, 320.0], [26.3, 321.0], [26.4, 321.0], [26.5, 321.0], [26.6, 321.0], [26.7, 321.0], [26.8, 322.0], [26.9, 323.0], [27.0, 323.0], [27.1, 323.0], [27.2, 324.0], [27.3, 325.0], [27.4, 325.0], [27.5, 326.0], [27.6, 328.0], [27.7, 328.0], [27.8, 330.0], [27.9, 330.0], [28.0, 330.0], [28.1, 330.0], [28.2, 331.0], [28.3, 331.0], [28.4, 332.0], [28.5, 332.0], [28.6, 333.0], [28.7, 333.0], [28.8, 334.0], [28.9, 336.0], [29.0, 336.0], [29.1, 336.0], [29.2, 338.0], [29.3, 339.0], [29.4, 340.0], [29.5, 340.0], [29.6, 341.0], [29.7, 341.0], [29.8, 342.0], [29.9, 344.0], [30.0, 345.0], [30.1, 346.0], [30.2, 347.0], [30.3, 347.0], [30.4, 348.0], [30.5, 348.0], [30.6, 349.0], [30.7, 350.0], [30.8, 351.0], [30.9, 351.0], [31.0, 353.0], [31.1, 353.0], [31.2, 353.0], [31.3, 354.0], [31.4, 354.0], [31.5, 354.0], [31.6, 356.0], [31.7, 358.0], [31.8, 358.0], [31.9, 358.0], [32.0, 359.0], [32.1, 359.0], [32.2, 360.0], [32.3, 361.0], [32.4, 362.0], [32.5, 362.0], [32.6, 363.0], [32.7, 363.0], [32.8, 363.0], [32.9, 366.0], [33.0, 367.0], [33.1, 367.0], [33.2, 368.0], [33.3, 368.0], [33.4, 368.0], [33.5, 368.0], [33.6, 369.0], [33.7, 369.0], [33.8, 373.0], [33.9, 374.0], [34.0, 375.0], [34.1, 377.0], [34.2, 378.0], [34.3, 379.0], [34.4, 379.0], [34.5, 382.0], [34.6, 383.0], [34.7, 386.0], [34.8, 387.0], [34.9, 390.0], [35.0, 392.0], [35.1, 394.0], [35.2, 395.0], [35.3, 398.0], [35.4, 400.0], [35.5, 402.0], [35.6, 404.0], [35.7, 404.0], [35.8, 404.0], [35.9, 406.0], [36.0, 407.0], [36.1, 408.0], [36.2, 409.0], [36.3, 409.0], [36.4, 409.0], [36.5, 410.0], [36.6, 411.0], [36.7, 411.0], [36.8, 411.0], [36.9, 411.0], [37.0, 411.0], [37.1, 412.0], [37.2, 412.0], [37.3, 412.0], [37.4, 412.0], [37.5, 412.0], [37.6, 412.0], [37.7, 413.0], [37.8, 414.0], [37.9, 414.0], [38.0, 416.0], [38.1, 416.0], [38.2, 417.0], [38.3, 417.0], [38.4, 417.0], [38.5, 417.0], [38.6, 417.0], [38.7, 418.0], [38.8, 418.0], [38.9, 418.0], [39.0, 418.0], [39.1, 419.0], [39.2, 420.0], [39.3, 422.0], [39.4, 423.0], [39.5, 423.0], [39.6, 423.0], [39.7, 425.0], [39.8, 426.0], [39.9, 428.0], [40.0, 433.0], [40.1, 433.0], [40.2, 434.0], [40.3, 434.0], [40.4, 436.0], [40.5, 437.0], [40.6, 438.0], [40.7, 440.0], [40.8, 440.0], [40.9, 441.0], [41.0, 441.0], [41.1, 446.0], [41.2, 447.0], [41.3, 451.0], [41.4, 451.0], [41.5, 452.0], [41.6, 453.0], [41.7, 454.0], [41.8, 455.0], [41.9, 456.0], [42.0, 457.0], [42.1, 458.0], [42.2, 458.0], [42.3, 462.0], [42.4, 465.0], [42.5, 467.0], [42.6, 472.0], [42.7, 472.0], [42.8, 473.0], [42.9, 473.0], [43.0, 474.0], [43.1, 474.0], [43.2, 474.0], [43.3, 477.0], [43.4, 479.0], [43.5, 480.0], [43.6, 481.0], [43.7, 482.0], [43.8, 483.0], [43.9, 483.0], [44.0, 485.0], [44.1, 487.0], [44.2, 488.0], [44.3, 489.0], [44.4, 490.0], [44.5, 492.0], [44.6, 492.0], [44.7, 492.0], [44.8, 492.0], [44.9, 492.0], [45.0, 493.0], [45.1, 493.0], [45.2, 495.0], [45.3, 501.0], [45.4, 503.0], [45.5, 503.0], [45.6, 504.0], [45.7, 505.0], [45.8, 505.0], [45.9, 506.0], [46.0, 507.0], [46.1, 509.0], [46.2, 510.0], [46.3, 511.0], [46.4, 511.0], [46.5, 511.0], [46.6, 511.0], [46.7, 512.0], [46.8, 512.0], [46.9, 512.0], [47.0, 512.0], [47.1, 512.0], [47.2, 512.0], [47.3, 512.0], [47.4, 512.0], [47.5, 513.0], [47.6, 513.0], [47.7, 513.0], [47.8, 513.0], [47.9, 513.0], [48.0, 513.0], [48.1, 513.0], [48.2, 513.0], [48.3, 514.0], [48.4, 514.0], [48.5, 514.0], [48.6, 514.0], [48.7, 514.0], [48.8, 514.0], [48.9, 515.0], [49.0, 515.0], [49.1, 515.0], [49.2, 515.0], [49.3, 515.0], [49.4, 515.0], [49.5, 516.0], [49.6, 516.0], [49.7, 516.0], [49.8, 516.0], [49.9, 516.0], [50.0, 516.0], [50.1, 517.0], [50.2, 517.0], [50.3, 517.0], [50.4, 518.0], [50.5, 518.0], [50.6, 520.0], [50.7, 521.0], [50.8, 521.0], [50.9, 522.0], [51.0, 522.0], [51.1, 522.0], [51.2, 523.0], [51.3, 523.0], [51.4, 525.0], [51.5, 526.0], [51.6, 527.0], [51.7, 528.0], [51.8, 528.0], [51.9, 528.0], [52.0, 528.0], [52.1, 528.0], [52.2, 528.0], [52.3, 529.0], [52.4, 529.0], [52.5, 530.0], [52.6, 533.0], [52.7, 534.0], [52.8, 535.0], [52.9, 536.0], [53.0, 536.0], [53.1, 538.0], [53.2, 538.0], [53.3, 538.0], [53.4, 538.0], [53.5, 538.0], [53.6, 539.0], [53.7, 539.0], [53.8, 540.0], [53.9, 541.0], [54.0, 541.0], [54.1, 542.0], [54.2, 542.0], [54.3, 542.0], [54.4, 543.0], [54.5, 543.0], [54.6, 544.0], [54.7, 547.0], [54.8, 549.0], [54.9, 550.0], [55.0, 550.0], [55.1, 550.0], [55.2, 554.0], [55.3, 554.0], [55.4, 554.0], [55.5, 556.0], [55.6, 556.0], [55.7, 558.0], [55.8, 558.0], [55.9, 560.0], [56.0, 561.0], [56.1, 561.0], [56.2, 561.0], [56.3, 562.0], [56.4, 565.0], [56.5, 566.0], [56.6, 566.0], [56.7, 566.0], [56.8, 571.0], [56.9, 571.0], [57.0, 571.0], [57.1, 572.0], [57.2, 572.0], [57.3, 573.0], [57.4, 573.0], [57.5, 573.0], [57.6, 574.0], [57.7, 574.0], [57.8, 576.0], [57.9, 577.0], [58.0, 577.0], [58.1, 582.0], [58.2, 582.0], [58.3, 584.0], [58.4, 587.0], [58.5, 587.0], [58.6, 590.0], [58.7, 591.0], [58.8, 593.0], [58.9, 594.0], [59.0, 594.0], [59.1, 595.0], [59.2, 596.0], [59.3, 599.0], [59.4, 599.0], [59.5, 602.0], [59.6, 603.0], [59.7, 603.0], [59.8, 610.0], [59.9, 610.0], [60.0, 611.0], [60.1, 615.0], [60.2, 615.0], [60.3, 618.0], [60.4, 618.0], [60.5, 619.0], [60.6, 619.0], [60.7, 620.0], [60.8, 621.0], [60.9, 652.0], [61.0, 691.0], [61.1, 703.0], [61.2, 913.0], [61.3, 1021.0], [61.4, 1083.0], [61.5, 1112.0], [61.6, 1271.0], [61.7, 1348.0], [61.8, 1495.0], [61.9, 3380.0], [62.0, 3592.0], [62.1, 4019.0], [62.2, 4168.0], [62.3, 4183.0], [62.4, 4603.0], [62.5, 4634.0], [62.6, 4860.0], [62.7, 5141.0], [62.8, 5158.0], [62.9, 5373.0], [63.0, 5451.0], [63.1, 5501.0], [63.2, 5559.0], [63.3, 5563.0], [63.4, 5564.0], [63.5, 5571.0], [63.6, 5579.0], [63.7, 5590.0], [63.8, 5601.0], [63.9, 5612.0], [64.0, 5662.0], [64.1, 5665.0], [64.2, 5687.0], [64.3, 5741.0], [64.4, 5763.0], [64.5, 5878.0], [64.6, 6029.0], [64.7, 6098.0], [64.8, 6108.0], [64.9, 6160.0], [65.0, 6324.0], [65.1, 6375.0], [65.2, 6472.0], [65.3, 6516.0], [65.4, 6544.0], [65.5, 6730.0], [65.6, 6854.0], [65.7, 6918.0], [65.8, 7272.0], [65.9, 7315.0], [66.0, 7397.0], [66.1, 7531.0], [66.2, 7605.0], [66.3, 7834.0], [66.4, 7852.0], [66.5, 8048.0], [66.6, 8282.0], [66.7, 8426.0], [66.8, 8745.0], [66.9, 8802.0], [67.0, 8808.0], [67.1, 9111.0], [67.2, 9228.0], [67.3, 9374.0], [67.4, 9418.0], [67.5, 9453.0], [67.6, 9491.0], [67.7, 9493.0], [67.8, 9594.0], [67.9, 9695.0], [68.0, 10139.0], [68.1, 10355.0], [68.2, 10384.0], [68.3, 10543.0], [68.4, 10567.0], [68.5, 10853.0], [68.6, 10900.0], [68.7, 10942.0], [68.8, 11017.0], [68.9, 11034.0], [69.0, 11042.0], [69.1, 11266.0], [69.2, 11292.0], [69.3, 11430.0], [69.4, 11518.0], [69.5, 11741.0], [69.6, 11790.0], [69.7, 11807.0], [69.8, 11834.0], [69.9, 12049.0], [70.0, 12200.0], [70.1, 12269.0], [70.2, 12530.0], [70.3, 12818.0], [70.4, 12833.0], [70.5, 12846.0], [70.6, 12875.0], [70.7, 13004.0], [70.8, 13035.0], [70.9, 13443.0], [71.0, 13463.0], [71.1, 13552.0], [71.2, 14102.0], [71.3, 14266.0], [71.4, 14380.0], [71.5, 14432.0], [71.6, 14446.0], [71.7, 14706.0], [71.8, 14761.0], [71.9, 14856.0], [72.0, 15308.0], [72.1, 15340.0], [72.2, 15427.0], [72.3, 15465.0], [72.4, 15492.0], [72.5, 15502.0], [72.6, 15620.0], [72.7, 15750.0], [72.8, 15766.0], [72.9, 15796.0], [73.0, 15917.0], [73.1, 15939.0], [73.2, 15960.0], [73.3, 16044.0], [73.4, 16409.0], [73.5, 16430.0], [73.6, 16475.0], [73.7, 16873.0], [73.8, 16894.0], [73.9, 16906.0], [74.0, 16937.0], [74.1, 16966.0], [74.2, 16986.0], [74.3, 17377.0], [74.4, 17415.0], [74.5, 17453.0], [74.6, 17457.0], [74.7, 17484.0], [74.8, 17583.0], [74.9, 17654.0], [75.0, 17806.0], [75.1, 17829.0], [75.2, 18085.0], [75.3, 18429.0], [75.4, 18466.0], [75.5, 18502.0], [75.6, 18683.0], [75.7, 18781.0], [75.8, 18787.0], [75.9, 18804.0], [76.0, 18823.0], [76.1, 19125.0], [76.2, 19294.0], [76.3, 19563.0], [76.4, 19648.0], [76.5, 19831.0], [76.6, 19843.0], [76.7, 20009.0], [76.8, 20237.0], [76.9, 20399.0], [77.0, 20664.0], [77.1, 20769.0], [77.2, 21072.0], [77.3, 21127.0], [77.4, 21193.0], [77.5, 21396.0], [77.6, 21414.0], [77.7, 21416.0], [77.8, 21505.0], [77.9, 21586.0], [78.0, 21785.0], [78.1, 21857.0], [78.2, 21873.0], [78.3, 21882.0], [78.4, 22001.0], [78.5, 22157.0], [78.6, 22180.0], [78.7, 22342.0], [78.8, 22342.0], [78.9, 22351.0], [79.0, 22449.0], [79.1, 22482.0], [79.2, 22581.0], [79.3, 22713.0], [79.4, 22985.0], [79.5, 23005.0], [79.6, 23109.0], [79.7, 23154.0], [79.8, 23261.0], [79.9, 23512.0], [80.0, 23581.0], [80.1, 23625.0], [80.2, 23651.0], [80.3, 23660.0], [80.4, 23665.0], [80.5, 23895.0], [80.6, 23902.0], [80.7, 24059.0], [80.8, 24097.0], [80.9, 24113.0], [81.0, 24126.0], [81.1, 24227.0], [81.2, 24456.0], [81.3, 24462.0], [81.4, 24634.0], [81.5, 25627.0], [81.6, 25679.0], [81.7, 25874.0], [81.8, 26074.0], [81.9, 26148.0], [82.0, 26487.0], [82.1, 26633.0], [82.2, 26652.0], [82.3, 26768.0], [82.4, 27097.0], [82.5, 27923.0], [82.6, 28000.0], [82.7, 28353.0], [82.8, 28526.0], [82.9, 28534.0], [83.0, 28587.0], [83.1, 28606.0], [83.2, 28778.0], [83.3, 28824.0], [83.4, 29132.0], [83.5, 29425.0], [83.6, 29828.0], [83.7, 30091.0], [83.8, 30187.0], [83.9, 30277.0], [84.0, 30296.0], [84.1, 30648.0], [84.2, 30909.0], [84.3, 31176.0], [84.4, 31226.0], [84.5, 31491.0], [84.6, 31996.0], [84.7, 32098.0], [84.8, 32161.0], [84.9, 32644.0], [85.0, 32843.0], [85.1, 33221.0], [85.2, 33420.0], [85.3, 33643.0], [85.4, 34068.0], [85.5, 34679.0], [85.6, 34833.0], [85.7, 35058.0], [85.8, 35131.0], [85.9, 35225.0], [86.0, 35502.0], [86.1, 35883.0], [86.2, 36022.0], [86.3, 36082.0], [86.4, 36225.0], [86.5, 36613.0], [86.6, 37064.0], [86.7, 37313.0], [86.8, 39335.0], [86.9, 39868.0], [87.0, 41278.0], [87.1, 42694.0], [87.2, 42707.0], [87.3, 43611.0], [87.4, 43678.0], [87.5, 43884.0], [87.6, 44629.0], [87.7, 47153.0], [87.8, 47770.0], [87.9, 48032.0], [88.0, 51957.0], [88.1, 52486.0], [88.2, 53295.0], [88.3, 53376.0], [88.4, 53422.0], [88.5, 54867.0], [88.6, 55440.0], [88.7, 57741.0], [88.8, 58311.0], [88.9, 59023.0], [89.0, 59113.0], [89.1, 59664.0], [89.2, 60310.0], [89.3, 60325.0], [89.4, 60328.0], [89.5, 60334.0], [89.6, 60351.0], [89.7, 60365.0], [89.8, 60366.0], [89.9, 60369.0], [90.0, 60378.0], [90.1, 60388.0], [90.2, 60429.0], [90.3, 60436.0], [90.4, 60440.0], [90.5, 60444.0], [90.6, 60446.0], [90.7, 60448.0], [90.8, 60466.0], [90.9, 60470.0], [91.0, 60470.0], [91.1, 60477.0], [91.2, 60477.0], [91.3, 60492.0], [91.4, 60495.0], [91.5, 60516.0], [91.6, 60516.0], [91.7, 60517.0], [91.8, 60521.0], [91.9, 60524.0], [92.0, 60530.0], [92.1, 60535.0], [92.2, 60537.0], [92.3, 60540.0], [92.4, 60540.0], [92.5, 60542.0], [92.6, 60542.0], [92.7, 60542.0], [92.8, 60552.0], [92.9, 60556.0], [93.0, 60556.0], [93.1, 60560.0], [93.2, 60572.0], [93.3, 60582.0], [93.4, 60584.0], [93.5, 60584.0], [93.6, 60585.0], [93.7, 60586.0], [93.8, 60586.0], [93.9, 60588.0], [94.0, 60588.0], [94.1, 60589.0], [94.2, 60592.0], [94.3, 60594.0], [94.4, 60600.0], [94.5, 60603.0], [94.6, 60614.0], [94.7, 60614.0], [94.8, 60616.0], [94.9, 60625.0], [95.0, 60628.0], [95.1, 60635.0], [95.2, 60643.0], [95.3, 60650.0], [95.4, 60656.0], [95.5, 60666.0], [95.6, 60674.0], [95.7, 60684.0], [95.8, 60688.0], [95.9, 60722.0], [96.0, 60728.0], [96.1, 60757.0], [96.2, 60806.0], [96.3, 60820.0], [96.4, 60863.0], [96.5, 60872.0], [96.6, 60911.0], [96.7, 60993.0], [96.8, 61025.0], [96.9, 61113.0], [97.0, 61731.0], [97.1, 61830.0], [97.2, 62194.0], [97.3, 62843.0], [97.4, 62847.0], [97.5, 62881.0], [97.6, 63082.0], [97.7, 63185.0], [97.8, 64116.0], [97.9, 65835.0], [98.0, 66927.0], [98.1, 68187.0], [98.2, 68456.0], [98.3, 70225.0], [98.4, 70724.0], [98.5, 75950.0], [98.6, 78843.0], [98.7, 78870.0], [98.8, 81694.0], [98.9, 82849.0], [99.0, 105312.0], [99.1, 115116.0], [99.2, 120503.0], [99.3, 120577.0], [99.4, 120604.0], [99.5, 120609.0], [99.6, 120613.0], [99.7, 120677.0], [99.8, 120726.0], [99.9, 120748.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 102.0], [0.1, 103.0], [0.2, 103.0], [0.3, 103.0], [0.4, 103.0], [0.5, 103.0], [0.6, 103.0], [0.7, 103.0], [0.8, 103.0], [0.9, 103.0], [1.0, 103.0], [1.1, 103.0], [1.2, 104.0], [1.3, 104.0], [1.4, 104.0], [1.5, 104.0], [1.6, 104.0], [1.7, 104.0], [1.8, 104.0], [1.9, 104.0], [2.0, 104.0], [2.1, 104.0], [2.2, 104.0], [2.3, 104.0], [2.4, 104.0], [2.5, 104.0], [2.6, 104.0], [2.7, 104.0], [2.8, 104.0], [2.9, 104.0], [3.0, 104.0], [3.1, 104.0], [3.2, 104.0], [3.3, 104.0], [3.4, 104.0], [3.5, 104.0], [3.6, 104.0], [3.7, 104.0], [3.8, 104.0], [3.9, 104.0], [4.0, 104.0], [4.1, 104.0], [4.2, 104.0], [4.3, 104.0], [4.4, 104.0], [4.5, 104.0], [4.6, 104.0], [4.7, 104.0], [4.8, 104.0], [4.9, 104.0], [5.0, 104.0], [5.1, 104.0], [5.2, 104.0], [5.3, 104.0], [5.4, 104.0], [5.5, 104.0], [5.6, 104.0], [5.7, 104.0], [5.8, 104.0], [5.9, 104.0], [6.0, 104.0], [6.1, 104.0], [6.2, 104.0], [6.3, 104.0], [6.4, 104.0], [6.5, 104.0], [6.6, 104.0], [6.7, 104.0], [6.8, 104.0], [6.9, 104.0], [7.0, 104.0], [7.1, 104.0], [7.2, 104.0], [7.3, 104.0], [7.4, 104.0], [7.5, 104.0], [7.6, 104.0], [7.7, 104.0], [7.8, 104.0], [7.9, 104.0], [8.0, 104.0], [8.1, 104.0], [8.2, 104.0], [8.3, 104.0], [8.4, 104.0], [8.5, 104.0], [8.6, 104.0], [8.7, 104.0], [8.8, 104.0], [8.9, 104.0], [9.0, 104.0], [9.1, 104.0], [9.2, 104.0], [9.3, 104.0], [9.4, 105.0], [9.5, 105.0], [9.6, 105.0], [9.7, 105.0], [9.8, 105.0], [9.9, 105.0], [10.0, 105.0], [10.1, 105.0], [10.2, 105.0], [10.3, 105.0], [10.4, 105.0], [10.5, 105.0], [10.6, 105.0], [10.7, 105.0], [10.8, 105.0], [10.9, 105.0], [11.0, 105.0], [11.1, 105.0], [11.2, 105.0], [11.3, 105.0], [11.4, 105.0], [11.5, 105.0], [11.6, 105.0], [11.7, 105.0], [11.8, 105.0], [11.9, 105.0], [12.0, 105.0], [12.1, 105.0], [12.2, 105.0], [12.3, 105.0], [12.4, 105.0], [12.5, 105.0], [12.6, 105.0], [12.7, 105.0], [12.8, 105.0], [12.9, 105.0], [13.0, 105.0], [13.1, 105.0], [13.2, 105.0], [13.3, 105.0], [13.4, 105.0], [13.5, 105.0], [13.6, 105.0], [13.7, 105.0], [13.8, 105.0], [13.9, 105.0], [14.0, 105.0], [14.1, 105.0], [14.2, 105.0], [14.3, 105.0], [14.4, 105.0], [14.5, 105.0], [14.6, 105.0], [14.7, 105.0], [14.8, 105.0], [14.9, 105.0], [15.0, 105.0], [15.1, 105.0], [15.2, 105.0], [15.3, 105.0], [15.4, 105.0], [15.5, 105.0], [15.6, 105.0], [15.7, 105.0], [15.8, 105.0], [15.9, 105.0], [16.0, 105.0], [16.1, 105.0], [16.2, 105.0], [16.3, 105.0], [16.4, 105.0], [16.5, 105.0], [16.6, 105.0], [16.7, 105.0], [16.8, 105.0], [16.9, 105.0], [17.0, 105.0], [17.1, 105.0], [17.2, 105.0], [17.3, 105.0], [17.4, 105.0], [17.5, 105.0], [17.6, 105.0], [17.7, 105.0], [17.8, 105.0], [17.9, 105.0], [18.0, 105.0], [18.1, 105.0], [18.2, 105.0], [18.3, 105.0], [18.4, 106.0], [18.5, 106.0], [18.6, 106.0], [18.7, 106.0], [18.8, 106.0], [18.9, 106.0], [19.0, 106.0], [19.1, 106.0], [19.2, 106.0], [19.3, 106.0], [19.4, 106.0], [19.5, 106.0], [19.6, 106.0], [19.7, 106.0], [19.8, 106.0], [19.9, 106.0], [20.0, 106.0], [20.1, 106.0], [20.2, 106.0], [20.3, 106.0], [20.4, 106.0], [20.5, 106.0], [20.6, 106.0], [20.7, 106.0], [20.8, 106.0], [20.9, 106.0], [21.0, 106.0], [21.1, 106.0], [21.2, 106.0], [21.3, 106.0], [21.4, 106.0], [21.5, 106.0], [21.6, 106.0], [21.7, 106.0], [21.8, 106.0], [21.9, 106.0], [22.0, 106.0], [22.1, 106.0], [22.2, 106.0], [22.3, 106.0], [22.4, 106.0], [22.5, 106.0], [22.6, 106.0], [22.7, 106.0], [22.8, 106.0], [22.9, 106.0], [23.0, 106.0], [23.1, 106.0], [23.2, 106.0], [23.3, 106.0], [23.4, 106.0], [23.5, 106.0], [23.6, 106.0], [23.7, 106.0], [23.8, 106.0], [23.9, 106.0], [24.0, 106.0], [24.1, 106.0], [24.2, 106.0], [24.3, 106.0], [24.4, 106.0], [24.5, 106.0], [24.6, 106.0], [24.7, 106.0], [24.8, 106.0], [24.9, 106.0], [25.0, 106.0], [25.1, 106.0], [25.2, 106.0], [25.3, 106.0], [25.4, 106.0], [25.5, 106.0], [25.6, 106.0], [25.7, 106.0], [25.8, 106.0], [25.9, 106.0], [26.0, 106.0], [26.1, 106.0], [26.2, 106.0], [26.3, 106.0], [26.4, 106.0], [26.5, 106.0], [26.6, 107.0], [26.7, 107.0], [26.8, 107.0], [26.9, 107.0], [27.0, 107.0], [27.1, 107.0], [27.2, 107.0], [27.3, 107.0], [27.4, 107.0], [27.5, 107.0], [27.6, 107.0], [27.7, 107.0], [27.8, 107.0], [27.9, 107.0], [28.0, 107.0], [28.1, 107.0], [28.2, 107.0], [28.3, 107.0], [28.4, 107.0], [28.5, 107.0], [28.6, 107.0], [28.7, 107.0], [28.8, 107.0], [28.9, 107.0], [29.0, 107.0], [29.1, 107.0], [29.2, 107.0], [29.3, 107.0], [29.4, 107.0], [29.5, 107.0], [29.6, 107.0], [29.7, 107.0], [29.8, 107.0], [29.9, 107.0], [30.0, 107.0], [30.1, 107.0], [30.2, 107.0], [30.3, 107.0], [30.4, 107.0], [30.5, 107.0], [30.6, 107.0], [30.7, 107.0], [30.8, 107.0], [30.9, 107.0], [31.0, 107.0], [31.1, 108.0], [31.2, 108.0], [31.3, 108.0], [31.4, 108.0], [31.5, 108.0], [31.6, 108.0], [31.7, 108.0], [31.8, 108.0], [31.9, 108.0], [32.0, 108.0], [32.1, 108.0], [32.2, 108.0], [32.3, 108.0], [32.4, 108.0], [32.5, 108.0], [32.6, 108.0], [32.7, 108.0], [32.8, 108.0], [32.9, 108.0], [33.0, 108.0], [33.1, 109.0], [33.2, 109.0], [33.3, 109.0], [33.4, 109.0], [33.5, 109.0], [33.6, 109.0], [33.7, 109.0], [33.8, 109.0], [33.9, 109.0], [34.0, 109.0], [34.1, 109.0], [34.2, 109.0], [34.3, 109.0], [34.4, 109.0], [34.5, 110.0], [34.6, 110.0], [34.7, 110.0], [34.8, 110.0], [34.9, 111.0], [35.0, 111.0], [35.1, 111.0], [35.2, 111.0], [35.3, 111.0], [35.4, 111.0], [35.5, 112.0], [35.6, 112.0], [35.7, 112.0], [35.8, 112.0], [35.9, 112.0], [36.0, 112.0], [36.1, 112.0], [36.2, 112.0], [36.3, 113.0], [36.4, 113.0], [36.5, 113.0], [36.6, 114.0], [36.7, 114.0], [36.8, 114.0], [36.9, 114.0], [37.0, 114.0], [37.1, 114.0], [37.2, 114.0], [37.3, 115.0], [37.4, 115.0], [37.5, 116.0], [37.6, 116.0], [37.7, 116.0], [37.8, 116.0], [37.9, 116.0], [38.0, 117.0], [38.1, 118.0], [38.2, 118.0], [38.3, 118.0], [38.4, 119.0], [38.5, 119.0], [38.6, 119.0], [38.7, 119.0], [38.8, 119.0], [38.9, 119.0], [39.0, 120.0], [39.1, 120.0], [39.2, 120.0], [39.3, 120.0], [39.4, 120.0], [39.5, 121.0], [39.6, 121.0], [39.7, 121.0], [39.8, 122.0], [39.9, 122.0], [40.0, 122.0], [40.1, 123.0], [40.2, 123.0], [40.3, 123.0], [40.4, 124.0], [40.5, 124.0], [40.6, 124.0], [40.7, 124.0], [40.8, 125.0], [40.9, 125.0], [41.0, 126.0], [41.1, 126.0], [41.2, 127.0], [41.3, 127.0], [41.4, 127.0], [41.5, 127.0], [41.6, 127.0], [41.7, 128.0], [41.8, 128.0], [41.9, 128.0], [42.0, 128.0], [42.1, 128.0], [42.2, 129.0], [42.3, 129.0], [42.4, 129.0], [42.5, 129.0], [42.6, 129.0], [42.7, 129.0], [42.8, 129.0], [42.9, 130.0], [43.0, 130.0], [43.1, 131.0], [43.2, 131.0], [43.3, 131.0], [43.4, 132.0], [43.5, 132.0], [43.6, 132.0], [43.7, 133.0], [43.8, 133.0], [43.9, 133.0], [44.0, 133.0], [44.1, 134.0], [44.2, 134.0], [44.3, 134.0], [44.4, 134.0], [44.5, 134.0], [44.6, 135.0], [44.7, 135.0], [44.8, 135.0], [44.9, 136.0], [45.0, 138.0], [45.1, 139.0], [45.2, 140.0], [45.3, 141.0], [45.4, 141.0], [45.5, 141.0], [45.6, 141.0], [45.7, 141.0], [45.8, 142.0], [45.9, 143.0], [46.0, 143.0], [46.1, 143.0], [46.2, 143.0], [46.3, 143.0], [46.4, 144.0], [46.5, 144.0], [46.6, 144.0], [46.7, 145.0], [46.8, 145.0], [46.9, 145.0], [47.0, 146.0], [47.1, 146.0], [47.2, 146.0], [47.3, 146.0], [47.4, 147.0], [47.5, 147.0], [47.6, 147.0], [47.7, 147.0], [47.8, 148.0], [47.9, 148.0], [48.0, 149.0], [48.1, 149.0], [48.2, 150.0], [48.3, 150.0], [48.4, 150.0], [48.5, 151.0], [48.6, 151.0], [48.7, 152.0], [48.8, 152.0], [48.9, 152.0], [49.0, 153.0], [49.1, 153.0], [49.2, 153.0], [49.3, 153.0], [49.4, 154.0], [49.5, 154.0], [49.6, 155.0], [49.7, 156.0], [49.8, 156.0], [49.9, 156.0], [50.0, 157.0], [50.1, 157.0], [50.2, 157.0], [50.3, 157.0], [50.4, 157.0], [50.5, 158.0], [50.6, 158.0], [50.7, 159.0], [50.8, 159.0], [50.9, 159.0], [51.0, 161.0], [51.1, 161.0], [51.2, 161.0], [51.3, 162.0], [51.4, 162.0], [51.5, 163.0], [51.6, 164.0], [51.7, 164.0], [51.8, 164.0], [51.9, 164.0], [52.0, 165.0], [52.1, 165.0], [52.2, 165.0], [52.3, 166.0], [52.4, 166.0], [52.5, 166.0], [52.6, 166.0], [52.7, 166.0], [52.8, 167.0], [52.9, 167.0], [53.0, 167.0], [53.1, 167.0], [53.2, 168.0], [53.3, 168.0], [53.4, 168.0], [53.5, 169.0], [53.6, 171.0], [53.7, 171.0], [53.8, 171.0], [53.9, 172.0], [54.0, 172.0], [54.1, 173.0], [54.2, 173.0], [54.3, 175.0], [54.4, 176.0], [54.5, 177.0], [54.6, 177.0], [54.7, 177.0], [54.8, 177.0], [54.9, 177.0], [55.0, 178.0], [55.1, 179.0], [55.2, 179.0], [55.3, 179.0], [55.4, 180.0], [55.5, 181.0], [55.6, 182.0], [55.7, 182.0], [55.8, 183.0], [55.9, 183.0], [56.0, 183.0], [56.1, 184.0], [56.2, 185.0], [56.3, 185.0], [56.4, 186.0], [56.5, 186.0], [56.6, 186.0], [56.7, 187.0], [56.8, 187.0], [56.9, 187.0], [57.0, 187.0], [57.1, 188.0], [57.2, 188.0], [57.3, 189.0], [57.4, 189.0], [57.5, 191.0], [57.6, 191.0], [57.7, 192.0], [57.8, 192.0], [57.9, 195.0], [58.0, 195.0], [58.1, 195.0], [58.2, 196.0], [58.3, 196.0], [58.4, 196.0], [58.5, 196.0], [58.6, 198.0], [58.7, 198.0], [58.8, 198.0], [58.9, 199.0], [59.0, 199.0], [59.1, 200.0], [59.2, 201.0], [59.3, 202.0], [59.4, 202.0], [59.5, 202.0], [59.6, 203.0], [59.7, 203.0], [59.8, 203.0], [59.9, 204.0], [60.0, 204.0], [60.1, 205.0], [60.2, 205.0], [60.3, 207.0], [60.4, 207.0], [60.5, 208.0], [60.6, 209.0], [60.7, 209.0], [60.8, 209.0], [60.9, 210.0], [61.0, 210.0], [61.1, 210.0], [61.2, 210.0], [61.3, 211.0], [61.4, 212.0], [61.5, 213.0], [61.6, 213.0], [61.7, 214.0], [61.8, 217.0], [61.9, 245.0], [62.0, 317.0], [62.1, 322.0], [62.2, 337.0], [62.3, 338.0], [62.4, 918.0], [62.5, 2904.0], [62.6, 3759.0], [62.7, 4196.0], [62.8, 4322.0], [62.9, 4468.0], [63.0, 4929.0], [63.1, 5001.0], [63.2, 5142.0], [63.3, 5145.0], [63.4, 5154.0], [63.5, 5158.0], [63.6, 5179.0], [63.7, 5190.0], [63.8, 5192.0], [63.9, 5206.0], [64.0, 5252.0], [64.1, 5254.0], [64.2, 5256.0], [64.3, 5257.0], [64.4, 5279.0], [64.5, 5284.0], [64.6, 5289.0], [64.7, 5312.0], [64.8, 5354.0], [64.9, 5357.0], [65.0, 5469.0], [65.1, 5526.0], [65.2, 5601.0], [65.3, 5689.0], [65.4, 5709.0], [65.5, 5789.0], [65.6, 5802.0], [65.7, 5991.0], [65.8, 6108.0], [65.9, 6135.0], [66.0, 6176.0], [66.1, 6285.0], [66.2, 6323.0], [66.3, 6507.0], [66.4, 6525.0], [66.5, 6575.0], [66.6, 6889.0], [66.7, 6946.0], [66.8, 6948.0], [66.9, 6990.0], [67.0, 7061.0], [67.1, 7124.0], [67.2, 7509.0], [67.3, 7643.0], [67.4, 7831.0], [67.5, 8120.0], [67.6, 8260.0], [67.7, 8356.0], [67.8, 8485.0], [67.9, 8500.0], [68.0, 8579.0], [68.1, 8702.0], [68.2, 8849.0], [68.3, 9089.0], [68.4, 9143.0], [68.5, 9236.0], [68.6, 9276.0], [68.7, 9361.0], [68.8, 9646.0], [68.9, 9734.0], [69.0, 9853.0], [69.1, 9913.0], [69.2, 9946.0], [69.3, 9975.0], [69.4, 10033.0], [69.5, 10309.0], [69.6, 10571.0], [69.7, 10584.0], [69.8, 10615.0], [69.9, 10705.0], [70.0, 10733.0], [70.1, 10755.0], [70.2, 10761.0], [70.3, 10981.0], [70.4, 11021.0], [70.5, 11195.0], [70.6, 11397.0], [70.7, 11424.0], [70.8, 11427.0], [70.9, 11472.0], [71.0, 11741.0], [71.1, 12091.0], [71.2, 12201.0], [71.3, 12434.0], [71.4, 12437.0], [71.5, 12507.0], [71.6, 12594.0], [71.7, 12595.0], [71.8, 12725.0], [71.9, 13038.0], [72.0, 13149.0], [72.1, 13572.0], [72.2, 13700.0], [72.3, 14039.0], [72.4, 14079.0], [72.5, 14139.0], [72.6, 14206.0], [72.7, 14448.0], [72.8, 14455.0], [72.9, 14900.0], [73.0, 14982.0], [73.1, 15037.0], [73.2, 15057.0], [73.3, 15187.0], [73.4, 15287.0], [73.5, 15344.0], [73.6, 15361.0], [73.7, 15402.0], [73.8, 15505.0], [73.9, 15550.0], [74.0, 15554.0], [74.1, 15554.0], [74.2, 15637.0], [74.3, 15639.0], [74.4, 16003.0], [74.5, 16028.0], [74.6, 16265.0], [74.7, 16630.0], [74.8, 16638.0], [74.9, 16658.0], [75.0, 16725.0], [75.1, 16741.0], [75.2, 16969.0], [75.3, 17052.0], [75.4, 17073.0], [75.5, 17109.0], [75.6, 17179.0], [75.7, 17198.0], [75.8, 17246.0], [75.9, 17421.0], [76.0, 17744.0], [76.1, 17829.0], [76.2, 18091.0], [76.3, 18094.0], [76.4, 18373.0], [76.5, 18378.0], [76.6, 18428.0], [76.7, 18477.0], [76.8, 18483.0], [76.9, 18559.0], [77.0, 18563.0], [77.1, 18904.0], [77.2, 19119.0], [77.3, 19155.0], [77.4, 19343.0], [77.5, 19525.0], [77.6, 19572.0], [77.7, 19602.0], [77.8, 19800.0], [77.9, 19946.0], [78.0, 19991.0], [78.1, 20257.0], [78.2, 20415.0], [78.3, 20721.0], [78.4, 20761.0], [78.5, 20791.0], [78.6, 20860.0], [78.7, 21009.0], [78.8, 21009.0], [78.9, 21062.0], [79.0, 21122.0], [79.1, 21178.0], [79.2, 21375.0], [79.3, 21379.0], [79.4, 21451.0], [79.5, 21586.0], [79.6, 21661.0], [79.7, 21695.0], [79.8, 21869.0], [79.9, 21936.0], [80.0, 21942.0], [80.1, 21950.0], [80.2, 22042.0], [80.3, 22054.0], [80.4, 22176.0], [80.5, 22346.0], [80.6, 22408.0], [80.7, 22537.0], [80.8, 22755.0], [80.9, 22783.0], [81.0, 22853.0], [81.1, 23001.0], [81.2, 23103.0], [81.3, 23220.0], [81.4, 23258.0], [81.5, 23361.0], [81.6, 23411.0], [81.7, 23439.0], [81.8, 23494.0], [81.9, 23532.0], [82.0, 23693.0], [82.1, 23808.0], [82.2, 23843.0], [82.3, 23845.0], [82.4, 23895.0], [82.5, 24057.0], [82.6, 24230.0], [82.7, 24235.0], [82.8, 24842.0], [82.9, 25323.0], [83.0, 25330.0], [83.1, 25465.0], [83.2, 26079.0], [83.3, 26183.0], [83.4, 26413.0], [83.5, 26421.0], [83.6, 26688.0], [83.7, 27075.0], [83.8, 27595.0], [83.9, 27710.0], [84.0, 28120.0], [84.1, 28139.0], [84.2, 28198.0], [84.3, 28292.0], [84.4, 28417.0], [84.5, 28564.0], [84.6, 28903.0], [84.7, 29018.0], [84.8, 29286.0], [84.9, 29553.0], [85.0, 29684.0], [85.1, 29872.0], [85.2, 29888.0], [85.3, 29972.0], [85.4, 30443.0], [85.5, 30488.0], [85.6, 30819.0], [85.7, 30963.0], [85.8, 31281.0], [85.9, 31491.0], [86.0, 31588.0], [86.1, 31677.0], [86.2, 31753.0], [86.3, 32237.0], [86.4, 32436.0], [86.5, 32813.0], [86.6, 33012.0], [86.7, 33430.0], [86.8, 34270.0], [86.9, 34425.0], [87.0, 34445.0], [87.1, 34754.0], [87.2, 34819.0], [87.3, 34922.0], [87.4, 35628.0], [87.5, 35667.0], [87.6, 35680.0], [87.7, 35821.0], [87.8, 36309.0], [87.9, 36545.0], [88.0, 37006.0], [88.1, 39127.0], [88.2, 39657.0], [88.3, 40871.0], [88.4, 42287.0], [88.5, 42495.0], [88.6, 43221.0], [88.7, 43266.0], [88.8, 43477.0], [88.9, 44325.0], [89.0, 46487.0], [89.1, 46847.0], [89.2, 51550.0], [89.3, 52077.0], [89.4, 52979.0], [89.5, 53023.0], [89.6, 53210.0], [89.7, 54559.0], [89.8, 54803.0], [89.9, 55169.0], [90.0, 56663.0], [90.1, 57434.0], [90.2, 57979.0], [90.3, 58519.0], [90.4, 58720.0], [90.5, 59358.0], [90.6, 60104.0], [90.7, 60104.0], [90.8, 60105.0], [90.9, 60108.0], [91.0, 60108.0], [91.1, 60115.0], [91.2, 60116.0], [91.3, 60120.0], [91.4, 60121.0], [91.5, 60123.0], [91.6, 60127.0], [91.7, 60129.0], [91.8, 60130.0], [91.9, 60131.0], [92.0, 60133.0], [92.1, 60133.0], [92.2, 60134.0], [92.3, 60136.0], [92.4, 60139.0], [92.5, 60140.0], [92.6, 60141.0], [92.7, 60141.0], [92.8, 60143.0], [92.9, 60147.0], [93.0, 60154.0], [93.1, 60154.0], [93.2, 60155.0], [93.3, 60157.0], [93.4, 60158.0], [93.5, 60159.0], [93.6, 60159.0], [93.7, 60163.0], [93.8, 60165.0], [93.9, 60167.0], [94.0, 60172.0], [94.1, 60173.0], [94.2, 60175.0], [94.3, 60176.0], [94.4, 60176.0], [94.5, 60177.0], [94.6, 60179.0], [94.7, 60180.0], [94.8, 60180.0], [94.9, 60180.0], [95.0, 60183.0], [95.1, 60184.0], [95.2, 60191.0], [95.3, 60191.0], [95.4, 60195.0], [95.5, 60205.0], [95.6, 60206.0], [95.7, 60207.0], [95.8, 60213.0], [95.9, 60222.0], [96.0, 60223.0], [96.1, 60225.0], [96.2, 60241.0], [96.3, 60242.0], [96.4, 60248.0], [96.5, 60250.0], [96.6, 60251.0], [96.7, 60263.0], [96.8, 60263.0], [96.9, 60266.0], [97.0, 60280.0], [97.1, 60296.0], [97.2, 60316.0], [97.3, 60349.0], [97.4, 60364.0], [97.5, 60378.0], [97.6, 60410.0], [97.7, 60426.0], [97.8, 60437.0], [97.9, 60459.0], [98.0, 60462.0], [98.1, 60468.0], [98.2, 60515.0], [98.3, 60560.0], [98.4, 60604.0], [98.5, 60611.0], [98.6, 60615.0], [98.7, 60688.0], [98.8, 60833.0], [98.9, 61426.0], [99.0, 61475.0], [99.1, 61786.0], [99.2, 62537.0], [99.3, 62632.0], [99.4, 62640.0], [99.5, 62747.0], [99.6, 62776.0], [99.7, 63766.0], [99.8, 65620.0], [99.9, 67852.0], [100.0, 68048.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 204.0], [0.1, 204.0], [0.2, 204.0], [0.3, 204.0], [0.4, 204.0], [0.5, 204.0], [0.6, 204.0], [0.7, 205.0], [0.8, 205.0], [0.9, 205.0], [1.0, 205.0], [1.1, 205.0], [1.2, 205.0], [1.3, 205.0], [1.4, 205.0], [1.5, 205.0], [1.6, 205.0], [1.7, 205.0], [1.8, 205.0], [1.9, 205.0], [2.0, 205.0], [2.1, 205.0], [2.2, 205.0], [2.3, 205.0], [2.4, 205.0], [2.5, 205.0], [2.6, 205.0], [2.7, 205.0], [2.8, 205.0], [2.9, 205.0], [3.0, 205.0], [3.1, 205.0], [3.2, 205.0], [3.3, 205.0], [3.4, 205.0], [3.5, 205.0], [3.6, 205.0], [3.7, 205.0], [3.8, 205.0], [3.9, 205.0], [4.0, 205.0], [4.1, 205.0], [4.2, 205.0], [4.3, 205.0], [4.4, 205.0], [4.5, 205.0], [4.6, 205.0], [4.7, 205.0], [4.8, 205.0], [4.9, 205.0], [5.0, 205.0], [5.1, 205.0], [5.2, 206.0], [5.3, 206.0], [5.4, 206.0], [5.5, 206.0], [5.6, 206.0], [5.7, 206.0], [5.8, 206.0], [5.9, 206.0], [6.0, 206.0], [6.1, 206.0], [6.2, 206.0], [6.3, 206.0], [6.4, 206.0], [6.5, 206.0], [6.6, 206.0], [6.7, 206.0], [6.8, 206.0], [6.9, 206.0], [7.0, 206.0], [7.1, 206.0], [7.2, 206.0], [7.3, 206.0], [7.4, 206.0], [7.5, 206.0], [7.6, 206.0], [7.7, 206.0], [7.8, 206.0], [7.9, 206.0], [8.0, 206.0], [8.1, 206.0], [8.2, 206.0], [8.3, 206.0], [8.4, 206.0], [8.5, 206.0], [8.6, 206.0], [8.7, 206.0], [8.8, 206.0], [8.9, 206.0], [9.0, 206.0], [9.1, 206.0], [9.2, 206.0], [9.3, 206.0], [9.4, 206.0], [9.5, 206.0], [9.6, 206.0], [9.7, 206.0], [9.8, 206.0], [9.9, 206.0], [10.0, 206.0], [10.1, 206.0], [10.2, 206.0], [10.3, 206.0], [10.4, 206.0], [10.5, 206.0], [10.6, 206.0], [10.7, 206.0], [10.8, 206.0], [10.9, 206.0], [11.0, 206.0], [11.1, 206.0], [11.2, 206.0], [11.3, 206.0], [11.4, 206.0], [11.5, 206.0], [11.6, 206.0], [11.7, 206.0], [11.8, 206.0], [11.9, 206.0], [12.0, 206.0], [12.1, 206.0], [12.2, 207.0], [12.3, 207.0], [12.4, 207.0], [12.5, 207.0], [12.6, 207.0], [12.7, 207.0], [12.8, 207.0], [12.9, 207.0], [13.0, 207.0], [13.1, 207.0], [13.2, 207.0], [13.3, 207.0], [13.4, 207.0], [13.5, 207.0], [13.6, 207.0], [13.7, 207.0], [13.8, 207.0], [13.9, 207.0], [14.0, 207.0], [14.1, 207.0], [14.2, 207.0], [14.3, 207.0], [14.4, 207.0], [14.5, 207.0], [14.6, 207.0], [14.7, 207.0], [14.8, 207.0], [14.9, 207.0], [15.0, 207.0], [15.1, 207.0], [15.2, 207.0], [15.3, 207.0], [15.4, 207.0], [15.5, 207.0], [15.6, 207.0], [15.7, 207.0], [15.8, 207.0], [15.9, 207.0], [16.0, 207.0], [16.1, 207.0], [16.2, 207.0], [16.3, 207.0], [16.4, 207.0], [16.5, 207.0], [16.6, 207.0], [16.7, 207.0], [16.8, 207.0], [16.9, 207.0], [17.0, 207.0], [17.1, 207.0], [17.2, 207.0], [17.3, 207.0], [17.4, 207.0], [17.5, 207.0], [17.6, 207.0], [17.7, 207.0], [17.8, 207.0], [17.9, 207.0], [18.0, 207.0], [18.1, 207.0], [18.2, 207.0], [18.3, 207.0], [18.4, 207.0], [18.5, 207.0], [18.6, 207.0], [18.7, 207.0], [18.8, 207.0], [18.9, 207.0], [19.0, 207.0], [19.1, 207.0], [19.2, 207.0], [19.3, 208.0], [19.4, 208.0], [19.5, 208.0], [19.6, 208.0], [19.7, 208.0], [19.8, 208.0], [19.9, 208.0], [20.0, 208.0], [20.1, 208.0], [20.2, 208.0], [20.3, 208.0], [20.4, 208.0], [20.5, 208.0], [20.6, 208.0], [20.7, 208.0], [20.8, 208.0], [20.9, 208.0], [21.0, 208.0], [21.1, 208.0], [21.2, 208.0], [21.3, 208.0], [21.4, 208.0], [21.5, 208.0], [21.6, 208.0], [21.7, 208.0], [21.8, 208.0], [21.9, 208.0], [22.0, 208.0], [22.1, 208.0], [22.2, 208.0], [22.3, 208.0], [22.4, 208.0], [22.5, 208.0], [22.6, 208.0], [22.7, 208.0], [22.8, 208.0], [22.9, 208.0], [23.0, 208.0], [23.1, 208.0], [23.2, 208.0], [23.3, 208.0], [23.4, 208.0], [23.5, 208.0], [23.6, 208.0], [23.7, 208.0], [23.8, 208.0], [23.9, 208.0], [24.0, 208.0], [24.1, 208.0], [24.2, 208.0], [24.3, 209.0], [24.4, 209.0], [24.5, 209.0], [24.6, 209.0], [24.7, 209.0], [24.8, 209.0], [24.9, 209.0], [25.0, 209.0], [25.1, 209.0], [25.2, 209.0], [25.3, 209.0], [25.4, 209.0], [25.5, 209.0], [25.6, 209.0], [25.7, 209.0], [25.8, 209.0], [25.9, 209.0], [26.0, 209.0], [26.1, 209.0], [26.2, 209.0], [26.3, 209.0], [26.4, 209.0], [26.5, 209.0], [26.6, 209.0], [26.7, 209.0], [26.8, 209.0], [26.9, 209.0], [27.0, 209.0], [27.1, 209.0], [27.2, 209.0], [27.3, 209.0], [27.4, 209.0], [27.5, 209.0], [27.6, 209.0], [27.7, 209.0], [27.8, 209.0], [27.9, 209.0], [28.0, 209.0], [28.1, 209.0], [28.2, 209.0], [28.3, 209.0], [28.4, 209.0], [28.5, 209.0], [28.6, 209.0], [28.7, 209.0], [28.8, 209.0], [28.9, 209.0], [29.0, 209.0], [29.1, 209.0], [29.2, 209.0], [29.3, 210.0], [29.4, 210.0], [29.5, 210.0], [29.6, 210.0], [29.7, 210.0], [29.8, 210.0], [29.9, 210.0], [30.0, 210.0], [30.1, 210.0], [30.2, 210.0], [30.3, 210.0], [30.4, 210.0], [30.5, 210.0], [30.6, 210.0], [30.7, 210.0], [30.8, 210.0], [30.9, 210.0], [31.0, 210.0], [31.1, 210.0], [31.2, 210.0], [31.3, 210.0], [31.4, 210.0], [31.5, 211.0], [31.6, 211.0], [31.7, 211.0], [31.8, 211.0], [31.9, 211.0], [32.0, 211.0], [32.1, 211.0], [32.2, 211.0], [32.3, 211.0], [32.4, 211.0], [32.5, 211.0], [32.6, 211.0], [32.7, 211.0], [32.8, 211.0], [32.9, 211.0], [33.0, 211.0], [33.1, 211.0], [33.2, 211.0], [33.3, 212.0], [33.4, 212.0], [33.5, 212.0], [33.6, 212.0], [33.7, 212.0], [33.8, 212.0], [33.9, 212.0], [34.0, 212.0], [34.1, 212.0], [34.2, 212.0], [34.3, 212.0], [34.4, 212.0], [34.5, 212.0], [34.6, 212.0], [34.7, 212.0], [34.8, 213.0], [34.9, 213.0], [35.0, 213.0], [35.1, 213.0], [35.2, 213.0], [35.3, 213.0], [35.4, 213.0], [35.5, 213.0], [35.6, 213.0], [35.7, 213.0], [35.8, 213.0], [35.9, 214.0], [36.0, 214.0], [36.1, 214.0], [36.2, 214.0], [36.3, 214.0], [36.4, 215.0], [36.5, 215.0], [36.6, 215.0], [36.7, 215.0], [36.8, 215.0], [36.9, 215.0], [37.0, 215.0], [37.1, 215.0], [37.2, 215.0], [37.3, 215.0], [37.4, 215.0], [37.5, 215.0], [37.6, 215.0], [37.7, 216.0], [37.8, 216.0], [37.9, 216.0], [38.0, 216.0], [38.1, 216.0], [38.2, 217.0], [38.3, 217.0], [38.4, 219.0], [38.5, 219.0], [38.6, 219.0], [38.7, 220.0], [38.8, 220.0], [38.9, 221.0], [39.0, 221.0], [39.1, 224.0], [39.2, 224.0], [39.3, 224.0], [39.4, 224.0], [39.5, 225.0], [39.6, 225.0], [39.7, 225.0], [39.8, 226.0], [39.9, 227.0], [40.0, 228.0], [40.1, 229.0], [40.2, 229.0], [40.3, 229.0], [40.4, 230.0], [40.5, 230.0], [40.6, 234.0], [40.7, 234.0], [40.8, 236.0], [40.9, 236.0], [41.0, 237.0], [41.1, 241.0], [41.2, 241.0], [41.3, 241.0], [41.4, 241.0], [41.5, 247.0], [41.6, 247.0], [41.7, 249.0], [41.8, 250.0], [41.9, 250.0], [42.0, 252.0], [42.1, 252.0], [42.2, 252.0], [42.3, 253.0], [42.4, 255.0], [42.5, 255.0], [42.6, 257.0], [42.7, 260.0], [42.8, 263.0], [42.9, 265.0], [43.0, 271.0], [43.1, 271.0], [43.2, 272.0], [43.3, 273.0], [43.4, 275.0], [43.5, 276.0], [43.6, 282.0], [43.7, 284.0], [43.8, 288.0], [43.9, 288.0], [44.0, 288.0], [44.1, 289.0], [44.2, 290.0], [44.3, 291.0], [44.4, 292.0], [44.5, 293.0], [44.6, 296.0], [44.7, 296.0], [44.8, 297.0], [44.9, 298.0], [45.0, 298.0], [45.1, 299.0], [45.2, 300.0], [45.3, 300.0], [45.4, 302.0], [45.5, 302.0], [45.6, 303.0], [45.7, 303.0], [45.8, 303.0], [45.9, 303.0], [46.0, 304.0], [46.1, 304.0], [46.2, 304.0], [46.3, 304.0], [46.4, 304.0], [46.5, 304.0], [46.6, 304.0], [46.7, 304.0], [46.8, 304.0], [46.9, 305.0], [47.0, 305.0], [47.1, 305.0], [47.2, 305.0], [47.3, 305.0], [47.4, 305.0], [47.5, 305.0], [47.6, 305.0], [47.7, 305.0], [47.8, 305.0], [47.9, 305.0], [48.0, 305.0], [48.1, 305.0], [48.2, 305.0], [48.3, 305.0], [48.4, 306.0], [48.5, 306.0], [48.6, 306.0], [48.7, 306.0], [48.8, 306.0], [48.9, 306.0], [49.0, 306.0], [49.1, 306.0], [49.2, 306.0], [49.3, 306.0], [49.4, 306.0], [49.5, 306.0], [49.6, 306.0], [49.7, 306.0], [49.8, 306.0], [49.9, 306.0], [50.0, 306.0], [50.1, 306.0], [50.2, 306.0], [50.3, 306.0], [50.4, 306.0], [50.5, 306.0], [50.6, 306.0], [50.7, 306.0], [50.8, 306.0], [50.9, 306.0], [51.0, 306.0], [51.1, 306.0], [51.2, 306.0], [51.3, 306.0], [51.4, 306.0], [51.5, 306.0], [51.6, 306.0], [51.7, 306.0], [51.8, 307.0], [51.9, 307.0], [52.0, 307.0], [52.1, 307.0], [52.2, 307.0], [52.3, 307.0], [52.4, 307.0], [52.5, 307.0], [52.6, 307.0], [52.7, 307.0], [52.8, 307.0], [52.9, 307.0], [53.0, 307.0], [53.1, 307.0], [53.2, 308.0], [53.3, 308.0], [53.4, 308.0], [53.5, 308.0], [53.6, 308.0], [53.7, 308.0], [53.8, 308.0], [53.9, 308.0], [54.0, 309.0], [54.1, 309.0], [54.2, 309.0], [54.3, 309.0], [54.4, 309.0], [54.5, 310.0], [54.6, 310.0], [54.7, 310.0], [54.8, 310.0], [54.9, 310.0], [55.0, 311.0], [55.1, 311.0], [55.2, 311.0], [55.3, 311.0], [55.4, 311.0], [55.5, 311.0], [55.6, 311.0], [55.7, 312.0], [55.8, 312.0], [55.9, 312.0], [56.0, 312.0], [56.1, 312.0], [56.2, 313.0], [56.3, 313.0], [56.4, 314.0], [56.5, 314.0], [56.6, 315.0], [56.7, 316.0], [56.8, 316.0], [56.9, 317.0], [57.0, 317.0], [57.1, 318.0], [57.2, 318.0], [57.3, 319.0], [57.4, 320.0], [57.5, 323.0], [57.6, 324.0], [57.7, 325.0], [57.8, 325.0], [57.9, 327.0], [58.0, 327.0], [58.1, 328.0], [58.2, 329.0], [58.3, 329.0], [58.4, 329.0], [58.5, 329.0], [58.6, 330.0], [58.7, 332.0], [58.8, 332.0], [58.9, 332.0], [59.0, 333.0], [59.1, 333.0], [59.2, 333.0], [59.3, 334.0], [59.4, 334.0], [59.5, 334.0], [59.6, 335.0], [59.7, 335.0], [59.8, 339.0], [59.9, 340.0], [60.0, 341.0], [60.1, 341.0], [60.2, 343.0], [60.3, 343.0], [60.4, 343.0], [60.5, 346.0], [60.6, 348.0], [60.7, 348.0], [60.8, 349.0], [60.9, 349.0], [61.0, 349.0], [61.1, 350.0], [61.2, 350.0], [61.3, 350.0], [61.4, 351.0], [61.5, 353.0], [61.6, 353.0], [61.7, 353.0], [61.8, 353.0], [61.9, 354.0], [62.0, 354.0], [62.1, 354.0], [62.2, 355.0], [62.3, 355.0], [62.4, 356.0], [62.5, 356.0], [62.6, 357.0], [62.7, 360.0], [62.8, 361.0], [62.9, 363.0], [63.0, 366.0], [63.1, 367.0], [63.2, 367.0], [63.3, 367.0], [63.4, 371.0], [63.5, 371.0], [63.6, 372.0], [63.7, 372.0], [63.8, 373.0], [63.9, 375.0], [64.0, 375.0], [64.1, 376.0], [64.2, 376.0], [64.3, 376.0], [64.4, 377.0], [64.5, 377.0], [64.6, 379.0], [64.7, 381.0], [64.8, 382.0], [64.9, 382.0], [65.0, 383.0], [65.1, 384.0], [65.2, 384.0], [65.3, 384.0], [65.4, 386.0], [65.5, 387.0], [65.6, 387.0], [65.7, 387.0], [65.8, 387.0], [65.9, 388.0], [66.0, 388.0], [66.1, 388.0], [66.2, 389.0], [66.3, 390.0], [66.4, 390.0], [66.5, 392.0], [66.6, 393.0], [66.7, 393.0], [66.8, 393.0], [66.9, 395.0], [67.0, 395.0], [67.1, 397.0], [67.2, 398.0], [67.3, 399.0], [67.4, 399.0], [67.5, 399.0], [67.6, 400.0], [67.7, 400.0], [67.8, 401.0], [67.9, 401.0], [68.0, 401.0], [68.1, 401.0], [68.2, 402.0], [68.3, 402.0], [68.4, 402.0], [68.5, 402.0], [68.6, 404.0], [68.7, 404.0], [68.8, 404.0], [68.9, 404.0], [69.0, 404.0], [69.1, 404.0], [69.2, 404.0], [69.3, 405.0], [69.4, 405.0], [69.5, 405.0], [69.6, 405.0], [69.7, 405.0], [69.8, 405.0], [69.9, 405.0], [70.0, 405.0], [70.1, 405.0], [70.2, 405.0], [70.3, 405.0], [70.4, 405.0], [70.5, 405.0], [70.6, 405.0], [70.7, 405.0], [70.8, 405.0], [70.9, 405.0], [71.0, 405.0], [71.1, 406.0], [71.2, 406.0], [71.3, 406.0], [71.4, 406.0], [71.5, 406.0], [71.6, 406.0], [71.7, 406.0], [71.8, 406.0], [71.9, 406.0], [72.0, 406.0], [72.1, 406.0], [72.2, 406.0], [72.3, 406.0], [72.4, 406.0], [72.5, 406.0], [72.6, 406.0], [72.7, 406.0], [72.8, 406.0], [72.9, 406.0], [73.0, 406.0], [73.1, 407.0], [73.2, 407.0], [73.3, 407.0], [73.4, 407.0], [73.5, 407.0], [73.6, 407.0], [73.7, 407.0], [73.8, 407.0], [73.9, 407.0], [74.0, 407.0], [74.1, 407.0], [74.2, 407.0], [74.3, 407.0], [74.4, 407.0], [74.5, 407.0], [74.6, 407.0], [74.7, 407.0], [74.8, 407.0], [74.9, 407.0], [75.0, 407.0], [75.1, 407.0], [75.2, 407.0], [75.3, 407.0], [75.4, 407.0], [75.5, 407.0], [75.6, 407.0], [75.7, 407.0], [75.8, 407.0], [75.9, 407.0], [76.0, 407.0], [76.1, 407.0], [76.2, 407.0], [76.3, 407.0], [76.4, 407.0], [76.5, 407.0], [76.6, 407.0], [76.7, 407.0], [76.8, 407.0], [76.9, 407.0], [77.0, 407.0], [77.1, 407.0], [77.2, 407.0], [77.3, 407.0], [77.4, 407.0], [77.5, 407.0], [77.6, 407.0], [77.7, 407.0], [77.8, 407.0], [77.9, 407.0], [78.0, 408.0], [78.1, 408.0], [78.2, 408.0], [78.3, 408.0], [78.4, 408.0], [78.5, 408.0], [78.6, 408.0], [78.7, 408.0], [78.8, 408.0], [78.9, 408.0], [79.0, 408.0], [79.1, 408.0], [79.2, 408.0], [79.3, 408.0], [79.4, 408.0], [79.5, 408.0], [79.6, 408.0], [79.7, 408.0], [79.8, 408.0], [79.9, 408.0], [80.0, 408.0], [80.1, 408.0], [80.2, 408.0], [80.3, 408.0], [80.4, 408.0], [80.5, 408.0], [80.6, 408.0], [80.7, 408.0], [80.8, 408.0], [80.9, 408.0], [81.0, 408.0], [81.1, 408.0], [81.2, 408.0], [81.3, 408.0], [81.4, 408.0], [81.5, 408.0], [81.6, 408.0], [81.7, 408.0], [81.8, 408.0], [81.9, 408.0], [82.0, 408.0], [82.1, 408.0], [82.2, 408.0], [82.3, 408.0], [82.4, 408.0], [82.5, 408.0], [82.6, 408.0], [82.7, 408.0], [82.8, 408.0], [82.9, 408.0], [83.0, 408.0], [83.1, 408.0], [83.2, 408.0], [83.3, 408.0], [83.4, 408.0], [83.5, 408.0], [83.6, 408.0], [83.7, 408.0], [83.8, 408.0], [83.9, 408.0], [84.0, 409.0], [84.1, 409.0], [84.2, 409.0], [84.3, 409.0], [84.4, 409.0], [84.5, 409.0], [84.6, 409.0], [84.7, 409.0], [84.8, 409.0], [84.9, 409.0], [85.0, 409.0], [85.1, 409.0], [85.2, 409.0], [85.3, 409.0], [85.4, 409.0], [85.5, 409.0], [85.6, 409.0], [85.7, 409.0], [85.8, 409.0], [85.9, 409.0], [86.0, 409.0], [86.1, 409.0], [86.2, 409.0], [86.3, 409.0], [86.4, 409.0], [86.5, 409.0], [86.6, 409.0], [86.7, 409.0], [86.8, 409.0], [86.9, 409.0], [87.0, 409.0], [87.1, 409.0], [87.2, 409.0], [87.3, 409.0], [87.4, 409.0], [87.5, 409.0], [87.6, 409.0], [87.7, 409.0], [87.8, 409.0], [87.9, 409.0], [88.0, 409.0], [88.1, 409.0], [88.2, 409.0], [88.3, 409.0], [88.4, 409.0], [88.5, 409.0], [88.6, 409.0], [88.7, 409.0], [88.8, 409.0], [88.9, 409.0], [89.0, 409.0], [89.1, 409.0], [89.2, 409.0], [89.3, 409.0], [89.4, 409.0], [89.5, 409.0], [89.6, 409.0], [89.7, 409.0], [89.8, 409.0], [89.9, 409.0], [90.0, 409.0], [90.1, 409.0], [90.2, 409.0], [90.3, 409.0], [90.4, 410.0], [90.5, 410.0], [90.6, 410.0], [90.7, 410.0], [90.8, 410.0], [90.9, 410.0], [91.0, 410.0], [91.1, 410.0], [91.2, 410.0], [91.3, 410.0], [91.4, 410.0], [91.5, 410.0], [91.6, 410.0], [91.7, 411.0], [91.8, 411.0], [91.9, 411.0], [92.0, 411.0], [92.1, 412.0], [92.2, 412.0], [92.3, 412.0], [92.4, 413.0], [92.5, 414.0], [92.6, 414.0], [92.7, 414.0], [92.8, 415.0], [92.9, 417.0], [93.0, 417.0], [93.1, 421.0], [93.2, 469.0], [93.3, 488.0], [93.4, 490.0], [93.5, 498.0], [93.6, 500.0], [93.7, 509.0], [93.8, 510.0], [93.9, 510.0], [94.0, 510.0], [94.1, 511.0], [94.2, 511.0], [94.3, 511.0], [94.4, 511.0], [94.5, 511.0], [94.6, 511.0], [94.7, 533.0], [94.8, 716.0], [94.9, 808.0], [95.0, 917.0], [95.1, 921.0], [95.2, 1003.0], [95.3, 1121.0], [95.4, 1232.0], [95.5, 1367.0], [95.6, 2915.0], [95.7, 3027.0], [95.8, 3238.0], [95.9, 3464.0], [96.0, 3481.0], [96.1, 4195.0], [96.2, 4984.0], [96.3, 5014.0], [96.4, 5323.0], [96.5, 6348.0], [96.6, 7267.0], [96.7, 7269.0], [96.8, 7677.0], [96.9, 10341.0], [97.0, 10341.0], [97.1, 11058.0], [97.2, 15130.0], [97.3, 30203.0], [97.4, 46793.0], [97.5, 60211.0], [97.6, 60213.0], [97.7, 60255.0], [97.8, 60264.0], [97.9, 60311.0], [98.0, 60311.0], [98.1, 60311.0], [98.2, 60311.0], [98.3, 60312.0], [98.4, 60312.0], [98.5, 60312.0], [98.6, 60313.0], [98.7, 60319.0], [98.8, 60321.0], [98.9, 60321.0], [99.0, 60326.0], [99.1, 60341.0], [99.2, 60367.0], [99.3, 60368.0], [99.4, 60378.0], [99.5, 60414.0], [99.6, 60415.0], [99.7, 60415.0], [99.8, 60420.0], [99.9, 60420.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 639.0, "series": [{"data": [[65900.0, 1.0], [70700.0, 1.0], [37300.0, 1.0], [39300.0, 1.0], [47700.0, 1.0], [200.0, 9.0], [53300.0, 1.0], [56900.0, 1.0], [57700.0, 1.0], [60500.0, 32.0], [60900.0, 2.0], [61700.0, 1.0], [62100.0, 1.0], [64100.0, 1.0], [65800.0, 1.0], [300.0, 379.0], [400.0, 108.0], [500.0, 156.0], [600.0, 18.0], [700.0, 1.0], [900.0, 1.0], [1000.0, 2.0], [1100.0, 1.0], [1200.0, 1.0], [1300.0, 1.0], [1400.0, 1.0], [3300.0, 2.0], [3500.0, 1.0], [4000.0, 1.0], [4100.0, 2.0], [68100.0, 1.0], [4600.0, 2.0], [4800.0, 1.0], [5100.0, 2.0], [5300.0, 2.0], [5500.0, 7.0], [5600.0, 6.0], [5400.0, 1.0], [5800.0, 1.0], [5700.0, 2.0], [6100.0, 2.0], [6000.0, 2.0], [6300.0, 2.0], [6200.0, 1.0], [6500.0, 2.0], [6400.0, 1.0], [6800.0, 1.0], [6700.0, 1.0], [6900.0, 1.0], [7300.0, 3.0], [7200.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7800.0, 2.0], [8000.0, 1.0], [8400.0, 1.0], [8200.0, 1.0], [8700.0, 1.0], [9200.0, 1.0], [8800.0, 3.0], [9100.0, 1.0], [9400.0, 4.0], [9600.0, 1.0], [9500.0, 1.0], [9300.0, 1.0], [10200.0, 1.0], [10100.0, 1.0], [10300.0, 2.0], [10500.0, 2.0], [10900.0, 2.0], [11000.0, 4.0], [10800.0, 1.0], [11200.0, 2.0], [11400.0, 1.0], [11700.0, 2.0], [11500.0, 1.0], [12200.0, 2.0], [12000.0, 1.0], [11800.0, 2.0], [12300.0, 1.0], [12500.0, 1.0], [12800.0, 4.0], [13000.0, 2.0], [13400.0, 2.0], [13500.0, 1.0], [14100.0, 1.0], [14300.0, 1.0], [14200.0, 1.0], [13900.0, 1.0], [14400.0, 2.0], [14700.0, 2.0], [14800.0, 1.0], [15300.0, 3.0], [15700.0, 3.0], [15400.0, 3.0], [15600.0, 1.0], [15500.0, 1.0], [15900.0, 4.0], [16000.0, 1.0], [17400.0, 4.0], [17000.0, 1.0], [16400.0, 3.0], [16800.0, 2.0], [18400.0, 2.0], [17800.0, 2.0], [18000.0, 1.0], [17600.0, 1.0], [18600.0, 1.0], [18800.0, 2.0], [19200.0, 1.0], [19600.0, 1.0], [19800.0, 2.0], [20200.0, 1.0], [20000.0, 1.0], [21400.0, 2.0], [20600.0, 1.0], [21000.0, 1.0], [21800.0, 3.0], [22000.0, 1.0], [22400.0, 2.0], [23000.0, 1.0], [23200.0, 1.0], [23600.0, 4.0], [24400.0, 2.0], [24000.0, 2.0], [24200.0, 1.0], [23800.0, 1.0], [24600.0, 1.0], [26000.0, 1.0], [25600.0, 2.0], [26600.0, 2.0], [26400.0, 1.0], [25800.0, 1.0], [27400.0, 1.0], [27000.0, 1.0], [28000.0, 1.0], [28600.0, 1.0], [29400.0, 2.0], [28800.0, 1.0], [30200.0, 2.0], [29800.0, 1.0], [30000.0, 1.0], [30600.0, 1.0], [31200.0, 1.0], [31400.0, 1.0], [31800.0, 1.0], [32600.0, 1.0], [32000.0, 1.0], [34800.0, 2.0], [34000.0, 1.0], [33600.0, 1.0], [32800.0, 1.0], [33200.0, 1.0], [36000.0, 2.0], [35200.0, 1.0], [41200.0, 1.0], [43600.0, 2.0], [46800.0, 1.0], [48000.0, 1.0], [53200.0, 1.0], [52400.0, 1.0], [54800.0, 1.0], [59600.0, 1.0], [60800.0, 4.0], [61200.0, 1.0], [60400.0, 14.0], [62800.0, 3.0], [81600.0, 1.0], [120800.0, 1.0], [75900.0, 1.0], [115100.0, 1.0], [120700.0, 2.0], [35100.0, 1.0], [36700.0, 1.0], [35500.0, 1.0], [42700.0, 1.0], [47100.0, 1.0], [51900.0, 1.0], [59100.0, 1.0], [58300.0, 1.0], [60700.0, 4.0], [61100.0, 1.0], [60300.0, 11.0], [63100.0, 1.0], [70200.0, 1.0], [83800.0, 1.0], [120600.0, 4.0], [66900.0, 1.0], [105300.0, 1.0], [120500.0, 2.0], [16900.0, 4.0], [17300.0, 1.0], [17500.0, 1.0], [18100.0, 1.0], [19100.0, 1.0], [18500.0, 1.0], [18700.0, 2.0], [19300.0, 1.0], [20300.0, 1.0], [19500.0, 1.0], [21300.0, 1.0], [21100.0, 3.0], [21500.0, 2.0], [20700.0, 1.0], [22300.0, 3.0], [21700.0, 1.0], [22100.0, 2.0], [22500.0, 1.0], [21900.0, 1.0], [22700.0, 2.0], [23500.0, 2.0], [22900.0, 1.0], [23100.0, 2.0], [23900.0, 1.0], [24100.0, 2.0], [23700.0, 1.0], [25100.0, 1.0], [26100.0, 1.0], [26700.0, 1.0], [28500.0, 3.0], [27900.0, 1.0], [28300.0, 1.0], [29100.0, 1.0], [28700.0, 1.0], [30100.0, 1.0], [30900.0, 1.0], [31100.0, 1.0], [32100.0, 1.0], [31900.0, 1.0], [34600.0, 1.0], [33400.0, 1.0], [35000.0, 1.0], [36200.0, 1.0], [36600.0, 1.0], [35800.0, 1.0], [37000.0, 1.0], [39800.0, 1.0], [42600.0, 1.0], [44600.0, 1.0], [43800.0, 1.0], [53400.0, 1.0], [55400.0, 1.0], [59000.0, 1.0], [60600.0, 16.0], [61000.0, 1.0], [63000.0, 1.0], [61800.0, 1.0], [68400.0, 1.0], [78800.0, 2.0], [82800.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 639.0], [34900.0, 1.0], [36500.0, 1.0], [200.0, 32.0], [52900.0, 1.0], [54500.0, 1.0], [59300.0, 1.0], [58500.0, 1.0], [60500.0, 2.0], [60100.0, 53.0], [62500.0, 1.0], [61700.0, 1.0], [63700.0, 1.0], [300.0, 4.0], [900.0, 1.0], [2900.0, 1.0], [3700.0, 2.0], [4300.0, 1.0], [4100.0, 1.0], [4400.0, 1.0], [5000.0, 1.0], [4900.0, 1.0], [5100.0, 7.0], [5300.0, 3.0], [5200.0, 9.0], [5400.0, 1.0], [5500.0, 2.0], [5600.0, 2.0], [5700.0, 2.0], [5800.0, 1.0], [6100.0, 3.0], [5900.0, 1.0], [6300.0, 1.0], [6200.0, 1.0], [6500.0, 3.0], [6400.0, 1.0], [6900.0, 3.0], [6800.0, 1.0], [7100.0, 1.0], [7000.0, 1.0], [7600.0, 1.0], [7500.0, 1.0], [7800.0, 1.0], [7900.0, 1.0], [8100.0, 1.0], [8400.0, 1.0], [8500.0, 2.0], [8700.0, 1.0], [8200.0, 1.0], [8300.0, 1.0], [8800.0, 1.0], [9200.0, 3.0], [9100.0, 1.0], [9000.0, 1.0], [9300.0, 1.0], [9700.0, 1.0], [9600.0, 1.0], [9800.0, 1.0], [9900.0, 3.0], [10000.0, 1.0], [10500.0, 2.0], [10700.0, 4.0], [10600.0, 2.0], [10300.0, 1.0], [11000.0, 1.0], [11100.0, 1.0], [10900.0, 1.0], [11400.0, 3.0], [11700.0, 1.0], [11300.0, 1.0], [12000.0, 1.0], [11800.0, 1.0], [12200.0, 1.0], [12500.0, 3.0], [12400.0, 2.0], [12700.0, 1.0], [13000.0, 1.0], [13100.0, 1.0], [13700.0, 1.0], [13500.0, 1.0], [14000.0, 3.0], [14100.0, 1.0], [14200.0, 1.0], [14400.0, 2.0], [15300.0, 2.0], [14900.0, 2.0], [15200.0, 2.0], [15000.0, 2.0], [15100.0, 1.0], [15500.0, 4.0], [15600.0, 2.0], [15400.0, 1.0], [16000.0, 2.0], [16200.0, 1.0], [17000.0, 2.0], [16600.0, 3.0], [16400.0, 1.0], [17200.0, 1.0], [17400.0, 1.0], [18000.0, 2.0], [18400.0, 3.0], [17800.0, 1.0], [19000.0, 1.0], [19800.0, 1.0], [20400.0, 1.0], [19600.0, 1.0], [20200.0, 1.0], [21000.0, 3.0], [21400.0, 1.0], [20800.0, 1.0], [21800.0, 1.0], [21600.0, 3.0], [22000.0, 2.0], [22400.0, 1.0], [23200.0, 2.0], [22600.0, 1.0], [23400.0, 3.0], [23000.0, 1.0], [22800.0, 1.0], [24000.0, 1.0], [24200.0, 2.0], [23600.0, 2.0], [23800.0, 4.0], [24800.0, 1.0], [25400.0, 1.0], [25600.0, 1.0], [26400.0, 2.0], [26000.0, 1.0], [26600.0, 1.0], [27000.0, 1.0], [28200.0, 1.0], [28400.0, 1.0], [29000.0, 1.0], [29600.0, 1.0], [29200.0, 1.0], [29800.0, 2.0], [30400.0, 2.0], [30800.0, 1.0], [31400.0, 1.0], [31600.0, 1.0], [31200.0, 1.0], [32200.0, 1.0], [32400.0, 1.0], [34400.0, 2.0], [34800.0, 1.0], [32800.0, 1.0], [35600.0, 3.0], [40800.0, 1.0], [39600.0, 1.0], [42400.0, 1.0], [43200.0, 2.0], [46400.0, 1.0], [46800.0, 1.0], [52000.0, 1.0], [53200.0, 1.0], [54800.0, 1.0], [60400.0, 6.0], [60800.0, 1.0], [68000.0, 1.0], [65600.0, 1.0], [34700.0, 1.0], [36300.0, 1.0], [36700.0, 1.0], [39100.0, 1.0], [44300.0, 1.0], [51500.0, 1.0], [55100.0, 1.0], [58700.0, 2.0], [57900.0, 1.0], [60700.0, 1.0], [60300.0, 5.0], [62700.0, 2.0], [67800.0, 1.0], [17100.0, 3.0], [16900.0, 1.0], [16700.0, 2.0], [18300.0, 2.0], [17500.0, 1.0], [17700.0, 1.0], [19300.0, 1.0], [18900.0, 1.0], [19100.0, 2.0], [18500.0, 2.0], [19500.0, 2.0], [19900.0, 2.0], [21300.0, 2.0], [21500.0, 1.0], [20700.0, 4.0], [21100.0, 2.0], [21900.0, 3.0], [22300.0, 1.0], [22100.0, 1.0], [22500.0, 1.0], [23300.0, 1.0], [22700.0, 2.0], [23100.0, 1.0], [23500.0, 1.0], [25300.0, 2.0], [26100.0, 1.0], [27500.0, 1.0], [28100.0, 3.0], [28300.0, 1.0], [27700.0, 1.0], [28500.0, 1.0], [28900.0, 1.0], [29500.0, 1.0], [30700.0, 1.0], [29900.0, 1.0], [31700.0, 1.0], [30900.0, 1.0], [31500.0, 1.0], [34200.0, 1.0], [33800.0, 1.0], [33400.0, 1.0], [33000.0, 1.0], [35800.0, 1.0], [37000.0, 1.0], [42200.0, 1.0], [43400.0, 1.0], [47400.0, 1.0], [53000.0, 1.0], [56600.0, 1.0], [57400.0, 1.0], [60600.0, 4.0], [60200.0, 18.0], [61400.0, 2.0], [62600.0, 2.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[10400.0, 1.0], [10300.0, 2.0], [11000.0, 1.0], [700.0, 1.0], [800.0, 1.0], [900.0, 3.0], [15100.0, 1.0], [1000.0, 1.0], [1100.0, 1.0], [1200.0, 1.0], [1300.0, 1.0], [30200.0, 1.0], [2900.0, 1.0], [46700.0, 1.0], [3000.0, 1.0], [200.0, 497.0], [3200.0, 1.0], [3400.0, 2.0], [60200.0, 4.0], [60300.0, 18.0], [60400.0, 6.0], [3900.0, 1.0], [4100.0, 1.0], [300.0, 247.0], [4900.0, 1.0], [5000.0, 1.0], [5300.0, 1.0], [6300.0, 1.0], [400.0, 286.0], [7200.0, 2.0], [7600.0, 1.0], [500.0, 13.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 120800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 20.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1477.0, "series": [{"data": [[0.0, 390.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 20.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 297.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1477.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.68546528E12, "maxY": 25.0, "series": [{"data": [[1.68546528E12, 1.5], [1.68546624E12, 23.627906976744192], [1.68546594E12, 20.0], [1.68546564E12, 10.11111111111111], [1.6854666E12, 4.744525547445254], [1.68546534E12, 3.8055555555555554], [1.6854663E12, 20.270718232044203], [1.685466E12, 20.078431372549023], [1.6854657E12, 13.591240875912412], [1.6854654E12, 5.0], [1.68546636E12, 17.743362831858406], [1.68546606E12, 23.433333333333334], [1.68546642E12, 12.491408934707904], [1.68546576E12, 15.0], [1.68546546E12, 5.313725490196079], [1.68546612E12, 25.0], [1.68546582E12, 15.108108108108107], [1.68546552E12, 8.72222222222222], [1.68546648E12, 9.878205128205131], [1.68546618E12, 25.0], [1.68546654E12, 5.090534979423869], [1.68546588E12, 18.661290322580655], [1.68546558E12, 10.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6854666E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 125.16666666666667, "minX": 1.0, "maxY": 38820.51612903226, "series": [{"data": [[2.0, 2677.0], [8.0, 5877.5], [9.0, 8805.875], [10.0, 3683.18649517685], [11.0, 4308.272727272728], [3.0, 7757.0], [12.0, 15404.166666666668], [13.0, 6775.266666666667], [14.0, 374.2857142857143], [15.0, 11667.148148148146], [16.0, 29601.25], [4.0, 478.75], [17.0, 17773.818181818184], [18.0, 32448.789473684214], [19.0, 21344.999999999996], [5.0, 4028.1301369863027], [20.0, 23912.54605263159], [21.0, 25312.375], [22.0, 25701.666666666675], [23.0, 31896.25], [6.0, 5805.454545454546], [24.0, 27201.0], [25.0, 38820.51612903226], [7.0, 5099.75]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[13.730173199635358, 13215.776663628092]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 2909.5], [8.0, 6350.857142857143], [9.0, 9694.857142857143], [10.0, 3438.806451612904], [11.0, 4422.3], [3.0, 9235.25], [12.0, 18089.8], [13.0, 6740.793103448277], [14.0, 125.16666666666667], [15.0, 11368.042553191497], [16.0, 20442.75], [4.0, 150.0], [17.0, 16296.0], [18.0, 28820.31578947369], [19.0, 16472.05263157895], [5.0, 3743.848275862071], [20.0, 20538.730263157897], [21.0, 13705.624999999996], [22.0, 17653.75], [23.0, 24039.125], [6.0, 6083.3], [24.0, 26878.166666666664], [25.0, 31358.74193548387], [7.0, 5478.285714285715]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[13.797783933518001, 11510.65189289012]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 339.5], [3.0, 377.5], [4.0, 373.4], [5.0, 309.8013698630137], [6.0, 358.6363636363636], [7.0, 347.25], [8.0, 319.75000000000006], [9.0, 332.0], [10.0, 256.2875399361023], [11.0, 251.4444444444444], [12.0, 347.0], [13.0, 224.96551724137927], [14.0, 265.62500000000006], [15.0, 411.92513368983975], [1.0, 398.0], [16.0, 357.8333333333333], [17.0, 1682.1111111111109], [18.0, 3994.391304347825], [19.0, 358.47368421052636], [20.0, 2025.4774193548387], [21.0, 5307.999999999999], [22.0, 11886.576923076924], [23.0, 22156.545454545452], [24.0, 7813.625], [25.0, 10615.951219512195]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[13.707538601271548, 2010.025431425976]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6.95, "minX": 1.68546528E12, "maxY": 27669.55, "series": [{"data": [[1.68546528E12, 36.28333333333333], [1.68546624E12, 1144.35], [1.68546594E12, 1928.0166666666667], [1.68546564E12, 2088.9166666666665], [1.6854666E12, 1041.1333333333334], [1.68546534E12, 952.35], [1.6854663E12, 2637.733333333333], [1.685466E12, 3191.5333333333333], [1.6854657E12, 2548.233333333333], [1.6854654E12, 953.9833333333333], [1.68546636E12, 1365.3833333333334], [1.68546606E12, 2120.866666666667], [1.68546642E12, 4390.866666666667], [1.68546576E12, 1886.0333333333333], [1.68546546E12, 1109.7333333333333], [1.68546612E12, 1537.4166666666667], [1.68546582E12, 2743.5333333333333], [1.68546552E12, 1111.95], [1.68546648E12, 3530.8], [1.68546618E12, 1126.1], [1.68546654E12, 1833.3], [1.68546588E12, 2115.016666666667], [1.68546558E12, 1208.0833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68546528E12, 6.95], [1.68546624E12, 3404.9666666666667], [1.68546594E12, 5252.833333333333], [1.68546564E12, 6161.4], [1.6854666E12, 6564.8], [1.68546534E12, 1892.7], [1.6854663E12, 8725.416666666666], [1.685466E12, 6355.5], [1.6854657E12, 6521.116666666667], [1.6854654E12, 2278.3], [1.68546636E12, 4605.6], [1.68546606E12, 4127.866666666667], [1.68546642E12, 27669.55], [1.68546576E12, 4500.55], [1.68546546E12, 2761.7], [1.68546612E12, 6013.233333333334], [1.68546582E12, 7979.9], [1.68546552E12, 3399.5666666666666], [1.68546648E12, 22820.633333333335], [1.68546618E12, 4781.766666666666], [1.68546654E12, 12224.6], [1.68546588E12, 5024.433333333333], [1.68546558E12, 3855.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6854666E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 110.58974358974356, "minX": 1.68546528E12, "maxY": 42541.275862068964, "series": [{"data": [[1.68546528E12, 7335.0], [1.68546624E12, 38120.799999999996], [1.68546594E12, 29317.394736842096], [1.68546564E12, 9787.275], [1.6854666E12, 425.4222222222222], [1.68546534E12, 12507.200000000003], [1.6854663E12, 19766.298245614034], [1.685466E12, 22866.08], [1.6854657E12, 13893.673913043476], [1.6854654E12, 18091.923076923078], [1.68546636E12, 33712.85416666668], [1.68546606E12, 29034.57142857143], [1.68546642E12, 341.53608247422665], [1.68546576E12, 16897.580645161288], [1.68546546E12, 15771.333333333334], [1.68546612E12, 35392.975], [1.68546582E12, 16943.061224489797], [1.68546552E12, 13890.13043478261], [1.68546648E12, 331.28205128205127], [1.68546618E12, 42541.275862068964], [1.68546654E12, 426.2592592592592], [1.68546588E12, 20177.0], [1.68546558E12, 18505.166666666664]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68546624E12, 20460.38461538461], [1.68546594E12, 25469.77777777778], [1.68546564E12, 10464.488372093023], [1.6854666E12, 135.02173913043478], [1.68546534E12, 11666.09090909091], [1.6854663E12, 12684.169491525421], [1.685466E12, 23749.235294117643], [1.6854657E12, 13944.0], [1.6854654E12, 17728.076923076922], [1.68546636E12, 30732.685714285715], [1.68546606E12, 28548.033333333333], [1.68546642E12, 1883.9123711340194], [1.68546576E12, 13650.176470588232], [1.68546546E12, 17307.0], [1.68546612E12, 34388.717948717946], [1.68546582E12, 17953.940000000002], [1.68546552E12, 10422.565217391302], [1.68546648E12, 110.58974358974356], [1.68546618E12, 29949.774193548383], [1.68546654E12, 134.67901234567893], [1.68546588E12, 16836.871794871797], [1.68546558E12, 18985.51851851852]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68546528E12, 387.0], [1.68546624E12, 24348.06666666667], [1.68546594E12, 866.0277777777776], [1.68546564E12, 352.8372093023256], [1.6854666E12, 305.4347826086957], [1.68546534E12, 368.06666666666666], [1.6854663E12, 5859.661538461538], [1.685466E12, 1401.0192307692307], [1.6854657E12, 299.12500000000006], [1.6854654E12, 365.30769230769226], [1.68546636E12, 384.8333333333333], [1.68546606E12, 345.37500000000006], [1.68546642E12, 234.64948453608247], [1.68546576E12, 363.41176470588226], [1.68546546E12, 368.0588235294117], [1.68546612E12, 4127.03125], [1.68546582E12, 764.1836734693876], [1.68546552E12, 355.5000000000001], [1.68546648E12, 220.75641025641028], [1.68546618E12, 17509.214285714286], [1.68546654E12, 295.6913580246912], [1.68546588E12, 2656.244444444444], [1.68546558E12, 349.57142857142867]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6854666E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 110.55128205128207, "minX": 1.68546528E12, "maxY": 42541.13793103449, "series": [{"data": [[1.68546528E12, 7323.0], [1.68546624E12, 38120.66666666666], [1.68546594E12, 29263.421052631576], [1.68546564E12, 9786.925000000003], [1.6854666E12, 425.3555555555556], [1.68546534E12, 12506.599999999999], [1.6854663E12, 19765.912280701756], [1.685466E12, 22865.74], [1.6854657E12, 13893.195652173912], [1.6854654E12, 18091.230769230766], [1.68546636E12, 33712.687500000015], [1.68546606E12, 29034.142857142855], [1.68546642E12, 341.4484536082474], [1.68546576E12, 16897.38709677419], [1.68546546E12, 15770.666666666668], [1.68546612E12, 35392.225000000006], [1.68546582E12, 16939.653061224486], [1.68546552E12, 13889.695652173912], [1.68546648E12, 331.205128205128], [1.68546618E12, 42541.13793103449], [1.68546654E12, 426.1728395061729], [1.68546588E12, 20145.6], [1.68546558E12, 18504.966666666667]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68546624E12, 20460.346153846152], [1.68546594E12, 25469.55555555555], [1.68546564E12, 10464.348837209298], [1.6854666E12, 134.9565217391304], [1.68546534E12, 11665.909090909092], [1.6854663E12, 12684.033898305082], [1.685466E12, 23749.156862745098], [1.6854657E12, 13943.860465116282], [1.6854654E12, 17727.923076923078], [1.68546636E12, 30732.657142857144], [1.68546606E12, 28547.766666666666], [1.68546642E12, 1883.8608247422683], [1.68546576E12, 13650.058823529413], [1.68546546E12, 17306.6875], [1.68546612E12, 34388.66666666665], [1.68546582E12, 17953.660000000003], [1.68546552E12, 10422.304347826088], [1.68546648E12, 110.55128205128207], [1.68546618E12, 29949.64516129032], [1.68546654E12, 134.6296296296296], [1.68546588E12, 16829.82051282051], [1.68546558E12, 18985.481481481485]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68546528E12, 376.0], [1.68546624E12, 24348.06666666667], [1.68546594E12, 809.3055555555557], [1.68546564E12, 352.6511627906977], [1.6854666E12, 305.4347826086957], [1.68546534E12, 367.33333333333337], [1.6854663E12, 5859.400000000001], [1.685466E12, 1400.7692307692298], [1.6854657E12, 298.8125000000001], [1.6854654E12, 365.07692307692315], [1.68546636E12, 384.6666666666667], [1.68546606E12, 344.8750000000001], [1.68546642E12, 234.6134020618557], [1.68546576E12, 363.35294117647055], [1.68546546E12, 367.70588235294116], [1.68546612E12, 4126.5625], [1.68546582E12, 760.8163265306123], [1.68546552E12, 355.42307692307685], [1.68546648E12, 220.71794871794873], [1.68546618E12, 17509.10714285714], [1.68546654E12, 295.6543209876542], [1.68546588E12, 2634.6666666666665], [1.68546558E12, 349.3571428571429]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6854666E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68546528E12, "maxY": 227.93333333333334, "series": [{"data": [[1.68546528E12, 151.0], [1.68546624E12, 227.93333333333334], [1.68546594E12, 175.0263157894737], [1.68546564E12, 176.85000000000002], [1.6854666E12, 146.1111111111111], [1.68546534E12, 165.40000000000003], [1.6854663E12, 178.49122807017542], [1.685466E12, 162.61999999999998], [1.6854657E12, 147.93478260869566], [1.6854654E12, 182.76923076923077], [1.68546636E12, 175.66666666666666], [1.68546606E12, 164.8928571428571], [1.68546642E12, 116.07216494845356], [1.68546576E12, 155.38709677419354], [1.68546546E12, 175.77777777777777], [1.68546612E12, 166.49999999999997], [1.68546582E12, 152.36734693877548], [1.68546552E12, 177.6086956521739], [1.68546648E12, 109.02564102564101], [1.68546618E12, 213.55172413793105], [1.68546654E12, 148.6666666666666], [1.68546588E12, 155.62500000000003], [1.68546558E12, 168.83333333333331]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68546624E12, 55.23076923076923], [1.68546594E12, 0.0], [1.68546564E12, 0.0], [1.6854666E12, 0.0], [1.68546534E12, 0.0], [1.6854663E12, 16.203389830508474], [1.685466E12, 0.0], [1.6854657E12, 0.0], [1.6854654E12, 0.0], [1.68546636E12, 12.200000000000001], [1.68546606E12, 0.0], [1.68546642E12, 0.0], [1.68546576E12, 0.0], [1.68546546E12, 0.0], [1.68546612E12, 0.0], [1.68546582E12, 0.0], [1.68546552E12, 0.0], [1.68546648E12, 0.0], [1.68546618E12, 25.161290322580648], [1.68546654E12, 0.0], [1.68546588E12, 0.0], [1.68546558E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68546528E12, 151.0], [1.68546624E12, 172.0], [1.68546594E12, 171.3888888888889], [1.68546564E12, 174.4418604651163], [1.6854666E12, 147.36956521739128], [1.68546534E12, 170.33333333333334], [1.6854663E12, 156.59999999999997], [1.685466E12, 167.24999999999997], [1.6854657E12, 144.62500000000003], [1.6854654E12, 183.0], [1.68546636E12, 182.29999999999998], [1.68546606E12, 156.71874999999997], [1.68546642E12, 116.07216494845358], [1.68546576E12, 168.58823529411757], [1.68546546E12, 174.41176470588232], [1.68546612E12, 182.59375], [1.68546582E12, 144.87755102040822], [1.68546552E12, 174.11538461538458], [1.68546648E12, 109.02564102564102], [1.68546618E12, 181.64285714285714], [1.68546654E12, 148.66666666666663], [1.68546588E12, 159.75555555555553], [1.68546558E12, 172.5357142857143]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6854666E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 206.0, "minX": 1.68546528E12, "maxY": 60266.0, "series": [{"data": [[1.68546528E12, 387.0], [1.68546624E12, 18559.0], [1.68546594E12, 58519.0], [1.68546564E12, 35628.0], [1.68546534E12, 18091.0], [1.6854663E12, 30443.0], [1.685466E12, 30203.0], [1.6854657E12, 32237.0], [1.6854654E12, 24057.0], [1.68546636E12, 55169.0], [1.68546606E12, 53210.0], [1.68546576E12, 33430.0], [1.68546546E12, 24235.0], [1.68546612E12, 6176.0], [1.68546582E12, 59358.0], [1.68546552E12, 30819.0], [1.68546618E12, 6507.0], [1.68546588E12, 60266.0], [1.68546558E12, 42287.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68546528E12, 387.0], [1.68546624E12, 18327.300000000003], [1.68546594E12, 9607.0], [1.68546564E12, 31622.0], [1.68546534E12, 16000.6], [1.6854663E12, 22537.0], [1.685466E12, 14111.4], [1.6854657E12, 29006.5], [1.6854654E12, 22325.4], [1.68546636E12, 22473.800000000116], [1.68546606E12, 30725.900000000005], [1.68546576E12, 27492.5], [1.68546546E12, 22346.0], [1.68546612E12, 5289.0], [1.68546582E12, 49198.5], [1.68546552E12, 29346.399999999998], [1.68546618E12, 6172.200000000001], [1.68546588E12, 28559.40000000011], [1.68546558E12, 40385.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68546528E12, 387.0], [1.68546624E12, 18559.0], [1.68546594E12, 58519.0], [1.68546564E12, 35628.0], [1.68546534E12, 18091.0], [1.6854663E12, 30443.0], [1.685466E12, 30203.0], [1.6854657E12, 32237.0], [1.6854654E12, 24057.0], [1.68546636E12, 55169.0], [1.68546606E12, 53210.0], [1.68546576E12, 33430.0], [1.68546546E12, 24235.0], [1.68546612E12, 6176.0], [1.68546582E12, 59358.0], [1.68546552E12, 30819.0], [1.68546618E12, 6507.0], [1.68546588E12, 60266.0], [1.68546558E12, 42287.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68546528E12, 387.0], [1.68546624E12, 18552.45], [1.68546594E12, 12007.5], [1.68546564E12, 34162.5], [1.68546534E12, 17727.35], [1.6854663E12, 23452.5], [1.685466E12, 16739.4], [1.6854657E12, 30659.399999999998], [1.6854654E12, 23764.05], [1.68546636E12, 55059.2], [1.68546606E12, 43932.29999999999], [1.68546576E12, 32067.75], [1.68546546E12, 23418.0], [1.68546612E12, 5989.0], [1.68546582E12, 56331.25], [1.68546552E12, 30676.949999999997], [1.68546618E12, 6507.0], [1.68546588E12, 57263.649999999994], [1.68546558E12, 42003.799999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68546528E12, 387.0], [1.68546624E12, 306.0], [1.68546594E12, 206.0], [1.68546564E12, 211.0], [1.68546534E12, 305.0], [1.6854663E12, 208.0], [1.685466E12, 209.0], [1.6854657E12, 209.0], [1.6854654E12, 219.0], [1.68546636E12, 211.0], [1.68546606E12, 207.0], [1.68546576E12, 214.0], [1.68546546E12, 221.0], [1.68546612E12, 296.0], [1.68546582E12, 206.0], [1.68546552E12, 217.0], [1.68546618E12, 209.0], [1.68546588E12, 215.0], [1.68546558E12, 228.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68546528E12, 387.0], [1.68546624E12, 408.0], [1.68546594E12, 409.0], [1.68546564E12, 439.0], [1.68546534E12, 406.0], [1.6854663E12, 407.0], [1.685466E12, 410.0], [1.6854657E12, 408.0], [1.6854654E12, 4076.5], [1.68546636E12, 408.0], [1.68546606E12, 409.5], [1.68546576E12, 4497.5], [1.68546546E12, 12595.0], [1.68546612E12, 408.0], [1.68546582E12, 4583.0], [1.68546552E12, 456.0], [1.68546618E12, 407.0], [1.68546588E12, 4381.0], [1.68546558E12, 34754.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68546636E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 108.0, "minX": 1.0, "maxY": 7228.5, "series": [{"data": [[1.0, 412.0], [2.0, 409.0], [4.0, 408.0], [8.0, 7228.5], [5.0, 510.0], [11.0, 361.0], [6.0, 6686.0], [3.0, 409.0], [12.0, 409.0], [7.0, 312.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 209.0], [8.0, 204.5], [9.0, 110.0], [10.0, 134.5], [11.0, 207.0], [3.0, 207.0], [12.0, 207.0], [14.0, 205.0], [4.0, 205.0], [1.0, 346.0], [16.0, 108.0], [5.0, 206.0], [6.0, 205.0], [7.0, 205.0], [30.0, 5026.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 108.0, "minX": 1.0, "maxY": 7228.0, "series": [{"data": [[1.0, 412.0], [2.0, 409.0], [4.0, 408.0], [8.0, 7228.0], [5.0, 510.0], [11.0, 361.0], [6.0, 6685.5], [3.0, 409.0], [12.0, 409.0], [7.0, 311.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 209.0], [8.0, 204.0], [9.0, 110.0], [10.0, 134.5], [11.0, 207.0], [3.0, 207.0], [12.0, 207.0], [14.0, 205.0], [4.0, 205.0], [1.0, 346.0], [16.0, 108.0], [5.0, 206.0], [6.0, 205.0], [7.0, 205.0], [30.0, 5026.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68546528E12, "maxY": 6.216666666666667, "series": [{"data": [[1.68546528E12, 0.03333333333333333], [1.68546624E12, 0.8333333333333334], [1.68546594E12, 1.1833333333333333], [1.68546564E12, 1.4833333333333334], [1.6854666E12, 1.4833333333333334], [1.68546534E12, 0.5], [1.6854663E12, 2.066666666666667], [1.685466E12, 1.7333333333333334], [1.6854657E12, 1.5333333333333334], [1.6854654E12, 0.43333333333333335], [1.68546636E12, 1.0333333333333334], [1.68546606E12, 1.0833333333333333], [1.68546642E12, 6.216666666666667], [1.68546576E12, 1.2], [1.68546546E12, 0.5166666666666667], [1.68546612E12, 1.2166666666666666], [1.68546582E12, 1.65], [1.68546552E12, 0.9166666666666666], [1.68546648E12, 5.233333333333333], [1.68546618E12, 0.9666666666666667], [1.68546654E12, 2.716666666666667], [1.68546588E12, 1.4833333333333334], [1.68546558E12, 0.8833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6854666E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68546528E12, "maxY": 6.466666666666667, "series": [{"data": [[1.68546528E12, 0.016666666666666666], [1.68546624E12, 0.3333333333333333], [1.68546594E12, 0.7333333333333333], [1.68546564E12, 0.7333333333333333], [1.68546534E12, 0.43333333333333335], [1.6854663E12, 0.8166666666666667], [1.685466E12, 1.35], [1.6854657E12, 1.0], [1.6854654E12, 0.43333333333333335], [1.68546636E12, 0.4166666666666667], [1.68546606E12, 0.9333333333333333], [1.68546576E12, 0.7333333333333333], [1.68546546E12, 0.48333333333333334], [1.68546612E12, 0.48333333333333334], [1.68546582E12, 1.0666666666666667], [1.68546552E12, 0.36666666666666664], [1.68546618E12, 0.3], [1.68546588E12, 0.7666666666666667], [1.68546558E12, 0.38333333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.685466E12, 0.11666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68546624E12, 0.2833333333333333], [1.68546594E12, 0.25], [1.68546564E12, 0.7], [1.6854666E12, 1.5333333333333334], [1.6854663E12, 1.0], [1.685466E12, 0.016666666666666666], [1.6854657E12, 0.5166666666666667], [1.68546636E12, 0.4], [1.68546642E12, 6.466666666666667], [1.68546576E12, 0.4], [1.68546546E12, 0.06666666666666667], [1.68546612E12, 0.36666666666666664], [1.68546582E12, 0.5833333333333334], [1.68546552E12, 0.45], [1.68546648E12, 5.2], [1.68546618E12, 0.3], [1.68546654E12, 2.7], [1.68546588E12, 0.55], [1.68546558E12, 0.5333333333333333]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68546624E12, 0.31666666666666665], [1.68546594E12, 0.21666666666666667], [1.68546612E12, 0.3333333333333333], [1.6854663E12, 0.25], [1.685466E12, 0.23333333333333334], [1.68546618E12, 0.38333333333333336], [1.68546588E12, 0.08333333333333333], [1.68546636E12, 0.26666666666666666], [1.68546606E12, 0.1]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6854666E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68546528E12, "maxY": 3.2333333333333334, "series": [{"data": [[1.68546528E12, 0.016666666666666666], [1.68546624E12, 0.2], [1.68546594E12, 0.5], [1.68546564E12, 0.38333333333333336], [1.68546534E12, 0.25], [1.6854663E12, 0.6666666666666666], [1.685466E12, 0.8333333333333334], [1.6854657E12, 0.5833333333333334], [1.6854654E12, 0.21666666666666667], [1.68546636E12, 0.38333333333333336], [1.68546606E12, 0.5333333333333333], [1.68546576E12, 0.36666666666666664], [1.68546546E12, 0.23333333333333334], [1.68546612E12, 0.38333333333333336], [1.68546582E12, 0.55], [1.68546552E12, 0.2], [1.68546618E12, 0.23333333333333334], [1.68546588E12, 0.4666666666666667], [1.68546558E12, 0.15]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68546624E12, 0.3], [1.68546594E12, 0.1], [1.68546564E12, 0.3333333333333333], [1.6854666E12, 0.7666666666666667], [1.6854663E12, 0.4166666666666667], [1.685466E12, 0.03333333333333333], [1.6854657E12, 0.21666666666666667], [1.68546636E12, 0.11666666666666667], [1.68546642E12, 3.2333333333333334], [1.68546576E12, 0.2], [1.68546546E12, 0.05], [1.68546612E12, 0.15], [1.68546582E12, 0.26666666666666666], [1.68546552E12, 0.23333333333333334], [1.68546648E12, 2.6], [1.68546618E12, 0.23333333333333334], [1.68546654E12, 1.35], [1.68546588E12, 0.2833333333333333], [1.68546558E12, 0.31666666666666665]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68546624E12, 0.3], [1.68546594E12, 0.36666666666666664], [1.68546564E12, 0.36666666666666664], [1.6854666E12, 0.7666666666666667], [1.6854663E12, 0.8333333333333334], [1.685466E12, 0.3333333333333333], [1.6854657E12, 0.3], [1.68546636E12, 0.55], [1.68546606E12, 0.1], [1.68546642E12, 3.2333333333333334], [1.68546576E12, 0.2], [1.68546546E12, 0.016666666666666666], [1.68546612E12, 0.55], [1.68546582E12, 0.31666666666666665], [1.68546552E12, 0.21666666666666667], [1.68546648E12, 2.6], [1.68546618E12, 0.45], [1.68546654E12, 1.35], [1.68546588E12, 0.35], [1.68546558E12, 0.21666666666666667]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68546528E12, 0.016666666666666666], [1.68546594E12, 0.16666666666666666], [1.68546564E12, 0.1], [1.68546534E12, 0.16666666666666666], [1.6854663E12, 0.016666666666666666], [1.685466E12, 0.5], [1.6854657E12, 0.25], [1.6854654E12, 0.21666666666666667], [1.68546636E12, 0.016666666666666666], [1.68546606E12, 0.36666666666666664], [1.68546576E12, 0.2], [1.68546546E12, 0.25], [1.68546612E12, 0.08333333333333333], [1.68546582E12, 0.3], [1.68546552E12, 0.08333333333333333], [1.68546588E12, 0.13333333333333333], [1.68546558E12, 0.05]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68546624E12, 0.5], [1.68546594E12, 0.4666666666666667], [1.68546564E12, 0.5666666666666667], [1.6854666E12, 0.75], [1.6854663E12, 0.9333333333333333], [1.685466E12, 0.3333333333333333], [1.6854657E12, 0.5166666666666667], [1.68546636E12, 0.7833333333333333], [1.68546606E12, 0.1], [1.68546642E12, 3.2333333333333334], [1.68546576E12, 0.31666666666666665], [1.68546546E12, 0.05], [1.68546612E12, 0.5833333333333334], [1.68546582E12, 0.5166666666666667], [1.68546552E12, 0.3], [1.68546648E12, 2.6], [1.68546618E12, 0.48333333333333334], [1.68546654E12, 1.35], [1.68546588E12, 0.5333333333333333], [1.68546558E12, 0.45]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68546624E12, 0.13333333333333333], [1.68546594E12, 0.23333333333333334], [1.68546564E12, 0.35], [1.68546534E12, 0.18333333333333332], [1.6854663E12, 0.15], [1.685466E12, 0.5166666666666667], [1.6854657E12, 0.4166666666666667], [1.6854654E12, 0.21666666666666667], [1.68546636E12, 0.03333333333333333], [1.68546606E12, 0.4], [1.68546576E12, 0.36666666666666664], [1.68546546E12, 0.25], [1.68546612E12, 0.1], [1.68546582E12, 0.5166666666666667], [1.68546552E12, 0.16666666666666666], [1.68546618E12, 0.06666666666666667], [1.68546588E12, 0.3], [1.68546558E12, 0.23333333333333334]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6854666E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68546528E12, "maxY": 9.7, "series": [{"data": [[1.68546528E12, 0.03333333333333333], [1.68546624E12, 0.3333333333333333], [1.68546594E12, 0.9], [1.68546564E12, 0.8333333333333334], [1.68546534E12, 0.6], [1.6854663E12, 0.8333333333333334], [1.685466E12, 1.85], [1.6854657E12, 1.25], [1.6854654E12, 0.65], [1.68546636E12, 0.43333333333333335], [1.68546606E12, 1.3], [1.68546576E12, 0.9333333333333333], [1.68546546E12, 0.7333333333333333], [1.68546612E12, 0.5666666666666667], [1.68546582E12, 1.3666666666666667], [1.68546552E12, 0.45], [1.68546618E12, 0.3], [1.68546588E12, 0.9], [1.68546558E12, 0.43333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68546624E12, 1.1], [1.68546594E12, 0.9333333333333333], [1.68546564E12, 1.2666666666666666], [1.6854666E12, 2.283333333333333], [1.6854663E12, 2.183333333333333], [1.685466E12, 0.7], [1.6854657E12, 1.0333333333333334], [1.68546636E12, 1.45], [1.68546606E12, 0.2], [1.68546642E12, 9.7], [1.68546576E12, 0.7166666666666667], [1.68546546E12, 0.11666666666666667], [1.68546612E12, 1.2833333333333334], [1.68546582E12, 1.1], [1.68546552E12, 0.75], [1.68546648E12, 7.8], [1.68546618E12, 1.1666666666666667], [1.68546654E12, 4.05], [1.68546588E12, 1.1666666666666667], [1.68546558E12, 0.9833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6854666E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

