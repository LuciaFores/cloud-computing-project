/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 110.0, "minX": 0.0, "maxY": 61031.0, "series": [{"data": [[0.0, 328.0], [0.1, 328.0], [0.2, 331.0], [0.3, 331.0], [0.4, 333.0], [0.5, 333.0], [0.6, 340.0], [0.7, 340.0], [0.8, 342.0], [0.9, 342.0], [1.0, 352.0], [1.1, 352.0], [1.2, 354.0], [1.3, 354.0], [1.4, 360.0], [1.5, 360.0], [1.6, 367.0], [1.7, 367.0], [1.8, 370.0], [1.9, 370.0], [2.0, 377.0], [2.1, 377.0], [2.2, 380.0], [2.3, 380.0], [2.4, 385.0], [2.5, 385.0], [2.6, 389.0], [2.7, 389.0], [2.8, 395.0], [2.9, 397.0], [3.0, 397.0], [3.1, 402.0], [3.2, 402.0], [3.3, 408.0], [3.4, 408.0], [3.5, 408.0], [3.6, 408.0], [3.7, 411.0], [3.8, 411.0], [3.9, 412.0], [4.0, 412.0], [4.1, 415.0], [4.2, 415.0], [4.3, 415.0], [4.4, 415.0], [4.5, 416.0], [4.6, 416.0], [4.7, 416.0], [4.8, 416.0], [4.9, 416.0], [5.0, 416.0], [5.1, 418.0], [5.2, 418.0], [5.3, 418.0], [5.4, 418.0], [5.5, 419.0], [5.6, 420.0], [5.7, 420.0], [5.8, 421.0], [5.9, 421.0], [6.0, 422.0], [6.1, 422.0], [6.2, 426.0], [6.3, 426.0], [6.4, 427.0], [6.5, 427.0], [6.6, 431.0], [6.7, 431.0], [6.8, 431.0], [6.9, 431.0], [7.0, 432.0], [7.1, 432.0], [7.2, 432.0], [7.3, 432.0], [7.4, 432.0], [7.5, 432.0], [7.6, 434.0], [7.7, 434.0], [7.8, 436.0], [7.9, 436.0], [8.0, 440.0], [8.1, 440.0], [8.2, 451.0], [8.3, 451.0], [8.4, 451.0], [8.5, 459.0], [8.6, 459.0], [8.7, 463.0], [8.8, 463.0], [8.9, 475.0], [9.0, 475.0], [9.1, 476.0], [9.2, 476.0], [9.3, 480.0], [9.4, 480.0], [9.5, 480.0], [9.6, 480.0], [9.7, 485.0], [9.8, 485.0], [9.9, 496.0], [10.0, 496.0], [10.1, 496.0], [10.2, 496.0], [10.3, 498.0], [10.4, 498.0], [10.5, 504.0], [10.6, 504.0], [10.7, 504.0], [10.8, 504.0], [10.9, 510.0], [11.0, 510.0], [11.1, 519.0], [11.2, 522.0], [11.3, 522.0], [11.4, 526.0], [11.5, 526.0], [11.6, 531.0], [11.7, 531.0], [11.8, 532.0], [11.9, 532.0], [12.0, 534.0], [12.1, 534.0], [12.2, 538.0], [12.3, 538.0], [12.4, 540.0], [12.5, 540.0], [12.6, 544.0], [12.7, 544.0], [12.8, 546.0], [12.9, 546.0], [13.0, 547.0], [13.1, 547.0], [13.2, 551.0], [13.3, 551.0], [13.4, 551.0], [13.5, 551.0], [13.6, 552.0], [13.7, 552.0], [13.8, 555.0], [13.9, 555.0], [14.0, 555.0], [14.1, 557.0], [14.2, 557.0], [14.3, 558.0], [14.4, 558.0], [14.5, 560.0], [14.6, 560.0], [14.7, 562.0], [14.8, 562.0], [14.9, 564.0], [15.0, 564.0], [15.1, 566.0], [15.2, 566.0], [15.3, 567.0], [15.4, 567.0], [15.5, 571.0], [15.6, 571.0], [15.7, 576.0], [15.8, 576.0], [15.9, 577.0], [16.0, 577.0], [16.1, 577.0], [16.2, 577.0], [16.3, 578.0], [16.4, 578.0], [16.5, 580.0], [16.6, 580.0], [16.7, 581.0], [16.8, 583.0], [16.9, 583.0], [17.0, 584.0], [17.1, 584.0], [17.2, 585.0], [17.3, 585.0], [17.4, 587.0], [17.5, 587.0], [17.6, 599.0], [17.7, 599.0], [17.8, 599.0], [17.9, 599.0], [18.0, 604.0], [18.1, 604.0], [18.2, 604.0], [18.3, 604.0], [18.4, 606.0], [18.5, 606.0], [18.6, 607.0], [18.7, 607.0], [18.8, 607.0], [18.9, 607.0], [19.0, 610.0], [19.1, 610.0], [19.2, 613.0], [19.3, 613.0], [19.4, 614.0], [19.5, 614.0], [19.6, 614.0], [19.7, 619.0], [19.8, 619.0], [19.9, 4535.0], [20.0, 4535.0], [20.1, 4962.0], [20.2, 4962.0], [20.3, 5386.0], [20.4, 5386.0], [20.5, 5407.0], [20.6, 5407.0], [20.7, 5494.0], [20.8, 5494.0], [20.9, 5611.0], [21.0, 5611.0], [21.1, 5694.0], [21.2, 5694.0], [21.3, 5704.0], [21.4, 5704.0], [21.5, 5755.0], [21.6, 5755.0], [21.7, 5757.0], [21.8, 5757.0], [21.9, 5795.0], [22.0, 5795.0], [22.1, 5886.0], [22.2, 5886.0], [22.3, 5991.0], [22.4, 6018.0], [22.5, 6018.0], [22.6, 6059.0], [22.7, 6059.0], [22.8, 6062.0], [22.9, 6062.0], [23.0, 6087.0], [23.1, 6087.0], [23.2, 6121.0], [23.3, 6121.0], [23.4, 6258.0], [23.5, 6258.0], [23.6, 6307.0], [23.7, 6307.0], [23.8, 6313.0], [23.9, 6313.0], [24.0, 6317.0], [24.1, 6317.0], [24.2, 6327.0], [24.3, 6327.0], [24.4, 6457.0], [24.5, 6457.0], [24.6, 6464.0], [24.7, 6464.0], [24.8, 6479.0], [24.9, 6479.0], [25.0, 6557.0], [25.1, 6619.0], [25.2, 6619.0], [25.3, 6689.0], [25.4, 6689.0], [25.5, 6859.0], [25.6, 6859.0], [25.7, 6981.0], [25.8, 6981.0], [25.9, 7039.0], [26.0, 7039.0], [26.1, 7208.0], [26.2, 7208.0], [26.3, 7222.0], [26.4, 7222.0], [26.5, 7263.0], [26.6, 7263.0], [26.7, 7301.0], [26.8, 7301.0], [26.9, 7317.0], [27.0, 7317.0], [27.1, 7562.0], [27.2, 7562.0], [27.3, 7647.0], [27.4, 7647.0], [27.5, 7661.0], [27.6, 7661.0], [27.7, 7754.0], [27.8, 7776.0], [27.9, 7776.0], [28.0, 7799.0], [28.1, 7799.0], [28.2, 7924.0], [28.3, 7924.0], [28.4, 7959.0], [28.5, 7959.0], [28.6, 7973.0], [28.7, 7973.0], [28.8, 8034.0], [28.9, 8034.0], [29.0, 8095.0], [29.1, 8095.0], [29.2, 8367.0], [29.3, 8367.0], [29.4, 8445.0], [29.5, 8445.0], [29.6, 8457.0], [29.7, 8457.0], [29.8, 8474.0], [29.9, 8474.0], [30.0, 8536.0], [30.1, 8536.0], [30.2, 8846.0], [30.3, 8846.0], [30.4, 8897.0], [30.5, 8897.0], [30.6, 8912.0], [30.7, 8935.0], [30.8, 8935.0], [30.9, 8943.0], [31.0, 8943.0], [31.1, 8994.0], [31.2, 8994.0], [31.3, 9021.0], [31.4, 9021.0], [31.5, 9208.0], [31.6, 9208.0], [31.7, 9219.0], [31.8, 9219.0], [31.9, 9425.0], [32.0, 9425.0], [32.1, 9478.0], [32.2, 9478.0], [32.3, 9552.0], [32.4, 9552.0], [32.5, 9566.0], [32.6, 9566.0], [32.7, 9589.0], [32.8, 9589.0], [32.9, 9672.0], [33.0, 9672.0], [33.1, 9754.0], [33.2, 9754.0], [33.3, 9764.0], [33.4, 9800.0], [33.5, 9800.0], [33.6, 9967.0], [33.7, 9967.0], [33.8, 9987.0], [33.9, 9987.0], [34.0, 9995.0], [34.1, 9995.0], [34.2, 10031.0], [34.3, 10031.0], [34.4, 10100.0], [34.5, 10100.0], [34.6, 10119.0], [34.7, 10119.0], [34.8, 10138.0], [34.9, 10138.0], [35.0, 10228.0], [35.1, 10228.0], [35.2, 10319.0], [35.3, 10319.0], [35.4, 10429.0], [35.5, 10429.0], [35.6, 10456.0], [35.7, 10456.0], [35.8, 10476.0], [35.9, 10476.0], [36.0, 10552.0], [36.1, 10552.0], [36.2, 10643.0], [36.3, 10668.0], [36.4, 10668.0], [36.5, 10686.0], [36.6, 10686.0], [36.7, 10690.0], [36.8, 10690.0], [36.9, 10743.0], [37.0, 10743.0], [37.1, 10762.0], [37.2, 10762.0], [37.3, 10789.0], [37.4, 10789.0], [37.5, 10793.0], [37.6, 10793.0], [37.7, 10924.0], [37.8, 10924.0], [37.9, 11001.0], [38.0, 11001.0], [38.1, 11006.0], [38.2, 11006.0], [38.3, 11058.0], [38.4, 11058.0], [38.5, 11374.0], [38.6, 11374.0], [38.7, 11436.0], [38.8, 11436.0], [38.9, 11488.0], [39.0, 11513.0], [39.1, 11513.0], [39.2, 11563.0], [39.3, 11563.0], [39.4, 11608.0], [39.5, 11608.0], [39.6, 11702.0], [39.7, 11702.0], [39.8, 11868.0], [39.9, 11868.0], [40.0, 11909.0], [40.1, 11909.0], [40.2, 12267.0], [40.3, 12267.0], [40.4, 12388.0], [40.5, 12388.0], [40.6, 12479.0], [40.7, 12479.0], [40.8, 12536.0], [40.9, 12536.0], [41.0, 12576.0], [41.1, 12576.0], [41.2, 12641.0], [41.3, 12641.0], [41.4, 12654.0], [41.5, 12654.0], [41.6, 12825.0], [41.7, 12834.0], [41.8, 12834.0], [41.9, 12881.0], [42.0, 12881.0], [42.1, 13158.0], [42.2, 13158.0], [42.3, 13246.0], [42.4, 13246.0], [42.5, 13289.0], [42.6, 13289.0], [42.7, 13337.0], [42.8, 13337.0], [42.9, 13505.0], [43.0, 13505.0], [43.1, 13514.0], [43.2, 13514.0], [43.3, 13607.0], [43.4, 13607.0], [43.5, 13616.0], [43.6, 13616.0], [43.7, 13729.0], [43.8, 13729.0], [43.9, 13750.0], [44.0, 13750.0], [44.1, 13856.0], [44.2, 13856.0], [44.3, 13879.0], [44.4, 13879.0], [44.5, 14013.0], [44.6, 14025.0], [44.7, 14025.0], [44.8, 14045.0], [44.9, 14045.0], [45.0, 14337.0], [45.1, 14337.0], [45.2, 14379.0], [45.3, 14379.0], [45.4, 14606.0], [45.5, 14606.0], [45.6, 14652.0], [45.7, 14652.0], [45.8, 14691.0], [45.9, 14691.0], [46.0, 14730.0], [46.1, 14730.0], [46.2, 14851.0], [46.3, 14851.0], [46.4, 14903.0], [46.5, 14903.0], [46.6, 14953.0], [46.7, 14953.0], [46.8, 15075.0], [46.9, 15075.0], [47.0, 15077.0], [47.1, 15077.0], [47.2, 15363.0], [47.3, 15526.0], [47.4, 15526.0], [47.5, 15632.0], [47.6, 15632.0], [47.7, 15724.0], [47.8, 15724.0], [47.9, 15725.0], [48.0, 15725.0], [48.1, 15820.0], [48.2, 15820.0], [48.3, 15821.0], [48.4, 15821.0], [48.5, 15989.0], [48.6, 15989.0], [48.7, 16209.0], [48.8, 16209.0], [48.9, 16253.0], [49.0, 16253.0], [49.1, 16258.0], [49.2, 16258.0], [49.3, 16318.0], [49.4, 16318.0], [49.5, 16390.0], [49.6, 16390.0], [49.7, 16441.0], [49.8, 16441.0], [49.9, 16461.0], [50.0, 16471.0], [50.1, 16471.0], [50.2, 16701.0], [50.3, 16701.0], [50.4, 16768.0], [50.5, 16768.0], [50.6, 16794.0], [50.7, 16794.0], [50.8, 17004.0], [50.9, 17004.0], [51.0, 17115.0], [51.1, 17115.0], [51.2, 17264.0], [51.3, 17264.0], [51.4, 17360.0], [51.5, 17360.0], [51.6, 17362.0], [51.7, 17362.0], [51.8, 17372.0], [51.9, 17372.0], [52.0, 17433.0], [52.1, 17433.0], [52.2, 17566.0], [52.3, 17566.0], [52.4, 17650.0], [52.5, 17650.0], [52.6, 17665.0], [52.7, 17665.0], [52.8, 17673.0], [52.9, 17717.0], [53.0, 17717.0], [53.1, 17953.0], [53.2, 17953.0], [53.3, 17986.0], [53.4, 17986.0], [53.5, 18047.0], [53.6, 18047.0], [53.7, 18123.0], [53.8, 18123.0], [53.9, 18266.0], [54.0, 18266.0], [54.1, 18305.0], [54.2, 18305.0], [54.3, 18502.0], [54.4, 18502.0], [54.5, 18535.0], [54.6, 18535.0], [54.7, 18611.0], [54.8, 18611.0], [54.9, 18874.0], [55.0, 18874.0], [55.1, 18924.0], [55.2, 18924.0], [55.3, 18976.0], [55.4, 18976.0], [55.5, 19071.0], [55.6, 19111.0], [55.7, 19111.0], [55.8, 19138.0], [55.9, 19138.0], [56.0, 19157.0], [56.1, 19157.0], [56.2, 19171.0], [56.3, 19171.0], [56.4, 19318.0], [56.5, 19318.0], [56.6, 19323.0], [56.7, 19323.0], [56.8, 19538.0], [56.9, 19538.0], [57.0, 19577.0], [57.1, 19577.0], [57.2, 19581.0], [57.3, 19581.0], [57.4, 19615.0], [57.5, 19615.0], [57.6, 19653.0], [57.7, 19653.0], [57.8, 19909.0], [57.9, 19909.0], [58.0, 19992.0], [58.1, 19992.0], [58.2, 20189.0], [58.3, 20189.0], [58.4, 20193.0], [58.5, 20198.0], [58.6, 20198.0], [58.7, 20281.0], [58.8, 20281.0], [58.9, 20305.0], [59.0, 20305.0], [59.1, 20572.0], [59.2, 20572.0], [59.3, 20669.0], [59.4, 20669.0], [59.5, 20683.0], [59.6, 20683.0], [59.7, 20713.0], [59.8, 20713.0], [59.9, 20729.0], [60.0, 20729.0], [60.1, 20750.0], [60.2, 20750.0], [60.3, 20779.0], [60.4, 20779.0], [60.5, 20786.0], [60.6, 20786.0], [60.7, 20791.0], [60.8, 20791.0], [60.9, 20845.0], [61.0, 20845.0], [61.1, 20920.0], [61.2, 20954.0], [61.3, 20954.0], [61.4, 20997.0], [61.5, 20997.0], [61.6, 21003.0], [61.7, 21003.0], [61.8, 21164.0], [61.9, 21164.0], [62.0, 21318.0], [62.1, 21318.0], [62.2, 21518.0], [62.3, 21518.0], [62.4, 21595.0], [62.5, 21595.0], [62.6, 21640.0], [62.7, 21640.0], [62.8, 21709.0], [62.9, 21709.0], [63.0, 21915.0], [63.1, 21915.0], [63.2, 21918.0], [63.3, 21918.0], [63.4, 21946.0], [63.5, 21946.0], [63.6, 21947.0], [63.7, 21947.0], [63.8, 21993.0], [63.9, 21999.0], [64.0, 21999.0], [64.1, 21999.0], [64.2, 21999.0], [64.3, 22044.0], [64.4, 22044.0], [64.5, 22093.0], [64.6, 22093.0], [64.7, 22105.0], [64.8, 22105.0], [64.9, 22137.0], [65.0, 22137.0], [65.1, 22219.0], [65.2, 22219.0], [65.3, 22514.0], [65.4, 22514.0], [65.5, 22525.0], [65.6, 22525.0], [65.7, 22555.0], [65.8, 22555.0], [65.9, 22602.0], [66.0, 22602.0], [66.1, 22624.0], [66.2, 22624.0], [66.3, 22646.0], [66.4, 22646.0], [66.5, 22684.0], [66.6, 22684.0], [66.7, 22696.0], [66.8, 22824.0], [66.9, 22824.0], [67.0, 22918.0], [67.1, 22918.0], [67.2, 22926.0], [67.3, 22926.0], [67.4, 22963.0], [67.5, 22963.0], [67.6, 22968.0], [67.7, 22968.0], [67.8, 22976.0], [67.9, 22976.0], [68.0, 23017.0], [68.1, 23017.0], [68.2, 23047.0], [68.3, 23047.0], [68.4, 23154.0], [68.5, 23154.0], [68.6, 23189.0], [68.7, 23189.0], [68.8, 23462.0], [68.9, 23462.0], [69.0, 23542.0], [69.1, 23542.0], [69.2, 23611.0], [69.3, 23611.0], [69.4, 23782.0], [69.5, 23821.0], [69.6, 23821.0], [69.7, 23849.0], [69.8, 23849.0], [69.9, 23892.0], [70.0, 23892.0], [70.1, 24032.0], [70.2, 24032.0], [70.3, 24200.0], [70.4, 24200.0], [70.5, 24247.0], [70.6, 24247.0], [70.7, 24271.0], [70.8, 24271.0], [70.9, 24349.0], [71.0, 24349.0], [71.1, 24375.0], [71.2, 24375.0], [71.3, 24824.0], [71.4, 24824.0], [71.5, 24853.0], [71.6, 24853.0], [71.7, 24934.0], [71.8, 24934.0], [71.9, 25216.0], [72.0, 25216.0], [72.1, 25255.0], [72.2, 25255.0], [72.3, 25651.0], [72.4, 25853.0], [72.5, 25853.0], [72.6, 25869.0], [72.7, 25869.0], [72.8, 26005.0], [72.9, 26005.0], [73.0, 26306.0], [73.1, 26306.0], [73.2, 26362.0], [73.3, 26362.0], [73.4, 26415.0], [73.5, 26415.0], [73.6, 26534.0], [73.7, 26534.0], [73.8, 26640.0], [73.9, 26640.0], [74.0, 26783.0], [74.1, 26783.0], [74.2, 26911.0], [74.3, 26911.0], [74.4, 26916.0], [74.5, 26916.0], [74.6, 27076.0], [74.7, 27076.0], [74.8, 27380.0], [74.9, 27380.0], [75.0, 27381.0], [75.1, 27578.0], [75.2, 27578.0], [75.3, 27764.0], [75.4, 27764.0], [75.5, 28110.0], [75.6, 28110.0], [75.7, 28215.0], [75.8, 28215.0], [75.9, 28397.0], [76.0, 28397.0], [76.1, 28841.0], [76.2, 28841.0], [76.3, 28858.0], [76.4, 28858.0], [76.5, 29134.0], [76.6, 29134.0], [76.7, 29392.0], [76.8, 29392.0], [76.9, 29485.0], [77.0, 29485.0], [77.1, 29535.0], [77.2, 29535.0], [77.3, 29842.0], [77.4, 29842.0], [77.5, 29978.0], [77.6, 29978.0], [77.7, 30311.0], [77.8, 30562.0], [77.9, 30562.0], [78.0, 30585.0], [78.1, 30585.0], [78.2, 30774.0], [78.3, 30774.0], [78.4, 31097.0], [78.5, 31097.0], [78.6, 31106.0], [78.7, 31106.0], [78.8, 31159.0], [78.9, 31159.0], [79.0, 31372.0], [79.1, 31372.0], [79.2, 31400.0], [79.3, 31400.0], [79.4, 31726.0], [79.5, 31726.0], [79.6, 32229.0], [79.7, 32229.0], [79.8, 32401.0], [79.9, 32401.0], [80.0, 32475.0], [80.1, 32475.0], [80.2, 32962.0], [80.3, 32962.0], [80.4, 33299.0], [80.5, 33299.0], [80.6, 33343.0], [80.7, 33666.0], [80.8, 33666.0], [80.9, 33712.0], [81.0, 33712.0], [81.1, 33766.0], [81.2, 33766.0], [81.3, 33880.0], [81.4, 33880.0], [81.5, 33994.0], [81.6, 33994.0], [81.7, 34019.0], [81.8, 34019.0], [81.9, 34077.0], [82.0, 34077.0], [82.1, 34080.0], [82.2, 34080.0], [82.3, 34510.0], [82.4, 34510.0], [82.5, 34617.0], [82.6, 34617.0], [82.7, 34849.0], [82.8, 34849.0], [82.9, 35114.0], [83.0, 35114.0], [83.1, 35249.0], [83.2, 35249.0], [83.3, 35627.0], [83.4, 35913.0], [83.5, 35913.0], [83.6, 35969.0], [83.7, 35969.0], [83.8, 36238.0], [83.9, 36238.0], [84.0, 36466.0], [84.1, 36466.0], [84.2, 36645.0], [84.3, 36645.0], [84.4, 36813.0], [84.5, 36813.0], [84.6, 36822.0], [84.7, 36822.0], [84.8, 37012.0], [84.9, 37012.0], [85.0, 37031.0], [85.1, 37031.0], [85.2, 37047.0], [85.3, 37047.0], [85.4, 37253.0], [85.5, 37253.0], [85.6, 37370.0], [85.7, 37370.0], [85.8, 37516.0], [85.9, 37516.0], [86.0, 37621.0], [86.1, 37621.0], [86.2, 37823.0], [86.3, 37942.0], [86.4, 37942.0], [86.5, 38044.0], [86.6, 38044.0], [86.7, 38075.0], [86.8, 38075.0], [86.9, 38359.0], [87.0, 38359.0], [87.1, 38596.0], [87.2, 38596.0], [87.3, 39280.0], [87.4, 39280.0], [87.5, 39292.0], [87.6, 39292.0], [87.7, 40118.0], [87.8, 40118.0], [87.9, 40544.0], [88.0, 40544.0], [88.1, 40612.0], [88.2, 40612.0], [88.3, 40684.0], [88.4, 40684.0], [88.5, 40885.0], [88.6, 40885.0], [88.7, 41033.0], [88.8, 41033.0], [88.9, 41488.0], [89.0, 41530.0], [89.1, 41530.0], [89.2, 41645.0], [89.3, 41645.0], [89.4, 41729.0], [89.5, 41729.0], [89.6, 41851.0], [89.7, 41851.0], [89.8, 42108.0], [89.9, 42108.0], [90.0, 42559.0], [90.1, 42559.0], [90.2, 43012.0], [90.3, 43012.0], [90.4, 43815.0], [90.5, 43815.0], [90.6, 44019.0], [90.7, 44019.0], [90.8, 44451.0], [90.9, 44451.0], [91.0, 44615.0], [91.1, 44615.0], [91.2, 44656.0], [91.3, 44656.0], [91.4, 44749.0], [91.5, 44749.0], [91.6, 44751.0], [91.7, 44767.0], [91.8, 44767.0], [91.9, 44878.0], [92.0, 44878.0], [92.1, 45011.0], [92.2, 45011.0], [92.3, 45348.0], [92.4, 45348.0], [92.5, 46147.0], [92.6, 46147.0], [92.7, 46249.0], [92.8, 46249.0], [92.9, 46460.0], [93.0, 46460.0], [93.1, 47393.0], [93.2, 47393.0], [93.3, 47442.0], [93.4, 47442.0], [93.5, 47995.0], [93.6, 47995.0], [93.7, 48964.0], [93.8, 48964.0], [93.9, 49275.0], [94.0, 49275.0], [94.1, 50222.0], [94.2, 50222.0], [94.3, 50654.0], [94.4, 50654.0], [94.5, 51019.0], [94.6, 51047.0], [94.7, 51047.0], [94.8, 51062.0], [94.9, 51062.0], [95.0, 51915.0], [95.1, 51915.0], [95.2, 52509.0], [95.3, 52509.0], [95.4, 53661.0], [95.5, 53661.0], [95.6, 55976.0], [95.7, 55976.0], [95.8, 56420.0], [95.9, 56420.0], [96.0, 56512.0], [96.1, 56512.0], [96.2, 56693.0], [96.3, 56693.0], [96.4, 56846.0], [96.5, 56846.0], [96.6, 56989.0], [96.7, 56989.0], [96.8, 57071.0], [96.9, 57071.0], [97.0, 58178.0], [97.1, 58178.0], [97.2, 60326.0], [97.3, 60366.0], [97.4, 60366.0], [97.5, 60422.0], [97.6, 60422.0], [97.7, 60440.0], [97.8, 60440.0], [97.9, 60456.0], [98.0, 60456.0], [98.1, 60459.0], [98.2, 60459.0], [98.3, 60486.0], [98.4, 60486.0], [98.5, 60499.0], [98.6, 60499.0], [98.7, 60502.0], [98.8, 60502.0], [98.9, 60516.0], [99.0, 60516.0], [99.1, 60535.0], [99.2, 60535.0], [99.3, 60567.0], [99.4, 60567.0], [99.5, 60614.0], [99.6, 60614.0], [99.7, 60737.0], [99.8, 60737.0], [99.9, 61031.0], [100.0, 61031.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 110.0], [0.1, 110.0], [0.2, 110.0], [0.3, 110.0], [0.4, 110.0], [0.5, 110.0], [0.6, 110.0], [0.7, 110.0], [0.8, 110.0], [0.9, 110.0], [1.0, 110.0], [1.1, 110.0], [1.2, 110.0], [1.3, 110.0], [1.4, 111.0], [1.5, 111.0], [1.6, 111.0], [1.7, 111.0], [1.8, 111.0], [1.9, 111.0], [2.0, 111.0], [2.1, 111.0], [2.2, 112.0], [2.3, 112.0], [2.4, 112.0], [2.5, 112.0], [2.6, 112.0], [2.7, 112.0], [2.8, 112.0], [2.9, 113.0], [3.0, 113.0], [3.1, 115.0], [3.2, 115.0], [3.3, 116.0], [3.4, 116.0], [3.5, 116.0], [3.6, 116.0], [3.7, 118.0], [3.8, 118.0], [3.9, 120.0], [4.0, 120.0], [4.1, 121.0], [4.2, 121.0], [4.3, 124.0], [4.4, 124.0], [4.5, 125.0], [4.6, 125.0], [4.7, 126.0], [4.8, 126.0], [4.9, 127.0], [5.0, 127.0], [5.1, 127.0], [5.2, 127.0], [5.3, 128.0], [5.4, 128.0], [5.5, 128.0], [5.6, 130.0], [5.7, 130.0], [5.8, 131.0], [5.9, 131.0], [6.0, 131.0], [6.1, 131.0], [6.2, 131.0], [6.3, 131.0], [6.4, 136.0], [6.5, 136.0], [6.6, 136.0], [6.7, 136.0], [6.8, 137.0], [6.9, 137.0], [7.0, 140.0], [7.1, 140.0], [7.2, 143.0], [7.3, 143.0], [7.4, 143.0], [7.5, 143.0], [7.6, 143.0], [7.7, 143.0], [7.8, 144.0], [7.9, 144.0], [8.0, 146.0], [8.1, 146.0], [8.2, 146.0], [8.3, 146.0], [8.4, 146.0], [8.5, 148.0], [8.6, 148.0], [8.7, 149.0], [8.8, 149.0], [8.9, 149.0], [9.0, 149.0], [9.1, 152.0], [9.2, 152.0], [9.3, 154.0], [9.4, 154.0], [9.5, 155.0], [9.6, 155.0], [9.7, 156.0], [9.8, 156.0], [9.9, 156.0], [10.0, 156.0], [10.1, 159.0], [10.2, 159.0], [10.3, 160.0], [10.4, 160.0], [10.5, 161.0], [10.6, 161.0], [10.7, 163.0], [10.8, 163.0], [10.9, 163.0], [11.0, 163.0], [11.1, 164.0], [11.2, 166.0], [11.3, 166.0], [11.4, 168.0], [11.5, 168.0], [11.6, 168.0], [11.7, 168.0], [11.8, 169.0], [11.9, 169.0], [12.0, 169.0], [12.1, 169.0], [12.2, 170.0], [12.3, 170.0], [12.4, 171.0], [12.5, 171.0], [12.6, 172.0], [12.7, 172.0], [12.8, 173.0], [12.9, 173.0], [13.0, 174.0], [13.1, 174.0], [13.2, 175.0], [13.3, 175.0], [13.4, 175.0], [13.5, 175.0], [13.6, 178.0], [13.7, 178.0], [13.8, 179.0], [13.9, 179.0], [14.0, 179.0], [14.1, 181.0], [14.2, 181.0], [14.3, 184.0], [14.4, 184.0], [14.5, 185.0], [14.6, 185.0], [14.7, 185.0], [14.8, 185.0], [14.9, 189.0], [15.0, 189.0], [15.1, 189.0], [15.2, 189.0], [15.3, 190.0], [15.4, 190.0], [15.5, 191.0], [15.6, 191.0], [15.7, 191.0], [15.8, 191.0], [15.9, 195.0], [16.0, 195.0], [16.1, 196.0], [16.2, 196.0], [16.3, 197.0], [16.4, 197.0], [16.5, 198.0], [16.6, 198.0], [16.7, 200.0], [16.8, 202.0], [16.9, 202.0], [17.0, 202.0], [17.1, 202.0], [17.2, 202.0], [17.3, 202.0], [17.4, 202.0], [17.5, 202.0], [17.6, 204.0], [17.7, 204.0], [17.8, 205.0], [17.9, 205.0], [18.0, 206.0], [18.1, 206.0], [18.2, 206.0], [18.3, 206.0], [18.4, 206.0], [18.5, 206.0], [18.6, 207.0], [18.7, 207.0], [18.8, 207.0], [18.9, 207.0], [19.0, 207.0], [19.1, 207.0], [19.2, 211.0], [19.3, 211.0], [19.4, 212.0], [19.5, 215.0], [19.6, 215.0], [19.7, 272.0], [19.8, 272.0], [19.9, 4175.0], [20.0, 4175.0], [20.1, 4656.0], [20.2, 4656.0], [20.3, 5058.0], [20.4, 5058.0], [20.5, 5077.0], [20.6, 5077.0], [20.7, 5220.0], [20.8, 5220.0], [20.9, 5313.0], [21.0, 5313.0], [21.1, 5348.0], [21.2, 5348.0], [21.3, 5350.0], [21.4, 5350.0], [21.5, 5370.0], [21.6, 5370.0], [21.7, 5376.0], [21.8, 5376.0], [21.9, 5387.0], [22.0, 5387.0], [22.1, 5388.0], [22.2, 5388.0], [22.3, 5612.0], [22.4, 5624.0], [22.5, 5624.0], [22.6, 5687.0], [22.7, 5687.0], [22.8, 5736.0], [22.9, 5736.0], [23.0, 5782.0], [23.1, 5782.0], [23.2, 5830.0], [23.3, 5830.0], [23.4, 5860.0], [23.5, 5860.0], [23.6, 5882.0], [23.7, 5882.0], [23.8, 5909.0], [23.9, 5909.0], [24.0, 5937.0], [24.1, 5937.0], [24.2, 6086.0], [24.3, 6086.0], [24.4, 6124.0], [24.5, 6124.0], [24.6, 6172.0], [24.7, 6172.0], [24.8, 6213.0], [24.9, 6213.0], [25.0, 6229.0], [25.1, 6268.0], [25.2, 6268.0], [25.3, 6328.0], [25.4, 6328.0], [25.5, 6603.0], [25.6, 6603.0], [25.7, 6640.0], [25.8, 6640.0], [25.9, 6734.0], [26.0, 6734.0], [26.1, 6887.0], [26.2, 6887.0], [26.3, 6893.0], [26.4, 6893.0], [26.5, 6916.0], [26.6, 6916.0], [26.7, 6958.0], [26.8, 6958.0], [26.9, 6964.0], [27.0, 6964.0], [27.1, 7155.0], [27.2, 7155.0], [27.3, 7254.0], [27.4, 7254.0], [27.5, 7367.0], [27.6, 7367.0], [27.7, 7390.0], [27.8, 7424.0], [27.9, 7424.0], [28.0, 7532.0], [28.1, 7532.0], [28.2, 7552.0], [28.3, 7552.0], [28.4, 7565.0], [28.5, 7565.0], [28.6, 7618.0], [28.7, 7618.0], [28.8, 7686.0], [28.9, 7686.0], [29.0, 7707.0], [29.1, 7707.0], [29.2, 7958.0], [29.3, 7958.0], [29.4, 8037.0], [29.5, 8037.0], [29.6, 8050.0], [29.7, 8050.0], [29.8, 8249.0], [29.9, 8249.0], [30.0, 8280.0], [30.1, 8280.0], [30.2, 8489.0], [30.3, 8489.0], [30.4, 8510.0], [30.5, 8510.0], [30.6, 8527.0], [30.7, 8534.0], [30.8, 8534.0], [30.9, 8587.0], [31.0, 8587.0], [31.1, 8591.0], [31.2, 8591.0], [31.3, 8793.0], [31.4, 8793.0], [31.5, 8811.0], [31.6, 8811.0], [31.7, 8848.0], [31.8, 8848.0], [31.9, 9070.0], [32.0, 9070.0], [32.1, 9144.0], [32.2, 9144.0], [32.3, 9198.0], [32.4, 9198.0], [32.5, 9262.0], [32.6, 9262.0], [32.7, 9264.0], [32.8, 9264.0], [32.9, 9332.0], [33.0, 9332.0], [33.1, 9357.0], [33.2, 9357.0], [33.3, 9393.0], [33.4, 9486.0], [33.5, 9486.0], [33.6, 9511.0], [33.7, 9511.0], [33.8, 9609.0], [33.9, 9609.0], [34.0, 9624.0], [34.1, 9624.0], [34.2, 9711.0], [34.3, 9711.0], [34.4, 9749.0], [34.5, 9749.0], [34.6, 9795.0], [34.7, 9795.0], [34.8, 9820.0], [34.9, 9820.0], [35.0, 9889.0], [35.1, 9889.0], [35.2, 9912.0], [35.3, 9912.0], [35.4, 10021.0], [35.5, 10021.0], [35.6, 10048.0], [35.7, 10048.0], [35.8, 10067.0], [35.9, 10067.0], [36.0, 10143.0], [36.1, 10143.0], [36.2, 10251.0], [36.3, 10262.0], [36.4, 10262.0], [36.5, 10325.0], [36.6, 10325.0], [36.7, 10328.0], [36.8, 10328.0], [36.9, 10384.0], [37.0, 10384.0], [37.1, 10451.0], [37.2, 10451.0], [37.3, 10471.0], [37.4, 10471.0], [37.5, 10565.0], [37.6, 10565.0], [37.7, 10602.0], [37.8, 10602.0], [37.9, 10777.0], [38.0, 10777.0], [38.1, 10783.0], [38.2, 10783.0], [38.3, 10796.0], [38.4, 10796.0], [38.5, 10965.0], [38.6, 10965.0], [38.7, 10995.0], [38.8, 10995.0], [38.9, 11028.0], [39.0, 11141.0], [39.1, 11141.0], [39.2, 11153.0], [39.3, 11153.0], [39.4, 11206.0], [39.5, 11206.0], [39.6, 11461.0], [39.7, 11461.0], [39.8, 11473.0], [39.9, 11473.0], [40.0, 11502.0], [40.1, 11502.0], [40.2, 11975.0], [40.3, 11975.0], [40.4, 12049.0], [40.5, 12049.0], [40.6, 12071.0], [40.7, 12071.0], [40.8, 12304.0], [40.9, 12304.0], [41.0, 12305.0], [41.1, 12305.0], [41.2, 12356.0], [41.3, 12356.0], [41.4, 12370.0], [41.5, 12370.0], [41.6, 12382.0], [41.7, 12418.0], [41.8, 12418.0], [41.9, 12549.0], [42.0, 12549.0], [42.1, 12818.0], [42.2, 12818.0], [42.3, 12839.0], [42.4, 12839.0], [42.5, 12929.0], [42.6, 12929.0], [42.7, 12984.0], [42.8, 12984.0], [42.9, 13096.0], [43.0, 13096.0], [43.1, 13106.0], [43.2, 13106.0], [43.3, 13235.0], [43.4, 13235.0], [43.5, 13321.0], [43.6, 13321.0], [43.7, 13389.0], [43.8, 13389.0], [43.9, 13431.0], [44.0, 13431.0], [44.1, 13449.0], [44.2, 13449.0], [44.3, 13507.0], [44.4, 13507.0], [44.5, 13583.0], [44.6, 13659.0], [44.7, 13659.0], [44.8, 13659.0], [44.9, 13659.0], [45.0, 14117.0], [45.1, 14117.0], [45.2, 14156.0], [45.3, 14156.0], [45.4, 14198.0], [45.5, 14198.0], [45.6, 14322.0], [45.7, 14322.0], [45.8, 14423.0], [45.9, 14423.0], [46.0, 14469.0], [46.1, 14469.0], [46.2, 14497.0], [46.3, 14497.0], [46.4, 14537.0], [46.5, 14537.0], [46.6, 14544.0], [46.7, 14544.0], [46.8, 14770.0], [46.9, 14770.0], [47.0, 14859.0], [47.1, 14859.0], [47.2, 15053.0], [47.3, 15122.0], [47.4, 15122.0], [47.5, 15303.0], [47.6, 15303.0], [47.7, 15492.0], [47.8, 15492.0], [47.9, 15496.0], [48.0, 15496.0], [48.1, 15513.0], [48.2, 15513.0], [48.3, 15586.0], [48.4, 15586.0], [48.5, 15686.0], [48.6, 15686.0], [48.7, 15848.0], [48.8, 15848.0], [48.9, 15904.0], [49.0, 15904.0], [49.1, 15961.0], [49.2, 15961.0], [49.3, 16037.0], [49.4, 16037.0], [49.5, 16083.0], [49.6, 16083.0], [49.7, 16099.0], [49.8, 16099.0], [49.9, 16113.0], [50.0, 16134.0], [50.1, 16134.0], [50.2, 16361.0], [50.3, 16361.0], [50.4, 16384.0], [50.5, 16384.0], [50.6, 16385.0], [50.7, 16385.0], [50.8, 16704.0], [50.9, 16704.0], [51.0, 16705.0], [51.1, 16705.0], [51.2, 16958.0], [51.3, 16958.0], [51.4, 16992.0], [51.5, 16992.0], [51.6, 17027.0], [51.7, 17027.0], [51.8, 17041.0], [51.9, 17041.0], [52.0, 17127.0], [52.1, 17127.0], [52.2, 17256.0], [52.3, 17256.0], [52.4, 17308.0], [52.5, 17308.0], [52.6, 17315.0], [52.7, 17315.0], [52.8, 17333.0], [52.9, 17334.0], [53.0, 17334.0], [53.1, 17640.0], [53.2, 17640.0], [53.3, 17662.0], [53.4, 17662.0], [53.5, 17725.0], [53.6, 17725.0], [53.7, 17859.0], [53.8, 17859.0], [53.9, 17887.0], [54.0, 17887.0], [54.1, 17957.0], [54.2, 17957.0], [54.3, 18094.0], [54.4, 18094.0], [54.5, 18131.0], [54.6, 18131.0], [54.7, 18161.0], [54.8, 18161.0], [54.9, 18582.0], [55.0, 18582.0], [55.1, 18642.0], [55.2, 18642.0], [55.3, 18662.0], [55.4, 18662.0], [55.5, 18673.0], [55.6, 18706.0], [55.7, 18706.0], [55.8, 18730.0], [55.9, 18730.0], [56.0, 18894.0], [56.1, 18894.0], [56.2, 18914.0], [56.3, 18914.0], [56.4, 18940.0], [56.5, 18940.0], [56.6, 19013.0], [56.7, 19013.0], [56.8, 19234.0], [56.9, 19234.0], [57.0, 19246.0], [57.1, 19246.0], [57.2, 19253.0], [57.3, 19253.0], [57.4, 19353.0], [57.5, 19353.0], [57.6, 19416.0], [57.7, 19416.0], [57.8, 19583.0], [57.9, 19583.0], [58.0, 19600.0], [58.1, 19600.0], [58.2, 19781.0], [58.3, 19781.0], [58.4, 19791.0], [58.5, 19824.0], [58.6, 19824.0], [58.7, 19873.0], [58.8, 19873.0], [58.9, 19897.0], [59.0, 19897.0], [59.1, 20206.0], [59.2, 20206.0], [59.3, 20264.0], [59.4, 20264.0], [59.5, 20329.0], [59.6, 20329.0], [59.7, 20342.0], [59.8, 20342.0], [59.9, 20384.0], [60.0, 20384.0], [60.1, 20384.0], [60.2, 20384.0], [60.3, 20423.0], [60.4, 20423.0], [60.5, 20473.0], [60.6, 20473.0], [60.7, 20540.0], [60.8, 20540.0], [60.9, 20626.0], [61.0, 20626.0], [61.1, 20626.0], [61.2, 20697.0], [61.3, 20697.0], [61.4, 20736.0], [61.5, 20736.0], [61.6, 20757.0], [61.7, 20757.0], [61.8, 20775.0], [61.9, 20775.0], [62.0, 20914.0], [62.1, 20914.0], [62.2, 21110.0], [62.3, 21110.0], [62.4, 21344.0], [62.5, 21344.0], [62.6, 21403.0], [62.7, 21403.0], [62.8, 21452.0], [62.9, 21452.0], [63.0, 21488.0], [63.1, 21488.0], [63.2, 21509.0], [63.3, 21509.0], [63.4, 21595.0], [63.5, 21595.0], [63.6, 21657.0], [63.7, 21657.0], [63.8, 21660.0], [63.9, 21688.0], [64.0, 21688.0], [64.1, 21725.0], [64.2, 21725.0], [64.3, 21751.0], [64.4, 21751.0], [64.5, 21756.0], [64.6, 21756.0], [64.7, 21778.0], [64.8, 21778.0], [64.9, 21811.0], [65.0, 21811.0], [65.1, 21824.0], [65.2, 21824.0], [65.3, 22147.0], [65.4, 22147.0], [65.5, 22226.0], [65.6, 22226.0], [65.7, 22276.0], [65.8, 22276.0], [65.9, 22297.0], [66.0, 22297.0], [66.1, 22309.0], [66.2, 22309.0], [66.3, 22403.0], [66.4, 22403.0], [66.5, 22426.0], [66.6, 22426.0], [66.7, 22429.0], [66.8, 22464.0], [66.9, 22464.0], [67.0, 22554.0], [67.1, 22554.0], [67.2, 22568.0], [67.3, 22568.0], [67.4, 22591.0], [67.5, 22591.0], [67.6, 22610.0], [67.7, 22610.0], [67.8, 22614.0], [67.9, 22614.0], [68.0, 22664.0], [68.1, 22664.0], [68.2, 22783.0], [68.3, 22783.0], [68.4, 22919.0], [68.5, 22919.0], [68.6, 22930.0], [68.7, 22930.0], [68.8, 23055.0], [68.9, 23055.0], [69.0, 23134.0], [69.1, 23134.0], [69.2, 23204.0], [69.3, 23204.0], [69.4, 23479.0], [69.5, 23497.0], [69.6, 23497.0], [69.7, 23514.0], [69.8, 23514.0], [69.9, 23622.0], [70.0, 23622.0], [70.1, 23672.0], [70.2, 23672.0], [70.3, 23894.0], [70.4, 23894.0], [70.5, 23976.0], [70.6, 23976.0], [70.7, 24024.0], [70.8, 24024.0], [70.9, 24054.0], [71.0, 24054.0], [71.1, 24131.0], [71.2, 24131.0], [71.3, 24496.0], [71.4, 24496.0], [71.5, 24525.0], [71.6, 24525.0], [71.7, 24531.0], [71.8, 24531.0], [71.9, 24809.0], [72.0, 24809.0], [72.1, 24845.0], [72.2, 24845.0], [72.3, 25242.0], [72.4, 25461.0], [72.5, 25461.0], [72.6, 25550.0], [72.7, 25550.0], [72.8, 25596.0], [72.9, 25596.0], [73.0, 25899.0], [73.1, 25899.0], [73.2, 25997.0], [73.3, 25997.0], [73.4, 26074.0], [73.5, 26074.0], [73.6, 26125.0], [73.7, 26125.0], [73.8, 26282.0], [73.9, 26282.0], [74.0, 26366.0], [74.1, 26366.0], [74.2, 26508.0], [74.3, 26508.0], [74.4, 26606.0], [74.5, 26606.0], [74.6, 26668.0], [74.7, 26668.0], [74.8, 27078.0], [74.9, 27078.0], [75.0, 27104.0], [75.1, 27169.0], [75.2, 27169.0], [75.3, 27354.0], [75.4, 27354.0], [75.5, 27702.0], [75.6, 27702.0], [75.7, 27843.0], [75.8, 27843.0], [75.9, 28020.0], [76.0, 28020.0], [76.1, 28435.0], [76.2, 28435.0], [76.3, 28451.0], [76.4, 28451.0], [76.5, 28828.0], [76.6, 28828.0], [76.7, 29078.0], [76.8, 29078.0], [76.9, 29089.0], [77.0, 29089.0], [77.1, 29127.0], [77.2, 29127.0], [77.3, 29437.0], [77.4, 29437.0], [77.5, 29572.0], [77.6, 29572.0], [77.7, 29929.0], [77.8, 30176.0], [77.9, 30176.0], [78.0, 30254.0], [78.1, 30254.0], [78.2, 30466.0], [78.3, 30466.0], [78.4, 30678.0], [78.5, 30678.0], [78.6, 30691.0], [78.7, 30691.0], [78.8, 30871.0], [78.9, 30871.0], [79.0, 31097.0], [79.1, 31097.0], [79.2, 31131.0], [79.3, 31131.0], [79.4, 31318.0], [79.5, 31318.0], [79.6, 31994.0], [79.7, 31994.0], [79.8, 32010.0], [79.9, 32010.0], [80.0, 32096.0], [80.1, 32096.0], [80.2, 32645.0], [80.3, 32645.0], [80.4, 32969.0], [80.5, 32969.0], [80.6, 33094.0], [80.7, 33304.0], [80.8, 33304.0], [80.9, 33439.0], [81.0, 33439.0], [81.1, 33444.0], [81.2, 33444.0], [81.3, 33661.0], [81.4, 33661.0], [81.5, 33670.0], [81.6, 33670.0], [81.7, 33688.0], [81.8, 33688.0], [81.9, 33692.0], [82.0, 33692.0], [82.1, 33771.0], [82.2, 33771.0], [82.3, 34196.0], [82.4, 34196.0], [82.5, 34210.0], [82.6, 34210.0], [82.7, 34543.0], [82.8, 34543.0], [82.9, 34706.0], [83.0, 34706.0], [83.1, 34944.0], [83.2, 34944.0], [83.3, 35220.0], [83.4, 35403.0], [83.5, 35403.0], [83.6, 35663.0], [83.7, 35663.0], [83.8, 35856.0], [83.9, 35856.0], [84.0, 36058.0], [84.1, 36058.0], [84.2, 36237.0], [84.3, 36237.0], [84.4, 36531.0], [84.5, 36531.0], [84.6, 36592.0], [84.7, 36592.0], [84.8, 36598.0], [84.9, 36598.0], [85.0, 36606.0], [85.1, 36606.0], [85.2, 36825.0], [85.3, 36825.0], [85.4, 36843.0], [85.5, 36843.0], [85.6, 37109.0], [85.7, 37109.0], [85.8, 37148.0], [85.9, 37148.0], [86.0, 37214.0], [86.1, 37214.0], [86.2, 37519.0], [86.3, 37582.0], [86.4, 37582.0], [86.5, 37739.0], [86.6, 37739.0], [86.7, 37770.0], [86.8, 37770.0], [86.9, 37921.0], [87.0, 37921.0], [87.1, 38189.0], [87.2, 38189.0], [87.3, 38871.0], [87.4, 38871.0], [87.5, 38964.0], [87.6, 38964.0], [87.7, 39713.0], [87.8, 39713.0], [87.9, 40137.0], [88.0, 40137.0], [88.1, 40215.0], [88.2, 40215.0], [88.3, 40276.0], [88.4, 40276.0], [88.5, 40579.0], [88.6, 40579.0], [88.7, 40625.0], [88.8, 40625.0], [88.9, 41122.0], [89.0, 41238.0], [89.1, 41238.0], [89.2, 41258.0], [89.3, 41258.0], [89.4, 41320.0], [89.5, 41320.0], [89.6, 41443.0], [89.7, 41443.0], [89.8, 41803.0], [89.9, 41803.0], [90.0, 42249.0], [90.1, 42249.0], [90.2, 42604.0], [90.3, 42604.0], [90.4, 43588.0], [90.5, 43588.0], [90.6, 43612.0], [90.7, 43612.0], [90.8, 44043.0], [90.9, 44043.0], [91.0, 44249.0], [91.1, 44249.0], [91.2, 44305.0], [91.3, 44305.0], [91.4, 44341.0], [91.5, 44341.0], [91.6, 44344.0], [91.7, 44361.0], [91.8, 44361.0], [91.9, 44539.0], [92.0, 44539.0], [92.1, 44603.0], [92.2, 44603.0], [92.3, 45031.0], [92.4, 45031.0], [92.5, 45741.0], [92.6, 45741.0], [92.7, 46027.0], [92.8, 46027.0], [92.9, 46052.0], [93.0, 46052.0], [93.1, 47034.0], [93.2, 47034.0], [93.3, 47088.0], [93.4, 47088.0], [93.5, 47595.0], [93.6, 47595.0], [93.7, 48746.0], [93.8, 48746.0], [93.9, 49052.0], [94.0, 49052.0], [94.1, 49981.0], [94.2, 49981.0], [94.3, 50247.0], [94.4, 50247.0], [94.5, 50717.0], [94.6, 50756.0], [94.7, 50756.0], [94.8, 50777.0], [94.9, 50777.0], [95.0, 51593.0], [95.1, 51593.0], [95.2, 52285.0], [95.3, 52285.0], [95.4, 53254.0], [95.5, 53254.0], [95.6, 55567.0], [95.7, 55567.0], [95.8, 56014.0], [95.9, 56014.0], [96.0, 56103.0], [96.1, 56103.0], [96.2, 56286.0], [96.3, 56286.0], [96.4, 56504.0], [96.5, 56504.0], [96.6, 56674.0], [96.7, 56674.0], [96.8, 56764.0], [96.9, 56764.0], [97.0, 57851.0], [97.1, 57851.0], [97.2, 60097.0], [97.3, 60108.0], [97.4, 60108.0], [97.5, 60109.0], [97.6, 60109.0], [97.7, 60127.0], [97.8, 60127.0], [97.9, 60134.0], [98.0, 60134.0], [98.1, 60150.0], [98.2, 60150.0], [98.3, 60154.0], [98.4, 60154.0], [98.5, 60154.0], [98.6, 60154.0], [98.7, 60172.0], [98.8, 60172.0], [98.9, 60180.0], [99.0, 60180.0], [99.1, 60193.0], [99.2, 60193.0], [99.3, 60203.0], [99.4, 60203.0], [99.5, 60206.0], [99.6, 60206.0], [99.7, 60239.0], [99.8, 60239.0], [99.9, 60622.0], [100.0, 60622.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 214.0], [0.1, 214.0], [0.2, 216.0], [0.3, 216.0], [0.4, 216.0], [0.5, 216.0], [0.6, 216.0], [0.7, 216.0], [0.8, 217.0], [0.9, 217.0], [1.0, 217.0], [1.1, 217.0], [1.2, 217.0], [1.3, 217.0], [1.4, 217.0], [1.5, 217.0], [1.6, 217.0], [1.7, 217.0], [1.8, 217.0], [1.9, 217.0], [2.0, 218.0], [2.1, 218.0], [2.2, 218.0], [2.3, 218.0], [2.4, 218.0], [2.5, 218.0], [2.6, 218.0], [2.7, 218.0], [2.8, 218.0], [2.9, 218.0], [3.0, 218.0], [3.1, 218.0], [3.2, 218.0], [3.3, 218.0], [3.4, 218.0], [3.5, 219.0], [3.6, 219.0], [3.7, 219.0], [3.8, 219.0], [3.9, 219.0], [4.0, 219.0], [4.1, 219.0], [4.2, 219.0], [4.3, 219.0], [4.4, 219.0], [4.5, 219.0], [4.6, 219.0], [4.7, 220.0], [4.8, 220.0], [4.9, 220.0], [5.0, 220.0], [5.1, 220.0], [5.2, 220.0], [5.3, 220.0], [5.4, 220.0], [5.5, 220.0], [5.6, 221.0], [5.7, 221.0], [5.8, 221.0], [5.9, 221.0], [6.0, 221.0], [6.1, 221.0], [6.2, 221.0], [6.3, 221.0], [6.4, 221.0], [6.5, 221.0], [6.6, 222.0], [6.7, 222.0], [6.8, 222.0], [6.9, 222.0], [7.0, 222.0], [7.1, 222.0], [7.2, 222.0], [7.3, 222.0], [7.4, 222.0], [7.5, 222.0], [7.6, 222.0], [7.7, 222.0], [7.8, 222.0], [7.9, 222.0], [8.0, 222.0], [8.1, 222.0], [8.2, 223.0], [8.3, 223.0], [8.4, 223.0], [8.5, 223.0], [8.6, 223.0], [8.7, 223.0], [8.8, 223.0], [8.9, 223.0], [9.0, 223.0], [9.1, 223.0], [9.2, 223.0], [9.3, 223.0], [9.4, 223.0], [9.5, 223.0], [9.6, 223.0], [9.7, 224.0], [9.8, 224.0], [9.9, 224.0], [10.0, 224.0], [10.1, 224.0], [10.2, 224.0], [10.3, 224.0], [10.4, 224.0], [10.5, 224.0], [10.6, 224.0], [10.7, 225.0], [10.8, 225.0], [10.9, 225.0], [11.0, 225.0], [11.1, 226.0], [11.2, 227.0], [11.3, 227.0], [11.4, 227.0], [11.5, 227.0], [11.6, 227.0], [11.7, 227.0], [11.8, 228.0], [11.9, 228.0], [12.0, 228.0], [12.1, 228.0], [12.2, 228.0], [12.3, 228.0], [12.4, 228.0], [12.5, 228.0], [12.6, 229.0], [12.7, 229.0], [12.8, 229.0], [12.9, 229.0], [13.0, 229.0], [13.1, 229.0], [13.2, 229.0], [13.3, 229.0], [13.4, 229.0], [13.5, 229.0], [13.6, 230.0], [13.7, 230.0], [13.8, 231.0], [13.9, 231.0], [14.0, 231.0], [14.1, 232.0], [14.2, 232.0], [14.3, 232.0], [14.4, 232.0], [14.5, 232.0], [14.6, 232.0], [14.7, 232.0], [14.8, 232.0], [14.9, 232.0], [15.0, 232.0], [15.1, 232.0], [15.2, 232.0], [15.3, 235.0], [15.4, 235.0], [15.5, 235.0], [15.6, 235.0], [15.7, 235.0], [15.8, 235.0], [15.9, 235.0], [16.0, 235.0], [16.1, 236.0], [16.2, 236.0], [16.3, 236.0], [16.4, 236.0], [16.5, 237.0], [16.6, 237.0], [16.7, 237.0], [16.8, 237.0], [16.9, 237.0], [17.0, 238.0], [17.1, 238.0], [17.2, 239.0], [17.3, 239.0], [17.4, 240.0], [17.5, 240.0], [17.6, 241.0], [17.7, 241.0], [17.8, 241.0], [17.9, 241.0], [18.0, 241.0], [18.1, 241.0], [18.2, 242.0], [18.3, 242.0], [18.4, 242.0], [18.5, 242.0], [18.6, 242.0], [18.7, 242.0], [18.8, 243.0], [18.9, 243.0], [19.0, 243.0], [19.1, 243.0], [19.2, 244.0], [19.3, 244.0], [19.4, 246.0], [19.5, 249.0], [19.6, 249.0], [19.7, 249.0], [19.8, 249.0], [19.9, 249.0], [20.0, 249.0], [20.1, 251.0], [20.2, 251.0], [20.3, 256.0], [20.4, 256.0], [20.5, 257.0], [20.6, 257.0], [20.7, 258.0], [20.8, 258.0], [20.9, 259.0], [21.0, 259.0], [21.1, 262.0], [21.2, 262.0], [21.3, 262.0], [21.4, 262.0], [21.5, 263.0], [21.6, 263.0], [21.7, 264.0], [21.8, 264.0], [21.9, 264.0], [22.0, 264.0], [22.1, 266.0], [22.2, 266.0], [22.3, 267.0], [22.4, 268.0], [22.5, 268.0], [22.6, 269.0], [22.7, 269.0], [22.8, 270.0], [22.9, 270.0], [23.0, 272.0], [23.1, 272.0], [23.2, 274.0], [23.3, 274.0], [23.4, 274.0], [23.5, 274.0], [23.6, 275.0], [23.7, 275.0], [23.8, 277.0], [23.9, 277.0], [24.0, 277.0], [24.1, 277.0], [24.2, 281.0], [24.3, 281.0], [24.4, 281.0], [24.5, 281.0], [24.6, 284.0], [24.7, 284.0], [24.8, 285.0], [24.9, 285.0], [25.0, 289.0], [25.1, 289.0], [25.2, 289.0], [25.3, 292.0], [25.4, 292.0], [25.5, 292.0], [25.6, 292.0], [25.7, 300.0], [25.8, 300.0], [25.9, 302.0], [26.0, 302.0], [26.1, 303.0], [26.2, 303.0], [26.3, 303.0], [26.4, 303.0], [26.5, 303.0], [26.6, 303.0], [26.7, 303.0], [26.8, 303.0], [26.9, 303.0], [27.0, 303.0], [27.1, 303.0], [27.2, 303.0], [27.3, 304.0], [27.4, 304.0], [27.5, 304.0], [27.6, 304.0], [27.7, 304.0], [27.8, 305.0], [27.9, 305.0], [28.0, 305.0], [28.1, 305.0], [28.2, 305.0], [28.3, 305.0], [28.4, 305.0], [28.5, 305.0], [28.6, 305.0], [28.7, 305.0], [28.8, 305.0], [28.9, 305.0], [29.0, 305.0], [29.1, 305.0], [29.2, 305.0], [29.3, 305.0], [29.4, 305.0], [29.5, 305.0], [29.6, 305.0], [29.7, 305.0], [29.8, 305.0], [29.9, 305.0], [30.0, 305.0], [30.1, 305.0], [30.2, 305.0], [30.3, 305.0], [30.4, 305.0], [30.5, 305.0], [30.6, 305.0], [30.7, 305.0], [30.8, 305.0], [30.9, 305.0], [31.0, 305.0], [31.1, 305.0], [31.2, 305.0], [31.3, 305.0], [31.4, 305.0], [31.5, 305.0], [31.6, 305.0], [31.7, 305.0], [31.8, 305.0], [31.9, 305.0], [32.0, 305.0], [32.1, 305.0], [32.2, 305.0], [32.3, 306.0], [32.4, 306.0], [32.5, 306.0], [32.6, 306.0], [32.7, 306.0], [32.8, 306.0], [32.9, 306.0], [33.0, 306.0], [33.1, 306.0], [33.2, 306.0], [33.3, 306.0], [33.4, 306.0], [33.5, 306.0], [33.6, 306.0], [33.7, 306.0], [33.8, 306.0], [33.9, 306.0], [34.0, 306.0], [34.1, 306.0], [34.2, 306.0], [34.3, 306.0], [34.4, 306.0], [34.5, 306.0], [34.6, 306.0], [34.7, 306.0], [34.8, 306.0], [34.9, 306.0], [35.0, 306.0], [35.1, 306.0], [35.2, 306.0], [35.3, 306.0], [35.4, 306.0], [35.5, 306.0], [35.6, 306.0], [35.7, 306.0], [35.8, 306.0], [35.9, 306.0], [36.0, 306.0], [36.1, 306.0], [36.2, 307.0], [36.3, 307.0], [36.4, 307.0], [36.5, 307.0], [36.6, 307.0], [36.7, 307.0], [36.8, 307.0], [36.9, 307.0], [37.0, 307.0], [37.1, 307.0], [37.2, 307.0], [37.3, 307.0], [37.4, 307.0], [37.5, 307.0], [37.6, 307.0], [37.7, 308.0], [37.8, 308.0], [37.9, 308.0], [38.0, 308.0], [38.1, 308.0], [38.2, 308.0], [38.3, 309.0], [38.4, 309.0], [38.5, 310.0], [38.6, 310.0], [38.7, 310.0], [38.8, 310.0], [38.9, 310.0], [39.0, 312.0], [39.1, 312.0], [39.2, 313.0], [39.3, 313.0], [39.4, 314.0], [39.5, 314.0], [39.6, 314.0], [39.7, 314.0], [39.8, 314.0], [39.9, 314.0], [40.0, 315.0], [40.1, 315.0], [40.2, 315.0], [40.3, 315.0], [40.4, 315.0], [40.5, 315.0], [40.6, 317.0], [40.7, 317.0], [40.8, 317.0], [40.9, 317.0], [41.0, 317.0], [41.1, 317.0], [41.2, 317.0], [41.3, 317.0], [41.4, 319.0], [41.5, 319.0], [41.6, 320.0], [41.7, 321.0], [41.8, 321.0], [41.9, 322.0], [42.0, 322.0], [42.1, 322.0], [42.2, 322.0], [42.3, 322.0], [42.4, 322.0], [42.5, 322.0], [42.6, 322.0], [42.7, 322.0], [42.8, 322.0], [42.9, 322.0], [43.0, 322.0], [43.1, 322.0], [43.2, 322.0], [43.3, 324.0], [43.4, 324.0], [43.5, 324.0], [43.6, 324.0], [43.7, 324.0], [43.8, 324.0], [43.9, 327.0], [44.0, 327.0], [44.1, 327.0], [44.2, 327.0], [44.3, 327.0], [44.4, 327.0], [44.5, 327.0], [44.6, 328.0], [44.7, 328.0], [44.8, 328.0], [44.9, 328.0], [45.0, 328.0], [45.1, 328.0], [45.2, 329.0], [45.3, 329.0], [45.4, 329.0], [45.5, 329.0], [45.6, 330.0], [45.7, 330.0], [45.8, 330.0], [45.9, 330.0], [46.0, 330.0], [46.1, 330.0], [46.2, 331.0], [46.3, 331.0], [46.4, 331.0], [46.5, 331.0], [46.6, 331.0], [46.7, 331.0], [46.8, 333.0], [46.9, 333.0], [47.0, 335.0], [47.1, 335.0], [47.2, 336.0], [47.3, 336.0], [47.4, 336.0], [47.5, 338.0], [47.6, 338.0], [47.7, 338.0], [47.8, 338.0], [47.9, 339.0], [48.0, 339.0], [48.1, 340.0], [48.2, 340.0], [48.3, 340.0], [48.4, 340.0], [48.5, 340.0], [48.6, 340.0], [48.7, 341.0], [48.8, 341.0], [48.9, 342.0], [49.0, 342.0], [49.1, 342.0], [49.2, 342.0], [49.3, 343.0], [49.4, 343.0], [49.5, 347.0], [49.6, 347.0], [49.7, 348.0], [49.8, 348.0], [49.9, 348.0], [50.0, 349.0], [50.1, 349.0], [50.2, 354.0], [50.3, 354.0], [50.4, 354.0], [50.5, 354.0], [50.6, 354.0], [50.7, 354.0], [50.8, 358.0], [50.9, 358.0], [51.0, 358.0], [51.1, 358.0], [51.2, 360.0], [51.3, 360.0], [51.4, 360.0], [51.5, 360.0], [51.6, 360.0], [51.7, 360.0], [51.8, 361.0], [51.9, 361.0], [52.0, 362.0], [52.1, 362.0], [52.2, 363.0], [52.3, 363.0], [52.4, 365.0], [52.5, 365.0], [52.6, 366.0], [52.7, 366.0], [52.8, 368.0], [52.9, 369.0], [53.0, 369.0], [53.1, 372.0], [53.2, 372.0], [53.3, 372.0], [53.4, 372.0], [53.5, 377.0], [53.6, 377.0], [53.7, 377.0], [53.8, 377.0], [53.9, 378.0], [54.0, 378.0], [54.1, 378.0], [54.2, 378.0], [54.3, 378.0], [54.4, 378.0], [54.5, 379.0], [54.6, 379.0], [54.7, 379.0], [54.8, 379.0], [54.9, 381.0], [55.0, 381.0], [55.1, 381.0], [55.2, 381.0], [55.3, 382.0], [55.4, 382.0], [55.5, 382.0], [55.6, 384.0], [55.7, 384.0], [55.8, 385.0], [55.9, 385.0], [56.0, 386.0], [56.1, 386.0], [56.2, 386.0], [56.3, 386.0], [56.4, 387.0], [56.5, 387.0], [56.6, 388.0], [56.7, 388.0], [56.8, 388.0], [56.9, 388.0], [57.0, 390.0], [57.1, 390.0], [57.2, 391.0], [57.3, 391.0], [57.4, 394.0], [57.5, 394.0], [57.6, 394.0], [57.7, 394.0], [57.8, 397.0], [57.9, 397.0], [58.0, 397.0], [58.1, 397.0], [58.2, 398.0], [58.3, 398.0], [58.4, 398.0], [58.5, 398.0], [58.6, 398.0], [58.7, 399.0], [58.8, 399.0], [58.9, 400.0], [59.0, 400.0], [59.1, 404.0], [59.2, 404.0], [59.3, 404.0], [59.4, 404.0], [59.5, 404.0], [59.6, 404.0], [59.7, 404.0], [59.8, 404.0], [59.9, 404.0], [60.0, 404.0], [60.1, 405.0], [60.2, 405.0], [60.3, 405.0], [60.4, 405.0], [60.5, 405.0], [60.6, 405.0], [60.7, 405.0], [60.8, 405.0], [60.9, 405.0], [61.0, 405.0], [61.1, 405.0], [61.2, 406.0], [61.3, 406.0], [61.4, 406.0], [61.5, 406.0], [61.6, 406.0], [61.7, 406.0], [61.8, 406.0], [61.9, 406.0], [62.0, 406.0], [62.1, 406.0], [62.2, 406.0], [62.3, 406.0], [62.4, 406.0], [62.5, 406.0], [62.6, 406.0], [62.7, 406.0], [62.8, 406.0], [62.9, 406.0], [63.0, 406.0], [63.1, 406.0], [63.2, 406.0], [63.3, 406.0], [63.4, 407.0], [63.5, 407.0], [63.6, 407.0], [63.7, 407.0], [63.8, 407.0], [63.9, 407.0], [64.0, 407.0], [64.1, 407.0], [64.2, 407.0], [64.3, 407.0], [64.4, 407.0], [64.5, 407.0], [64.6, 407.0], [64.7, 407.0], [64.8, 407.0], [64.9, 407.0], [65.0, 407.0], [65.1, 407.0], [65.2, 407.0], [65.3, 407.0], [65.4, 407.0], [65.5, 407.0], [65.6, 407.0], [65.7, 407.0], [65.8, 407.0], [65.9, 407.0], [66.0, 407.0], [66.1, 407.0], [66.2, 407.0], [66.3, 407.0], [66.4, 407.0], [66.5, 407.0], [66.6, 407.0], [66.7, 407.0], [66.8, 407.0], [66.9, 407.0], [67.0, 407.0], [67.1, 407.0], [67.2, 407.0], [67.3, 407.0], [67.4, 407.0], [67.5, 407.0], [67.6, 407.0], [67.7, 407.0], [67.8, 407.0], [67.9, 407.0], [68.0, 407.0], [68.1, 407.0], [68.2, 407.0], [68.3, 407.0], [68.4, 407.0], [68.5, 407.0], [68.6, 407.0], [68.7, 407.0], [68.8, 407.0], [68.9, 407.0], [69.0, 407.0], [69.1, 407.0], [69.2, 407.0], [69.3, 407.0], [69.4, 407.0], [69.5, 407.0], [69.6, 407.0], [69.7, 407.0], [69.8, 407.0], [69.9, 407.0], [70.0, 407.0], [70.1, 407.0], [70.2, 407.0], [70.3, 407.0], [70.4, 407.0], [70.5, 407.0], [70.6, 407.0], [70.7, 407.0], [70.8, 407.0], [70.9, 407.0], [71.0, 407.0], [71.1, 407.0], [71.2, 407.0], [71.3, 407.0], [71.4, 407.0], [71.5, 407.0], [71.6, 407.0], [71.7, 407.0], [71.8, 407.0], [71.9, 407.0], [72.0, 407.0], [72.1, 407.0], [72.2, 407.0], [72.3, 407.0], [72.4, 407.0], [72.5, 407.0], [72.6, 407.0], [72.7, 407.0], [72.8, 407.0], [72.9, 407.0], [73.0, 407.0], [73.1, 407.0], [73.2, 407.0], [73.3, 407.0], [73.4, 407.0], [73.5, 407.0], [73.6, 408.0], [73.7, 408.0], [73.8, 408.0], [73.9, 408.0], [74.0, 408.0], [74.1, 408.0], [74.2, 408.0], [74.3, 408.0], [74.4, 408.0], [74.5, 408.0], [74.6, 408.0], [74.7, 408.0], [74.8, 408.0], [74.9, 408.0], [75.0, 408.0], [75.1, 408.0], [75.2, 408.0], [75.3, 408.0], [75.4, 408.0], [75.5, 408.0], [75.6, 408.0], [75.7, 408.0], [75.8, 408.0], [75.9, 408.0], [76.0, 408.0], [76.1, 408.0], [76.2, 408.0], [76.3, 408.0], [76.4, 408.0], [76.5, 408.0], [76.6, 408.0], [76.7, 408.0], [76.8, 408.0], [76.9, 408.0], [77.0, 408.0], [77.1, 408.0], [77.2, 408.0], [77.3, 408.0], [77.4, 408.0], [77.5, 408.0], [77.6, 408.0], [77.7, 408.0], [77.8, 408.0], [77.9, 408.0], [78.0, 408.0], [78.1, 408.0], [78.2, 408.0], [78.3, 408.0], [78.4, 408.0], [78.5, 408.0], [78.6, 408.0], [78.7, 408.0], [78.8, 408.0], [78.9, 408.0], [79.0, 408.0], [79.1, 408.0], [79.2, 408.0], [79.3, 408.0], [79.4, 408.0], [79.5, 408.0], [79.6, 408.0], [79.7, 408.0], [79.8, 408.0], [79.9, 408.0], [80.0, 408.0], [80.1, 408.0], [80.2, 408.0], [80.3, 408.0], [80.4, 408.0], [80.5, 408.0], [80.6, 408.0], [80.7, 408.0], [80.8, 408.0], [80.9, 408.0], [81.0, 408.0], [81.1, 408.0], [81.2, 408.0], [81.3, 408.0], [81.4, 408.0], [81.5, 408.0], [81.6, 408.0], [81.7, 408.0], [81.8, 408.0], [81.9, 408.0], [82.0, 408.0], [82.1, 408.0], [82.2, 408.0], [82.3, 408.0], [82.4, 408.0], [82.5, 408.0], [82.6, 408.0], [82.7, 408.0], [82.8, 408.0], [82.9, 408.0], [83.0, 408.0], [83.1, 408.0], [83.2, 408.0], [83.3, 408.0], [83.4, 408.0], [83.5, 408.0], [83.6, 408.0], [83.7, 408.0], [83.8, 408.0], [83.9, 408.0], [84.0, 408.0], [84.1, 408.0], [84.2, 408.0], [84.3, 408.0], [84.4, 408.0], [84.5, 408.0], [84.6, 408.0], [84.7, 408.0], [84.8, 408.0], [84.9, 408.0], [85.0, 408.0], [85.1, 408.0], [85.2, 408.0], [85.3, 408.0], [85.4, 408.0], [85.5, 408.0], [85.6, 408.0], [85.7, 408.0], [85.8, 408.0], [85.9, 408.0], [86.0, 408.0], [86.1, 408.0], [86.2, 408.0], [86.3, 408.0], [86.4, 408.0], [86.5, 408.0], [86.6, 408.0], [86.7, 408.0], [86.8, 408.0], [86.9, 408.0], [87.0, 408.0], [87.1, 408.0], [87.2, 408.0], [87.3, 408.0], [87.4, 408.0], [87.5, 409.0], [87.6, 409.0], [87.7, 409.0], [87.8, 409.0], [87.9, 409.0], [88.0, 409.0], [88.1, 409.0], [88.2, 409.0], [88.3, 409.0], [88.4, 409.0], [88.5, 409.0], [88.6, 409.0], [88.7, 409.0], [88.8, 409.0], [88.9, 409.0], [89.0, 409.0], [89.1, 409.0], [89.2, 409.0], [89.3, 409.0], [89.4, 409.0], [89.5, 409.0], [89.6, 409.0], [89.7, 409.0], [89.8, 409.0], [89.9, 409.0], [90.0, 409.0], [90.1, 409.0], [90.2, 409.0], [90.3, 409.0], [90.4, 409.0], [90.5, 409.0], [90.6, 409.0], [90.7, 409.0], [90.8, 409.0], [90.9, 409.0], [91.0, 409.0], [91.1, 409.0], [91.2, 409.0], [91.3, 409.0], [91.4, 409.0], [91.5, 409.0], [91.6, 409.0], [91.7, 409.0], [91.8, 409.0], [91.9, 409.0], [92.0, 409.0], [92.1, 409.0], [92.2, 409.0], [92.3, 409.0], [92.4, 409.0], [92.5, 409.0], [92.6, 409.0], [92.7, 409.0], [92.8, 409.0], [92.9, 409.0], [93.0, 409.0], [93.1, 409.0], [93.2, 409.0], [93.3, 409.0], [93.4, 409.0], [93.5, 409.0], [93.6, 409.0], [93.7, 409.0], [93.8, 409.0], [93.9, 409.0], [94.0, 409.0], [94.1, 409.0], [94.2, 409.0], [94.3, 410.0], [94.4, 410.0], [94.5, 410.0], [94.6, 410.0], [94.7, 410.0], [94.8, 410.0], [94.9, 410.0], [95.0, 410.0], [95.1, 410.0], [95.2, 410.0], [95.3, 410.0], [95.4, 410.0], [95.5, 410.0], [95.6, 410.0], [95.7, 410.0], [95.8, 411.0], [95.9, 411.0], [96.0, 417.0], [96.1, 417.0], [96.2, 417.0], [96.3, 417.0], [96.4, 418.0], [96.5, 418.0], [96.6, 430.0], [96.7, 430.0], [96.8, 431.0], [96.9, 431.0], [97.0, 438.0], [97.1, 438.0], [97.2, 442.0], [97.3, 450.0], [97.4, 450.0], [97.5, 481.0], [97.6, 481.0], [97.7, 494.0], [97.8, 494.0], [97.9, 495.0], [98.0, 495.0], [98.1, 498.0], [98.2, 498.0], [98.3, 500.0], [98.4, 500.0], [98.5, 506.0], [98.6, 506.0], [98.7, 509.0], [98.8, 509.0], [98.9, 510.0], [99.0, 510.0], [99.1, 510.0], [99.2, 510.0], [99.3, 510.0], [99.4, 510.0], [99.5, 511.0], [99.6, 511.0], [99.7, 511.0], [99.8, 511.0], [99.9, 613.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 204.0, "series": [{"data": [[34500.0, 1.0], [32900.0, 1.0], [33300.0, 1.0], [33700.0, 2.0], [37300.0, 1.0], [38500.0, 1.0], [40100.0, 1.0], [40500.0, 1.0], [41700.0, 1.0], [42500.0, 1.0], [42100.0, 1.0], [45300.0, 1.0], [46100.0, 1.0], [48900.0, 1.0], [47300.0, 1.0], [52500.0, 1.0], [56500.0, 1.0], [56900.0, 1.0], [58100.0, 1.0], [60500.0, 4.0], [300.0, 16.0], [400.0, 38.0], [500.0, 39.0], [600.0, 10.0], [4500.0, 1.0], [4900.0, 1.0], [5300.0, 1.0], [5400.0, 2.0], [5600.0, 2.0], [5800.0, 1.0], [5700.0, 4.0], [6000.0, 4.0], [5900.0, 1.0], [6100.0, 1.0], [6200.0, 1.0], [6300.0, 4.0], [6600.0, 2.0], [6400.0, 3.0], [6500.0, 1.0], [6900.0, 1.0], [6800.0, 1.0], [7000.0, 1.0], [7300.0, 2.0], [7200.0, 3.0], [7600.0, 2.0], [7500.0, 1.0], [7900.0, 3.0], [7700.0, 3.0], [8000.0, 2.0], [8400.0, 3.0], [8300.0, 1.0], [8500.0, 1.0], [8900.0, 4.0], [9200.0, 2.0], [9000.0, 1.0], [8800.0, 2.0], [9500.0, 3.0], [9700.0, 2.0], [9600.0, 1.0], [9400.0, 2.0], [10000.0, 1.0], [9900.0, 3.0], [9800.0, 1.0], [10100.0, 3.0], [10200.0, 1.0], [10700.0, 4.0], [10300.0, 1.0], [10500.0, 1.0], [10600.0, 4.0], [10400.0, 3.0], [11000.0, 3.0], [10900.0, 1.0], [11600.0, 1.0], [11700.0, 1.0], [11400.0, 2.0], [11300.0, 1.0], [11500.0, 2.0], [11800.0, 1.0], [12200.0, 1.0], [11900.0, 1.0], [12600.0, 2.0], [12500.0, 2.0], [12300.0, 1.0], [12400.0, 1.0], [12800.0, 3.0], [13200.0, 2.0], [13100.0, 1.0], [13300.0, 1.0], [13700.0, 2.0], [13500.0, 2.0], [13800.0, 2.0], [13600.0, 2.0], [14000.0, 3.0], [14300.0, 2.0], [14600.0, 3.0], [14700.0, 1.0], [14800.0, 1.0], [15000.0, 2.0], [15300.0, 1.0], [14900.0, 2.0], [15600.0, 1.0], [15700.0, 2.0], [15800.0, 2.0], [15500.0, 1.0], [16200.0, 3.0], [16300.0, 2.0], [15900.0, 1.0], [16400.0, 3.0], [17000.0, 1.0], [17400.0, 1.0], [17200.0, 1.0], [18000.0, 1.0], [17600.0, 3.0], [18200.0, 1.0], [18800.0, 1.0], [19000.0, 1.0], [18600.0, 1.0], [20200.0, 1.0], [19600.0, 2.0], [20600.0, 2.0], [20800.0, 1.0], [21000.0, 1.0], [21600.0, 1.0], [22000.0, 2.0], [22200.0, 1.0], [22600.0, 5.0], [23400.0, 1.0], [22800.0, 1.0], [23000.0, 2.0], [24200.0, 3.0], [23800.0, 3.0], [23600.0, 1.0], [24000.0, 1.0], [24800.0, 2.0], [25200.0, 2.0], [25800.0, 2.0], [25600.0, 1.0], [26600.0, 1.0], [26400.0, 1.0], [26000.0, 1.0], [27000.0, 1.0], [28200.0, 1.0], [28800.0, 2.0], [29400.0, 1.0], [29800.0, 1.0], [31400.0, 1.0], [31000.0, 1.0], [32400.0, 2.0], [32200.0, 1.0], [34800.0, 1.0], [34000.0, 3.0], [33200.0, 1.0], [33600.0, 1.0], [35200.0, 1.0], [36800.0, 2.0], [36400.0, 1.0], [35600.0, 1.0], [38000.0, 2.0], [37600.0, 1.0], [37200.0, 1.0], [39200.0, 2.0], [40800.0, 1.0], [41600.0, 1.0], [44800.0, 1.0], [44400.0, 1.0], [44000.0, 1.0], [46400.0, 1.0], [49200.0, 1.0], [53600.0, 1.0], [56400.0, 1.0], [56800.0, 1.0], [60400.0, 6.0], [33900.0, 1.0], [35900.0, 2.0], [35100.0, 1.0], [38300.0, 1.0], [37500.0, 1.0], [37900.0, 1.0], [41500.0, 1.0], [44700.0, 3.0], [47900.0, 1.0], [51900.0, 1.0], [55900.0, 1.0], [60700.0, 1.0], [60300.0, 2.0], [16700.0, 3.0], [17300.0, 3.0], [17100.0, 1.0], [17500.0, 1.0], [18100.0, 1.0], [17900.0, 2.0], [18300.0, 1.0], [17700.0, 1.0], [18900.0, 2.0], [18500.0, 2.0], [19100.0, 4.0], [19300.0, 2.0], [19500.0, 3.0], [20100.0, 3.0], [19900.0, 2.0], [20300.0, 1.0], [21500.0, 2.0], [21300.0, 1.0], [20700.0, 6.0], [20900.0, 3.0], [20500.0, 1.0], [21100.0, 1.0], [21900.0, 7.0], [22100.0, 2.0], [22500.0, 3.0], [21700.0, 1.0], [22900.0, 5.0], [23500.0, 1.0], [23100.0, 2.0], [23700.0, 1.0], [24300.0, 2.0], [24900.0, 1.0], [26300.0, 2.0], [26500.0, 1.0], [27300.0, 2.0], [26900.0, 2.0], [27500.0, 1.0], [26700.0, 1.0], [27700.0, 1.0], [28100.0, 1.0], [28300.0, 1.0], [29300.0, 1.0], [29500.0, 1.0], [29100.0, 1.0], [29900.0, 1.0], [30700.0, 1.0], [30500.0, 2.0], [30300.0, 1.0], [31700.0, 1.0], [31100.0, 2.0], [31300.0, 1.0], [34600.0, 1.0], [33800.0, 1.0], [36600.0, 1.0], [36200.0, 1.0], [37000.0, 3.0], [37800.0, 1.0], [40600.0, 2.0], [43000.0, 1.0], [41000.0, 1.0], [41800.0, 1.0], [41400.0, 1.0], [43800.0, 1.0], [44600.0, 2.0], [45000.0, 1.0], [46200.0, 1.0], [47400.0, 1.0], [51000.0, 3.0], [50600.0, 1.0], [50200.0, 1.0], [56600.0, 1.0], [57000.0, 1.0], [60600.0, 1.0], [61000.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 86.0], [34100.0, 1.0], [34500.0, 1.0], [32900.0, 1.0], [33700.0, 1.0], [33300.0, 1.0], [36500.0, 3.0], [34900.0, 1.0], [37700.0, 2.0], [38900.0, 1.0], [38100.0, 1.0], [39700.0, 1.0], [40100.0, 1.0], [40500.0, 1.0], [41300.0, 1.0], [44500.0, 1.0], [45700.0, 1.0], [200.0, 17.0], [56500.0, 1.0], [56100.0, 1.0], [60100.0, 10.0], [4100.0, 1.0], [4600.0, 1.0], [5000.0, 2.0], [5300.0, 7.0], [5200.0, 1.0], [5600.0, 3.0], [5800.0, 3.0], [5700.0, 2.0], [5900.0, 2.0], [6100.0, 2.0], [6000.0, 1.0], [6200.0, 3.0], [6300.0, 1.0], [6600.0, 2.0], [6800.0, 2.0], [6700.0, 1.0], [6900.0, 3.0], [7100.0, 1.0], [7300.0, 2.0], [7400.0, 1.0], [7200.0, 1.0], [7500.0, 3.0], [7600.0, 2.0], [7700.0, 1.0], [7900.0, 1.0], [8000.0, 2.0], [8500.0, 5.0], [8200.0, 2.0], [8700.0, 1.0], [8400.0, 1.0], [9200.0, 2.0], [8800.0, 2.0], [9100.0, 2.0], [9000.0, 1.0], [9600.0, 2.0], [9500.0, 1.0], [9300.0, 3.0], [9400.0, 1.0], [9700.0, 3.0], [9900.0, 1.0], [10100.0, 1.0], [10000.0, 3.0], [9800.0, 2.0], [10200.0, 2.0], [10300.0, 3.0], [10700.0, 3.0], [10500.0, 1.0], [10600.0, 1.0], [10400.0, 2.0], [10900.0, 2.0], [11100.0, 2.0], [11000.0, 1.0], [11200.0, 1.0], [11400.0, 2.0], [11500.0, 1.0], [12000.0, 2.0], [11900.0, 1.0], [12500.0, 1.0], [12300.0, 5.0], [12400.0, 1.0], [12900.0, 2.0], [13100.0, 1.0], [12800.0, 2.0], [13300.0, 2.0], [13000.0, 1.0], [13200.0, 1.0], [13500.0, 2.0], [13400.0, 2.0], [13600.0, 2.0], [14100.0, 3.0], [14300.0, 1.0], [14800.0, 1.0], [14400.0, 3.0], [14700.0, 1.0], [14500.0, 2.0], [15300.0, 1.0], [15000.0, 1.0], [15100.0, 1.0], [15400.0, 2.0], [15600.0, 1.0], [15800.0, 1.0], [15500.0, 2.0], [16000.0, 3.0], [16300.0, 3.0], [16100.0, 2.0], [15900.0, 2.0], [17000.0, 2.0], [17200.0, 1.0], [17800.0, 2.0], [17600.0, 2.0], [18000.0, 1.0], [18600.0, 3.0], [19200.0, 3.0], [19000.0, 1.0], [18800.0, 1.0], [19400.0, 1.0], [19800.0, 3.0], [20200.0, 2.0], [19600.0, 1.0], [20400.0, 2.0], [21400.0, 3.0], [20600.0, 3.0], [22400.0, 4.0], [21800.0, 2.0], [21600.0, 3.0], [22200.0, 3.0], [23400.0, 2.0], [22600.0, 3.0], [23000.0, 1.0], [23200.0, 1.0], [24400.0, 1.0], [24000.0, 2.0], [23600.0, 2.0], [23800.0, 1.0], [24800.0, 2.0], [25200.0, 1.0], [25400.0, 1.0], [26600.0, 2.0], [25800.0, 1.0], [26200.0, 1.0], [26000.0, 1.0], [27000.0, 1.0], [28400.0, 2.0], [27800.0, 1.0], [28000.0, 1.0], [29000.0, 2.0], [29400.0, 1.0], [28800.0, 1.0], [30600.0, 2.0], [30400.0, 1.0], [30200.0, 1.0], [31000.0, 1.0], [30800.0, 1.0], [32600.0, 1.0], [32000.0, 2.0], [33600.0, 4.0], [36800.0, 2.0], [36000.0, 1.0], [35200.0, 1.0], [35600.0, 1.0], [37200.0, 1.0], [38800.0, 1.0], [41200.0, 2.0], [44000.0, 1.0], [43600.0, 1.0], [46000.0, 2.0], [53200.0, 1.0], [56000.0, 1.0], [60000.0, 1.0], [34700.0, 1.0], [37900.0, 1.0], [37100.0, 2.0], [37500.0, 2.0], [41100.0, 1.0], [43500.0, 1.0], [44300.0, 4.0], [48700.0, 1.0], [47500.0, 1.0], [50700.0, 3.0], [49900.0, 1.0], [51500.0, 1.0], [56700.0, 1.0], [55500.0, 1.0], [16700.0, 2.0], [17300.0, 4.0], [16900.0, 2.0], [17100.0, 1.0], [18100.0, 2.0], [17700.0, 1.0], [17900.0, 1.0], [18700.0, 2.0], [18500.0, 1.0], [18900.0, 2.0], [19300.0, 1.0], [20300.0, 4.0], [19700.0, 2.0], [19500.0, 1.0], [21500.0, 2.0], [21300.0, 1.0], [20900.0, 1.0], [21100.0, 1.0], [20700.0, 3.0], [20500.0, 1.0], [21700.0, 4.0], [22300.0, 1.0], [22500.0, 3.0], [22100.0, 1.0], [22700.0, 1.0], [23100.0, 1.0], [23500.0, 1.0], [22900.0, 2.0], [23900.0, 1.0], [24500.0, 2.0], [24100.0, 1.0], [25500.0, 2.0], [25900.0, 1.0], [26500.0, 1.0], [26100.0, 1.0], [26300.0, 1.0], [27100.0, 2.0], [27300.0, 1.0], [27700.0, 1.0], [29500.0, 1.0], [29100.0, 1.0], [30100.0, 1.0], [29900.0, 1.0], [31300.0, 1.0], [31100.0, 1.0], [31900.0, 1.0], [34200.0, 1.0], [33000.0, 1.0], [33400.0, 2.0], [36600.0, 1.0], [35400.0, 1.0], [36200.0, 1.0], [35800.0, 1.0], [40600.0, 1.0], [40200.0, 2.0], [42600.0, 1.0], [41400.0, 1.0], [42200.0, 1.0], [41800.0, 1.0], [45000.0, 1.0], [44200.0, 1.0], [44600.0, 1.0], [47000.0, 2.0], [49000.0, 1.0], [50200.0, 1.0], [52200.0, 1.0], [56200.0, 1.0], [56600.0, 1.0], [57800.0, 1.0], [60200.0, 3.0], [60600.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 172.0], [600.0, 1.0], [400.0, 204.0], [200.0, 133.0], [500.0, 8.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 61000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 410.0, "series": [{"data": [[0.0, 410.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 393.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 225.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.68520818E12, "maxY": 24.3109756097561, "series": [{"data": [[1.6852086E12, 14.346666666666664], [1.68520824E12, 4.448275862068965], [1.6852083E12, 5.0], [1.6852089E12, 20.56969696969697], [1.68520884E12, 20.0], [1.68520818E12, 2.0], [1.68520854E12, 10.47260273972603], [1.68520848E12, 10.0], [1.68520908E12, 8.058823529411764], [1.68520842E12, 9.441176470588239], [1.68520878E12, 19.319047619047616], [1.68520872E12, 15.723076923076922], [1.68520902E12, 22.812949640287773], [1.68520896E12, 24.3109756097561], [1.68520866E12, 15.0], [1.68520836E12, 5.916666666666667]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68520908E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 273.3333333333333, "minX": 1.0, "maxY": 41090.0, "series": [{"data": [[2.0, 6362.0], [8.0, 33707.9], [9.0, 38081.666666666664], [10.0, 15987.875000000002], [11.0, 7743.999999999999], [3.0, 6258.0], [12.0, 10655.142857142857], [13.0, 16366.222222222223], [14.0, 41090.0], [15.0, 23473.30263157894], [4.0, 12530.0], [16.0, 4868.0], [17.0, 24070.8], [18.0, 12022.21052631579], [19.0, 11469.933333333334], [5.0, 20292.653846153848], [20.0, 17068.06976744186], [21.0, 21383.75], [22.0, 15172.57142857143], [23.0, 19210.6875], [6.0, 23462.0], [24.0, 20706.166666666668], [25.0, 23706.75806451613], [7.0, 27140.75]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[16.754826254826263, 19089.52509652511]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 5982.0], [8.0, 33352.1], [9.0, 37751.666666666664], [10.0, 15641.05555555555], [11.0, 7381.199999999999], [3.0, 5860.0], [12.0, 10335.857142857143], [13.0, 15990.77777777778], [14.0, 40746.25], [15.0, 23116.749999999996], [4.0, 12127.0], [16.0, 4568.888888888889], [17.0, 23702.8], [18.0, 11712.42105263158], [19.0, 11172.933333333334], [5.0, 19982.69230769231], [20.0, 16725.038759689924], [21.0, 21046.5625], [22.0, 14853.857142857141], [23.0, 18886.125000000007], [6.0, 23055.0], [24.0, 20365.25], [25.0, 23357.22580645161], [7.0, 26849.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[16.754826254826263, 18747.893822393802]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 411.3333333333333], [3.0, 351.5], [4.0, 352.75], [5.0, 304.5185185185186], [6.0, 342.0], [7.0, 280.2], [8.0, 394.3333333333333], [9.0, 375.0], [10.0, 347.1944444444444], [11.0, 389.4], [12.0, 366.375], [13.0, 374.125], [14.0, 356.0], [15.0, 350.46666666666675], [1.0, 430.0], [16.0, 315.44444444444446], [17.0, 344.3333333333333], [18.0, 285.3684210526316], [19.0, 273.3333333333333], [20.0, 350.6076923076924], [21.0, 342.31250000000006], [22.0, 280.85714285714283], [23.0, 364.2], [24.0, 359.6923076923077], [25.0, 338.9516129032258]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[16.70463320463321, 341.62741312741286]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 102.1, "minX": 1.68520818E12, "maxY": 10798.283333333333, "series": [{"data": [[1.6852086E12, 1715.4666666666667], [1.68520824E12, 769.3], [1.6852083E12, 1100.75], [1.6852089E12, 3961.883333333333], [1.68520884E12, 3453.616666666667], [1.68520818E12, 219.33333333333334], [1.68520854E12, 1871.8], [1.68520848E12, 1366.8666666666666], [1.68520908E12, 102.1], [1.68520842E12, 842.6833333333333], [1.68520878E12, 3658.6666666666665], [1.68520872E12, 2660.8166666666666], [1.68520902E12, 2980.0666666666666], [1.68520896E12, 4144.933333333333], [1.68520866E12, 2568.4166666666665], [1.68520836E12, 879.7833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6852086E12, 3360.5666666666666], [1.68520824E12, 1500.45], [1.6852083E12, 2332.383333333333], [1.6852089E12, 7704.566666666667], [1.68520884E12, 8074.55], [1.68520818E12, 445.1166666666667], [1.68520854E12, 6813.166666666667], [1.68520848E12, 4718.2], [1.68520908E12, 1525.9666666666667], [1.68520842E12, 1655.3166666666666], [1.68520878E12, 10798.283333333333], [1.68520872E12, 6542.266666666666], [1.68520902E12, 7767.166666666667], [1.68520896E12, 7850.55], [1.68520866E12, 5254.75], [1.68520836E12, 1374.9666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68520908E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 309.2, "minX": 1.68520818E12, "maxY": 39119.22222222222, "series": [{"data": [[1.6852086E12, 22858.227272727276], [1.68520824E12, 17887.375], [1.6852083E12, 20341.6], [1.6852089E12, 17450.824561403508], [1.68520884E12, 20600.566037735844], [1.68520818E12, 6327.333333333333], [1.68520854E12, 10246.999999999998], [1.68520848E12, 15253.678571428567], [1.68520908E12, 36849.125], [1.68520842E12, 37021.72727272727], [1.68520878E12, 11653.426470588236], [1.68520872E12, 20236.06666666666], [1.68520902E12, 26115.372549019612], [1.68520896E12, 19554.80392156863], [1.68520866E12, 24690.194444444445], [1.68520836E12, 22432.833333333332]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6852086E12, 20568.48], [1.68520824E12, 16217.888888888889], [1.6852083E12, 20051.4], [1.6852089E12, 16073.79245283019], [1.68520884E12, 20099.763636363637], [1.68520818E12, 5982.0], [1.68520854E12, 8938.42553191489], [1.68520848E12, 17073.448275862065], [1.68520908E12, 39119.22222222222], [1.68520842E12, 34493.1], [1.68520878E12, 11437.608695652174], [1.68520872E12, 19791.2380952381], [1.68520902E12, 24840.057692307695], [1.68520896E12, 19905.945454545457], [1.68520866E12, 26183.314285714285], [1.68520836E12, 22319.090909090908]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6852086E12, 345.0357142857143], [1.68520824E12, 309.75], [1.6852083E12, 309.2], [1.6852089E12, 337.49090909090916], [1.68520884E12, 349.8545454545454], [1.68520818E12, 416.0], [1.68520854E12, 333.2857142857142], [1.68520848E12, 375.8275862068966], [1.68520842E12, 381.0769230769231], [1.68520878E12, 322.31506849315053], [1.68520872E12, 351.02325581395354], [1.68520902E12, 333.1388888888888], [1.68520896E12, 351.2413793103448], [1.68520866E12, 349.7428571428572], [1.68520836E12, 312.76923076923083]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68520908E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 309.06666666666666, "minX": 1.68520818E12, "maxY": 39119.22222222222, "series": [{"data": [[1.6852086E12, 22857.81818181818], [1.68520824E12, 17886.875000000004], [1.6852083E12, 20335.26666666667], [1.6852089E12, 17450.578947368424], [1.68520884E12, 20600.396226415094], [1.68520818E12, 6323.333333333333], [1.68520854E12, 10246.539999999999], [1.68520848E12, 15253.42857142857], [1.68520908E12, 36849.125], [1.68520842E12, 37021.63636363636], [1.68520878E12, 11653.308823529414], [1.68520872E12, 20235.55555555555], [1.68520902E12, 26115.156862745094], [1.68520896E12, 19554.607843137255], [1.68520866E12, 24689.750000000004], [1.68520836E12, 22432.583333333336]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6852086E12, 20568.08], [1.68520824E12, 16217.888888888889], [1.6852083E12, 20045.13333333333], [1.6852089E12, 16073.622641509437], [1.68520884E12, 20099.70909090909], [1.68520818E12, 5982.0], [1.68520854E12, 8938.276595744683], [1.68520848E12, 17073.275862068964], [1.68520908E12, 39119.22222222222], [1.68520842E12, 34493.1], [1.68520878E12, 11437.57971014493], [1.68520872E12, 19790.78571428572], [1.68520902E12, 24839.846153846156], [1.68520896E12, 19905.818181818184], [1.68520866E12, 26182.914285714294], [1.68520836E12, 22318.909090909092]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6852086E12, 344.92857142857144], [1.68520824E12, 309.50000000000006], [1.6852083E12, 309.06666666666666], [1.6852089E12, 337.40000000000003], [1.68520884E12, 349.7454545454546], [1.68520818E12, 412.75], [1.68520854E12, 333.0408163265306], [1.68520848E12, 375.75862068965523], [1.68520842E12, 380.99999999999994], [1.68520878E12, 322.21917808219183], [1.68520872E12, 350.95348837209303], [1.68520902E12, 333.1388888888888], [1.68520896E12, 351.2068965517241], [1.68520866E12, 349.7142857142857], [1.68520836E12, 312.76923076923083]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68520908E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68520818E12, "maxY": 202.5, "series": [{"data": [[1.6852086E12, 180.54545454545456], [1.68520824E12, 176.25], [1.6852083E12, 140.4], [1.6852089E12, 168.36842105263153], [1.68520884E12, 169.90566037735854], [1.68520818E12, 170.0], [1.68520854E12, 162.86], [1.68520848E12, 184.67857142857142], [1.68520908E12, 195.87499999999997], [1.68520842E12, 170.54545454545456], [1.68520878E12, 154.6911764705882], [1.68520872E12, 169.64444444444447], [1.68520902E12, 157.35294117647055], [1.68520896E12, 164.92156862745102], [1.68520866E12, 166.66666666666669], [1.68520836E12, 165.91666666666666]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6852086E12, 0.0], [1.68520824E12, 0.0], [1.6852083E12, 0.0], [1.6852089E12, 0.0], [1.68520884E12, 0.0], [1.68520818E12, 0.0], [1.68520854E12, 0.0], [1.68520848E12, 0.0], [1.68520908E12, 0.0], [1.68520842E12, 0.0], [1.68520878E12, 0.0], [1.68520872E12, 0.0], [1.68520902E12, 0.0], [1.68520896E12, 0.0], [1.68520866E12, 0.0], [1.68520836E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6852086E12, 163.10714285714286], [1.68520824E12, 141.5], [1.6852083E12, 154.0666666666667], [1.6852089E12, 164.85454545454547], [1.68520884E12, 164.27272727272728], [1.68520818E12, 202.5], [1.68520854E12, 162.1224489795919], [1.68520848E12, 183.06896551724137], [1.68520842E12, 195.15384615384613], [1.68520878E12, 159.16438356164386], [1.68520872E12, 173.6279069767442], [1.68520902E12, 164.08333333333331], [1.68520896E12, 166.3103448275862], [1.68520866E12, 168.54285714285714], [1.68520836E12, 163.23076923076923]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68520908E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 216.0, "minX": 1.68520818E12, "maxY": 60097.0, "series": [{"data": [[1.6852086E12, 41443.0], [1.68520824E12, 23976.0], [1.6852083E12, 22664.0], [1.6852089E12, 34706.0], [1.68520884E12, 56103.0], [1.68520818E12, 6887.0], [1.68520854E12, 40625.0], [1.68520848E12, 44305.0], [1.68520842E12, 48746.0], [1.68520878E12, 37582.0], [1.68520872E12, 52285.0], [1.68520902E12, 60097.0], [1.68520896E12, 47034.0], [1.68520866E12, 57851.0], [1.68520836E12, 31097.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6852086E12, 39620.0], [1.68520824E12, 23085.0], [1.6852083E12, 21817.2], [1.6852089E12, 23615.10000000001], [1.68520884E12, 34086.200000000004], [1.68520818E12, 6887.0], [1.68520854E12, 36795.6], [1.68520848E12, 40002.100000000006], [1.68520842E12, 44158.6], [1.68520878E12, 31871.6], [1.68520872E12, 45173.0], [1.68520902E12, 21511.7], [1.68520896E12, 26510.000000000004], [1.68520866E12, 50752.1], [1.68520836E12, 27319.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6852086E12, 41443.0], [1.68520824E12, 23976.0], [1.6852083E12, 22664.0], [1.6852089E12, 34621.85], [1.68520884E12, 56103.0], [1.68520818E12, 6887.0], [1.68520854E12, 40625.0], [1.68520848E12, 44305.0], [1.68520842E12, 48746.0], [1.68520878E12, 37582.0], [1.68520872E12, 52285.0], [1.68520902E12, 60097.0], [1.68520896E12, 46615.259999999995], [1.68520866E12, 57851.0], [1.68520836E12, 31097.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6852086E12, 41304.5], [1.68520824E12, 23926.3], [1.6852083E12, 22554.0], [1.6852089E12, 32122.299999999992], [1.68520884E12, 45152.39999999997], [1.68520818E12, 6887.0], [1.68520854E12, 38515.399999999994], [1.68520848E12, 43539.549999999996], [1.68520842E12, 47904.59999999999], [1.68520878E12, 35792.399999999994], [1.68520872E12, 47851.999999999985], [1.68520902E12, 24882.55], [1.68520896E12, 33505.6], [1.68520866E12, 56384.1], [1.68520836E12, 30595.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6852086E12, 216.0], [1.68520824E12, 232.0], [1.6852083E12, 217.0], [1.6852089E12, 218.0], [1.68520884E12, 217.0], [1.68520818E12, 330.0], [1.68520854E12, 218.0], [1.68520848E12, 223.0], [1.68520842E12, 305.0], [1.68520878E12, 220.0], [1.68520872E12, 223.0], [1.68520902E12, 218.0], [1.68520896E12, 217.0], [1.68520866E12, 221.0], [1.68520836E12, 218.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6852086E12, 459.5], [1.68520824E12, 406.0], [1.6852083E12, 8555.5], [1.6852089E12, 420.0], [1.68520884E12, 4656.0], [1.68520818E12, 468.0], [1.68520854E12, 408.0], [1.68520848E12, 14430.5], [1.68520842E12, 438.0], [1.68520878E12, 409.0], [1.68520872E12, 409.0], [1.68520902E12, 8248.5], [1.68520896E12, 498.0], [1.68520866E12, 3000.5], [1.68520836E12, 407.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68520902E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 120.0, "minX": 1.0, "maxY": 60239.0, "series": [{"data": [[1.0, 444.0], [2.0, 410.0], [4.0, 409.0], [8.0, 408.0], [5.0, 408.0], [10.0, 9264.0], [6.0, 408.0], [3.0, 7106.0], [7.0, 3651.5], [15.0, 8569.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 217.0], [1.0, 335.0], [2.0, 211.0], [8.0, 9778.5], [5.0, 266.0], [10.0, 409.0], [3.0, 305.0], [6.0, 266.0], [7.0, 120.0], [15.0, 60239.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 120.0, "minX": 1.0, "maxY": 60239.0, "series": [{"data": [[1.0, 444.0], [2.0, 410.0], [4.0, 409.0], [8.0, 408.0], [5.0, 408.0], [10.0, 9264.0], [6.0, 408.0], [3.0, 7106.0], [7.0, 3651.0], [15.0, 8568.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 217.0], [1.0, 335.0], [2.0, 211.0], [8.0, 9778.5], [5.0, 265.0], [10.0, 409.0], [3.0, 305.0], [6.0, 266.0], [7.0, 120.0], [15.0, 60239.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.68520818E12, "maxY": 2.45, "series": [{"data": [[1.6852086E12, 0.9666666666666667], [1.68520824E12, 0.4166666666666667], [1.6852083E12, 0.4666666666666667], [1.6852089E12, 1.8666666666666667], [1.68520884E12, 1.8333333333333333], [1.68520818E12, 0.11666666666666667], [1.68520854E12, 1.6166666666666667], [1.68520848E12, 0.9666666666666667], [1.68520842E12, 0.45], [1.68520878E12, 2.45], [1.68520872E12, 1.3833333333333333], [1.68520902E12, 1.2333333333333334], [1.68520896E12, 1.9166666666666667], [1.68520866E12, 1.15], [1.68520836E12, 0.43333333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68520902E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68520818E12, "maxY": 1.8833333333333333, "series": [{"data": [[1.6852086E12, 0.7333333333333333], [1.68520824E12, 0.35], [1.6852083E12, 0.5], [1.6852089E12, 1.8], [1.68520884E12, 1.45], [1.68520818E12, 0.1], [1.68520854E12, 0.5166666666666667], [1.68520848E12, 0.4666666666666667], [1.68520842E12, 0.38333333333333336], [1.68520878E12, 1.35], [1.68520872E12, 1.1166666666666667], [1.68520902E12, 1.3], [1.68520896E12, 1.8833333333333333], [1.68520866E12, 1.1666666666666667], [1.68520836E12, 0.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6852086E12, 0.15], [1.68520908E12, 0.13333333333333333], [1.68520878E12, 1.0166666666666666], [1.68520872E12, 0.3], [1.68520884E12, 0.3333333333333333], [1.68520854E12, 1.0833333333333333], [1.68520848E12, 0.5]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68520908E12, 0.016666666666666666], [1.68520884E12, 0.05], [1.68520902E12, 0.16666666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68520908E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68520818E12, "maxY": 0.9666666666666667, "series": [{"data": [[1.6852086E12, 0.38333333333333336], [1.68520824E12, 0.2], [1.6852083E12, 0.25], [1.6852089E12, 0.9166666666666666], [1.68520884E12, 0.7166666666666667], [1.68520818E12, 0.06666666666666667], [1.68520854E12, 0.2833333333333333], [1.68520848E12, 0.23333333333333334], [1.68520842E12, 0.21666666666666667], [1.68520878E12, 0.75], [1.68520872E12, 0.5833333333333334], [1.68520902E12, 0.6], [1.68520896E12, 0.9666666666666667], [1.68520866E12, 0.5833333333333334], [1.68520836E12, 0.21666666666666667]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.6852086E12, 0.08333333333333333], [1.68520878E12, 0.4666666666666667], [1.68520872E12, 0.13333333333333333], [1.68520884E12, 0.2], [1.68520854E12, 0.5333333333333333], [1.68520848E12, 0.25]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.6852086E12, 0.06666666666666667], [1.68520908E12, 0.15], [1.68520878E12, 0.55], [1.68520872E12, 0.16666666666666666], [1.68520884E12, 0.18333333333333332], [1.68520854E12, 0.55], [1.68520902E12, 0.16666666666666666], [1.68520848E12, 0.25]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.6852086E12, 0.18333333333333332], [1.68520824E12, 0.13333333333333333], [1.6852083E12, 0.25], [1.6852089E12, 0.9166666666666666], [1.68520884E12, 0.45], [1.68520818E12, 0.05], [1.68520854E12, 0.06666666666666667], [1.68520848E12, 0.18333333333333332], [1.68520842E12, 0.18333333333333332], [1.68520878E12, 0.35], [1.68520872E12, 0.5], [1.68520902E12, 0.6666666666666666], [1.68520896E12, 0.85], [1.68520866E12, 0.5666666666666667], [1.68520836E12, 0.2]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.6852086E12, 0.18333333333333332], [1.68520908E12, 0.13333333333333333], [1.68520878E12, 0.7833333333333333], [1.68520872E12, 0.25], [1.6852089E12, 0.03333333333333333], [1.68520884E12, 0.43333333333333335], [1.68520854E12, 0.7666666666666667], [1.68520902E12, 0.18333333333333332], [1.68520848E12, 0.2833333333333333], [1.68520866E12, 0.03333333333333333]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.6852086E12, 0.35], [1.68520824E12, 0.15], [1.6852083E12, 0.25], [1.6852089E12, 0.8833333333333333], [1.68520884E12, 0.7333333333333333], [1.68520818E12, 0.03333333333333333], [1.68520854E12, 0.23333333333333334], [1.68520848E12, 0.23333333333333334], [1.68520842E12, 0.16666666666666666], [1.68520878E12, 0.6], [1.68520872E12, 0.5333333333333333], [1.68520902E12, 0.7], [1.68520896E12, 0.9166666666666666], [1.68520866E12, 0.5833333333333334], [1.68520836E12, 0.18333333333333332]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68520908E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68520818E12, "maxY": 2.7333333333333334, "series": [{"data": [[1.6852086E12, 0.9166666666666666], [1.68520824E12, 0.48333333333333334], [1.6852083E12, 0.75], [1.6852089E12, 2.716666666666667], [1.68520884E12, 1.9], [1.68520818E12, 0.15], [1.68520854E12, 0.5833333333333334], [1.68520848E12, 0.65], [1.68520842E12, 0.5666666666666667], [1.68520878E12, 1.7], [1.68520872E12, 1.6166666666666667], [1.68520902E12, 1.9666666666666666], [1.68520896E12, 2.7333333333333334], [1.68520866E12, 1.7333333333333334], [1.68520836E12, 0.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6852086E12, 0.3333333333333333], [1.68520908E12, 0.2833333333333333], [1.68520878E12, 1.8], [1.68520872E12, 0.55], [1.6852089E12, 0.03333333333333333], [1.68520884E12, 0.8166666666666667], [1.68520854E12, 1.85], [1.68520902E12, 0.35], [1.68520848E12, 0.7833333333333333], [1.68520866E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68520908E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

