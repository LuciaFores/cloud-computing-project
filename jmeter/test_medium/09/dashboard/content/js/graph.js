/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 104.0, "minX": 0.0, "maxY": 60740.0, "series": [{"data": [[0.0, 209.0], [0.1, 211.0], [0.2, 211.0], [0.3, 211.0], [0.4, 211.0], [0.5, 211.0], [0.6, 212.0], [0.7, 212.0], [0.8, 212.0], [0.9, 213.0], [1.0, 213.0], [1.1, 213.0], [1.2, 213.0], [1.3, 214.0], [1.4, 214.0], [1.5, 215.0], [1.6, 215.0], [1.7, 216.0], [1.8, 305.0], [1.9, 312.0], [2.0, 314.0], [2.1, 314.0], [2.2, 314.0], [2.3, 315.0], [2.4, 315.0], [2.5, 315.0], [2.6, 315.0], [2.7, 315.0], [2.8, 315.0], [2.9, 315.0], [3.0, 315.0], [3.1, 315.0], [3.2, 315.0], [3.3, 315.0], [3.4, 315.0], [3.5, 315.0], [3.6, 315.0], [3.7, 315.0], [3.8, 315.0], [3.9, 315.0], [4.0, 316.0], [4.1, 316.0], [4.2, 316.0], [4.3, 316.0], [4.4, 316.0], [4.5, 316.0], [4.6, 316.0], [4.7, 316.0], [4.8, 316.0], [4.9, 316.0], [5.0, 316.0], [5.1, 316.0], [5.2, 316.0], [5.3, 316.0], [5.4, 316.0], [5.5, 316.0], [5.6, 316.0], [5.7, 316.0], [5.8, 317.0], [5.9, 317.0], [6.0, 317.0], [6.1, 317.0], [6.2, 317.0], [6.3, 317.0], [6.4, 317.0], [6.5, 317.0], [6.6, 317.0], [6.7, 317.0], [6.8, 317.0], [6.9, 317.0], [7.0, 317.0], [7.1, 317.0], [7.2, 317.0], [7.3, 317.0], [7.4, 317.0], [7.5, 317.0], [7.6, 317.0], [7.7, 317.0], [7.8, 317.0], [7.9, 317.0], [8.0, 317.0], [8.1, 317.0], [8.2, 317.0], [8.3, 317.0], [8.4, 317.0], [8.5, 317.0], [8.6, 317.0], [8.7, 317.0], [8.8, 317.0], [8.9, 317.0], [9.0, 317.0], [9.1, 317.0], [9.2, 317.0], [9.3, 317.0], [9.4, 317.0], [9.5, 317.0], [9.6, 317.0], [9.7, 317.0], [9.8, 317.0], [9.9, 317.0], [10.0, 317.0], [10.1, 317.0], [10.2, 317.0], [10.3, 317.0], [10.4, 317.0], [10.5, 317.0], [10.6, 317.0], [10.7, 317.0], [10.8, 318.0], [10.9, 318.0], [11.0, 318.0], [11.1, 318.0], [11.2, 318.0], [11.3, 318.0], [11.4, 318.0], [11.5, 318.0], [11.6, 318.0], [11.7, 318.0], [11.8, 318.0], [11.9, 318.0], [12.0, 318.0], [12.1, 318.0], [12.2, 318.0], [12.3, 318.0], [12.4, 318.0], [12.5, 318.0], [12.6, 318.0], [12.7, 318.0], [12.8, 318.0], [12.9, 318.0], [13.0, 318.0], [13.1, 318.0], [13.2, 318.0], [13.3, 318.0], [13.4, 318.0], [13.5, 318.0], [13.6, 318.0], [13.7, 318.0], [13.8, 318.0], [13.9, 318.0], [14.0, 318.0], [14.1, 318.0], [14.2, 318.0], [14.3, 318.0], [14.4, 318.0], [14.5, 318.0], [14.6, 318.0], [14.7, 318.0], [14.8, 318.0], [14.9, 318.0], [15.0, 318.0], [15.1, 318.0], [15.2, 318.0], [15.3, 318.0], [15.4, 318.0], [15.5, 318.0], [15.6, 318.0], [15.7, 318.0], [15.8, 318.0], [15.9, 318.0], [16.0, 318.0], [16.1, 318.0], [16.2, 318.0], [16.3, 318.0], [16.4, 318.0], [16.5, 318.0], [16.6, 318.0], [16.7, 318.0], [16.8, 318.0], [16.9, 318.0], [17.0, 318.0], [17.1, 318.0], [17.2, 318.0], [17.3, 318.0], [17.4, 318.0], [17.5, 318.0], [17.6, 318.0], [17.7, 318.0], [17.8, 318.0], [17.9, 318.0], [18.0, 318.0], [18.1, 318.0], [18.2, 318.0], [18.3, 318.0], [18.4, 318.0], [18.5, 318.0], [18.6, 318.0], [18.7, 318.0], [18.8, 318.0], [18.9, 319.0], [19.0, 319.0], [19.1, 319.0], [19.2, 319.0], [19.3, 319.0], [19.4, 319.0], [19.5, 319.0], [19.6, 319.0], [19.7, 319.0], [19.8, 319.0], [19.9, 319.0], [20.0, 319.0], [20.1, 319.0], [20.2, 319.0], [20.3, 319.0], [20.4, 319.0], [20.5, 319.0], [20.6, 319.0], [20.7, 319.0], [20.8, 319.0], [20.9, 319.0], [21.0, 319.0], [21.1, 319.0], [21.2, 319.0], [21.3, 319.0], [21.4, 319.0], [21.5, 319.0], [21.6, 319.0], [21.7, 319.0], [21.8, 319.0], [21.9, 319.0], [22.0, 319.0], [22.1, 319.0], [22.2, 319.0], [22.3, 319.0], [22.4, 319.0], [22.5, 319.0], [22.6, 319.0], [22.7, 319.0], [22.8, 319.0], [22.9, 319.0], [23.0, 319.0], [23.1, 319.0], [23.2, 319.0], [23.3, 319.0], [23.4, 319.0], [23.5, 319.0], [23.6, 319.0], [23.7, 319.0], [23.8, 319.0], [23.9, 319.0], [24.0, 319.0], [24.1, 319.0], [24.2, 319.0], [24.3, 319.0], [24.4, 319.0], [24.5, 319.0], [24.6, 319.0], [24.7, 319.0], [24.8, 319.0], [24.9, 319.0], [25.0, 319.0], [25.1, 319.0], [25.2, 319.0], [25.3, 319.0], [25.4, 319.0], [25.5, 319.0], [25.6, 319.0], [25.7, 319.0], [25.8, 319.0], [25.9, 319.0], [26.0, 319.0], [26.1, 319.0], [26.2, 319.0], [26.3, 319.0], [26.4, 319.0], [26.5, 319.0], [26.6, 319.0], [26.7, 319.0], [26.8, 319.0], [26.9, 319.0], [27.0, 319.0], [27.1, 319.0], [27.2, 319.0], [27.3, 319.0], [27.4, 319.0], [27.5, 319.0], [27.6, 319.0], [27.7, 319.0], [27.8, 319.0], [27.9, 319.0], [28.0, 319.0], [28.1, 319.0], [28.2, 319.0], [28.3, 319.0], [28.4, 319.0], [28.5, 319.0], [28.6, 319.0], [28.7, 319.0], [28.8, 319.0], [28.9, 319.0], [29.0, 319.0], [29.1, 319.0], [29.2, 319.0], [29.3, 319.0], [29.4, 320.0], [29.5, 320.0], [29.6, 320.0], [29.7, 320.0], [29.8, 320.0], [29.9, 320.0], [30.0, 320.0], [30.1, 320.0], [30.2, 320.0], [30.3, 320.0], [30.4, 320.0], [30.5, 320.0], [30.6, 320.0], [30.7, 320.0], [30.8, 320.0], [30.9, 320.0], [31.0, 320.0], [31.1, 320.0], [31.2, 320.0], [31.3, 320.0], [31.4, 320.0], [31.5, 320.0], [31.6, 320.0], [31.7, 320.0], [31.8, 320.0], [31.9, 320.0], [32.0, 320.0], [32.1, 320.0], [32.2, 320.0], [32.3, 320.0], [32.4, 320.0], [32.5, 320.0], [32.6, 320.0], [32.7, 320.0], [32.8, 320.0], [32.9, 320.0], [33.0, 320.0], [33.1, 320.0], [33.2, 320.0], [33.3, 320.0], [33.4, 320.0], [33.5, 320.0], [33.6, 320.0], [33.7, 320.0], [33.8, 320.0], [33.9, 320.0], [34.0, 320.0], [34.1, 320.0], [34.2, 320.0], [34.3, 320.0], [34.4, 320.0], [34.5, 320.0], [34.6, 320.0], [34.7, 320.0], [34.8, 320.0], [34.9, 320.0], [35.0, 320.0], [35.1, 320.0], [35.2, 320.0], [35.3, 320.0], [35.4, 320.0], [35.5, 320.0], [35.6, 320.0], [35.7, 320.0], [35.8, 320.0], [35.9, 320.0], [36.0, 320.0], [36.1, 320.0], [36.2, 320.0], [36.3, 320.0], [36.4, 320.0], [36.5, 320.0], [36.6, 320.0], [36.7, 320.0], [36.8, 320.0], [36.9, 320.0], [37.0, 320.0], [37.1, 320.0], [37.2, 320.0], [37.3, 320.0], [37.4, 320.0], [37.5, 320.0], [37.6, 320.0], [37.7, 320.0], [37.8, 320.0], [37.9, 320.0], [38.0, 320.0], [38.1, 320.0], [38.2, 320.0], [38.3, 320.0], [38.4, 320.0], [38.5, 321.0], [38.6, 321.0], [38.7, 321.0], [38.8, 321.0], [38.9, 321.0], [39.0, 321.0], [39.1, 321.0], [39.2, 321.0], [39.3, 321.0], [39.4, 321.0], [39.5, 321.0], [39.6, 321.0], [39.7, 321.0], [39.8, 321.0], [39.9, 321.0], [40.0, 321.0], [40.1, 321.0], [40.2, 321.0], [40.3, 321.0], [40.4, 321.0], [40.5, 321.0], [40.6, 321.0], [40.7, 321.0], [40.8, 321.0], [40.9, 321.0], [41.0, 321.0], [41.1, 321.0], [41.2, 321.0], [41.3, 321.0], [41.4, 321.0], [41.5, 321.0], [41.6, 321.0], [41.7, 321.0], [41.8, 321.0], [41.9, 321.0], [42.0, 321.0], [42.1, 321.0], [42.2, 321.0], [42.3, 321.0], [42.4, 321.0], [42.5, 321.0], [42.6, 321.0], [42.7, 321.0], [42.8, 321.0], [42.9, 321.0], [43.0, 321.0], [43.1, 321.0], [43.2, 321.0], [43.3, 321.0], [43.4, 321.0], [43.5, 321.0], [43.6, 321.0], [43.7, 321.0], [43.8, 321.0], [43.9, 321.0], [44.0, 321.0], [44.1, 321.0], [44.2, 321.0], [44.3, 321.0], [44.4, 321.0], [44.5, 321.0], [44.6, 321.0], [44.7, 321.0], [44.8, 321.0], [44.9, 321.0], [45.0, 321.0], [45.1, 321.0], [45.2, 322.0], [45.3, 322.0], [45.4, 322.0], [45.5, 322.0], [45.6, 322.0], [45.7, 322.0], [45.8, 322.0], [45.9, 322.0], [46.0, 322.0], [46.1, 322.0], [46.2, 322.0], [46.3, 322.0], [46.4, 322.0], [46.5, 322.0], [46.6, 322.0], [46.7, 322.0], [46.8, 322.0], [46.9, 322.0], [47.0, 322.0], [47.1, 322.0], [47.2, 322.0], [47.3, 322.0], [47.4, 322.0], [47.5, 322.0], [47.6, 322.0], [47.7, 322.0], [47.8, 322.0], [47.9, 322.0], [48.0, 322.0], [48.1, 322.0], [48.2, 322.0], [48.3, 322.0], [48.4, 322.0], [48.5, 322.0], [48.6, 322.0], [48.7, 322.0], [48.8, 322.0], [48.9, 322.0], [49.0, 322.0], [49.1, 322.0], [49.2, 322.0], [49.3, 322.0], [49.4, 322.0], [49.5, 322.0], [49.6, 322.0], [49.7, 322.0], [49.8, 322.0], [49.9, 322.0], [50.0, 322.0], [50.1, 322.0], [50.2, 322.0], [50.3, 322.0], [50.4, 323.0], [50.5, 323.0], [50.6, 323.0], [50.7, 323.0], [50.8, 323.0], [50.9, 323.0], [51.0, 323.0], [51.1, 323.0], [51.2, 323.0], [51.3, 323.0], [51.4, 323.0], [51.5, 323.0], [51.6, 323.0], [51.7, 323.0], [51.8, 323.0], [51.9, 323.0], [52.0, 323.0], [52.1, 323.0], [52.2, 323.0], [52.3, 323.0], [52.4, 323.0], [52.5, 323.0], [52.6, 323.0], [52.7, 323.0], [52.8, 323.0], [52.9, 323.0], [53.0, 323.0], [53.1, 323.0], [53.2, 323.0], [53.3, 323.0], [53.4, 323.0], [53.5, 323.0], [53.6, 323.0], [53.7, 323.0], [53.8, 323.0], [53.9, 324.0], [54.0, 324.0], [54.1, 324.0], [54.2, 324.0], [54.3, 324.0], [54.4, 324.0], [54.5, 324.0], [54.6, 324.0], [54.7, 324.0], [54.8, 324.0], [54.9, 324.0], [55.0, 324.0], [55.1, 324.0], [55.2, 324.0], [55.3, 324.0], [55.4, 324.0], [55.5, 324.0], [55.6, 325.0], [55.7, 325.0], [55.8, 325.0], [55.9, 325.0], [56.0, 325.0], [56.1, 325.0], [56.2, 325.0], [56.3, 325.0], [56.4, 325.0], [56.5, 326.0], [56.6, 326.0], [56.7, 326.0], [56.8, 326.0], [56.9, 326.0], [57.0, 327.0], [57.1, 327.0], [57.2, 327.0], [57.3, 327.0], [57.4, 328.0], [57.5, 328.0], [57.6, 329.0], [57.7, 329.0], [57.8, 329.0], [57.9, 330.0], [58.0, 330.0], [58.1, 330.0], [58.2, 330.0], [58.3, 330.0], [58.4, 330.0], [58.5, 330.0], [58.6, 331.0], [58.7, 331.0], [58.8, 331.0], [58.9, 332.0], [59.0, 332.0], [59.1, 332.0], [59.2, 333.0], [59.3, 333.0], [59.4, 333.0], [59.5, 334.0], [59.6, 334.0], [59.7, 334.0], [59.8, 334.0], [59.9, 335.0], [60.0, 335.0], [60.1, 335.0], [60.2, 336.0], [60.3, 336.0], [60.4, 336.0], [60.5, 336.0], [60.6, 337.0], [60.7, 337.0], [60.8, 337.0], [60.9, 338.0], [61.0, 338.0], [61.1, 339.0], [61.2, 339.0], [61.3, 339.0], [61.4, 340.0], [61.5, 340.0], [61.6, 340.0], [61.7, 340.0], [61.8, 341.0], [61.9, 341.0], [62.0, 341.0], [62.1, 341.0], [62.2, 341.0], [62.3, 342.0], [62.4, 342.0], [62.5, 342.0], [62.6, 342.0], [62.7, 342.0], [62.8, 342.0], [62.9, 343.0], [63.0, 343.0], [63.1, 344.0], [63.2, 344.0], [63.3, 344.0], [63.4, 344.0], [63.5, 344.0], [63.6, 345.0], [63.7, 345.0], [63.8, 346.0], [63.9, 346.0], [64.0, 346.0], [64.1, 346.0], [64.2, 346.0], [64.3, 347.0], [64.4, 348.0], [64.5, 350.0], [64.6, 350.0], [64.7, 352.0], [64.8, 352.0], [64.9, 352.0], [65.0, 352.0], [65.1, 353.0], [65.2, 353.0], [65.3, 354.0], [65.4, 354.0], [65.5, 355.0], [65.6, 355.0], [65.7, 355.0], [65.8, 355.0], [65.9, 356.0], [66.0, 356.0], [66.1, 357.0], [66.2, 358.0], [66.3, 359.0], [66.4, 361.0], [66.5, 361.0], [66.6, 362.0], [66.7, 362.0], [66.8, 362.0], [66.9, 363.0], [67.0, 363.0], [67.1, 364.0], [67.2, 366.0], [67.3, 367.0], [67.4, 368.0], [67.5, 370.0], [67.6, 371.0], [67.7, 374.0], [67.8, 374.0], [67.9, 375.0], [68.0, 378.0], [68.1, 379.0], [68.2, 381.0], [68.3, 382.0], [68.4, 382.0], [68.5, 383.0], [68.6, 384.0], [68.7, 388.0], [68.8, 391.0], [68.9, 396.0], [69.0, 405.0], [69.1, 407.0], [69.2, 408.0], [69.3, 408.0], [69.4, 409.0], [69.5, 409.0], [69.6, 412.0], [69.7, 422.0], [69.8, 424.0], [69.9, 436.0], [70.0, 453.0], [70.1, 454.0], [70.2, 461.0], [70.3, 465.0], [70.4, 466.0], [70.5, 472.0], [70.6, 474.0], [70.7, 480.0], [70.8, 487.0], [70.9, 488.0], [71.0, 493.0], [71.1, 499.0], [71.2, 507.0], [71.3, 510.0], [71.4, 512.0], [71.5, 513.0], [71.6, 514.0], [71.7, 514.0], [71.8, 515.0], [71.9, 515.0], [72.0, 515.0], [72.1, 516.0], [72.2, 516.0], [72.3, 516.0], [72.4, 516.0], [72.5, 516.0], [72.6, 516.0], [72.7, 517.0], [72.8, 518.0], [72.9, 520.0], [73.0, 520.0], [73.1, 520.0], [73.2, 522.0], [73.3, 523.0], [73.4, 524.0], [73.5, 526.0], [73.6, 526.0], [73.7, 527.0], [73.8, 529.0], [73.9, 533.0], [74.0, 533.0], [74.1, 535.0], [74.2, 536.0], [74.3, 539.0], [74.4, 544.0], [74.5, 546.0], [74.6, 548.0], [74.7, 549.0], [74.8, 550.0], [74.9, 556.0], [75.0, 557.0], [75.1, 558.0], [75.2, 560.0], [75.3, 560.0], [75.4, 561.0], [75.5, 567.0], [75.6, 568.0], [75.7, 569.0], [75.8, 572.0], [75.9, 581.0], [76.0, 586.0], [76.1, 590.0], [76.2, 593.0], [76.3, 600.0], [76.4, 607.0], [76.5, 610.0], [76.6, 614.0], [76.7, 634.0], [76.8, 700.0], [76.9, 840.0], [77.0, 1878.0], [77.1, 1913.0], [77.2, 2145.0], [77.3, 3217.0], [77.4, 3881.0], [77.5, 4229.0], [77.6, 4634.0], [77.7, 4904.0], [77.8, 5496.0], [77.9, 5752.0], [78.0, 5937.0], [78.1, 6681.0], [78.2, 7208.0], [78.3, 7430.0], [78.4, 7461.0], [78.5, 7585.0], [78.6, 7733.0], [78.7, 7937.0], [78.8, 8526.0], [78.9, 8759.0], [79.0, 8776.0], [79.1, 8808.0], [79.2, 9018.0], [79.3, 9108.0], [79.4, 9222.0], [79.5, 9519.0], [79.6, 9666.0], [79.7, 9742.0], [79.8, 9912.0], [79.9, 10049.0], [80.0, 10179.0], [80.1, 10201.0], [80.2, 10360.0], [80.3, 10477.0], [80.4, 10517.0], [80.5, 10597.0], [80.6, 10872.0], [80.7, 10930.0], [80.8, 10998.0], [80.9, 11070.0], [81.0, 11258.0], [81.1, 11400.0], [81.2, 11686.0], [81.3, 11745.0], [81.4, 11787.0], [81.5, 12974.0], [81.6, 13803.0], [81.7, 13848.0], [81.8, 14849.0], [81.9, 14862.0], [82.0, 14918.0], [82.1, 14968.0], [82.2, 15339.0], [82.3, 15496.0], [82.4, 15535.0], [82.5, 15897.0], [82.6, 16138.0], [82.7, 16328.0], [82.8, 16376.0], [82.9, 16560.0], [83.0, 16758.0], [83.1, 17029.0], [83.2, 17176.0], [83.3, 17600.0], [83.4, 17621.0], [83.5, 17798.0], [83.6, 18120.0], [83.7, 18148.0], [83.8, 18179.0], [83.9, 18389.0], [84.0, 18473.0], [84.1, 18525.0], [84.2, 19778.0], [84.3, 19938.0], [84.4, 20082.0], [84.5, 20528.0], [84.6, 20821.0], [84.7, 20890.0], [84.8, 20956.0], [84.9, 21004.0], [85.0, 21568.0], [85.1, 21851.0], [85.2, 21928.0], [85.3, 21937.0], [85.4, 22075.0], [85.5, 22155.0], [85.6, 22188.0], [85.7, 22517.0], [85.8, 22536.0], [85.9, 22574.0], [86.0, 22867.0], [86.1, 22985.0], [86.2, 23053.0], [86.3, 23213.0], [86.4, 23261.0], [86.5, 23274.0], [86.6, 23446.0], [86.7, 23462.0], [86.8, 23592.0], [86.9, 23630.0], [87.0, 23664.0], [87.1, 23681.0], [87.2, 23797.0], [87.3, 23811.0], [87.4, 23822.0], [87.5, 24372.0], [87.6, 24443.0], [87.7, 24774.0], [87.8, 24876.0], [87.9, 25050.0], [88.0, 25131.0], [88.1, 25188.0], [88.2, 25201.0], [88.3, 25383.0], [88.4, 26058.0], [88.5, 26206.0], [88.6, 26611.0], [88.7, 26663.0], [88.8, 26686.0], [88.9, 26804.0], [89.0, 26903.0], [89.1, 26990.0], [89.2, 27074.0], [89.3, 27321.0], [89.4, 27340.0], [89.5, 27688.0], [89.6, 27863.0], [89.7, 27875.0], [89.8, 28286.0], [89.9, 28921.0], [90.0, 29991.0], [90.1, 31113.0], [90.2, 31824.0], [90.3, 32229.0], [90.4, 32399.0], [90.5, 32975.0], [90.6, 33404.0], [90.7, 33997.0], [90.8, 34448.0], [90.9, 34450.0], [91.0, 34472.0], [91.1, 34964.0], [91.2, 35019.0], [91.3, 35257.0], [91.4, 35398.0], [91.5, 36665.0], [91.6, 37351.0], [91.7, 37400.0], [91.8, 37499.0], [91.9, 37641.0], [92.0, 37784.0], [92.1, 38270.0], [92.2, 38306.0], [92.3, 39494.0], [92.4, 39611.0], [92.5, 39855.0], [92.6, 40073.0], [92.7, 40579.0], [92.8, 40882.0], [92.9, 41664.0], [93.0, 42195.0], [93.1, 42195.0], [93.2, 42237.0], [93.3, 42557.0], [93.4, 42700.0], [93.5, 42810.0], [93.6, 42895.0], [93.7, 43190.0], [93.8, 43817.0], [93.9, 44824.0], [94.0, 45158.0], [94.1, 45251.0], [94.2, 45272.0], [94.3, 46480.0], [94.4, 46547.0], [94.5, 46881.0], [94.6, 47710.0], [94.7, 47810.0], [94.8, 47882.0], [94.9, 47951.0], [95.0, 49264.0], [95.1, 50085.0], [95.2, 50219.0], [95.3, 50561.0], [95.4, 52908.0], [95.5, 54331.0], [95.6, 54856.0], [95.7, 55644.0], [95.8, 56229.0], [95.9, 57905.0], [96.0, 58770.0], [96.1, 60341.0], [96.2, 60343.0], [96.3, 60373.0], [96.4, 60414.0], [96.5, 60428.0], [96.6, 60445.0], [96.7, 60465.0], [96.8, 60469.0], [96.9, 60476.0], [97.0, 60495.0], [97.1, 60499.0], [97.2, 60514.0], [97.3, 60518.0], [97.4, 60529.0], [97.5, 60538.0], [97.6, 60539.0], [97.7, 60541.0], [97.8, 60547.0], [97.9, 60549.0], [98.0, 60555.0], [98.1, 60559.0], [98.2, 60564.0], [98.3, 60565.0], [98.4, 60572.0], [98.5, 60576.0], [98.6, 60577.0], [98.7, 60587.0], [98.8, 60595.0], [98.9, 60597.0], [99.0, 60601.0], [99.1, 60603.0], [99.2, 60616.0], [99.3, 60626.0], [99.4, 60629.0], [99.5, 60649.0], [99.6, 60665.0], [99.7, 60667.0], [99.8, 60701.0], [99.9, 60737.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 104.0], [0.1, 104.0], [0.2, 104.0], [0.3, 104.0], [0.4, 105.0], [0.5, 105.0], [0.6, 105.0], [0.7, 105.0], [0.8, 105.0], [0.9, 105.0], [1.0, 105.0], [1.1, 105.0], [1.2, 105.0], [1.3, 105.0], [1.4, 105.0], [1.5, 105.0], [1.6, 105.0], [1.7, 105.0], [1.8, 105.0], [1.9, 105.0], [2.0, 105.0], [2.1, 105.0], [2.2, 105.0], [2.3, 105.0], [2.4, 105.0], [2.5, 105.0], [2.6, 105.0], [2.7, 105.0], [2.8, 105.0], [2.9, 105.0], [3.0, 105.0], [3.1, 105.0], [3.2, 105.0], [3.3, 105.0], [3.4, 105.0], [3.5, 105.0], [3.6, 105.0], [3.7, 105.0], [3.8, 105.0], [3.9, 105.0], [4.0, 105.0], [4.1, 105.0], [4.2, 105.0], [4.3, 105.0], [4.4, 105.0], [4.5, 105.0], [4.6, 105.0], [4.7, 106.0], [4.8, 106.0], [4.9, 106.0], [5.0, 106.0], [5.1, 106.0], [5.2, 106.0], [5.3, 106.0], [5.4, 106.0], [5.5, 106.0], [5.6, 106.0], [5.7, 106.0], [5.8, 106.0], [5.9, 106.0], [6.0, 106.0], [6.1, 106.0], [6.2, 106.0], [6.3, 106.0], [6.4, 106.0], [6.5, 106.0], [6.6, 106.0], [6.7, 106.0], [6.8, 106.0], [6.9, 106.0], [7.0, 106.0], [7.1, 106.0], [7.2, 106.0], [7.3, 106.0], [7.4, 106.0], [7.5, 106.0], [7.6, 106.0], [7.7, 106.0], [7.8, 106.0], [7.9, 106.0], [8.0, 106.0], [8.1, 106.0], [8.2, 106.0], [8.3, 106.0], [8.4, 106.0], [8.5, 106.0], [8.6, 106.0], [8.7, 106.0], [8.8, 106.0], [8.9, 106.0], [9.0, 106.0], [9.1, 106.0], [9.2, 106.0], [9.3, 106.0], [9.4, 106.0], [9.5, 106.0], [9.6, 106.0], [9.7, 106.0], [9.8, 106.0], [9.9, 106.0], [10.0, 106.0], [10.1, 106.0], [10.2, 106.0], [10.3, 106.0], [10.4, 106.0], [10.5, 106.0], [10.6, 106.0], [10.7, 106.0], [10.8, 106.0], [10.9, 106.0], [11.0, 106.0], [11.1, 106.0], [11.2, 106.0], [11.3, 106.0], [11.4, 106.0], [11.5, 106.0], [11.6, 106.0], [11.7, 106.0], [11.8, 106.0], [11.9, 106.0], [12.0, 106.0], [12.1, 106.0], [12.2, 106.0], [12.3, 106.0], [12.4, 106.0], [12.5, 106.0], [12.6, 106.0], [12.7, 106.0], [12.8, 106.0], [12.9, 106.0], [13.0, 106.0], [13.1, 106.0], [13.2, 106.0], [13.3, 106.0], [13.4, 106.0], [13.5, 106.0], [13.6, 106.0], [13.7, 106.0], [13.8, 106.0], [13.9, 106.0], [14.0, 106.0], [14.1, 106.0], [14.2, 106.0], [14.3, 106.0], [14.4, 106.0], [14.5, 106.0], [14.6, 106.0], [14.7, 106.0], [14.8, 106.0], [14.9, 106.0], [15.0, 106.0], [15.1, 106.0], [15.2, 106.0], [15.3, 106.0], [15.4, 106.0], [15.5, 106.0], [15.6, 106.0], [15.7, 106.0], [15.8, 106.0], [15.9, 106.0], [16.0, 106.0], [16.1, 106.0], [16.2, 106.0], [16.3, 106.0], [16.4, 106.0], [16.5, 106.0], [16.6, 106.0], [16.7, 106.0], [16.8, 106.0], [16.9, 107.0], [17.0, 107.0], [17.1, 107.0], [17.2, 107.0], [17.3, 107.0], [17.4, 107.0], [17.5, 107.0], [17.6, 107.0], [17.7, 107.0], [17.8, 107.0], [17.9, 107.0], [18.0, 107.0], [18.1, 107.0], [18.2, 107.0], [18.3, 107.0], [18.4, 107.0], [18.5, 107.0], [18.6, 107.0], [18.7, 107.0], [18.8, 107.0], [18.9, 107.0], [19.0, 107.0], [19.1, 107.0], [19.2, 107.0], [19.3, 107.0], [19.4, 107.0], [19.5, 107.0], [19.6, 107.0], [19.7, 107.0], [19.8, 107.0], [19.9, 107.0], [20.0, 107.0], [20.1, 107.0], [20.2, 107.0], [20.3, 107.0], [20.4, 107.0], [20.5, 107.0], [20.6, 107.0], [20.7, 107.0], [20.8, 107.0], [20.9, 107.0], [21.0, 107.0], [21.1, 107.0], [21.2, 107.0], [21.3, 107.0], [21.4, 107.0], [21.5, 107.0], [21.6, 107.0], [21.7, 107.0], [21.8, 107.0], [21.9, 107.0], [22.0, 107.0], [22.1, 107.0], [22.2, 107.0], [22.3, 107.0], [22.4, 107.0], [22.5, 107.0], [22.6, 107.0], [22.7, 107.0], [22.8, 107.0], [22.9, 107.0], [23.0, 107.0], [23.1, 107.0], [23.2, 107.0], [23.3, 107.0], [23.4, 107.0], [23.5, 107.0], [23.6, 107.0], [23.7, 107.0], [23.8, 107.0], [23.9, 107.0], [24.0, 107.0], [24.1, 107.0], [24.2, 107.0], [24.3, 107.0], [24.4, 107.0], [24.5, 107.0], [24.6, 107.0], [24.7, 107.0], [24.8, 107.0], [24.9, 107.0], [25.0, 107.0], [25.1, 107.0], [25.2, 107.0], [25.3, 107.0], [25.4, 107.0], [25.5, 107.0], [25.6, 107.0], [25.7, 107.0], [25.8, 107.0], [25.9, 107.0], [26.0, 107.0], [26.1, 107.0], [26.2, 107.0], [26.3, 107.0], [26.4, 107.0], [26.5, 107.0], [26.6, 107.0], [26.7, 107.0], [26.8, 107.0], [26.9, 107.0], [27.0, 107.0], [27.1, 107.0], [27.2, 107.0], [27.3, 107.0], [27.4, 107.0], [27.5, 107.0], [27.6, 107.0], [27.7, 107.0], [27.8, 107.0], [27.9, 107.0], [28.0, 107.0], [28.1, 107.0], [28.2, 107.0], [28.3, 107.0], [28.4, 107.0], [28.5, 107.0], [28.6, 107.0], [28.7, 107.0], [28.8, 107.0], [28.9, 107.0], [29.0, 107.0], [29.1, 107.0], [29.2, 107.0], [29.3, 107.0], [29.4, 107.0], [29.5, 107.0], [29.6, 107.0], [29.7, 107.0], [29.8, 107.0], [29.9, 107.0], [30.0, 107.0], [30.1, 107.0], [30.2, 107.0], [30.3, 107.0], [30.4, 107.0], [30.5, 107.0], [30.6, 107.0], [30.7, 107.0], [30.8, 107.0], [30.9, 107.0], [31.0, 107.0], [31.1, 107.0], [31.2, 107.0], [31.3, 107.0], [31.4, 107.0], [31.5, 107.0], [31.6, 107.0], [31.7, 107.0], [31.8, 107.0], [31.9, 107.0], [32.0, 107.0], [32.1, 107.0], [32.2, 107.0], [32.3, 107.0], [32.4, 107.0], [32.5, 107.0], [32.6, 107.0], [32.7, 107.0], [32.8, 107.0], [32.9, 107.0], [33.0, 107.0], [33.1, 107.0], [33.2, 107.0], [33.3, 107.0], [33.4, 107.0], [33.5, 107.0], [33.6, 108.0], [33.7, 108.0], [33.8, 108.0], [33.9, 108.0], [34.0, 108.0], [34.1, 108.0], [34.2, 108.0], [34.3, 108.0], [34.4, 108.0], [34.5, 108.0], [34.6, 108.0], [34.7, 108.0], [34.8, 108.0], [34.9, 108.0], [35.0, 108.0], [35.1, 108.0], [35.2, 108.0], [35.3, 108.0], [35.4, 108.0], [35.5, 108.0], [35.6, 108.0], [35.7, 108.0], [35.8, 108.0], [35.9, 108.0], [36.0, 108.0], [36.1, 108.0], [36.2, 108.0], [36.3, 108.0], [36.4, 108.0], [36.5, 108.0], [36.6, 108.0], [36.7, 108.0], [36.8, 108.0], [36.9, 108.0], [37.0, 108.0], [37.1, 108.0], [37.2, 108.0], [37.3, 108.0], [37.4, 108.0], [37.5, 108.0], [37.6, 108.0], [37.7, 108.0], [37.8, 108.0], [37.9, 108.0], [38.0, 108.0], [38.1, 108.0], [38.2, 108.0], [38.3, 108.0], [38.4, 108.0], [38.5, 108.0], [38.6, 108.0], [38.7, 108.0], [38.8, 108.0], [38.9, 108.0], [39.0, 108.0], [39.1, 108.0], [39.2, 108.0], [39.3, 108.0], [39.4, 108.0], [39.5, 108.0], [39.6, 108.0], [39.7, 108.0], [39.8, 108.0], [39.9, 108.0], [40.0, 108.0], [40.1, 108.0], [40.2, 108.0], [40.3, 108.0], [40.4, 108.0], [40.5, 108.0], [40.6, 108.0], [40.7, 108.0], [40.8, 108.0], [40.9, 108.0], [41.0, 108.0], [41.1, 108.0], [41.2, 108.0], [41.3, 108.0], [41.4, 108.0], [41.5, 108.0], [41.6, 108.0], [41.7, 108.0], [41.8, 108.0], [41.9, 108.0], [42.0, 108.0], [42.1, 108.0], [42.2, 108.0], [42.3, 108.0], [42.4, 108.0], [42.5, 108.0], [42.6, 108.0], [42.7, 108.0], [42.8, 108.0], [42.9, 108.0], [43.0, 108.0], [43.1, 108.0], [43.2, 108.0], [43.3, 108.0], [43.4, 108.0], [43.5, 108.0], [43.6, 108.0], [43.7, 108.0], [43.8, 108.0], [43.9, 108.0], [44.0, 108.0], [44.1, 108.0], [44.2, 108.0], [44.3, 108.0], [44.4, 108.0], [44.5, 108.0], [44.6, 108.0], [44.7, 108.0], [44.8, 108.0], [44.9, 108.0], [45.0, 108.0], [45.1, 108.0], [45.2, 108.0], [45.3, 108.0], [45.4, 108.0], [45.5, 108.0], [45.6, 108.0], [45.7, 108.0], [45.8, 108.0], [45.9, 108.0], [46.0, 108.0], [46.1, 108.0], [46.2, 108.0], [46.3, 108.0], [46.4, 108.0], [46.5, 108.0], [46.6, 108.0], [46.7, 108.0], [46.8, 108.0], [46.9, 108.0], [47.0, 108.0], [47.1, 108.0], [47.2, 108.0], [47.3, 108.0], [47.4, 108.0], [47.5, 108.0], [47.6, 108.0], [47.7, 108.0], [47.8, 108.0], [47.9, 108.0], [48.0, 108.0], [48.1, 108.0], [48.2, 108.0], [48.3, 108.0], [48.4, 108.0], [48.5, 108.0], [48.6, 108.0], [48.7, 108.0], [48.8, 108.0], [48.9, 108.0], [49.0, 108.0], [49.1, 108.0], [49.2, 108.0], [49.3, 108.0], [49.4, 108.0], [49.5, 108.0], [49.6, 108.0], [49.7, 108.0], [49.8, 108.0], [49.9, 108.0], [50.0, 108.0], [50.1, 108.0], [50.2, 108.0], [50.3, 108.0], [50.4, 108.0], [50.5, 108.0], [50.6, 108.0], [50.7, 108.0], [50.8, 108.0], [50.9, 109.0], [51.0, 109.0], [51.1, 109.0], [51.2, 109.0], [51.3, 109.0], [51.4, 109.0], [51.5, 109.0], [51.6, 109.0], [51.7, 109.0], [51.8, 109.0], [51.9, 109.0], [52.0, 109.0], [52.1, 109.0], [52.2, 109.0], [52.3, 109.0], [52.4, 109.0], [52.5, 109.0], [52.6, 109.0], [52.7, 109.0], [52.8, 109.0], [52.9, 109.0], [53.0, 109.0], [53.1, 109.0], [53.2, 109.0], [53.3, 109.0], [53.4, 109.0], [53.5, 109.0], [53.6, 109.0], [53.7, 109.0], [53.8, 109.0], [53.9, 109.0], [54.0, 109.0], [54.1, 109.0], [54.2, 109.0], [54.3, 109.0], [54.4, 109.0], [54.5, 109.0], [54.6, 109.0], [54.7, 109.0], [54.8, 109.0], [54.9, 109.0], [55.0, 109.0], [55.1, 109.0], [55.2, 109.0], [55.3, 109.0], [55.4, 109.0], [55.5, 109.0], [55.6, 109.0], [55.7, 109.0], [55.8, 109.0], [55.9, 109.0], [56.0, 109.0], [56.1, 109.0], [56.2, 109.0], [56.3, 109.0], [56.4, 109.0], [56.5, 109.0], [56.6, 109.0], [56.7, 109.0], [56.8, 109.0], [56.9, 109.0], [57.0, 109.0], [57.1, 109.0], [57.2, 109.0], [57.3, 109.0], [57.4, 109.0], [57.5, 109.0], [57.6, 109.0], [57.7, 109.0], [57.8, 109.0], [57.9, 109.0], [58.0, 109.0], [58.1, 109.0], [58.2, 109.0], [58.3, 109.0], [58.4, 109.0], [58.5, 109.0], [58.6, 109.0], [58.7, 109.0], [58.8, 109.0], [58.9, 109.0], [59.0, 109.0], [59.1, 109.0], [59.2, 109.0], [59.3, 109.0], [59.4, 109.0], [59.5, 109.0], [59.6, 109.0], [59.7, 109.0], [59.8, 109.0], [59.9, 109.0], [60.0, 109.0], [60.1, 109.0], [60.2, 109.0], [60.3, 110.0], [60.4, 110.0], [60.5, 110.0], [60.6, 110.0], [60.7, 110.0], [60.8, 110.0], [60.9, 110.0], [61.0, 110.0], [61.1, 110.0], [61.2, 110.0], [61.3, 110.0], [61.4, 110.0], [61.5, 110.0], [61.6, 110.0], [61.7, 110.0], [61.8, 110.0], [61.9, 110.0], [62.0, 110.0], [62.1, 110.0], [62.2, 110.0], [62.3, 110.0], [62.4, 110.0], [62.5, 110.0], [62.6, 110.0], [62.7, 110.0], [62.8, 110.0], [62.9, 110.0], [63.0, 110.0], [63.1, 110.0], [63.2, 110.0], [63.3, 110.0], [63.4, 110.0], [63.5, 110.0], [63.6, 110.0], [63.7, 110.0], [63.8, 110.0], [63.9, 110.0], [64.0, 110.0], [64.1, 110.0], [64.2, 110.0], [64.3, 110.0], [64.4, 110.0], [64.5, 110.0], [64.6, 110.0], [64.7, 111.0], [64.8, 111.0], [64.9, 111.0], [65.0, 111.0], [65.1, 111.0], [65.2, 111.0], [65.3, 112.0], [65.4, 112.0], [65.5, 112.0], [65.6, 112.0], [65.7, 112.0], [65.8, 113.0], [65.9, 113.0], [66.0, 113.0], [66.1, 114.0], [66.2, 114.0], [66.3, 114.0], [66.4, 114.0], [66.5, 115.0], [66.6, 115.0], [66.7, 116.0], [66.8, 116.0], [66.9, 116.0], [67.0, 117.0], [67.1, 117.0], [67.2, 118.0], [67.3, 118.0], [67.4, 119.0], [67.5, 119.0], [67.6, 120.0], [67.7, 121.0], [67.8, 121.0], [67.9, 122.0], [68.0, 122.0], [68.1, 122.0], [68.2, 123.0], [68.3, 123.0], [68.4, 124.0], [68.5, 124.0], [68.6, 124.0], [68.7, 125.0], [68.8, 125.0], [68.9, 125.0], [69.0, 125.0], [69.1, 126.0], [69.2, 127.0], [69.3, 127.0], [69.4, 127.0], [69.5, 127.0], [69.6, 128.0], [69.7, 128.0], [69.8, 128.0], [69.9, 129.0], [70.0, 129.0], [70.1, 130.0], [70.2, 130.0], [70.3, 130.0], [70.4, 130.0], [70.5, 131.0], [70.6, 131.0], [70.7, 131.0], [70.8, 132.0], [70.9, 133.0], [71.0, 134.0], [71.1, 134.0], [71.2, 134.0], [71.3, 135.0], [71.4, 135.0], [71.5, 136.0], [71.6, 136.0], [71.7, 137.0], [71.8, 137.0], [71.9, 137.0], [72.0, 140.0], [72.1, 140.0], [72.2, 141.0], [72.3, 142.0], [72.4, 143.0], [72.5, 144.0], [72.6, 147.0], [72.7, 148.0], [72.8, 149.0], [72.9, 151.0], [73.0, 151.0], [73.1, 152.0], [73.2, 153.0], [73.3, 156.0], [73.4, 159.0], [73.5, 159.0], [73.6, 160.0], [73.7, 160.0], [73.8, 162.0], [73.9, 172.0], [74.0, 172.0], [74.1, 178.0], [74.2, 180.0], [74.3, 180.0], [74.4, 181.0], [74.5, 183.0], [74.6, 184.0], [74.7, 187.0], [74.8, 191.0], [74.9, 192.0], [75.0, 193.0], [75.1, 197.0], [75.2, 197.0], [75.3, 197.0], [75.4, 197.0], [75.5, 200.0], [75.6, 200.0], [75.7, 201.0], [75.8, 201.0], [75.9, 204.0], [76.0, 206.0], [76.1, 207.0], [76.2, 208.0], [76.3, 219.0], [76.4, 545.0], [76.5, 1616.0], [76.6, 1702.0], [76.7, 2961.0], [76.8, 2990.0], [76.9, 3145.0], [77.0, 3998.0], [77.1, 4244.0], [77.2, 4612.0], [77.3, 5138.0], [77.4, 5344.0], [77.5, 5425.0], [77.6, 6391.0], [77.7, 6812.0], [77.8, 7049.0], [77.9, 7067.0], [78.0, 7175.0], [78.1, 7425.0], [78.2, 7631.0], [78.3, 8118.0], [78.4, 8369.0], [78.5, 8409.0], [78.6, 8434.0], [78.7, 8700.0], [78.8, 8715.0], [78.9, 8828.0], [79.0, 9214.0], [79.1, 9333.0], [79.2, 9343.0], [79.3, 9504.0], [79.4, 9642.0], [79.5, 9849.0], [79.6, 9872.0], [79.7, 9873.0], [79.8, 9882.0], [79.9, 10219.0], [80.0, 10253.0], [80.1, 10384.0], [80.2, 10486.0], [80.3, 10589.0], [80.4, 10646.0], [80.5, 10666.0], [80.6, 10951.0], [80.7, 11095.0], [80.8, 11337.0], [80.9, 11376.0], [81.0, 11380.0], [81.1, 12566.0], [81.2, 13389.0], [81.3, 13441.0], [81.4, 14454.0], [81.5, 14513.0], [81.6, 14560.0], [81.7, 14633.0], [81.8, 14911.0], [81.9, 15134.0], [82.0, 15183.0], [82.1, 15348.0], [82.2, 15491.0], [82.3, 15843.0], [82.4, 16112.0], [82.5, 16155.0], [82.6, 16351.0], [82.7, 16621.0], [82.8, 16958.0], [82.9, 17193.0], [83.0, 17293.0], [83.1, 17393.0], [83.2, 17713.0], [83.3, 17740.0], [83.4, 17762.0], [83.5, 17880.0], [83.6, 18068.0], [83.7, 18117.0], [83.8, 19370.0], [83.9, 19690.0], [84.0, 19747.0], [84.1, 20225.0], [84.2, 20414.0], [84.3, 20549.0], [84.4, 20587.0], [84.5, 20698.0], [84.6, 20736.0], [84.7, 21262.0], [84.8, 21493.0], [84.9, 21623.0], [85.0, 21721.0], [85.1, 21753.0], [85.2, 21844.0], [85.3, 21845.0], [85.4, 22064.0], [85.5, 22129.0], [85.6, 22302.0], [85.7, 22459.0], [85.8, 22577.0], [85.9, 22664.0], [86.0, 22807.0], [86.1, 23016.0], [86.2, 23061.0], [86.3, 23134.0], [86.4, 23141.0], [86.5, 23222.0], [86.6, 23256.0], [86.7, 23266.0], [86.8, 23324.0], [86.9, 23390.0], [87.0, 23404.0], [87.1, 23541.0], [87.2, 23545.0], [87.3, 23621.0], [87.4, 24038.0], [87.5, 24070.0], [87.6, 24503.0], [87.7, 24738.0], [87.8, 24780.0], [87.9, 24793.0], [88.0, 24824.0], [88.1, 24976.0], [88.2, 25649.0], [88.3, 26238.0], [88.4, 26275.0], [88.5, 26352.0], [88.6, 26397.0], [88.7, 26496.0], [88.8, 26684.0], [88.9, 26768.0], [89.0, 26914.0], [89.1, 26932.0], [89.2, 27451.0], [89.3, 27559.0], [89.4, 27570.0], [89.5, 27891.0], [89.6, 28586.0], [89.7, 28903.0], [89.8, 29685.0], [89.9, 30804.0], [90.0, 31416.0], [90.1, 31880.0], [90.2, 31992.0], [90.3, 32568.0], [90.4, 32995.0], [90.5, 33582.0], [90.6, 34033.0], [90.7, 34063.0], [90.8, 34143.0], [90.9, 34678.0], [91.0, 34700.0], [91.1, 34935.0], [91.2, 35091.0], [91.3, 36297.0], [91.4, 36945.0], [91.5, 37093.0], [91.6, 37100.0], [91.7, 37337.0], [91.8, 37454.0], [91.9, 37965.0], [92.0, 37982.0], [92.1, 39085.0], [92.2, 39290.0], [92.3, 39296.0], [92.4, 39449.0], [92.5, 39668.0], [92.6, 40170.0], [92.7, 40575.0], [92.8, 41240.0], [92.9, 41804.0], [93.0, 41831.0], [93.1, 41896.0], [93.2, 42180.0], [93.3, 42296.0], [93.4, 42567.0], [93.5, 42649.0], [93.6, 42783.0], [93.7, 43411.0], [93.8, 44419.0], [93.9, 44748.0], [94.0, 44864.0], [94.1, 44946.0], [94.2, 46241.0], [94.3, 46576.0], [94.4, 47406.0], [94.5, 47506.0], [94.6, 47601.0], [94.7, 47730.0], [94.8, 48841.0], [94.9, 48935.0], [95.0, 49779.0], [95.1, 49812.0], [95.2, 50255.0], [95.3, 52696.0], [95.4, 53923.0], [95.5, 54520.0], [95.6, 55432.0], [95.7, 55998.0], [95.8, 57498.0], [95.9, 58362.0], [96.0, 60105.0], [96.1, 60110.0], [96.2, 60119.0], [96.3, 60122.0], [96.4, 60123.0], [96.5, 60125.0], [96.6, 60126.0], [96.7, 60129.0], [96.8, 60132.0], [96.9, 60133.0], [97.0, 60140.0], [97.1, 60141.0], [97.2, 60148.0], [97.3, 60151.0], [97.4, 60153.0], [97.5, 60155.0], [97.6, 60156.0], [97.7, 60156.0], [97.8, 60158.0], [97.9, 60160.0], [98.0, 60163.0], [98.1, 60169.0], [98.2, 60169.0], [98.3, 60172.0], [98.4, 60180.0], [98.5, 60181.0], [98.6, 60182.0], [98.7, 60187.0], [98.8, 60194.0], [98.9, 60196.0], [99.0, 60203.0], [99.1, 60209.0], [99.2, 60217.0], [99.3, 60217.0], [99.4, 60241.0], [99.5, 60257.0], [99.6, 60270.0], [99.7, 60293.0], [99.8, 60369.0], [99.9, 60381.0], [100.0, 60416.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 207.0], [0.1, 208.0], [0.2, 208.0], [0.3, 208.0], [0.4, 209.0], [0.5, 209.0], [0.6, 209.0], [0.7, 209.0], [0.8, 209.0], [0.9, 209.0], [1.0, 209.0], [1.1, 209.0], [1.2, 209.0], [1.3, 209.0], [1.4, 209.0], [1.5, 209.0], [1.6, 209.0], [1.7, 209.0], [1.8, 209.0], [1.9, 209.0], [2.0, 209.0], [2.1, 209.0], [2.2, 209.0], [2.3, 209.0], [2.4, 209.0], [2.5, 209.0], [2.6, 209.0], [2.7, 209.0], [2.8, 210.0], [2.9, 210.0], [3.0, 210.0], [3.1, 210.0], [3.2, 210.0], [3.3, 210.0], [3.4, 210.0], [3.5, 210.0], [3.6, 210.0], [3.7, 210.0], [3.8, 210.0], [3.9, 210.0], [4.0, 210.0], [4.1, 210.0], [4.2, 210.0], [4.3, 210.0], [4.4, 210.0], [4.5, 210.0], [4.6, 210.0], [4.7, 210.0], [4.8, 210.0], [4.9, 210.0], [5.0, 210.0], [5.1, 210.0], [5.2, 210.0], [5.3, 210.0], [5.4, 210.0], [5.5, 210.0], [5.6, 210.0], [5.7, 210.0], [5.8, 210.0], [5.9, 210.0], [6.0, 210.0], [6.1, 210.0], [6.2, 210.0], [6.3, 210.0], [6.4, 210.0], [6.5, 210.0], [6.6, 210.0], [6.7, 210.0], [6.8, 210.0], [6.9, 210.0], [7.0, 210.0], [7.1, 210.0], [7.2, 210.0], [7.3, 210.0], [7.4, 210.0], [7.5, 210.0], [7.6, 210.0], [7.7, 210.0], [7.8, 210.0], [7.9, 210.0], [8.0, 210.0], [8.1, 210.0], [8.2, 210.0], [8.3, 211.0], [8.4, 211.0], [8.5, 211.0], [8.6, 211.0], [8.7, 211.0], [8.8, 211.0], [8.9, 211.0], [9.0, 211.0], [9.1, 211.0], [9.2, 211.0], [9.3, 211.0], [9.4, 211.0], [9.5, 211.0], [9.6, 211.0], [9.7, 211.0], [9.8, 211.0], [9.9, 211.0], [10.0, 211.0], [10.1, 211.0], [10.2, 211.0], [10.3, 211.0], [10.4, 211.0], [10.5, 211.0], [10.6, 211.0], [10.7, 211.0], [10.8, 211.0], [10.9, 211.0], [11.0, 211.0], [11.1, 211.0], [11.2, 211.0], [11.3, 211.0], [11.4, 211.0], [11.5, 211.0], [11.6, 211.0], [11.7, 211.0], [11.8, 211.0], [11.9, 211.0], [12.0, 211.0], [12.1, 211.0], [12.2, 211.0], [12.3, 211.0], [12.4, 211.0], [12.5, 211.0], [12.6, 211.0], [12.7, 211.0], [12.8, 211.0], [12.9, 211.0], [13.0, 211.0], [13.1, 211.0], [13.2, 211.0], [13.3, 211.0], [13.4, 211.0], [13.5, 211.0], [13.6, 211.0], [13.7, 211.0], [13.8, 211.0], [13.9, 211.0], [14.0, 211.0], [14.1, 211.0], [14.2, 211.0], [14.3, 211.0], [14.4, 211.0], [14.5, 211.0], [14.6, 211.0], [14.7, 211.0], [14.8, 211.0], [14.9, 211.0], [15.0, 211.0], [15.1, 211.0], [15.2, 211.0], [15.3, 211.0], [15.4, 211.0], [15.5, 211.0], [15.6, 211.0], [15.7, 211.0], [15.8, 211.0], [15.9, 211.0], [16.0, 211.0], [16.1, 211.0], [16.2, 211.0], [16.3, 211.0], [16.4, 211.0], [16.5, 211.0], [16.6, 211.0], [16.7, 211.0], [16.8, 211.0], [16.9, 211.0], [17.0, 211.0], [17.1, 211.0], [17.2, 211.0], [17.3, 211.0], [17.4, 211.0], [17.5, 211.0], [17.6, 211.0], [17.7, 211.0], [17.8, 211.0], [17.9, 211.0], [18.0, 211.0], [18.1, 211.0], [18.2, 211.0], [18.3, 211.0], [18.4, 211.0], [18.5, 211.0], [18.6, 211.0], [18.7, 211.0], [18.8, 211.0], [18.9, 211.0], [19.0, 211.0], [19.1, 211.0], [19.2, 211.0], [19.3, 211.0], [19.4, 211.0], [19.5, 211.0], [19.6, 211.0], [19.7, 211.0], [19.8, 211.0], [19.9, 211.0], [20.0, 211.0], [20.1, 211.0], [20.2, 211.0], [20.3, 211.0], [20.4, 211.0], [20.5, 211.0], [20.6, 211.0], [20.7, 211.0], [20.8, 211.0], [20.9, 211.0], [21.0, 211.0], [21.1, 211.0], [21.2, 211.0], [21.3, 212.0], [21.4, 212.0], [21.5, 212.0], [21.6, 212.0], [21.7, 212.0], [21.8, 212.0], [21.9, 212.0], [22.0, 212.0], [22.1, 212.0], [22.2, 212.0], [22.3, 212.0], [22.4, 212.0], [22.5, 212.0], [22.6, 212.0], [22.7, 212.0], [22.8, 212.0], [22.9, 212.0], [23.0, 212.0], [23.1, 212.0], [23.2, 212.0], [23.3, 212.0], [23.4, 212.0], [23.5, 212.0], [23.6, 212.0], [23.7, 212.0], [23.8, 212.0], [23.9, 212.0], [24.0, 212.0], [24.1, 212.0], [24.2, 212.0], [24.3, 212.0], [24.4, 212.0], [24.5, 212.0], [24.6, 212.0], [24.7, 212.0], [24.8, 212.0], [24.9, 212.0], [25.0, 212.0], [25.1, 212.0], [25.2, 212.0], [25.3, 212.0], [25.4, 212.0], [25.5, 212.0], [25.6, 212.0], [25.7, 212.0], [25.8, 212.0], [25.9, 212.0], [26.0, 212.0], [26.1, 212.0], [26.2, 212.0], [26.3, 212.0], [26.4, 212.0], [26.5, 212.0], [26.6, 212.0], [26.7, 212.0], [26.8, 212.0], [26.9, 212.0], [27.0, 212.0], [27.1, 212.0], [27.2, 212.0], [27.3, 212.0], [27.4, 212.0], [27.5, 212.0], [27.6, 212.0], [27.7, 212.0], [27.8, 212.0], [27.9, 212.0], [28.0, 212.0], [28.1, 212.0], [28.2, 212.0], [28.3, 212.0], [28.4, 212.0], [28.5, 212.0], [28.6, 212.0], [28.7, 212.0], [28.8, 212.0], [28.9, 212.0], [29.0, 212.0], [29.1, 212.0], [29.2, 212.0], [29.3, 212.0], [29.4, 212.0], [29.5, 212.0], [29.6, 212.0], [29.7, 212.0], [29.8, 212.0], [29.9, 212.0], [30.0, 212.0], [30.1, 212.0], [30.2, 212.0], [30.3, 212.0], [30.4, 212.0], [30.5, 212.0], [30.6, 212.0], [30.7, 212.0], [30.8, 212.0], [30.9, 212.0], [31.0, 212.0], [31.1, 212.0], [31.2, 212.0], [31.3, 212.0], [31.4, 212.0], [31.5, 212.0], [31.6, 212.0], [31.7, 212.0], [31.8, 212.0], [31.9, 212.0], [32.0, 212.0], [32.1, 212.0], [32.2, 212.0], [32.3, 212.0], [32.4, 212.0], [32.5, 212.0], [32.6, 212.0], [32.7, 212.0], [32.8, 212.0], [32.9, 212.0], [33.0, 212.0], [33.1, 212.0], [33.2, 212.0], [33.3, 212.0], [33.4, 212.0], [33.5, 212.0], [33.6, 212.0], [33.7, 212.0], [33.8, 212.0], [33.9, 212.0], [34.0, 212.0], [34.1, 212.0], [34.2, 212.0], [34.3, 212.0], [34.4, 212.0], [34.5, 212.0], [34.6, 212.0], [34.7, 212.0], [34.8, 212.0], [34.9, 212.0], [35.0, 212.0], [35.1, 212.0], [35.2, 212.0], [35.3, 212.0], [35.4, 212.0], [35.5, 212.0], [35.6, 212.0], [35.7, 212.0], [35.8, 212.0], [35.9, 212.0], [36.0, 212.0], [36.1, 212.0], [36.2, 212.0], [36.3, 212.0], [36.4, 212.0], [36.5, 213.0], [36.6, 213.0], [36.7, 213.0], [36.8, 213.0], [36.9, 213.0], [37.0, 213.0], [37.1, 213.0], [37.2, 213.0], [37.3, 213.0], [37.4, 213.0], [37.5, 213.0], [37.6, 213.0], [37.7, 213.0], [37.8, 213.0], [37.9, 213.0], [38.0, 213.0], [38.1, 213.0], [38.2, 213.0], [38.3, 213.0], [38.4, 213.0], [38.5, 213.0], [38.6, 213.0], [38.7, 213.0], [38.8, 213.0], [38.9, 213.0], [39.0, 213.0], [39.1, 213.0], [39.2, 213.0], [39.3, 213.0], [39.4, 213.0], [39.5, 213.0], [39.6, 213.0], [39.7, 213.0], [39.8, 213.0], [39.9, 213.0], [40.0, 213.0], [40.1, 213.0], [40.2, 213.0], [40.3, 213.0], [40.4, 213.0], [40.5, 213.0], [40.6, 213.0], [40.7, 213.0], [40.8, 213.0], [40.9, 213.0], [41.0, 213.0], [41.1, 213.0], [41.2, 213.0], [41.3, 213.0], [41.4, 213.0], [41.5, 213.0], [41.6, 213.0], [41.7, 213.0], [41.8, 213.0], [41.9, 213.0], [42.0, 213.0], [42.1, 213.0], [42.2, 213.0], [42.3, 213.0], [42.4, 213.0], [42.5, 213.0], [42.6, 213.0], [42.7, 213.0], [42.8, 213.0], [42.9, 213.0], [43.0, 213.0], [43.1, 213.0], [43.2, 213.0], [43.3, 213.0], [43.4, 213.0], [43.5, 213.0], [43.6, 213.0], [43.7, 213.0], [43.8, 213.0], [43.9, 213.0], [44.0, 213.0], [44.1, 213.0], [44.2, 213.0], [44.3, 213.0], [44.4, 213.0], [44.5, 213.0], [44.6, 213.0], [44.7, 213.0], [44.8, 213.0], [44.9, 213.0], [45.0, 213.0], [45.1, 213.0], [45.2, 213.0], [45.3, 213.0], [45.4, 213.0], [45.5, 213.0], [45.6, 213.0], [45.7, 213.0], [45.8, 213.0], [45.9, 213.0], [46.0, 213.0], [46.1, 213.0], [46.2, 213.0], [46.3, 213.0], [46.4, 213.0], [46.5, 213.0], [46.6, 213.0], [46.7, 213.0], [46.8, 213.0], [46.9, 213.0], [47.0, 213.0], [47.1, 213.0], [47.2, 213.0], [47.3, 213.0], [47.4, 213.0], [47.5, 213.0], [47.6, 213.0], [47.7, 213.0], [47.8, 213.0], [47.9, 213.0], [48.0, 214.0], [48.1, 214.0], [48.2, 214.0], [48.3, 214.0], [48.4, 214.0], [48.5, 214.0], [48.6, 214.0], [48.7, 214.0], [48.8, 214.0], [48.9, 214.0], [49.0, 214.0], [49.1, 214.0], [49.2, 214.0], [49.3, 214.0], [49.4, 214.0], [49.5, 214.0], [49.6, 214.0], [49.7, 214.0], [49.8, 214.0], [49.9, 214.0], [50.0, 214.0], [50.1, 214.0], [50.2, 214.0], [50.3, 214.0], [50.4, 214.0], [50.5, 214.0], [50.6, 214.0], [50.7, 214.0], [50.8, 214.0], [50.9, 214.0], [51.0, 214.0], [51.1, 214.0], [51.2, 214.0], [51.3, 214.0], [51.4, 214.0], [51.5, 214.0], [51.6, 214.0], [51.7, 214.0], [51.8, 214.0], [51.9, 214.0], [52.0, 214.0], [52.1, 214.0], [52.2, 214.0], [52.3, 214.0], [52.4, 214.0], [52.5, 214.0], [52.6, 214.0], [52.7, 214.0], [52.8, 214.0], [52.9, 214.0], [53.0, 214.0], [53.1, 214.0], [53.2, 214.0], [53.3, 214.0], [53.4, 214.0], [53.5, 214.0], [53.6, 214.0], [53.7, 214.0], [53.8, 214.0], [53.9, 214.0], [54.0, 214.0], [54.1, 214.0], [54.2, 214.0], [54.3, 214.0], [54.4, 214.0], [54.5, 214.0], [54.6, 214.0], [54.7, 214.0], [54.8, 215.0], [54.9, 215.0], [55.0, 215.0], [55.1, 215.0], [55.2, 215.0], [55.3, 215.0], [55.4, 215.0], [55.5, 215.0], [55.6, 215.0], [55.7, 215.0], [55.8, 215.0], [55.9, 215.0], [56.0, 215.0], [56.1, 215.0], [56.2, 215.0], [56.3, 215.0], [56.4, 215.0], [56.5, 215.0], [56.6, 215.0], [56.7, 215.0], [56.8, 215.0], [56.9, 215.0], [57.0, 215.0], [57.1, 215.0], [57.2, 215.0], [57.3, 215.0], [57.4, 215.0], [57.5, 215.0], [57.6, 215.0], [57.7, 215.0], [57.8, 215.0], [57.9, 215.0], [58.0, 215.0], [58.1, 215.0], [58.2, 215.0], [58.3, 216.0], [58.4, 216.0], [58.5, 216.0], [58.6, 216.0], [58.7, 216.0], [58.8, 216.0], [58.9, 216.0], [59.0, 216.0], [59.1, 216.0], [59.2, 216.0], [59.3, 216.0], [59.4, 216.0], [59.5, 216.0], [59.6, 216.0], [59.7, 216.0], [59.8, 216.0], [59.9, 216.0], [60.0, 216.0], [60.1, 216.0], [60.2, 216.0], [60.3, 216.0], [60.4, 217.0], [60.5, 217.0], [60.6, 217.0], [60.7, 217.0], [60.8, 217.0], [60.9, 217.0], [61.0, 217.0], [61.1, 217.0], [61.2, 217.0], [61.3, 218.0], [61.4, 218.0], [61.5, 218.0], [61.6, 219.0], [61.7, 219.0], [61.8, 219.0], [61.9, 219.0], [62.0, 220.0], [62.1, 220.0], [62.2, 221.0], [62.3, 221.0], [62.4, 221.0], [62.5, 221.0], [62.6, 222.0], [62.7, 222.0], [62.8, 223.0], [62.9, 223.0], [63.0, 223.0], [63.1, 223.0], [63.2, 224.0], [63.3, 224.0], [63.4, 224.0], [63.5, 225.0], [63.6, 226.0], [63.7, 226.0], [63.8, 227.0], [63.9, 227.0], [64.0, 227.0], [64.1, 227.0], [64.2, 227.0], [64.3, 228.0], [64.4, 228.0], [64.5, 228.0], [64.6, 228.0], [64.7, 229.0], [64.8, 230.0], [64.9, 230.0], [65.0, 230.0], [65.1, 231.0], [65.2, 231.0], [65.3, 231.0], [65.4, 231.0], [65.5, 231.0], [65.6, 232.0], [65.7, 232.0], [65.8, 233.0], [65.9, 233.0], [66.0, 233.0], [66.1, 234.0], [66.2, 234.0], [66.3, 234.0], [66.4, 234.0], [66.5, 235.0], [66.6, 235.0], [66.7, 235.0], [66.8, 235.0], [66.9, 235.0], [67.0, 235.0], [67.1, 236.0], [67.2, 236.0], [67.3, 237.0], [67.4, 237.0], [67.5, 237.0], [67.6, 237.0], [67.7, 238.0], [67.8, 240.0], [67.9, 240.0], [68.0, 241.0], [68.1, 241.0], [68.2, 242.0], [68.3, 243.0], [68.4, 243.0], [68.5, 244.0], [68.6, 244.0], [68.7, 245.0], [68.8, 245.0], [68.9, 246.0], [69.0, 246.0], [69.1, 246.0], [69.2, 246.0], [69.3, 247.0], [69.4, 247.0], [69.5, 248.0], [69.6, 248.0], [69.7, 249.0], [69.8, 249.0], [69.9, 249.0], [70.0, 252.0], [70.1, 253.0], [70.2, 255.0], [70.3, 256.0], [70.4, 256.0], [70.5, 257.0], [70.6, 259.0], [70.7, 260.0], [70.8, 263.0], [70.9, 263.0], [71.0, 264.0], [71.1, 267.0], [71.2, 268.0], [71.3, 270.0], [71.4, 272.0], [71.5, 272.0], [71.6, 273.0], [71.7, 273.0], [71.8, 275.0], [71.9, 281.0], [72.0, 281.0], [72.1, 286.0], [72.2, 290.0], [72.3, 292.0], [72.4, 295.0], [72.5, 295.0], [72.6, 297.0], [72.7, 297.0], [72.8, 298.0], [72.9, 298.0], [73.0, 299.0], [73.1, 300.0], [73.2, 303.0], [73.3, 303.0], [73.4, 303.0], [73.5, 304.0], [73.6, 304.0], [73.7, 304.0], [73.8, 304.0], [73.9, 304.0], [74.0, 305.0], [74.1, 305.0], [74.2, 305.0], [74.3, 305.0], [74.4, 305.0], [74.5, 305.0], [74.6, 305.0], [74.7, 305.0], [74.8, 305.0], [74.9, 305.0], [75.0, 305.0], [75.1, 305.0], [75.2, 306.0], [75.3, 306.0], [75.4, 306.0], [75.5, 306.0], [75.6, 306.0], [75.7, 306.0], [75.8, 306.0], [75.9, 306.0], [76.0, 306.0], [76.1, 306.0], [76.2, 306.0], [76.3, 306.0], [76.4, 306.0], [76.5, 307.0], [76.6, 307.0], [76.7, 307.0], [76.8, 307.0], [76.9, 307.0], [77.0, 307.0], [77.1, 307.0], [77.2, 307.0], [77.3, 307.0], [77.4, 308.0], [77.5, 309.0], [77.6, 310.0], [77.7, 310.0], [77.8, 311.0], [77.9, 311.0], [78.0, 311.0], [78.1, 312.0], [78.2, 313.0], [78.3, 313.0], [78.4, 313.0], [78.5, 315.0], [78.6, 316.0], [78.7, 319.0], [78.8, 319.0], [78.9, 322.0], [79.0, 322.0], [79.1, 323.0], [79.2, 324.0], [79.3, 325.0], [79.4, 325.0], [79.5, 326.0], [79.6, 328.0], [79.7, 328.0], [79.8, 329.0], [79.9, 330.0], [80.0, 335.0], [80.1, 335.0], [80.2, 336.0], [80.3, 336.0], [80.4, 338.0], [80.5, 347.0], [80.6, 348.0], [80.7, 349.0], [80.8, 353.0], [80.9, 357.0], [81.0, 358.0], [81.1, 358.0], [81.2, 359.0], [81.3, 362.0], [81.4, 363.0], [81.5, 366.0], [81.6, 368.0], [81.7, 368.0], [81.8, 371.0], [81.9, 373.0], [82.0, 373.0], [82.1, 377.0], [82.2, 377.0], [82.3, 382.0], [82.4, 386.0], [82.5, 386.0], [82.6, 387.0], [82.7, 389.0], [82.8, 390.0], [82.9, 391.0], [83.0, 393.0], [83.1, 394.0], [83.2, 395.0], [83.3, 396.0], [83.4, 397.0], [83.5, 399.0], [83.6, 401.0], [83.7, 402.0], [83.8, 402.0], [83.9, 403.0], [84.0, 404.0], [84.1, 405.0], [84.2, 405.0], [84.3, 405.0], [84.4, 405.0], [84.5, 405.0], [84.6, 405.0], [84.7, 405.0], [84.8, 405.0], [84.9, 406.0], [85.0, 406.0], [85.1, 406.0], [85.2, 406.0], [85.3, 406.0], [85.4, 406.0], [85.5, 406.0], [85.6, 406.0], [85.7, 406.0], [85.8, 407.0], [85.9, 407.0], [86.0, 407.0], [86.1, 407.0], [86.2, 407.0], [86.3, 407.0], [86.4, 407.0], [86.5, 407.0], [86.6, 407.0], [86.7, 407.0], [86.8, 407.0], [86.9, 407.0], [87.0, 407.0], [87.1, 407.0], [87.2, 407.0], [87.3, 407.0], [87.4, 407.0], [87.5, 407.0], [87.6, 407.0], [87.7, 407.0], [87.8, 407.0], [87.9, 407.0], [88.0, 407.0], [88.1, 407.0], [88.2, 407.0], [88.3, 407.0], [88.4, 407.0], [88.5, 407.0], [88.6, 407.0], [88.7, 407.0], [88.8, 407.0], [88.9, 407.0], [89.0, 407.0], [89.1, 407.0], [89.2, 407.0], [89.3, 407.0], [89.4, 407.0], [89.5, 407.0], [89.6, 407.0], [89.7, 407.0], [89.8, 407.0], [89.9, 407.0], [90.0, 408.0], [90.1, 408.0], [90.2, 408.0], [90.3, 408.0], [90.4, 408.0], [90.5, 408.0], [90.6, 408.0], [90.7, 408.0], [90.8, 408.0], [90.9, 408.0], [91.0, 408.0], [91.1, 408.0], [91.2, 408.0], [91.3, 408.0], [91.4, 408.0], [91.5, 408.0], [91.6, 408.0], [91.7, 408.0], [91.8, 408.0], [91.9, 408.0], [92.0, 408.0], [92.1, 408.0], [92.2, 408.0], [92.3, 408.0], [92.4, 408.0], [92.5, 408.0], [92.6, 408.0], [92.7, 408.0], [92.8, 408.0], [92.9, 408.0], [93.0, 408.0], [93.1, 408.0], [93.2, 408.0], [93.3, 408.0], [93.4, 408.0], [93.5, 408.0], [93.6, 408.0], [93.7, 408.0], [93.8, 408.0], [93.9, 408.0], [94.0, 408.0], [94.1, 408.0], [94.2, 408.0], [94.3, 408.0], [94.4, 408.0], [94.5, 409.0], [94.6, 409.0], [94.7, 409.0], [94.8, 409.0], [94.9, 409.0], [95.0, 409.0], [95.1, 409.0], [95.2, 409.0], [95.3, 409.0], [95.4, 409.0], [95.5, 409.0], [95.6, 409.0], [95.7, 409.0], [95.8, 409.0], [95.9, 409.0], [96.0, 409.0], [96.1, 409.0], [96.2, 409.0], [96.3, 409.0], [96.4, 409.0], [96.5, 409.0], [96.6, 409.0], [96.7, 409.0], [96.8, 410.0], [96.9, 410.0], [97.0, 410.0], [97.1, 410.0], [97.2, 410.0], [97.3, 410.0], [97.4, 410.0], [97.5, 411.0], [97.6, 412.0], [97.7, 412.0], [97.8, 412.0], [97.9, 413.0], [98.0, 413.0], [98.1, 414.0], [98.2, 415.0], [98.3, 415.0], [98.4, 416.0], [98.5, 416.0], [98.6, 417.0], [98.7, 424.0], [98.8, 424.0], [98.9, 428.0], [99.0, 437.0], [99.1, 443.0], [99.2, 493.0], [99.3, 509.0], [99.4, 510.0], [99.5, 511.0], [99.6, 512.0], [99.7, 512.0], [99.8, 819.0], [99.9, 920.0], [100.0, 1229.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 767.0, "series": [{"data": [[32900.0, 1.0], [33900.0, 1.0], [34900.0, 1.0], [35300.0, 1.0], [37300.0, 1.0], [37700.0, 1.0], [38300.0, 1.0], [40500.0, 1.0], [42100.0, 2.0], [42700.0, 1.0], [42500.0, 1.0], [43100.0, 1.0], [45100.0, 1.0], [46500.0, 1.0], [47700.0, 1.0], [47900.0, 1.0], [50500.0, 1.0], [52900.0, 1.0], [200.0, 18.0], [54300.0, 1.0], [57900.0, 1.0], [58700.0, 1.0], [60300.0, 3.0], [60500.0, 19.0], [60700.0, 3.0], [300.0, 699.0], [400.0, 23.0], [500.0, 53.0], [600.0, 5.0], [700.0, 1.0], [800.0, 1.0], [1800.0, 1.0], [1900.0, 1.0], [2100.0, 1.0], [3200.0, 1.0], [3800.0, 1.0], [3900.0, 1.0], [4200.0, 1.0], [4600.0, 1.0], [4900.0, 1.0], [5400.0, 1.0], [5700.0, 1.0], [5900.0, 1.0], [6600.0, 1.0], [7200.0, 1.0], [7400.0, 2.0], [7500.0, 1.0], [7900.0, 1.0], [7700.0, 1.0], [8700.0, 2.0], [8500.0, 1.0], [9200.0, 1.0], [8800.0, 1.0], [9000.0, 1.0], [9100.0, 1.0], [9500.0, 1.0], [9600.0, 1.0], [9700.0, 1.0], [10100.0, 2.0], [10000.0, 1.0], [9900.0, 1.0], [10200.0, 1.0], [10500.0, 2.0], [10400.0, 1.0], [10300.0, 1.0], [10800.0, 1.0], [11200.0, 1.0], [10900.0, 2.0], [11000.0, 1.0], [11600.0, 1.0], [11400.0, 1.0], [11700.0, 2.0], [12900.0, 1.0], [13800.0, 2.0], [14800.0, 2.0], [14900.0, 2.0], [15300.0, 1.0], [15400.0, 1.0], [15800.0, 1.0], [15500.0, 2.0], [16300.0, 2.0], [16100.0, 1.0], [17100.0, 1.0], [16500.0, 1.0], [17000.0, 1.0], [16700.0, 1.0], [18400.0, 1.0], [18300.0, 1.0], [17700.0, 1.0], [18100.0, 3.0], [17600.0, 2.0], [18500.0, 1.0], [19700.0, 1.0], [19900.0, 1.0], [20000.0, 1.0], [20800.0, 2.0], [20500.0, 1.0], [20900.0, 1.0], [21000.0, 2.0], [21500.0, 1.0], [22000.0, 1.0], [21900.0, 2.0], [21800.0, 1.0], [22500.0, 3.0], [22100.0, 2.0], [23500.0, 1.0], [23200.0, 3.0], [23000.0, 1.0], [23400.0, 2.0], [22900.0, 1.0], [22800.0, 1.0], [24400.0, 1.0], [23700.0, 1.0], [23800.0, 2.0], [24300.0, 1.0], [23600.0, 3.0], [23900.0, 1.0], [24800.0, 1.0], [25100.0, 2.0], [24700.0, 1.0], [25300.0, 1.0], [25200.0, 1.0], [25000.0, 1.0], [26600.0, 3.0], [26200.0, 1.0], [26000.0, 1.0], [26900.0, 2.0], [26800.0, 1.0], [27300.0, 2.0], [27600.0, 1.0], [27000.0, 1.0], [27800.0, 2.0], [28200.0, 1.0], [29300.0, 1.0], [28900.0, 1.0], [29900.0, 1.0], [31100.0, 1.0], [32200.0, 1.0], [32300.0, 1.0], [31800.0, 1.0], [34400.0, 3.0], [33400.0, 1.0], [36600.0, 1.0], [35000.0, 1.0], [35200.0, 1.0], [37400.0, 2.0], [37600.0, 1.0], [38200.0, 1.0], [39800.0, 1.0], [40000.0, 1.0], [40800.0, 1.0], [39600.0, 2.0], [39400.0, 1.0], [42800.0, 2.0], [42200.0, 1.0], [41600.0, 1.0], [43800.0, 1.0], [44800.0, 1.0], [46400.0, 1.0], [46800.0, 1.0], [45200.0, 2.0], [47800.0, 2.0], [49200.0, 2.0], [50200.0, 1.0], [50000.0, 1.0], [54800.0, 1.0], [55600.0, 1.0], [56200.0, 1.0], [60600.0, 8.0], [60400.0, 8.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 767.0], [34700.0, 1.0], [32900.0, 1.0], [33500.0, 1.0], [34100.0, 1.0], [34900.0, 1.0], [37100.0, 1.0], [36900.0, 1.0], [37900.0, 2.0], [37300.0, 1.0], [40500.0, 1.0], [40100.0, 1.0], [42500.0, 1.0], [42100.0, 1.0], [42700.0, 1.0], [44700.0, 1.0], [44900.0, 1.0], [46500.0, 1.0], [48900.0, 1.0], [47500.0, 1.0], [47700.0, 1.0], [49700.0, 1.0], [200.0, 9.0], [53900.0, 1.0], [54500.0, 1.0], [55900.0, 1.0], [58300.0, 1.0], [60100.0, 30.0], [60300.0, 2.0], [500.0, 1.0], [1500.0, 1.0], [1600.0, 1.0], [1700.0, 1.0], [2900.0, 2.0], [3100.0, 1.0], [3900.0, 1.0], [4200.0, 1.0], [4600.0, 1.0], [5100.0, 1.0], [5300.0, 1.0], [5400.0, 1.0], [6300.0, 1.0], [6800.0, 1.0], [7100.0, 1.0], [7000.0, 2.0], [7400.0, 1.0], [7600.0, 1.0], [8100.0, 1.0], [8400.0, 2.0], [8700.0, 2.0], [8300.0, 1.0], [8800.0, 1.0], [9200.0, 1.0], [9300.0, 2.0], [9600.0, 1.0], [9500.0, 1.0], [10200.0, 2.0], [9800.0, 4.0], [10400.0, 1.0], [10300.0, 1.0], [10500.0, 1.0], [10600.0, 2.0], [10900.0, 1.0], [11000.0, 1.0], [11300.0, 3.0], [12500.0, 1.0], [13300.0, 1.0], [13400.0, 1.0], [14500.0, 2.0], [14600.0, 1.0], [14400.0, 1.0], [15100.0, 2.0], [14900.0, 1.0], [15300.0, 1.0], [15400.0, 1.0], [15800.0, 1.0], [16100.0, 2.0], [15900.0, 1.0], [16300.0, 1.0], [16900.0, 1.0], [17300.0, 1.0], [17100.0, 1.0], [16600.0, 1.0], [17200.0, 1.0], [18000.0, 1.0], [17800.0, 1.0], [17700.0, 3.0], [18100.0, 1.0], [19300.0, 1.0], [20400.0, 1.0], [20200.0, 1.0], [19600.0, 1.0], [19700.0, 1.0], [20500.0, 2.0], [21400.0, 1.0], [20700.0, 1.0], [20600.0, 1.0], [21200.0, 1.0], [21700.0, 2.0], [21600.0, 1.0], [22300.0, 1.0], [21800.0, 2.0], [22100.0, 1.0], [22000.0, 1.0], [22500.0, 1.0], [22400.0, 1.0], [22800.0, 1.0], [23200.0, 3.0], [23300.0, 2.0], [23500.0, 2.0], [23000.0, 2.0], [22600.0, 1.0], [23100.0, 2.0], [23400.0, 1.0], [24500.0, 1.0], [24000.0, 2.0], [23600.0, 1.0], [24700.0, 3.0], [24800.0, 1.0], [24900.0, 1.0], [26300.0, 2.0], [26400.0, 1.0], [26200.0, 2.0], [25700.0, 1.0], [25600.0, 1.0], [26600.0, 1.0], [27500.0, 2.0], [26900.0, 2.0], [27400.0, 1.0], [26700.0, 1.0], [27800.0, 1.0], [28500.0, 1.0], [28900.0, 1.0], [29600.0, 1.0], [30800.0, 1.0], [31400.0, 1.0], [31800.0, 1.0], [31900.0, 1.0], [32500.0, 1.0], [34000.0, 2.0], [34600.0, 1.0], [36200.0, 1.0], [35000.0, 1.0], [37000.0, 1.0], [37400.0, 1.0], [39400.0, 1.0], [39600.0, 1.0], [39200.0, 2.0], [39000.0, 1.0], [41800.0, 3.0], [42600.0, 1.0], [42200.0, 1.0], [41200.0, 1.0], [43400.0, 1.0], [44400.0, 1.0], [44800.0, 1.0], [46000.0, 1.0], [46200.0, 1.0], [48800.0, 1.0], [47400.0, 1.0], [47600.0, 1.0], [49800.0, 1.0], [50200.0, 1.0], [52600.0, 1.0], [55400.0, 1.0], [57400.0, 1.0], [60400.0, 1.0], [60200.0, 8.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 110.0], [1200.0, 1.0], [200.0, 760.0], [400.0, 163.0], [800.0, 1.0], [900.0, 1.0], [500.0, 5.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1659.0, "series": [{"data": [[0.0, 237.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 154.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1659.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.68528174E12, "maxY": 23.65073170731707, "series": [{"data": [[1.6852821E12, 10.120967741935488], [1.6852824E12, 20.0], [1.68528246E12, 20.494845360824744], [1.6852818E12, 3.838709677419354], [1.68528186E12, 5.0], [1.68528216E12, 13.50943396226415], [1.68528222E12, 15.0], [1.68528252E12, 23.65073170731707], [1.68528258E12, 22.99055712936734], [1.68528192E12, 5.045454545454546], [1.68528198E12, 8.878787878787877], [1.68528228E12, 15.262500000000001], [1.68528234E12, 18.226666666666667], [1.68528264E12, 5.483870967741938], [1.68528204E12, 10.0], [1.68528174E12, 1.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528264E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 107.43896103896093, "minX": 1.0, "maxY": 32114.746987951778, "series": [{"data": [[2.0, 2704.333333333333], [3.0, 4064.2499999999995], [4.0, 9147.6], [5.0, 14755.526315789473], [6.0, 4715.0], [7.0, 3901.0], [8.0, 339.9], [9.0, 21364.222222222223], [10.0, 19060.526315789477], [11.0, 357.0], [12.0, 10834.0], [13.0, 7741.461538461537], [14.0, 13881.166666666666], [15.0, 21349.67948717948], [16.0, 26916.571428571428], [1.0, 340.0], [17.0, 6352.666666666666], [18.0, 7547.807692307691], [19.0, 7374.142857142858], [20.0, 32066.416666666675], [21.0, 4437.085106382979], [22.0, 344.00000000000006], [23.0, 328.2098765432099], [24.0, 326.2328767123287], [25.0, 320.2901554404146]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[20.151923076923055, 7433.848076923089]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 3471.0], [3.0, 5007.333333333334], [4.0, 11042.5], [5.0, 14805.56756756757], [6.0, 8715.0], [7.0, 5347.0], [8.0, 126.33333333333331], [9.0, 23706.374999999996], [10.0, 18727.754385964912], [11.0, 126.42857142857142], [12.0, 11567.000000000002], [13.0, 8048.166666666668], [14.0, 14825.909090909094], [15.0, 21278.272727272728], [16.0, 28632.615384615387], [1.0, 127.0], [17.0, 9112.5], [18.0, 7582.32], [19.0, 8307.5], [20.0, 32114.746987951778], [21.0, 4147.565217391305], [22.0, 114.01562500000001], [23.0, 110.96250000000002], [24.0, 108.7083333333333], [25.0, 107.43896103896093]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[20.298918387413952, 7333.254670599797]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 327.0], [3.0, 385.5], [4.0, 343.0], [5.0, 335.07894736842104], [6.0, 395.3333333333333], [7.0, 383.0], [8.0, 253.99999999999997], [9.0, 334.625], [10.0, 326.94736842105266], [11.0, 245.33333333333334], [12.0, 335.33333333333337], [13.0, 356.08333333333337], [14.0, 331.50000000000006], [15.0, 340.92500000000007], [1.0, 402.5], [16.0, 341.00000000000006], [17.0, 301.0], [18.0, 273.56], [19.0, 274.57142857142856], [20.0, 347.1084337349398], [21.0, 309.35416666666674], [22.0, 222.06060606060603], [23.0, 221.08000000000007], [24.0, 214.77027027027026], [25.0, 213.02570694087396]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[20.127761767531215, 262.91066282420803]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6.95, "minX": 1.68528174E12, "maxY": 50190.35, "series": [{"data": [[1.6852821E12, 1624.0], [1.6852824E12, 1601.5666666666666], [1.68528246E12, 2126.016666666667], [1.6852818E12, 805.5833333333334], [1.68528186E12, 880.6], [1.68528216E12, 1409.4666666666667], [1.68528222E12, 1762.3166666666666], [1.68528252E12, 7717.966666666666], [1.68528258E12, 8000.883333333333], [1.68528192E12, 1137.0333333333333], [1.68528198E12, 878.9666666666667], [1.68528228E12, 1834.5833333333333], [1.68528234E12, 2016.0], [1.68528264E12, 463.98333333333335], [1.68528204E12, 1027.3666666666666], [1.68528174E12, 36.28333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6852821E12, 5517.816666666667], [1.6852824E12, 3684.516666666667], [1.68528246E12, 9151.666666666666], [1.6852818E12, 1305.8666666666666], [1.68528186E12, 1544.6], [1.68528216E12, 5332.133333333333], [1.68528222E12, 5103.2], [1.68528252E12, 48066.73333333333], [1.68528258E12, 50190.35], [1.68528192E12, 2551.2833333333333], [1.68528198E12, 1096.7666666666667], [1.68528228E12, 3589.7833333333333], [1.68528234E12, 3172.3333333333335], [1.68528264E12, 2984.133333333333], [1.68528204E12, 2210.2166666666667], [1.68528174E12, 6.95]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528264E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 107.26271186440678, "minX": 1.68528174E12, "maxY": 44853.65384615385, "series": [{"data": [[1.6852821E12, 10822.585365853662], [1.6852824E12, 44602.920000000006], [1.68528246E12, 19866.487179487183], [1.6852818E12, 11389.0], [1.68528186E12, 19919.06666666667], [1.68528216E12, 14535.685714285715], [1.68528222E12, 28109.529411764714], [1.68528252E12, 327.6880466472303], [1.68528258E12, 315.1789772727275], [1.68528192E12, 17909.384615384613], [1.68528198E12, 31780.88888888889], [1.68528228E12, 30500.799999999996], [1.68528234E12, 26587.350000000002], [1.68528264E12, 398.76190476190476], [1.68528204E12, 37314.8]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6852821E12, 10500.26829268293], [1.6852824E12, 44853.65384615385], [1.68528246E12, 26161.15517241379], [1.6852818E12, 11028.888888888889], [1.68528186E12, 18953.083333333332], [1.68528216E12, 12821.500000000002], [1.68528222E12, 28119.742857142857], [1.68528252E12, 110.15044247787606], [1.68528258E12, 107.26271186440678], [1.68528192E12, 19052.866666666665], [1.68528198E12, 29161.7], [1.68528228E12, 30542.72], [1.68528234E12, 24957.199999999997], [1.68528264E12, 140.75], [1.68528204E12, 39572.357142857145]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6852821E12, 308.09523809523813], [1.6852824E12, 358.3846153846154], [1.68528246E12, 395.37931034482756], [1.6852818E12, 366.23076923076917], [1.68528186E12, 301.16666666666663], [1.68528216E12, 385.2702702702702], [1.68528222E12, 373.05555555555566], [1.68528252E12, 217.82798833819228], [1.68528258E12, 212.54107648725213], [1.68528192E12, 368.24999999999994], [1.68528198E12, 364.5], [1.68528228E12, 363.12], [1.68528234E12, 359.33333333333326], [1.68528264E12, 309.3333333333333], [1.68528204E12, 353.78571428571433], [1.68528174E12, 396.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528264E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 107.23446327683615, "minX": 1.68528174E12, "maxY": 44853.11538461538, "series": [{"data": [[1.6852821E12, 10822.146341463413], [1.6852824E12, 44601.88000000001], [1.68528246E12, 19861.80769230769], [1.6852818E12, 11387.0], [1.68528186E12, 19918.8], [1.68528216E12, 14535.428571428574], [1.68528222E12, 28109.14705882353], [1.68528252E12, 327.61224489795933], [1.68528258E12, 315.11647727272714], [1.68528192E12, 17909.0], [1.68528198E12, 31780.777777777777], [1.68528228E12, 30500.200000000004], [1.68528234E12, 26586.800000000003], [1.68528264E12, 398.76190476190476], [1.68528204E12, 37314.46666666667]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6852821E12, 10500.097560975611], [1.6852824E12, 44853.11538461538], [1.68528246E12, 26161.137931034482], [1.6852818E12, 11027.777777777777], [1.68528186E12, 18953.083333333332], [1.68528216E12, 12821.352941176472], [1.68528222E12, 28119.62857142857], [1.68528252E12, 110.11209439528027], [1.68528258E12, 107.23446327683615], [1.68528192E12, 19052.733333333334], [1.68528198E12, 29161.7], [1.68528228E12, 30542.56], [1.68528234E12, 24956.64], [1.68528264E12, 140.75], [1.68528204E12, 39572.21428571429]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6852821E12, 307.95238095238096], [1.6852824E12, 357.5769230769231], [1.68528246E12, 389.344827586207], [1.6852818E12, 366.1538461538461], [1.68528186E12, 300.83333333333337], [1.68528216E12, 385.1621621621622], [1.68528222E12, 372.9166666666667], [1.68528252E12, 217.79008746355674], [1.68528258E12, 212.50424929178465], [1.68528192E12, 368.0625], [1.68528198E12, 364.2857142857143], [1.68528228E12, 362.71999999999997], [1.68528234E12, 359.1666666666667], [1.68528264E12, 309.3333333333333], [1.68528204E12, 353.14285714285717], [1.68528174E12, 389.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528264E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68528174E12, "maxY": 185.1891891891892, "series": [{"data": [[1.6852821E12, 160.58536585365854], [1.6852824E12, 171.11999999999998], [1.68528246E12, 169.19230769230765], [1.6852818E12, 174.0], [1.68528186E12, 171.0], [1.68528216E12, 172.68571428571428], [1.68528222E12, 185.1470588235294], [1.68528252E12, 108.3469387755102], [1.68528258E12, 105.64204545454544], [1.68528192E12, 172.46153846153848], [1.68528198E12, 155.44444444444446], [1.68528228E12, 148.73333333333335], [1.68528234E12, 179.69999999999996], [1.68528264E12, 145.61904761904762], [1.68528204E12, 184.93333333333334]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6852821E12, 0.0], [1.6852824E12, 0.0], [1.68528246E12, 0.0], [1.6852818E12, 0.0], [1.68528186E12, 0.0], [1.68528216E12, 0.0], [1.68528222E12, 0.0], [1.68528252E12, 0.0], [1.68528258E12, 0.0], [1.68528192E12, 0.0], [1.68528198E12, 0.0], [1.68528228E12, 0.0], [1.68528234E12, 0.0], [1.68528264E12, 0.0], [1.68528204E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6852821E12, 154.33333333333334], [1.6852824E12, 166.26923076923077], [1.68528246E12, 169.24137931034488], [1.6852818E12, 182.84615384615384], [1.68528186E12, 153.91666666666666], [1.68528216E12, 185.1891891891892], [1.68528222E12, 164.9166666666666], [1.68528252E12, 108.34693877551018], [1.68528258E12, 105.64022662889515], [1.68528192E12, 171.375], [1.68528198E12, 178.85714285714286], [1.68528228E12, 172.40000000000003], [1.68528234E12, 173.03333333333336], [1.68528264E12, 150.33333333333331], [1.68528204E12, 175.2857142857143], [1.68528174E12, 165.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528264E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 213.0, "minX": 1.68528174E12, "maxY": 55432.0, "series": [{"data": [[1.6852821E12, 43411.0], [1.6852824E12, 54520.0], [1.68528246E12, 920.0], [1.6852818E12, 15491.0], [1.68528186E12, 24503.0], [1.68528216E12, 55432.0], [1.68528222E12, 15967.0], [1.68528192E12, 23541.0], [1.68528198E12, 41896.0], [1.68528228E12, 49779.0], [1.68528234E12, 40170.0], [1.68528204E12, 49812.0], [1.68528174E12, 396.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6852821E12, 42350.2], [1.6852824E12, 34996.2], [1.68528246E12, 511.4], [1.6852818E12, 14982.0], [1.68528186E12, 23714.0], [1.68528216E12, 53309.5], [1.68528222E12, 11683.800000000005], [1.68528192E12, 21701.4], [1.68528198E12, 37096.5], [1.68528228E12, 44893.3], [1.68528234E12, 26537.8], [1.68528204E12, 48850.4], [1.68528174E12, 396.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6852821E12, 43411.0], [1.6852824E12, 54520.0], [1.68528246E12, 920.0], [1.6852818E12, 15491.0], [1.68528186E12, 24503.0], [1.68528216E12, 55432.0], [1.68528222E12, 15967.0], [1.68528192E12, 23541.0], [1.68528198E12, 41896.0], [1.68528228E12, 49779.0], [1.68528234E12, 40170.0], [1.68528204E12, 49812.0], [1.68528174E12, 396.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6852821E12, 43073.4], [1.6852824E12, 44575.049999999974], [1.68528246E12, 839.1999999999996], [1.6852818E12, 15444.8], [1.68528186E12, 24386.75], [1.68528216E12, 55054.75], [1.68528222E12, 15849.199999999999], [1.68528192E12, 23253.0], [1.68528198E12, 40697.0], [1.68528228E12, 47095.299999999996], [1.68528234E12, 38231.2], [1.68528204E12, 49417.35], [1.68528174E12, 396.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6852821E12, 216.0], [1.6852824E12, 219.0], [1.68528246E12, 231.0], [1.6852818E12, 224.0], [1.68528186E12, 213.0], [1.68528216E12, 213.0], [1.68528222E12, 221.0], [1.68528192E12, 299.0], [1.68528198E12, 215.0], [1.68528228E12, 248.0], [1.68528234E12, 229.0], [1.68528204E12, 243.0], [1.68528174E12, 396.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6852821E12, 408.0], [1.6852824E12, 408.0], [1.68528246E12, 407.0], [1.6852818E12, 410.0], [1.68528186E12, 4408.0], [1.68528216E12, 408.0], [1.68528222E12, 407.5], [1.68528192E12, 428.0], [1.68528198E12, 408.5], [1.68528228E12, 5681.0], [1.68528234E12, 416.0], [1.68528204E12, 13388.0], [1.68528174E12, 396.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528246E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 1.0, "maxY": 21527.5, "series": [{"data": [[1.0, 406.0], [2.0, 409.0], [4.0, 7175.0], [8.0, 21527.5], [5.0, 414.0], [10.0, 306.0], [3.0, 408.0], [6.0, 408.0], [7.0, 416.0], [14.0, 408.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 223.0], [8.0, 109.5], [9.0, 109.5], [10.0, 211.0], [41.0, 413.0], [11.0, 209.0], [3.0, 307.0], [12.0, 109.0], [13.0, 209.0], [14.0, 210.0], [15.0, 110.0], [1.0, 392.5], [4.0, 212.0], [16.0, 128.0], [17.0, 210.0], [18.0, 209.0], [19.0, 210.0], [5.0, 211.0], [20.0, 210.0], [21.0, 211.0], [22.0, 159.5], [6.0, 211.0], [7.0, 112.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 41.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 1.0, "maxY": 21527.5, "series": [{"data": [[1.0, 405.0], [2.0, 409.0], [4.0, 7175.0], [8.0, 21527.5], [5.0, 413.0], [10.0, 306.0], [3.0, 408.0], [6.0, 408.0], [7.0, 416.0], [14.0, 408.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 223.0], [8.0, 109.5], [9.0, 109.5], [10.0, 211.0], [41.0, 413.0], [11.0, 209.0], [3.0, 307.0], [12.0, 109.0], [13.0, 209.0], [14.0, 210.0], [15.0, 110.0], [1.0, 392.5], [4.0, 212.0], [16.0, 128.0], [17.0, 210.0], [18.0, 209.0], [19.0, 210.0], [5.0, 211.0], [20.0, 210.0], [21.0, 211.0], [22.0, 159.5], [6.0, 210.5], [7.0, 112.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 41.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68528174E12, "maxY": 11.75, "series": [{"data": [[1.6852821E12, 1.3833333333333333], [1.6852824E12, 0.9166666666666666], [1.68528246E12, 1.6166666666666667], [1.6852818E12, 0.4166666666666667], [1.68528186E12, 0.4], [1.68528216E12, 1.25], [1.68528222E12, 1.2], [1.68528252E12, 11.4], [1.68528258E12, 11.75], [1.68528192E12, 0.55], [1.68528198E12, 0.4666666666666667], [1.68528228E12, 0.8166666666666667], [1.68528234E12, 0.9833333333333333], [1.68528264E12, 0.6666666666666666], [1.68528204E12, 0.45], [1.68528174E12, 0.03333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528264E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68528174E12, "maxY": 11.783333333333333, "series": [{"data": [[1.6852821E12, 0.45], [1.6852824E12, 0.6666666666666666], [1.68528246E12, 0.5833333333333334], [1.6852818E12, 0.36666666666666664], [1.68528186E12, 0.4], [1.68528216E12, 0.4], [1.68528222E12, 0.6333333333333333], [1.68528192E12, 0.5166666666666667], [1.68528198E12, 0.4], [1.68528228E12, 0.8333333333333334], [1.68528234E12, 0.9166666666666666], [1.68528204E12, 0.4666666666666667], [1.68528174E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68528246E12, 0.3]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.6852821E12, 0.9333333333333333], [1.68528258E12, 11.783333333333333], [1.68528246E12, 0.7666666666666667], [1.68528216E12, 0.7666666666666667], [1.68528264E12, 0.6833333333333333], [1.68528222E12, 0.36666666666666664], [1.68528252E12, 11.366666666666667]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.6852824E12, 0.2], [1.68528246E12, 0.2833333333333333], [1.68528216E12, 0.016666666666666666], [1.68528222E12, 0.18333333333333332]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528264E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68528174E12, "maxY": 5.9, "series": [{"data": [[1.6852821E12, 0.23333333333333334], [1.6852824E12, 0.43333333333333335], [1.68528246E12, 0.5833333333333334], [1.6852818E12, 0.21666666666666667], [1.68528186E12, 0.2], [1.68528216E12, 0.26666666666666666], [1.68528222E12, 0.48333333333333334], [1.68528192E12, 0.26666666666666666], [1.68528198E12, 0.23333333333333334], [1.68528228E12, 0.4166666666666667], [1.68528234E12, 0.5], [1.68528204E12, 0.23333333333333334], [1.68528174E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.6852821E12, 0.4666666666666667], [1.68528258E12, 5.883333333333334], [1.68528246E12, 0.38333333333333336], [1.68528216E12, 0.35], [1.68528264E12, 0.35], [1.68528222E12, 0.11666666666666667], [1.68528252E12, 5.716666666666667]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.6852821E12, 0.4666666666666667], [1.68528258E12, 5.9], [1.6852824E12, 0.2], [1.68528246E12, 0.9666666666666667], [1.68528216E12, 0.43333333333333335], [1.68528264E12, 0.3333333333333333], [1.68528222E12, 0.43333333333333335], [1.68528252E12, 5.65]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.6852821E12, 0.18333333333333332], [1.68528192E12, 0.21666666666666667], [1.6852824E12, 0.23333333333333334], [1.68528198E12, 0.15], [1.6852818E12, 0.15], [1.68528228E12, 0.5], [1.68528186E12, 0.25], [1.68528234E12, 0.31666666666666665], [1.68528216E12, 0.016666666666666666], [1.68528222E12, 0.13333333333333333], [1.68528204E12, 0.23333333333333334]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.6852821E12, 0.5], [1.68528258E12, 5.866666666666666], [1.6852824E12, 0.18333333333333332], [1.68528246E12, 1.3], [1.68528234E12, 0.016666666666666666], [1.68528216E12, 0.5666666666666667], [1.68528264E12, 0.35], [1.68528222E12, 0.43333333333333335], [1.68528204E12, 0.016666666666666666], [1.68528252E12, 5.716666666666667]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.6852821E12, 0.21666666666666667], [1.68528192E12, 0.25], [1.6852824E12, 0.23333333333333334], [1.68528198E12, 0.16666666666666666], [1.6852818E12, 0.15], [1.68528228E12, 0.4166666666666667], [1.68528186E12, 0.2], [1.68528234E12, 0.4166666666666667], [1.68528216E12, 0.13333333333333333], [1.68528222E12, 0.15], [1.68528204E12, 0.23333333333333334]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528264E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68528174E12, "maxY": 17.65, "series": [{"data": [[1.6852821E12, 0.6333333333333333], [1.6852824E12, 0.9], [1.68528246E12, 0.5833333333333334], [1.6852818E12, 0.5166666666666667], [1.68528186E12, 0.65], [1.68528216E12, 0.4166666666666667], [1.68528222E12, 0.7666666666666667], [1.68528192E12, 0.7333333333333333], [1.68528198E12, 0.55], [1.68528228E12, 1.3333333333333333], [1.68528234E12, 1.2333333333333334], [1.68528204E12, 0.7], [1.68528174E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6852821E12, 1.4333333333333333], [1.68528258E12, 17.65], [1.6852824E12, 0.38333333333333336], [1.68528246E12, 2.65], [1.68528234E12, 0.016666666666666666], [1.68528216E12, 1.35], [1.68528264E12, 1.0333333333333334], [1.68528222E12, 0.9833333333333333], [1.68528204E12, 0.016666666666666666], [1.68528252E12, 17.083333333333332]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528264E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

