/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 106.0, "minX": 0.0, "maxY": 60933.0, "series": [{"data": [[0.0, 214.0], [0.1, 214.0], [0.2, 215.0], [0.3, 215.0], [0.4, 216.0], [0.5, 217.0], [0.6, 217.0], [0.7, 217.0], [0.8, 219.0], [0.9, 219.0], [1.0, 220.0], [1.1, 234.0], [1.2, 308.0], [1.3, 320.0], [1.4, 320.0], [1.5, 321.0], [1.6, 321.0], [1.7, 321.0], [1.8, 321.0], [1.9, 321.0], [2.0, 321.0], [2.1, 321.0], [2.2, 322.0], [2.3, 322.0], [2.4, 322.0], [2.5, 322.0], [2.6, 322.0], [2.7, 322.0], [2.8, 322.0], [2.9, 322.0], [3.0, 322.0], [3.1, 322.0], [3.2, 322.0], [3.3, 322.0], [3.4, 322.0], [3.5, 322.0], [3.6, 322.0], [3.7, 322.0], [3.8, 322.0], [3.9, 322.0], [4.0, 322.0], [4.1, 322.0], [4.2, 323.0], [4.3, 323.0], [4.4, 323.0], [4.5, 323.0], [4.6, 323.0], [4.7, 323.0], [4.8, 323.0], [4.9, 323.0], [5.0, 323.0], [5.1, 323.0], [5.2, 323.0], [5.3, 323.0], [5.4, 323.0], [5.5, 323.0], [5.6, 323.0], [5.7, 323.0], [5.8, 323.0], [5.9, 323.0], [6.0, 323.0], [6.1, 323.0], [6.2, 323.0], [6.3, 323.0], [6.4, 323.0], [6.5, 323.0], [6.6, 323.0], [6.7, 323.0], [6.8, 323.0], [6.9, 323.0], [7.0, 323.0], [7.1, 323.0], [7.2, 323.0], [7.3, 323.0], [7.4, 323.0], [7.5, 323.0], [7.6, 323.0], [7.7, 323.0], [7.8, 323.0], [7.9, 323.0], [8.0, 323.0], [8.1, 323.0], [8.2, 323.0], [8.3, 323.0], [8.4, 323.0], [8.5, 323.0], [8.6, 323.0], [8.7, 323.0], [8.8, 323.0], [8.9, 323.0], [9.0, 324.0], [9.1, 324.0], [9.2, 324.0], [9.3, 324.0], [9.4, 324.0], [9.5, 324.0], [9.6, 324.0], [9.7, 324.0], [9.8, 324.0], [9.9, 324.0], [10.0, 324.0], [10.1, 324.0], [10.2, 324.0], [10.3, 324.0], [10.4, 324.0], [10.5, 324.0], [10.6, 324.0], [10.7, 324.0], [10.8, 324.0], [10.9, 324.0], [11.0, 324.0], [11.1, 324.0], [11.2, 324.0], [11.3, 324.0], [11.4, 324.0], [11.5, 324.0], [11.6, 324.0], [11.7, 324.0], [11.8, 324.0], [11.9, 324.0], [12.0, 324.0], [12.1, 324.0], [12.2, 324.0], [12.3, 324.0], [12.4, 324.0], [12.5, 324.0], [12.6, 324.0], [12.7, 324.0], [12.8, 324.0], [12.9, 324.0], [13.0, 324.0], [13.1, 324.0], [13.2, 324.0], [13.3, 324.0], [13.4, 324.0], [13.5, 324.0], [13.6, 324.0], [13.7, 324.0], [13.8, 324.0], [13.9, 324.0], [14.0, 324.0], [14.1, 324.0], [14.2, 324.0], [14.3, 324.0], [14.4, 324.0], [14.5, 324.0], [14.6, 324.0], [14.7, 324.0], [14.8, 324.0], [14.9, 324.0], [15.0, 324.0], [15.1, 324.0], [15.2, 324.0], [15.3, 324.0], [15.4, 324.0], [15.5, 324.0], [15.6, 324.0], [15.7, 324.0], [15.8, 324.0], [15.9, 324.0], [16.0, 324.0], [16.1, 324.0], [16.2, 324.0], [16.3, 324.0], [16.4, 324.0], [16.5, 324.0], [16.6, 324.0], [16.7, 324.0], [16.8, 324.0], [16.9, 324.0], [17.0, 324.0], [17.1, 324.0], [17.2, 324.0], [17.3, 325.0], [17.4, 325.0], [17.5, 325.0], [17.6, 325.0], [17.7, 325.0], [17.8, 325.0], [17.9, 325.0], [18.0, 325.0], [18.1, 325.0], [18.2, 325.0], [18.3, 325.0], [18.4, 325.0], [18.5, 325.0], [18.6, 325.0], [18.7, 325.0], [18.8, 325.0], [18.9, 325.0], [19.0, 325.0], [19.1, 325.0], [19.2, 325.0], [19.3, 325.0], [19.4, 325.0], [19.5, 325.0], [19.6, 325.0], [19.7, 325.0], [19.8, 325.0], [19.9, 325.0], [20.0, 325.0], [20.1, 325.0], [20.2, 325.0], [20.3, 325.0], [20.4, 325.0], [20.5, 325.0], [20.6, 325.0], [20.7, 325.0], [20.8, 325.0], [20.9, 325.0], [21.0, 325.0], [21.1, 325.0], [21.2, 325.0], [21.3, 325.0], [21.4, 325.0], [21.5, 325.0], [21.6, 325.0], [21.7, 325.0], [21.8, 325.0], [21.9, 325.0], [22.0, 325.0], [22.1, 325.0], [22.2, 325.0], [22.3, 325.0], [22.4, 325.0], [22.5, 325.0], [22.6, 325.0], [22.7, 325.0], [22.8, 325.0], [22.9, 325.0], [23.0, 325.0], [23.1, 325.0], [23.2, 325.0], [23.3, 325.0], [23.4, 325.0], [23.5, 325.0], [23.6, 325.0], [23.7, 325.0], [23.8, 325.0], [23.9, 325.0], [24.0, 325.0], [24.1, 325.0], [24.2, 325.0], [24.3, 325.0], [24.4, 325.0], [24.5, 325.0], [24.6, 325.0], [24.7, 325.0], [24.8, 325.0], [24.9, 325.0], [25.0, 325.0], [25.1, 325.0], [25.2, 325.0], [25.3, 325.0], [25.4, 325.0], [25.5, 325.0], [25.6, 325.0], [25.7, 325.0], [25.8, 325.0], [25.9, 325.0], [26.0, 325.0], [26.1, 325.0], [26.2, 325.0], [26.3, 325.0], [26.4, 325.0], [26.5, 325.0], [26.6, 325.0], [26.7, 325.0], [26.8, 325.0], [26.9, 325.0], [27.0, 325.0], [27.1, 325.0], [27.2, 325.0], [27.3, 325.0], [27.4, 325.0], [27.5, 325.0], [27.6, 325.0], [27.7, 325.0], [27.8, 325.0], [27.9, 325.0], [28.0, 325.0], [28.1, 325.0], [28.2, 325.0], [28.3, 325.0], [28.4, 325.0], [28.5, 325.0], [28.6, 325.0], [28.7, 325.0], [28.8, 325.0], [28.9, 325.0], [29.0, 325.0], [29.1, 325.0], [29.2, 325.0], [29.3, 326.0], [29.4, 326.0], [29.5, 326.0], [29.6, 326.0], [29.7, 326.0], [29.8, 326.0], [29.9, 326.0], [30.0, 326.0], [30.1, 326.0], [30.2, 326.0], [30.3, 326.0], [30.4, 326.0], [30.5, 326.0], [30.6, 326.0], [30.7, 326.0], [30.8, 326.0], [30.9, 326.0], [31.0, 326.0], [31.1, 326.0], [31.2, 326.0], [31.3, 326.0], [31.4, 326.0], [31.5, 326.0], [31.6, 326.0], [31.7, 326.0], [31.8, 326.0], [31.9, 326.0], [32.0, 326.0], [32.1, 326.0], [32.2, 326.0], [32.3, 326.0], [32.4, 326.0], [32.5, 326.0], [32.6, 326.0], [32.7, 326.0], [32.8, 326.0], [32.9, 326.0], [33.0, 326.0], [33.1, 326.0], [33.2, 326.0], [33.3, 326.0], [33.4, 326.0], [33.5, 326.0], [33.6, 326.0], [33.7, 326.0], [33.8, 326.0], [33.9, 326.0], [34.0, 326.0], [34.1, 326.0], [34.2, 326.0], [34.3, 326.0], [34.4, 326.0], [34.5, 326.0], [34.6, 326.0], [34.7, 326.0], [34.8, 326.0], [34.9, 326.0], [35.0, 326.0], [35.1, 326.0], [35.2, 326.0], [35.3, 326.0], [35.4, 326.0], [35.5, 326.0], [35.6, 326.0], [35.7, 326.0], [35.8, 326.0], [35.9, 326.0], [36.0, 326.0], [36.1, 326.0], [36.2, 326.0], [36.3, 326.0], [36.4, 326.0], [36.5, 326.0], [36.6, 326.0], [36.7, 326.0], [36.8, 326.0], [36.9, 326.0], [37.0, 326.0], [37.1, 326.0], [37.2, 326.0], [37.3, 326.0], [37.4, 326.0], [37.5, 326.0], [37.6, 326.0], [37.7, 326.0], [37.8, 326.0], [37.9, 326.0], [38.0, 326.0], [38.1, 326.0], [38.2, 326.0], [38.3, 326.0], [38.4, 326.0], [38.5, 326.0], [38.6, 326.0], [38.7, 326.0], [38.8, 326.0], [38.9, 326.0], [39.0, 326.0], [39.1, 326.0], [39.2, 326.0], [39.3, 326.0], [39.4, 326.0], [39.5, 326.0], [39.6, 326.0], [39.7, 326.0], [39.8, 326.0], [39.9, 326.0], [40.0, 326.0], [40.1, 326.0], [40.2, 326.0], [40.3, 326.0], [40.4, 326.0], [40.5, 326.0], [40.6, 326.0], [40.7, 326.0], [40.8, 326.0], [40.9, 326.0], [41.0, 326.0], [41.1, 326.0], [41.2, 326.0], [41.3, 326.0], [41.4, 326.0], [41.5, 326.0], [41.6, 326.0], [41.7, 326.0], [41.8, 326.0], [41.9, 326.0], [42.0, 326.0], [42.1, 326.0], [42.2, 326.0], [42.3, 326.0], [42.4, 326.0], [42.5, 326.0], [42.6, 326.0], [42.7, 326.0], [42.8, 326.0], [42.9, 326.0], [43.0, 327.0], [43.1, 327.0], [43.2, 327.0], [43.3, 327.0], [43.4, 327.0], [43.5, 327.0], [43.6, 327.0], [43.7, 327.0], [43.8, 327.0], [43.9, 327.0], [44.0, 327.0], [44.1, 327.0], [44.2, 327.0], [44.3, 327.0], [44.4, 327.0], [44.5, 327.0], [44.6, 327.0], [44.7, 327.0], [44.8, 327.0], [44.9, 327.0], [45.0, 327.0], [45.1, 327.0], [45.2, 327.0], [45.3, 327.0], [45.4, 327.0], [45.5, 327.0], [45.6, 327.0], [45.7, 327.0], [45.8, 327.0], [45.9, 327.0], [46.0, 327.0], [46.1, 327.0], [46.2, 327.0], [46.3, 327.0], [46.4, 327.0], [46.5, 327.0], [46.6, 327.0], [46.7, 327.0], [46.8, 327.0], [46.9, 327.0], [47.0, 327.0], [47.1, 327.0], [47.2, 327.0], [47.3, 327.0], [47.4, 327.0], [47.5, 327.0], [47.6, 327.0], [47.7, 327.0], [47.8, 327.0], [47.9, 327.0], [48.0, 327.0], [48.1, 327.0], [48.2, 327.0], [48.3, 327.0], [48.4, 327.0], [48.5, 327.0], [48.6, 327.0], [48.7, 327.0], [48.8, 327.0], [48.9, 327.0], [49.0, 327.0], [49.1, 327.0], [49.2, 327.0], [49.3, 327.0], [49.4, 327.0], [49.5, 327.0], [49.6, 327.0], [49.7, 327.0], [49.8, 327.0], [49.9, 327.0], [50.0, 327.0], [50.1, 327.0], [50.2, 327.0], [50.3, 327.0], [50.4, 327.0], [50.5, 327.0], [50.6, 327.0], [50.7, 327.0], [50.8, 327.0], [50.9, 327.0], [51.0, 327.0], [51.1, 327.0], [51.2, 327.0], [51.3, 327.0], [51.4, 327.0], [51.5, 327.0], [51.6, 327.0], [51.7, 327.0], [51.8, 327.0], [51.9, 327.0], [52.0, 327.0], [52.1, 327.0], [52.2, 327.0], [52.3, 327.0], [52.4, 327.0], [52.5, 327.0], [52.6, 327.0], [52.7, 327.0], [52.8, 327.0], [52.9, 328.0], [53.0, 328.0], [53.1, 328.0], [53.2, 328.0], [53.3, 328.0], [53.4, 328.0], [53.5, 328.0], [53.6, 328.0], [53.7, 328.0], [53.8, 328.0], [53.9, 328.0], [54.0, 328.0], [54.1, 328.0], [54.2, 328.0], [54.3, 328.0], [54.4, 328.0], [54.5, 328.0], [54.6, 328.0], [54.7, 328.0], [54.8, 328.0], [54.9, 328.0], [55.0, 328.0], [55.1, 328.0], [55.2, 328.0], [55.3, 328.0], [55.4, 328.0], [55.5, 328.0], [55.6, 328.0], [55.7, 328.0], [55.8, 328.0], [55.9, 328.0], [56.0, 328.0], [56.1, 328.0], [56.2, 328.0], [56.3, 328.0], [56.4, 328.0], [56.5, 328.0], [56.6, 328.0], [56.7, 328.0], [56.8, 328.0], [56.9, 328.0], [57.0, 328.0], [57.1, 328.0], [57.2, 328.0], [57.3, 328.0], [57.4, 328.0], [57.5, 328.0], [57.6, 328.0], [57.7, 328.0], [57.8, 328.0], [57.9, 328.0], [58.0, 328.0], [58.1, 328.0], [58.2, 328.0], [58.3, 328.0], [58.4, 328.0], [58.5, 328.0], [58.6, 328.0], [58.7, 328.0], [58.8, 328.0], [58.9, 328.0], [59.0, 328.0], [59.1, 328.0], [59.2, 328.0], [59.3, 328.0], [59.4, 328.0], [59.5, 328.0], [59.6, 328.0], [59.7, 328.0], [59.8, 328.0], [59.9, 328.0], [60.0, 328.0], [60.1, 328.0], [60.2, 328.0], [60.3, 328.0], [60.4, 328.0], [60.5, 328.0], [60.6, 328.0], [60.7, 328.0], [60.8, 328.0], [60.9, 328.0], [61.0, 328.0], [61.1, 328.0], [61.2, 328.0], [61.3, 328.0], [61.4, 328.0], [61.5, 328.0], [61.6, 328.0], [61.7, 328.0], [61.8, 328.0], [61.9, 329.0], [62.0, 329.0], [62.1, 329.0], [62.2, 329.0], [62.3, 329.0], [62.4, 329.0], [62.5, 329.0], [62.6, 329.0], [62.7, 329.0], [62.8, 329.0], [62.9, 329.0], [63.0, 329.0], [63.1, 329.0], [63.2, 329.0], [63.3, 329.0], [63.4, 329.0], [63.5, 329.0], [63.6, 329.0], [63.7, 329.0], [63.8, 329.0], [63.9, 329.0], [64.0, 329.0], [64.1, 329.0], [64.2, 329.0], [64.3, 329.0], [64.4, 329.0], [64.5, 329.0], [64.6, 329.0], [64.7, 329.0], [64.8, 329.0], [64.9, 329.0], [65.0, 329.0], [65.1, 329.0], [65.2, 329.0], [65.3, 329.0], [65.4, 329.0], [65.5, 329.0], [65.6, 329.0], [65.7, 329.0], [65.8, 329.0], [65.9, 329.0], [66.0, 329.0], [66.1, 329.0], [66.2, 329.0], [66.3, 329.0], [66.4, 329.0], [66.5, 329.0], [66.6, 329.0], [66.7, 329.0], [66.8, 329.0], [66.9, 329.0], [67.0, 329.0], [67.1, 329.0], [67.2, 329.0], [67.3, 329.0], [67.4, 329.0], [67.5, 329.0], [67.6, 330.0], [67.7, 330.0], [67.8, 330.0], [67.9, 330.0], [68.0, 330.0], [68.1, 330.0], [68.2, 330.0], [68.3, 330.0], [68.4, 330.0], [68.5, 330.0], [68.6, 330.0], [68.7, 330.0], [68.8, 330.0], [68.9, 330.0], [69.0, 330.0], [69.1, 330.0], [69.2, 330.0], [69.3, 330.0], [69.4, 330.0], [69.5, 330.0], [69.6, 330.0], [69.7, 330.0], [69.8, 330.0], [69.9, 330.0], [70.0, 330.0], [70.1, 330.0], [70.2, 330.0], [70.3, 330.0], [70.4, 330.0], [70.5, 330.0], [70.6, 330.0], [70.7, 330.0], [70.8, 330.0], [70.9, 330.0], [71.0, 330.0], [71.1, 330.0], [71.2, 330.0], [71.3, 330.0], [71.4, 330.0], [71.5, 330.0], [71.6, 330.0], [71.7, 330.0], [71.8, 331.0], [71.9, 331.0], [72.0, 331.0], [72.1, 331.0], [72.2, 331.0], [72.3, 331.0], [72.4, 331.0], [72.5, 331.0], [72.6, 331.0], [72.7, 331.0], [72.8, 331.0], [72.9, 331.0], [73.0, 331.0], [73.1, 331.0], [73.2, 331.0], [73.3, 331.0], [73.4, 331.0], [73.5, 331.0], [73.6, 331.0], [73.7, 332.0], [73.8, 332.0], [73.9, 332.0], [74.0, 332.0], [74.1, 332.0], [74.2, 332.0], [74.3, 332.0], [74.4, 332.0], [74.5, 332.0], [74.6, 332.0], [74.7, 333.0], [74.8, 333.0], [74.9, 333.0], [75.0, 333.0], [75.1, 333.0], [75.2, 333.0], [75.3, 333.0], [75.4, 333.0], [75.5, 333.0], [75.6, 333.0], [75.7, 333.0], [75.8, 333.0], [75.9, 333.0], [76.0, 334.0], [76.1, 334.0], [76.2, 334.0], [76.3, 334.0], [76.4, 334.0], [76.5, 335.0], [76.6, 335.0], [76.7, 335.0], [76.8, 337.0], [76.9, 337.0], [77.0, 337.0], [77.1, 338.0], [77.2, 338.0], [77.3, 338.0], [77.4, 338.0], [77.5, 340.0], [77.6, 340.0], [77.7, 341.0], [77.8, 341.0], [77.9, 343.0], [78.0, 344.0], [78.1, 345.0], [78.2, 345.0], [78.3, 345.0], [78.4, 347.0], [78.5, 348.0], [78.6, 348.0], [78.7, 348.0], [78.8, 349.0], [78.9, 350.0], [79.0, 353.0], [79.1, 353.0], [79.2, 356.0], [79.3, 359.0], [79.4, 359.0], [79.5, 361.0], [79.6, 364.0], [79.7, 365.0], [79.8, 368.0], [79.9, 369.0], [80.0, 372.0], [80.1, 377.0], [80.2, 380.0], [80.3, 381.0], [80.4, 382.0], [80.5, 385.0], [80.6, 386.0], [80.7, 388.0], [80.8, 390.0], [80.9, 398.0], [81.0, 402.0], [81.1, 403.0], [81.2, 404.0], [81.3, 405.0], [81.4, 408.0], [81.5, 408.0], [81.6, 409.0], [81.7, 410.0], [81.8, 411.0], [81.9, 414.0], [82.0, 416.0], [82.1, 422.0], [82.2, 423.0], [82.3, 427.0], [82.4, 428.0], [82.5, 428.0], [82.6, 434.0], [82.7, 436.0], [82.8, 438.0], [82.9, 441.0], [83.0, 441.0], [83.1, 444.0], [83.2, 449.0], [83.3, 455.0], [83.4, 458.0], [83.5, 463.0], [83.6, 470.0], [83.7, 479.0], [83.8, 485.0], [83.9, 489.0], [84.0, 495.0], [84.1, 495.0], [84.2, 501.0], [84.3, 506.0], [84.4, 508.0], [84.5, 510.0], [84.6, 511.0], [84.7, 512.0], [84.8, 512.0], [84.9, 513.0], [85.0, 514.0], [85.1, 515.0], [85.2, 517.0], [85.3, 517.0], [85.4, 517.0], [85.5, 517.0], [85.6, 517.0], [85.7, 518.0], [85.8, 518.0], [85.9, 518.0], [86.0, 519.0], [86.1, 519.0], [86.2, 519.0], [86.3, 519.0], [86.4, 519.0], [86.5, 520.0], [86.6, 520.0], [86.7, 520.0], [86.8, 520.0], [86.9, 521.0], [87.0, 521.0], [87.1, 521.0], [87.2, 521.0], [87.3, 522.0], [87.4, 524.0], [87.5, 529.0], [87.6, 536.0], [87.7, 540.0], [87.8, 540.0], [87.9, 543.0], [88.0, 556.0], [88.1, 564.0], [88.2, 571.0], [88.3, 576.0], [88.4, 577.0], [88.5, 585.0], [88.6, 585.0], [88.7, 589.0], [88.8, 589.0], [88.9, 597.0], [89.0, 616.0], [89.1, 618.0], [89.2, 619.0], [89.3, 623.0], [89.4, 767.0], [89.5, 793.0], [89.6, 1136.0], [89.7, 1437.0], [89.8, 1558.0], [89.9, 1961.0], [90.0, 2001.0], [90.1, 2455.0], [90.2, 2935.0], [90.3, 4181.0], [90.4, 4288.0], [90.5, 4958.0], [90.6, 4996.0], [90.7, 5014.0], [90.8, 5521.0], [90.9, 6654.0], [91.0, 7143.0], [91.1, 8129.0], [91.2, 8275.0], [91.3, 9368.0], [91.4, 9852.0], [91.5, 10909.0], [91.6, 11401.0], [91.7, 13124.0], [91.8, 14202.0], [91.9, 14603.0], [92.0, 15479.0], [92.1, 16195.0], [92.2, 18309.0], [92.3, 19189.0], [92.4, 19316.0], [92.5, 20034.0], [92.6, 20068.0], [92.7, 20856.0], [92.8, 20917.0], [92.9, 21114.0], [93.0, 21743.0], [93.1, 22232.0], [93.2, 22555.0], [93.3, 23315.0], [93.4, 23769.0], [93.5, 24020.0], [93.6, 24542.0], [93.7, 24708.0], [93.8, 25177.0], [93.9, 25409.0], [94.0, 25458.0], [94.1, 25847.0], [94.2, 25888.0], [94.3, 27082.0], [94.4, 27300.0], [94.5, 28181.0], [94.6, 28701.0], [94.7, 28802.0], [94.8, 29268.0], [94.9, 29520.0], [95.0, 31067.0], [95.1, 31373.0], [95.2, 32312.0], [95.3, 32781.0], [95.4, 34104.0], [95.5, 35100.0], [95.6, 35534.0], [95.7, 35582.0], [95.8, 36004.0], [95.9, 38796.0], [96.0, 39045.0], [96.1, 39300.0], [96.2, 39984.0], [96.3, 40015.0], [96.4, 40464.0], [96.5, 40703.0], [96.6, 41017.0], [96.7, 42055.0], [96.8, 42426.0], [96.9, 42444.0], [97.0, 43271.0], [97.1, 44565.0], [97.2, 46254.0], [97.3, 46759.0], [97.4, 49646.0], [97.5, 50419.0], [97.6, 53278.0], [97.7, 53588.0], [97.8, 54389.0], [97.9, 54548.0], [98.0, 56806.0], [98.1, 58399.0], [98.2, 59475.0], [98.3, 60348.0], [98.4, 60357.0], [98.5, 60429.0], [98.6, 60435.0], [98.7, 60454.0], [98.8, 60489.0], [98.9, 60522.0], [99.0, 60559.0], [99.1, 60562.0], [99.2, 60592.0], [99.3, 60594.0], [99.4, 60609.0], [99.5, 60613.0], [99.6, 60650.0], [99.7, 60743.0], [99.8, 60771.0], [99.9, 60853.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 106.0], [0.1, 106.0], [0.2, 107.0], [0.3, 107.0], [0.4, 107.0], [0.5, 107.0], [0.6, 107.0], [0.7, 107.0], [0.8, 107.0], [0.9, 107.0], [1.0, 107.0], [1.1, 107.0], [1.2, 107.0], [1.3, 107.0], [1.4, 107.0], [1.5, 107.0], [1.6, 107.0], [1.7, 107.0], [1.8, 107.0], [1.9, 107.0], [2.0, 107.0], [2.1, 107.0], [2.2, 107.0], [2.3, 107.0], [2.4, 107.0], [2.5, 107.0], [2.6, 108.0], [2.7, 108.0], [2.8, 108.0], [2.9, 108.0], [3.0, 108.0], [3.1, 108.0], [3.2, 108.0], [3.3, 108.0], [3.4, 108.0], [3.5, 108.0], [3.6, 108.0], [3.7, 108.0], [3.8, 108.0], [3.9, 108.0], [4.0, 108.0], [4.1, 108.0], [4.2, 108.0], [4.3, 108.0], [4.4, 108.0], [4.5, 108.0], [4.6, 108.0], [4.7, 108.0], [4.8, 108.0], [4.9, 108.0], [5.0, 108.0], [5.1, 108.0], [5.2, 108.0], [5.3, 108.0], [5.4, 108.0], [5.5, 108.0], [5.6, 108.0], [5.7, 108.0], [5.8, 108.0], [5.9, 108.0], [6.0, 108.0], [6.1, 108.0], [6.2, 108.0], [6.3, 108.0], [6.4, 108.0], [6.5, 108.0], [6.6, 108.0], [6.7, 108.0], [6.8, 108.0], [6.9, 108.0], [7.0, 108.0], [7.1, 108.0], [7.2, 108.0], [7.3, 108.0], [7.4, 108.0], [7.5, 108.0], [7.6, 108.0], [7.7, 108.0], [7.8, 108.0], [7.9, 108.0], [8.0, 108.0], [8.1, 108.0], [8.2, 108.0], [8.3, 108.0], [8.4, 108.0], [8.5, 108.0], [8.6, 108.0], [8.7, 108.0], [8.8, 108.0], [8.9, 108.0], [9.0, 108.0], [9.1, 108.0], [9.2, 108.0], [9.3, 108.0], [9.4, 108.0], [9.5, 108.0], [9.6, 108.0], [9.7, 108.0], [9.8, 108.0], [9.9, 108.0], [10.0, 108.0], [10.1, 108.0], [10.2, 108.0], [10.3, 108.0], [10.4, 108.0], [10.5, 108.0], [10.6, 108.0], [10.7, 108.0], [10.8, 108.0], [10.9, 108.0], [11.0, 108.0], [11.1, 108.0], [11.2, 108.0], [11.3, 108.0], [11.4, 108.0], [11.5, 108.0], [11.6, 108.0], [11.7, 108.0], [11.8, 108.0], [11.9, 108.0], [12.0, 108.0], [12.1, 109.0], [12.2, 109.0], [12.3, 109.0], [12.4, 109.0], [12.5, 109.0], [12.6, 109.0], [12.7, 109.0], [12.8, 109.0], [12.9, 109.0], [13.0, 109.0], [13.1, 109.0], [13.2, 109.0], [13.3, 109.0], [13.4, 109.0], [13.5, 109.0], [13.6, 109.0], [13.7, 109.0], [13.8, 109.0], [13.9, 109.0], [14.0, 109.0], [14.1, 109.0], [14.2, 109.0], [14.3, 109.0], [14.4, 109.0], [14.5, 109.0], [14.6, 109.0], [14.7, 109.0], [14.8, 109.0], [14.9, 109.0], [15.0, 109.0], [15.1, 109.0], [15.2, 109.0], [15.3, 109.0], [15.4, 109.0], [15.5, 109.0], [15.6, 109.0], [15.7, 109.0], [15.8, 109.0], [15.9, 109.0], [16.0, 109.0], [16.1, 109.0], [16.2, 109.0], [16.3, 109.0], [16.4, 109.0], [16.5, 109.0], [16.6, 109.0], [16.7, 109.0], [16.8, 109.0], [16.9, 109.0], [17.0, 109.0], [17.1, 109.0], [17.2, 109.0], [17.3, 109.0], [17.4, 109.0], [17.5, 109.0], [17.6, 109.0], [17.7, 109.0], [17.8, 109.0], [17.9, 109.0], [18.0, 109.0], [18.1, 109.0], [18.2, 109.0], [18.3, 109.0], [18.4, 109.0], [18.5, 109.0], [18.6, 109.0], [18.7, 109.0], [18.8, 109.0], [18.9, 109.0], [19.0, 109.0], [19.1, 109.0], [19.2, 109.0], [19.3, 109.0], [19.4, 109.0], [19.5, 109.0], [19.6, 109.0], [19.7, 109.0], [19.8, 109.0], [19.9, 109.0], [20.0, 109.0], [20.1, 109.0], [20.2, 109.0], [20.3, 109.0], [20.4, 109.0], [20.5, 109.0], [20.6, 109.0], [20.7, 109.0], [20.8, 109.0], [20.9, 109.0], [21.0, 109.0], [21.1, 109.0], [21.2, 109.0], [21.3, 109.0], [21.4, 109.0], [21.5, 109.0], [21.6, 109.0], [21.7, 109.0], [21.8, 109.0], [21.9, 109.0], [22.0, 109.0], [22.1, 109.0], [22.2, 109.0], [22.3, 109.0], [22.4, 109.0], [22.5, 109.0], [22.6, 109.0], [22.7, 109.0], [22.8, 109.0], [22.9, 109.0], [23.0, 109.0], [23.1, 109.0], [23.2, 109.0], [23.3, 109.0], [23.4, 109.0], [23.5, 109.0], [23.6, 109.0], [23.7, 109.0], [23.8, 109.0], [23.9, 109.0], [24.0, 109.0], [24.1, 109.0], [24.2, 109.0], [24.3, 109.0], [24.4, 109.0], [24.5, 109.0], [24.6, 109.0], [24.7, 109.0], [24.8, 109.0], [24.9, 109.0], [25.0, 109.0], [25.1, 109.0], [25.2, 109.0], [25.3, 109.0], [25.4, 109.0], [25.5, 109.0], [25.6, 109.0], [25.7, 109.0], [25.8, 109.0], [25.9, 109.0], [26.0, 109.0], [26.1, 109.0], [26.2, 109.0], [26.3, 109.0], [26.4, 109.0], [26.5, 109.0], [26.6, 109.0], [26.7, 109.0], [26.8, 109.0], [26.9, 109.0], [27.0, 109.0], [27.1, 109.0], [27.2, 109.0], [27.3, 109.0], [27.4, 109.0], [27.5, 109.0], [27.6, 109.0], [27.7, 109.0], [27.8, 109.0], [27.9, 109.0], [28.0, 109.0], [28.1, 109.0], [28.2, 109.0], [28.3, 109.0], [28.4, 109.0], [28.5, 109.0], [28.6, 109.0], [28.7, 109.0], [28.8, 109.0], [28.9, 109.0], [29.0, 109.0], [29.1, 109.0], [29.2, 109.0], [29.3, 109.0], [29.4, 109.0], [29.5, 109.0], [29.6, 109.0], [29.7, 109.0], [29.8, 109.0], [29.9, 109.0], [30.0, 109.0], [30.1, 109.0], [30.2, 109.0], [30.3, 110.0], [30.4, 110.0], [30.5, 110.0], [30.6, 110.0], [30.7, 110.0], [30.8, 110.0], [30.9, 110.0], [31.0, 110.0], [31.1, 110.0], [31.2, 110.0], [31.3, 110.0], [31.4, 110.0], [31.5, 110.0], [31.6, 110.0], [31.7, 110.0], [31.8, 110.0], [31.9, 110.0], [32.0, 110.0], [32.1, 110.0], [32.2, 110.0], [32.3, 110.0], [32.4, 110.0], [32.5, 110.0], [32.6, 110.0], [32.7, 110.0], [32.8, 110.0], [32.9, 110.0], [33.0, 110.0], [33.1, 110.0], [33.2, 110.0], [33.3, 110.0], [33.4, 110.0], [33.5, 110.0], [33.6, 110.0], [33.7, 110.0], [33.8, 110.0], [33.9, 110.0], [34.0, 110.0], [34.1, 110.0], [34.2, 110.0], [34.3, 110.0], [34.4, 110.0], [34.5, 110.0], [34.6, 110.0], [34.7, 110.0], [34.8, 110.0], [34.9, 110.0], [35.0, 110.0], [35.1, 110.0], [35.2, 110.0], [35.3, 110.0], [35.4, 110.0], [35.5, 110.0], [35.6, 110.0], [35.7, 110.0], [35.8, 110.0], [35.9, 110.0], [36.0, 110.0], [36.1, 110.0], [36.2, 110.0], [36.3, 110.0], [36.4, 110.0], [36.5, 110.0], [36.6, 110.0], [36.7, 110.0], [36.8, 110.0], [36.9, 110.0], [37.0, 110.0], [37.1, 110.0], [37.2, 110.0], [37.3, 110.0], [37.4, 110.0], [37.5, 110.0], [37.6, 110.0], [37.7, 110.0], [37.8, 110.0], [37.9, 110.0], [38.0, 110.0], [38.1, 110.0], [38.2, 110.0], [38.3, 110.0], [38.4, 110.0], [38.5, 110.0], [38.6, 110.0], [38.7, 110.0], [38.8, 110.0], [38.9, 110.0], [39.0, 110.0], [39.1, 110.0], [39.2, 110.0], [39.3, 110.0], [39.4, 110.0], [39.5, 110.0], [39.6, 110.0], [39.7, 110.0], [39.8, 110.0], [39.9, 110.0], [40.0, 110.0], [40.1, 110.0], [40.2, 110.0], [40.3, 110.0], [40.4, 110.0], [40.5, 110.0], [40.6, 110.0], [40.7, 110.0], [40.8, 110.0], [40.9, 110.0], [41.0, 110.0], [41.1, 110.0], [41.2, 110.0], [41.3, 110.0], [41.4, 110.0], [41.5, 110.0], [41.6, 110.0], [41.7, 110.0], [41.8, 110.0], [41.9, 110.0], [42.0, 110.0], [42.1, 110.0], [42.2, 110.0], [42.3, 110.0], [42.4, 110.0], [42.5, 110.0], [42.6, 110.0], [42.7, 110.0], [42.8, 110.0], [42.9, 110.0], [43.0, 110.0], [43.1, 110.0], [43.2, 110.0], [43.3, 110.0], [43.4, 110.0], [43.5, 110.0], [43.6, 110.0], [43.7, 110.0], [43.8, 110.0], [43.9, 110.0], [44.0, 110.0], [44.1, 110.0], [44.2, 110.0], [44.3, 110.0], [44.4, 110.0], [44.5, 110.0], [44.6, 110.0], [44.7, 110.0], [44.8, 110.0], [44.9, 110.0], [45.0, 110.0], [45.1, 110.0], [45.2, 110.0], [45.3, 110.0], [45.4, 110.0], [45.5, 110.0], [45.6, 110.0], [45.7, 110.0], [45.8, 110.0], [45.9, 110.0], [46.0, 110.0], [46.1, 110.0], [46.2, 110.0], [46.3, 110.0], [46.4, 110.0], [46.5, 110.0], [46.6, 110.0], [46.7, 110.0], [46.8, 110.0], [46.9, 110.0], [47.0, 110.0], [47.1, 110.0], [47.2, 110.0], [47.3, 110.0], [47.4, 110.0], [47.5, 110.0], [47.6, 110.0], [47.7, 110.0], [47.8, 110.0], [47.9, 110.0], [48.0, 110.0], [48.1, 110.0], [48.2, 110.0], [48.3, 110.0], [48.4, 110.0], [48.5, 110.0], [48.6, 110.0], [48.7, 110.0], [48.8, 110.0], [48.9, 110.0], [49.0, 110.0], [49.1, 110.0], [49.2, 110.0], [49.3, 110.0], [49.4, 110.0], [49.5, 110.0], [49.6, 110.0], [49.7, 110.0], [49.8, 110.0], [49.9, 110.0], [50.0, 110.0], [50.1, 110.0], [50.2, 110.0], [50.3, 110.0], [50.4, 110.0], [50.5, 110.0], [50.6, 110.0], [50.7, 110.0], [50.8, 110.0], [50.9, 110.0], [51.0, 110.0], [51.1, 110.0], [51.2, 110.0], [51.3, 110.0], [51.4, 110.0], [51.5, 110.0], [51.6, 110.0], [51.7, 110.0], [51.8, 110.0], [51.9, 110.0], [52.0, 110.0], [52.1, 110.0], [52.2, 110.0], [52.3, 110.0], [52.4, 110.0], [52.5, 110.0], [52.6, 110.0], [52.7, 110.0], [52.8, 111.0], [52.9, 111.0], [53.0, 111.0], [53.1, 111.0], [53.2, 111.0], [53.3, 111.0], [53.4, 111.0], [53.5, 111.0], [53.6, 111.0], [53.7, 111.0], [53.8, 111.0], [53.9, 111.0], [54.0, 111.0], [54.1, 111.0], [54.2, 111.0], [54.3, 111.0], [54.4, 111.0], [54.5, 111.0], [54.6, 111.0], [54.7, 111.0], [54.8, 111.0], [54.9, 111.0], [55.0, 111.0], [55.1, 111.0], [55.2, 111.0], [55.3, 111.0], [55.4, 111.0], [55.5, 111.0], [55.6, 111.0], [55.7, 111.0], [55.8, 111.0], [55.9, 111.0], [56.0, 111.0], [56.1, 111.0], [56.2, 111.0], [56.3, 111.0], [56.4, 111.0], [56.5, 111.0], [56.6, 111.0], [56.7, 111.0], [56.8, 111.0], [56.9, 111.0], [57.0, 111.0], [57.1, 111.0], [57.2, 111.0], [57.3, 111.0], [57.4, 111.0], [57.5, 111.0], [57.6, 111.0], [57.7, 111.0], [57.8, 111.0], [57.9, 111.0], [58.0, 111.0], [58.1, 111.0], [58.2, 111.0], [58.3, 111.0], [58.4, 111.0], [58.5, 111.0], [58.6, 111.0], [58.7, 111.0], [58.8, 111.0], [58.9, 111.0], [59.0, 111.0], [59.1, 111.0], [59.2, 111.0], [59.3, 111.0], [59.4, 111.0], [59.5, 111.0], [59.6, 111.0], [59.7, 111.0], [59.8, 111.0], [59.9, 111.0], [60.0, 111.0], [60.1, 111.0], [60.2, 111.0], [60.3, 111.0], [60.4, 111.0], [60.5, 111.0], [60.6, 111.0], [60.7, 111.0], [60.8, 111.0], [60.9, 111.0], [61.0, 111.0], [61.1, 111.0], [61.2, 111.0], [61.3, 111.0], [61.4, 111.0], [61.5, 111.0], [61.6, 111.0], [61.7, 111.0], [61.8, 111.0], [61.9, 111.0], [62.0, 111.0], [62.1, 111.0], [62.2, 111.0], [62.3, 111.0], [62.4, 111.0], [62.5, 111.0], [62.6, 111.0], [62.7, 111.0], [62.8, 111.0], [62.9, 111.0], [63.0, 111.0], [63.1, 111.0], [63.2, 111.0], [63.3, 111.0], [63.4, 111.0], [63.5, 111.0], [63.6, 111.0], [63.7, 111.0], [63.8, 111.0], [63.9, 111.0], [64.0, 111.0], [64.1, 111.0], [64.2, 111.0], [64.3, 111.0], [64.4, 111.0], [64.5, 111.0], [64.6, 111.0], [64.7, 111.0], [64.8, 111.0], [64.9, 111.0], [65.0, 111.0], [65.1, 111.0], [65.2, 111.0], [65.3, 111.0], [65.4, 111.0], [65.5, 111.0], [65.6, 111.0], [65.7, 111.0], [65.8, 111.0], [65.9, 111.0], [66.0, 111.0], [66.1, 111.0], [66.2, 111.0], [66.3, 111.0], [66.4, 111.0], [66.5, 111.0], [66.6, 111.0], [66.7, 111.0], [66.8, 111.0], [66.9, 111.0], [67.0, 111.0], [67.1, 111.0], [67.2, 111.0], [67.3, 111.0], [67.4, 111.0], [67.5, 111.0], [67.6, 111.0], [67.7, 111.0], [67.8, 111.0], [67.9, 111.0], [68.0, 111.0], [68.1, 111.0], [68.2, 111.0], [68.3, 111.0], [68.4, 111.0], [68.5, 111.0], [68.6, 111.0], [68.7, 111.0], [68.8, 111.0], [68.9, 111.0], [69.0, 111.0], [69.1, 111.0], [69.2, 111.0], [69.3, 111.0], [69.4, 111.0], [69.5, 111.0], [69.6, 111.0], [69.7, 111.0], [69.8, 111.0], [69.9, 111.0], [70.0, 111.0], [70.1, 111.0], [70.2, 111.0], [70.3, 111.0], [70.4, 111.0], [70.5, 111.0], [70.6, 112.0], [70.7, 112.0], [70.8, 112.0], [70.9, 112.0], [71.0, 112.0], [71.1, 112.0], [71.2, 112.0], [71.3, 112.0], [71.4, 112.0], [71.5, 112.0], [71.6, 112.0], [71.7, 112.0], [71.8, 112.0], [71.9, 112.0], [72.0, 112.0], [72.1, 112.0], [72.2, 112.0], [72.3, 112.0], [72.4, 112.0], [72.5, 112.0], [72.6, 112.0], [72.7, 112.0], [72.8, 112.0], [72.9, 112.0], [73.0, 112.0], [73.1, 112.0], [73.2, 112.0], [73.3, 112.0], [73.4, 112.0], [73.5, 112.0], [73.6, 112.0], [73.7, 112.0], [73.8, 112.0], [73.9, 112.0], [74.0, 112.0], [74.1, 112.0], [74.2, 112.0], [74.3, 112.0], [74.4, 112.0], [74.5, 112.0], [74.6, 112.0], [74.7, 112.0], [74.8, 112.0], [74.9, 112.0], [75.0, 112.0], [75.1, 112.0], [75.2, 112.0], [75.3, 112.0], [75.4, 112.0], [75.5, 112.0], [75.6, 112.0], [75.7, 112.0], [75.8, 112.0], [75.9, 112.0], [76.0, 112.0], [76.1, 112.0], [76.2, 112.0], [76.3, 112.0], [76.4, 112.0], [76.5, 112.0], [76.6, 112.0], [76.7, 112.0], [76.8, 112.0], [76.9, 112.0], [77.0, 112.0], [77.1, 112.0], [77.2, 112.0], [77.3, 112.0], [77.4, 112.0], [77.5, 112.0], [77.6, 112.0], [77.7, 112.0], [77.8, 112.0], [77.9, 112.0], [78.0, 112.0], [78.1, 112.0], [78.2, 112.0], [78.3, 112.0], [78.4, 113.0], [78.5, 113.0], [78.6, 113.0], [78.7, 113.0], [78.8, 113.0], [78.9, 113.0], [79.0, 113.0], [79.1, 113.0], [79.2, 113.0], [79.3, 113.0], [79.4, 113.0], [79.5, 113.0], [79.6, 113.0], [79.7, 113.0], [79.8, 113.0], [79.9, 113.0], [80.0, 113.0], [80.1, 113.0], [80.2, 113.0], [80.3, 113.0], [80.4, 113.0], [80.5, 113.0], [80.6, 113.0], [80.7, 113.0], [80.8, 113.0], [80.9, 113.0], [81.0, 114.0], [81.1, 114.0], [81.2, 114.0], [81.3, 114.0], [81.4, 114.0], [81.5, 114.0], [81.6, 114.0], [81.7, 114.0], [81.8, 114.0], [81.9, 115.0], [82.0, 115.0], [82.1, 115.0], [82.2, 115.0], [82.3, 115.0], [82.4, 115.0], [82.5, 115.0], [82.6, 116.0], [82.7, 116.0], [82.8, 116.0], [82.9, 116.0], [83.0, 117.0], [83.1, 118.0], [83.2, 118.0], [83.3, 119.0], [83.4, 119.0], [83.5, 119.0], [83.6, 120.0], [83.7, 121.0], [83.8, 121.0], [83.9, 122.0], [84.0, 122.0], [84.1, 123.0], [84.2, 126.0], [84.3, 126.0], [84.4, 127.0], [84.5, 128.0], [84.6, 130.0], [84.7, 130.0], [84.8, 131.0], [84.9, 131.0], [85.0, 132.0], [85.1, 135.0], [85.2, 136.0], [85.3, 137.0], [85.4, 137.0], [85.5, 141.0], [85.6, 141.0], [85.7, 147.0], [85.8, 147.0], [85.9, 148.0], [86.0, 149.0], [86.1, 151.0], [86.2, 153.0], [86.3, 155.0], [86.4, 156.0], [86.5, 157.0], [86.6, 159.0], [86.7, 160.0], [86.8, 161.0], [86.9, 161.0], [87.0, 163.0], [87.1, 165.0], [87.2, 169.0], [87.3, 170.0], [87.4, 170.0], [87.5, 171.0], [87.6, 172.0], [87.7, 176.0], [87.8, 177.0], [87.9, 180.0], [88.0, 182.0], [88.1, 182.0], [88.2, 188.0], [88.3, 188.0], [88.4, 191.0], [88.5, 193.0], [88.6, 196.0], [88.7, 199.0], [88.8, 206.0], [88.9, 206.0], [89.0, 208.0], [89.1, 209.0], [89.2, 211.0], [89.3, 214.0], [89.4, 216.0], [89.5, 265.0], [89.6, 285.0], [89.7, 553.0], [89.8, 577.0], [89.9, 1238.0], [90.0, 2045.0], [90.1, 2674.0], [90.2, 3941.0], [90.3, 4440.0], [90.4, 4618.0], [90.5, 4695.0], [90.6, 4749.0], [90.7, 5146.0], [90.8, 6466.0], [90.9, 6837.0], [91.0, 7799.0], [91.1, 8912.0], [91.2, 9035.0], [91.3, 9695.0], [91.4, 10500.0], [91.5, 11612.0], [91.6, 12716.0], [91.7, 13797.0], [91.8, 14278.0], [91.9, 15128.0], [92.0, 17604.0], [92.1, 17903.0], [92.2, 18885.0], [92.3, 18907.0], [92.4, 19640.0], [92.5, 19670.0], [92.6, 20484.0], [92.7, 20511.0], [92.8, 20708.0], [92.9, 21336.0], [93.0, 21826.0], [93.1, 22148.0], [93.2, 22909.0], [93.3, 23450.0], [93.4, 23614.0], [93.5, 24133.0], [93.6, 24302.0], [93.7, 24780.0], [93.8, 24873.0], [93.9, 25056.0], [94.0, 25512.0], [94.1, 25563.0], [94.2, 26673.0], [94.3, 26894.0], [94.4, 27774.0], [94.5, 28229.0], [94.6, 28586.0], [94.7, 28734.0], [94.8, 29116.0], [94.9, 29187.0], [95.0, 31017.0], [95.1, 31966.0], [95.2, 32127.0], [95.3, 33696.0], [95.4, 34714.0], [95.5, 35127.0], [95.6, 35176.0], [95.7, 35647.0], [95.8, 37977.0], [95.9, 38390.0], [96.0, 38733.0], [96.1, 38942.0], [96.2, 39596.0], [96.3, 39613.0], [96.4, 40296.0], [96.5, 40514.0], [96.6, 41501.0], [96.7, 41701.0], [96.8, 42102.0], [96.9, 42125.0], [97.0, 44012.0], [97.1, 45853.0], [97.2, 46111.0], [97.3, 48900.0], [97.4, 49220.0], [97.5, 50479.0], [97.6, 52848.0], [97.7, 53750.0], [97.8, 54053.0], [97.9, 55775.0], [98.0, 56413.0], [98.1, 57823.0], [98.2, 59032.0], [98.3, 59688.0], [98.4, 60122.0], [98.5, 60131.0], [98.6, 60138.0], [98.7, 60145.0], [98.8, 60148.0], [98.9, 60154.0], [99.0, 60159.0], [99.1, 60174.0], [99.2, 60176.0], [99.3, 60185.0], [99.4, 60204.0], [99.5, 60210.0], [99.6, 60219.0], [99.7, 60233.0], [99.8, 60249.0], [99.9, 60274.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 212.0], [0.1, 212.0], [0.2, 212.0], [0.3, 212.0], [0.4, 212.0], [0.5, 212.0], [0.6, 213.0], [0.7, 213.0], [0.8, 213.0], [0.9, 213.0], [1.0, 213.0], [1.1, 213.0], [1.2, 213.0], [1.3, 213.0], [1.4, 213.0], [1.5, 213.0], [1.6, 213.0], [1.7, 213.0], [1.8, 213.0], [1.9, 213.0], [2.0, 213.0], [2.1, 213.0], [2.2, 213.0], [2.3, 213.0], [2.4, 213.0], [2.5, 213.0], [2.6, 213.0], [2.7, 213.0], [2.8, 213.0], [2.9, 213.0], [3.0, 213.0], [3.1, 214.0], [3.2, 214.0], [3.3, 214.0], [3.4, 214.0], [3.5, 214.0], [3.6, 214.0], [3.7, 214.0], [3.8, 214.0], [3.9, 214.0], [4.0, 214.0], [4.1, 214.0], [4.2, 214.0], [4.3, 214.0], [4.4, 214.0], [4.5, 214.0], [4.6, 214.0], [4.7, 214.0], [4.8, 214.0], [4.9, 214.0], [5.0, 214.0], [5.1, 214.0], [5.2, 214.0], [5.3, 214.0], [5.4, 214.0], [5.5, 214.0], [5.6, 214.0], [5.7, 214.0], [5.8, 214.0], [5.9, 214.0], [6.0, 214.0], [6.1, 214.0], [6.2, 214.0], [6.3, 214.0], [6.4, 214.0], [6.5, 214.0], [6.6, 214.0], [6.7, 214.0], [6.8, 214.0], [6.9, 214.0], [7.0, 214.0], [7.1, 214.0], [7.2, 214.0], [7.3, 214.0], [7.4, 214.0], [7.5, 214.0], [7.6, 214.0], [7.7, 214.0], [7.8, 214.0], [7.9, 214.0], [8.0, 214.0], [8.1, 214.0], [8.2, 214.0], [8.3, 214.0], [8.4, 214.0], [8.5, 214.0], [8.6, 214.0], [8.7, 214.0], [8.8, 214.0], [8.9, 215.0], [9.0, 215.0], [9.1, 215.0], [9.2, 215.0], [9.3, 215.0], [9.4, 215.0], [9.5, 215.0], [9.6, 215.0], [9.7, 215.0], [9.8, 215.0], [9.9, 215.0], [10.0, 215.0], [10.1, 215.0], [10.2, 215.0], [10.3, 215.0], [10.4, 215.0], [10.5, 215.0], [10.6, 215.0], [10.7, 215.0], [10.8, 215.0], [10.9, 215.0], [11.0, 215.0], [11.1, 215.0], [11.2, 215.0], [11.3, 215.0], [11.4, 215.0], [11.5, 215.0], [11.6, 215.0], [11.7, 215.0], [11.8, 215.0], [11.9, 215.0], [12.0, 215.0], [12.1, 215.0], [12.2, 215.0], [12.3, 215.0], [12.4, 215.0], [12.5, 215.0], [12.6, 215.0], [12.7, 215.0], [12.8, 215.0], [12.9, 215.0], [13.0, 215.0], [13.1, 215.0], [13.2, 215.0], [13.3, 215.0], [13.4, 215.0], [13.5, 215.0], [13.6, 215.0], [13.7, 215.0], [13.8, 215.0], [13.9, 215.0], [14.0, 215.0], [14.1, 215.0], [14.2, 215.0], [14.3, 215.0], [14.4, 215.0], [14.5, 215.0], [14.6, 215.0], [14.7, 215.0], [14.8, 215.0], [14.9, 215.0], [15.0, 215.0], [15.1, 215.0], [15.2, 215.0], [15.3, 215.0], [15.4, 215.0], [15.5, 215.0], [15.6, 215.0], [15.7, 215.0], [15.8, 215.0], [15.9, 215.0], [16.0, 215.0], [16.1, 215.0], [16.2, 215.0], [16.3, 215.0], [16.4, 215.0], [16.5, 215.0], [16.6, 215.0], [16.7, 215.0], [16.8, 215.0], [16.9, 215.0], [17.0, 215.0], [17.1, 215.0], [17.2, 215.0], [17.3, 215.0], [17.4, 215.0], [17.5, 215.0], [17.6, 215.0], [17.7, 215.0], [17.8, 215.0], [17.9, 215.0], [18.0, 215.0], [18.1, 215.0], [18.2, 215.0], [18.3, 215.0], [18.4, 215.0], [18.5, 215.0], [18.6, 215.0], [18.7, 215.0], [18.8, 215.0], [18.9, 215.0], [19.0, 215.0], [19.1, 215.0], [19.2, 215.0], [19.3, 215.0], [19.4, 215.0], [19.5, 215.0], [19.6, 215.0], [19.7, 215.0], [19.8, 215.0], [19.9, 215.0], [20.0, 215.0], [20.1, 215.0], [20.2, 215.0], [20.3, 215.0], [20.4, 215.0], [20.5, 215.0], [20.6, 215.0], [20.7, 215.0], [20.8, 215.0], [20.9, 215.0], [21.0, 215.0], [21.1, 215.0], [21.2, 215.0], [21.3, 215.0], [21.4, 215.0], [21.5, 215.0], [21.6, 215.0], [21.7, 215.0], [21.8, 215.0], [21.9, 215.0], [22.0, 215.0], [22.1, 215.0], [22.2, 215.0], [22.3, 215.0], [22.4, 215.0], [22.5, 215.0], [22.6, 215.0], [22.7, 215.0], [22.8, 215.0], [22.9, 215.0], [23.0, 215.0], [23.1, 215.0], [23.2, 215.0], [23.3, 215.0], [23.4, 215.0], [23.5, 215.0], [23.6, 215.0], [23.7, 215.0], [23.8, 215.0], [23.9, 215.0], [24.0, 215.0], [24.1, 215.0], [24.2, 215.0], [24.3, 215.0], [24.4, 215.0], [24.5, 215.0], [24.6, 215.0], [24.7, 215.0], [24.8, 215.0], [24.9, 215.0], [25.0, 215.0], [25.1, 215.0], [25.2, 215.0], [25.3, 215.0], [25.4, 215.0], [25.5, 215.0], [25.6, 215.0], [25.7, 215.0], [25.8, 215.0], [25.9, 215.0], [26.0, 215.0], [26.1, 215.0], [26.2, 215.0], [26.3, 215.0], [26.4, 215.0], [26.5, 215.0], [26.6, 215.0], [26.7, 215.0], [26.8, 215.0], [26.9, 215.0], [27.0, 215.0], [27.1, 215.0], [27.2, 215.0], [27.3, 215.0], [27.4, 215.0], [27.5, 216.0], [27.6, 216.0], [27.7, 216.0], [27.8, 216.0], [27.9, 216.0], [28.0, 216.0], [28.1, 216.0], [28.2, 216.0], [28.3, 216.0], [28.4, 216.0], [28.5, 216.0], [28.6, 216.0], [28.7, 216.0], [28.8, 216.0], [28.9, 216.0], [29.0, 216.0], [29.1, 216.0], [29.2, 216.0], [29.3, 216.0], [29.4, 216.0], [29.5, 216.0], [29.6, 216.0], [29.7, 216.0], [29.8, 216.0], [29.9, 216.0], [30.0, 216.0], [30.1, 216.0], [30.2, 216.0], [30.3, 216.0], [30.4, 216.0], [30.5, 216.0], [30.6, 216.0], [30.7, 216.0], [30.8, 216.0], [30.9, 216.0], [31.0, 216.0], [31.1, 216.0], [31.2, 216.0], [31.3, 216.0], [31.4, 216.0], [31.5, 216.0], [31.6, 216.0], [31.7, 216.0], [31.8, 216.0], [31.9, 216.0], [32.0, 216.0], [32.1, 216.0], [32.2, 216.0], [32.3, 216.0], [32.4, 216.0], [32.5, 216.0], [32.6, 216.0], [32.7, 216.0], [32.8, 216.0], [32.9, 216.0], [33.0, 216.0], [33.1, 216.0], [33.2, 216.0], [33.3, 216.0], [33.4, 216.0], [33.5, 216.0], [33.6, 216.0], [33.7, 216.0], [33.8, 216.0], [33.9, 216.0], [34.0, 216.0], [34.1, 216.0], [34.2, 216.0], [34.3, 216.0], [34.4, 216.0], [34.5, 216.0], [34.6, 216.0], [34.7, 216.0], [34.8, 216.0], [34.9, 216.0], [35.0, 216.0], [35.1, 216.0], [35.2, 216.0], [35.3, 216.0], [35.4, 216.0], [35.5, 216.0], [35.6, 216.0], [35.7, 216.0], [35.8, 216.0], [35.9, 216.0], [36.0, 216.0], [36.1, 216.0], [36.2, 216.0], [36.3, 216.0], [36.4, 216.0], [36.5, 216.0], [36.6, 216.0], [36.7, 216.0], [36.8, 216.0], [36.9, 216.0], [37.0, 216.0], [37.1, 216.0], [37.2, 216.0], [37.3, 216.0], [37.4, 216.0], [37.5, 216.0], [37.6, 216.0], [37.7, 216.0], [37.8, 216.0], [37.9, 216.0], [38.0, 216.0], [38.1, 216.0], [38.2, 216.0], [38.3, 216.0], [38.4, 216.0], [38.5, 216.0], [38.6, 216.0], [38.7, 216.0], [38.8, 216.0], [38.9, 216.0], [39.0, 216.0], [39.1, 216.0], [39.2, 216.0], [39.3, 216.0], [39.4, 216.0], [39.5, 216.0], [39.6, 216.0], [39.7, 216.0], [39.8, 216.0], [39.9, 216.0], [40.0, 216.0], [40.1, 216.0], [40.2, 216.0], [40.3, 216.0], [40.4, 216.0], [40.5, 216.0], [40.6, 216.0], [40.7, 216.0], [40.8, 216.0], [40.9, 216.0], [41.0, 216.0], [41.1, 216.0], [41.2, 216.0], [41.3, 216.0], [41.4, 216.0], [41.5, 216.0], [41.6, 216.0], [41.7, 216.0], [41.8, 216.0], [41.9, 216.0], [42.0, 216.0], [42.1, 216.0], [42.2, 216.0], [42.3, 216.0], [42.4, 216.0], [42.5, 216.0], [42.6, 216.0], [42.7, 216.0], [42.8, 216.0], [42.9, 216.0], [43.0, 216.0], [43.1, 216.0], [43.2, 216.0], [43.3, 216.0], [43.4, 216.0], [43.5, 216.0], [43.6, 216.0], [43.7, 216.0], [43.8, 216.0], [43.9, 216.0], [44.0, 216.0], [44.1, 216.0], [44.2, 216.0], [44.3, 216.0], [44.4, 216.0], [44.5, 216.0], [44.6, 216.0], [44.7, 217.0], [44.8, 217.0], [44.9, 217.0], [45.0, 217.0], [45.1, 217.0], [45.2, 217.0], [45.3, 217.0], [45.4, 217.0], [45.5, 217.0], [45.6, 217.0], [45.7, 217.0], [45.8, 217.0], [45.9, 217.0], [46.0, 217.0], [46.1, 217.0], [46.2, 217.0], [46.3, 217.0], [46.4, 217.0], [46.5, 217.0], [46.6, 217.0], [46.7, 217.0], [46.8, 217.0], [46.9, 217.0], [47.0, 217.0], [47.1, 217.0], [47.2, 217.0], [47.3, 217.0], [47.4, 217.0], [47.5, 217.0], [47.6, 217.0], [47.7, 217.0], [47.8, 217.0], [47.9, 217.0], [48.0, 217.0], [48.1, 217.0], [48.2, 217.0], [48.3, 217.0], [48.4, 217.0], [48.5, 217.0], [48.6, 217.0], [48.7, 217.0], [48.8, 217.0], [48.9, 217.0], [49.0, 217.0], [49.1, 217.0], [49.2, 217.0], [49.3, 217.0], [49.4, 217.0], [49.5, 217.0], [49.6, 217.0], [49.7, 217.0], [49.8, 217.0], [49.9, 217.0], [50.0, 217.0], [50.1, 217.0], [50.2, 217.0], [50.3, 217.0], [50.4, 217.0], [50.5, 217.0], [50.6, 217.0], [50.7, 217.0], [50.8, 217.0], [50.9, 217.0], [51.0, 217.0], [51.1, 217.0], [51.2, 217.0], [51.3, 217.0], [51.4, 217.0], [51.5, 217.0], [51.6, 217.0], [51.7, 217.0], [51.8, 217.0], [51.9, 217.0], [52.0, 217.0], [52.1, 217.0], [52.2, 217.0], [52.3, 217.0], [52.4, 217.0], [52.5, 217.0], [52.6, 217.0], [52.7, 217.0], [52.8, 217.0], [52.9, 217.0], [53.0, 217.0], [53.1, 217.0], [53.2, 217.0], [53.3, 217.0], [53.4, 217.0], [53.5, 217.0], [53.6, 217.0], [53.7, 217.0], [53.8, 217.0], [53.9, 217.0], [54.0, 217.0], [54.1, 217.0], [54.2, 217.0], [54.3, 217.0], [54.4, 217.0], [54.5, 217.0], [54.6, 217.0], [54.7, 217.0], [54.8, 217.0], [54.9, 217.0], [55.0, 217.0], [55.1, 217.0], [55.2, 217.0], [55.3, 217.0], [55.4, 217.0], [55.5, 217.0], [55.6, 217.0], [55.7, 217.0], [55.8, 217.0], [55.9, 217.0], [56.0, 217.0], [56.1, 217.0], [56.2, 217.0], [56.3, 217.0], [56.4, 217.0], [56.5, 217.0], [56.6, 217.0], [56.7, 217.0], [56.8, 217.0], [56.9, 217.0], [57.0, 217.0], [57.1, 217.0], [57.2, 217.0], [57.3, 217.0], [57.4, 217.0], [57.5, 217.0], [57.6, 217.0], [57.7, 217.0], [57.8, 217.0], [57.9, 217.0], [58.0, 217.0], [58.1, 217.0], [58.2, 217.0], [58.3, 217.0], [58.4, 217.0], [58.5, 217.0], [58.6, 217.0], [58.7, 217.0], [58.8, 217.0], [58.9, 217.0], [59.0, 217.0], [59.1, 217.0], [59.2, 217.0], [59.3, 217.0], [59.4, 217.0], [59.5, 217.0], [59.6, 217.0], [59.7, 217.0], [59.8, 217.0], [59.9, 217.0], [60.0, 217.0], [60.1, 218.0], [60.2, 218.0], [60.3, 218.0], [60.4, 218.0], [60.5, 218.0], [60.6, 218.0], [60.7, 218.0], [60.8, 218.0], [60.9, 218.0], [61.0, 218.0], [61.1, 218.0], [61.2, 218.0], [61.3, 218.0], [61.4, 218.0], [61.5, 218.0], [61.6, 218.0], [61.7, 218.0], [61.8, 218.0], [61.9, 218.0], [62.0, 218.0], [62.1, 218.0], [62.2, 218.0], [62.3, 218.0], [62.4, 218.0], [62.5, 218.0], [62.6, 218.0], [62.7, 218.0], [62.8, 218.0], [62.9, 218.0], [63.0, 218.0], [63.1, 218.0], [63.2, 218.0], [63.3, 218.0], [63.4, 218.0], [63.5, 218.0], [63.6, 218.0], [63.7, 218.0], [63.8, 218.0], [63.9, 218.0], [64.0, 218.0], [64.1, 218.0], [64.2, 218.0], [64.3, 218.0], [64.4, 218.0], [64.5, 218.0], [64.6, 218.0], [64.7, 218.0], [64.8, 218.0], [64.9, 218.0], [65.0, 218.0], [65.1, 218.0], [65.2, 218.0], [65.3, 218.0], [65.4, 218.0], [65.5, 218.0], [65.6, 218.0], [65.7, 218.0], [65.8, 218.0], [65.9, 218.0], [66.0, 218.0], [66.1, 218.0], [66.2, 218.0], [66.3, 218.0], [66.4, 218.0], [66.5, 218.0], [66.6, 218.0], [66.7, 218.0], [66.8, 218.0], [66.9, 218.0], [67.0, 218.0], [67.1, 218.0], [67.2, 218.0], [67.3, 218.0], [67.4, 218.0], [67.5, 218.0], [67.6, 218.0], [67.7, 218.0], [67.8, 218.0], [67.9, 218.0], [68.0, 218.0], [68.1, 218.0], [68.2, 218.0], [68.3, 218.0], [68.4, 218.0], [68.5, 218.0], [68.6, 218.0], [68.7, 218.0], [68.8, 218.0], [68.9, 218.0], [69.0, 218.0], [69.1, 218.0], [69.2, 218.0], [69.3, 218.0], [69.4, 218.0], [69.5, 218.0], [69.6, 218.0], [69.7, 218.0], [69.8, 218.0], [69.9, 218.0], [70.0, 218.0], [70.1, 218.0], [70.2, 218.0], [70.3, 219.0], [70.4, 219.0], [70.5, 219.0], [70.6, 219.0], [70.7, 219.0], [70.8, 219.0], [70.9, 219.0], [71.0, 219.0], [71.1, 219.0], [71.2, 219.0], [71.3, 219.0], [71.4, 219.0], [71.5, 219.0], [71.6, 219.0], [71.7, 219.0], [71.8, 219.0], [71.9, 219.0], [72.0, 219.0], [72.1, 219.0], [72.2, 219.0], [72.3, 219.0], [72.4, 219.0], [72.5, 219.0], [72.6, 219.0], [72.7, 219.0], [72.8, 219.0], [72.9, 219.0], [73.0, 219.0], [73.1, 219.0], [73.2, 219.0], [73.3, 219.0], [73.4, 219.0], [73.5, 219.0], [73.6, 219.0], [73.7, 219.0], [73.8, 219.0], [73.9, 219.0], [74.0, 219.0], [74.1, 219.0], [74.2, 219.0], [74.3, 219.0], [74.4, 219.0], [74.5, 219.0], [74.6, 219.0], [74.7, 219.0], [74.8, 219.0], [74.9, 219.0], [75.0, 219.0], [75.1, 219.0], [75.2, 219.0], [75.3, 219.0], [75.4, 219.0], [75.5, 219.0], [75.6, 219.0], [75.7, 219.0], [75.8, 219.0], [75.9, 219.0], [76.0, 219.0], [76.1, 219.0], [76.2, 219.0], [76.3, 219.0], [76.4, 220.0], [76.5, 220.0], [76.6, 220.0], [76.7, 220.0], [76.8, 220.0], [76.9, 220.0], [77.0, 220.0], [77.1, 220.0], [77.2, 220.0], [77.3, 220.0], [77.4, 220.0], [77.5, 220.0], [77.6, 220.0], [77.7, 220.0], [77.8, 220.0], [77.9, 220.0], [78.0, 220.0], [78.1, 220.0], [78.2, 220.0], [78.3, 221.0], [78.4, 221.0], [78.5, 221.0], [78.6, 221.0], [78.7, 221.0], [78.8, 221.0], [78.9, 221.0], [79.0, 221.0], [79.1, 221.0], [79.2, 221.0], [79.3, 221.0], [79.4, 221.0], [79.5, 222.0], [79.6, 222.0], [79.7, 222.0], [79.8, 223.0], [79.9, 223.0], [80.0, 223.0], [80.1, 223.0], [80.2, 224.0], [80.3, 224.0], [80.4, 224.0], [80.5, 225.0], [80.6, 226.0], [80.7, 226.0], [80.8, 226.0], [80.9, 226.0], [81.0, 227.0], [81.1, 228.0], [81.2, 229.0], [81.3, 231.0], [81.4, 233.0], [81.5, 234.0], [81.6, 234.0], [81.7, 234.0], [81.8, 236.0], [81.9, 236.0], [82.0, 240.0], [82.1, 245.0], [82.2, 246.0], [82.3, 247.0], [82.4, 248.0], [82.5, 255.0], [82.6, 259.0], [82.7, 261.0], [82.8, 263.0], [82.9, 266.0], [83.0, 267.0], [83.1, 270.0], [83.2, 275.0], [83.3, 276.0], [83.4, 289.0], [83.5, 292.0], [83.6, 295.0], [83.7, 296.0], [83.8, 302.0], [83.9, 304.0], [84.0, 304.0], [84.1, 305.0], [84.2, 305.0], [84.3, 305.0], [84.4, 306.0], [84.5, 306.0], [84.6, 307.0], [84.7, 307.0], [84.8, 307.0], [84.9, 308.0], [85.0, 308.0], [85.1, 310.0], [85.2, 311.0], [85.3, 314.0], [85.4, 316.0], [85.5, 318.0], [85.6, 319.0], [85.7, 319.0], [85.8, 320.0], [85.9, 323.0], [86.0, 324.0], [86.1, 325.0], [86.2, 325.0], [86.3, 326.0], [86.4, 326.0], [86.5, 327.0], [86.6, 330.0], [86.7, 331.0], [86.8, 333.0], [86.9, 333.0], [87.0, 335.0], [87.1, 342.0], [87.2, 343.0], [87.3, 346.0], [87.4, 347.0], [87.5, 351.0], [87.6, 354.0], [87.7, 356.0], [87.8, 356.0], [87.9, 357.0], [88.0, 358.0], [88.1, 363.0], [88.2, 370.0], [88.3, 372.0], [88.4, 374.0], [88.5, 375.0], [88.6, 378.0], [88.7, 383.0], [88.8, 384.0], [88.9, 388.0], [89.0, 390.0], [89.1, 393.0], [89.2, 393.0], [89.3, 394.0], [89.4, 400.0], [89.5, 400.0], [89.6, 400.0], [89.7, 400.0], [89.8, 401.0], [89.9, 402.0], [90.0, 403.0], [90.1, 403.0], [90.2, 404.0], [90.3, 404.0], [90.4, 404.0], [90.5, 405.0], [90.6, 405.0], [90.7, 405.0], [90.8, 405.0], [90.9, 405.0], [91.0, 406.0], [91.1, 406.0], [91.2, 406.0], [91.3, 406.0], [91.4, 406.0], [91.5, 406.0], [91.6, 406.0], [91.7, 406.0], [91.8, 406.0], [91.9, 406.0], [92.0, 406.0], [92.1, 406.0], [92.2, 406.0], [92.3, 406.0], [92.4, 406.0], [92.5, 406.0], [92.6, 406.0], [92.7, 406.0], [92.8, 406.0], [92.9, 407.0], [93.0, 407.0], [93.1, 407.0], [93.2, 407.0], [93.3, 407.0], [93.4, 407.0], [93.5, 407.0], [93.6, 407.0], [93.7, 407.0], [93.8, 407.0], [93.9, 407.0], [94.0, 407.0], [94.1, 407.0], [94.2, 408.0], [94.3, 408.0], [94.4, 408.0], [94.5, 408.0], [94.6, 408.0], [94.7, 408.0], [94.8, 408.0], [94.9, 408.0], [95.0, 408.0], [95.1, 408.0], [95.2, 408.0], [95.3, 408.0], [95.4, 408.0], [95.5, 408.0], [95.6, 408.0], [95.7, 409.0], [95.8, 409.0], [95.9, 409.0], [96.0, 409.0], [96.1, 409.0], [96.2, 409.0], [96.3, 409.0], [96.4, 409.0], [96.5, 409.0], [96.6, 409.0], [96.7, 409.0], [96.8, 409.0], [96.9, 410.0], [97.0, 410.0], [97.1, 410.0], [97.2, 410.0], [97.3, 410.0], [97.4, 410.0], [97.5, 410.0], [97.6, 410.0], [97.7, 410.0], [97.8, 410.0], [97.9, 410.0], [98.0, 411.0], [98.1, 411.0], [98.2, 412.0], [98.3, 426.0], [98.4, 430.0], [98.5, 454.0], [98.6, 455.0], [98.7, 511.0], [98.8, 589.0], [98.9, 604.0], [99.0, 609.0], [99.1, 612.0], [99.2, 639.0], [99.3, 811.0], [99.4, 920.0], [99.5, 924.0], [99.6, 1011.0], [99.7, 1437.0], [99.8, 1851.0], [99.9, 2064.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 1375.0, "series": [{"data": [[34100.0, 1.0], [35100.0, 1.0], [35500.0, 3.0], [34900.0, 1.0], [38300.0, 1.0], [38700.0, 1.0], [40700.0, 1.0], [40900.0, 1.0], [39300.0, 2.0], [39900.0, 1.0], [44500.0, 1.0], [46700.0, 1.0], [46500.0, 1.0], [200.0, 18.0], [54500.0, 1.0], [54300.0, 1.0], [53500.0, 1.0], [56300.0, 1.0], [58300.0, 1.0], [60500.0, 8.0], [60700.0, 3.0], [60900.0, 1.0], [60300.0, 3.0], [300.0, 1255.0], [400.0, 51.0], [500.0, 75.0], [600.0, 7.0], [700.0, 2.0], [1000.0, 1.0], [1100.0, 1.0], [1400.0, 2.0], [1500.0, 1.0], [1800.0, 1.0], [1900.0, 1.0], [2000.0, 1.0], [2100.0, 1.0], [2400.0, 1.0], [2900.0, 1.0], [3100.0, 1.0], [4200.0, 1.0], [4100.0, 1.0], [4800.0, 1.0], [5000.0, 2.0], [4900.0, 3.0], [5500.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [7100.0, 1.0], [8100.0, 1.0], [8000.0, 1.0], [8200.0, 1.0], [9300.0, 2.0], [9800.0, 1.0], [10000.0, 1.0], [10900.0, 1.0], [11400.0, 1.0], [11900.0, 1.0], [13100.0, 1.0], [14200.0, 1.0], [13900.0, 1.0], [14600.0, 1.0], [14900.0, 1.0], [15400.0, 1.0], [16100.0, 1.0], [18300.0, 1.0], [18000.0, 1.0], [19300.0, 2.0], [19100.0, 1.0], [19200.0, 1.0], [20000.0, 3.0], [20800.0, 1.0], [20900.0, 2.0], [21100.0, 1.0], [21700.0, 1.0], [22500.0, 1.0], [21800.0, 1.0], [22400.0, 1.0], [22200.0, 1.0], [23500.0, 1.0], [23300.0, 1.0], [24100.0, 1.0], [24000.0, 1.0], [23700.0, 1.0], [24500.0, 1.0], [25400.0, 2.0], [25100.0, 2.0], [24700.0, 2.0], [25800.0, 3.0], [26600.0, 1.0], [27300.0, 2.0], [27000.0, 1.0], [28500.0, 1.0], [28100.0, 1.0], [29500.0, 2.0], [29100.0, 1.0], [28800.0, 1.0], [28700.0, 1.0], [29200.0, 1.0], [31000.0, 1.0], [31300.0, 1.0], [32300.0, 1.0], [31900.0, 1.0], [32400.0, 1.0], [32700.0, 1.0], [36000.0, 1.0], [38800.0, 1.0], [39000.0, 1.0], [40400.0, 1.0], [40000.0, 2.0], [41000.0, 1.0], [42400.0, 3.0], [42000.0, 1.0], [41800.0, 1.0], [44400.0, 1.0], [43200.0, 1.0], [46200.0, 1.0], [50800.0, 1.0], [49600.0, 1.0], [49200.0, 1.0], [50400.0, 1.0], [53200.0, 1.0], [54200.0, 1.0], [56800.0, 2.0], [60600.0, 4.0], [60800.0, 2.0], [59400.0, 2.0], [60400.0, 6.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 1375.0], [34700.0, 1.0], [35100.0, 2.0], [38700.0, 1.0], [37900.0, 1.0], [38900.0, 1.0], [38300.0, 1.0], [40500.0, 1.0], [39500.0, 1.0], [42100.0, 2.0], [41700.0, 1.0], [41500.0, 1.0], [46300.0, 1.0], [46100.0, 1.0], [48900.0, 1.0], [200.0, 14.0], [54100.0, 1.0], [53700.0, 1.0], [53300.0, 1.0], [55700.0, 1.0], [60100.0, 16.0], [300.0, 1.0], [500.0, 2.0], [1200.0, 2.0], [1400.0, 1.0], [2000.0, 1.0], [2600.0, 1.0], [3800.0, 1.0], [3900.0, 1.0], [4400.0, 1.0], [4600.0, 2.0], [4500.0, 1.0], [4700.0, 2.0], [5100.0, 1.0], [6200.0, 1.0], [6400.0, 1.0], [6800.0, 1.0], [7400.0, 1.0], [7700.0, 1.0], [7800.0, 1.0], [9000.0, 1.0], [8900.0, 1.0], [9500.0, 1.0], [9600.0, 1.0], [10500.0, 1.0], [11000.0, 1.0], [11600.0, 1.0], [12700.0, 1.0], [13700.0, 1.0], [13500.0, 1.0], [14200.0, 1.0], [14500.0, 1.0], [15100.0, 1.0], [15800.0, 1.0], [17900.0, 1.0], [17600.0, 1.0], [18900.0, 2.0], [18800.0, 1.0], [18700.0, 1.0], [20400.0, 1.0], [19600.0, 2.0], [19700.0, 1.0], [20500.0, 1.0], [21300.0, 1.0], [21500.0, 1.0], [20700.0, 1.0], [20600.0, 1.0], [22100.0, 1.0], [22000.0, 1.0], [21800.0, 1.0], [23000.0, 1.0], [22900.0, 1.0], [23400.0, 1.0], [23700.0, 1.0], [23600.0, 1.0], [24300.0, 2.0], [24100.0, 1.0], [25000.0, 2.0], [25400.0, 1.0], [25500.0, 2.0], [24800.0, 1.0], [24700.0, 1.0], [26300.0, 1.0], [26600.0, 1.0], [26800.0, 1.0], [27000.0, 1.0], [28500.0, 1.0], [28300.0, 1.0], [28200.0, 1.0], [27700.0, 1.0], [29100.0, 2.0], [28700.0, 1.0], [28800.0, 1.0], [30600.0, 1.0], [31500.0, 1.0], [31000.0, 1.0], [31900.0, 1.0], [32100.0, 1.0], [32300.0, 1.0], [34800.0, 1.0], [33600.0, 1.0], [35600.0, 1.0], [35200.0, 1.0], [38400.0, 1.0], [38200.0, 1.0], [40600.0, 1.0], [40200.0, 2.0], [39000.0, 1.0], [39600.0, 1.0], [42000.0, 1.0], [42800.0, 1.0], [44200.0, 1.0], [44000.0, 1.0], [45800.0, 1.0], [50400.0, 1.0], [49200.0, 1.0], [50200.0, 1.0], [52800.0, 1.0], [54000.0, 1.0], [56400.0, 1.0], [56000.0, 1.0], [59000.0, 2.0], [57800.0, 1.0], [60200.0, 9.0], [59600.0, 1.0], [60400.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 89.0], [600.0, 6.0], [1400.0, 1.0], [2900.0, 1.0], [400.0, 146.0], [200.0, 1319.0], [800.0, 2.0], [900.0, 3.0], [1800.0, 2.0], [1000.0, 2.0], [500.0, 3.0], [2000.0, 1.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2871.0, "series": [{"data": [[0.0, 151.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 16.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 87.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2871.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6852101E12, "maxY": 23.78996282527882, "series": [{"data": [[1.68521052E12, 13.568181818181818], [1.68521022E12, 5.0], [1.68521082E12, 20.07407407407408], [1.68521016E12, 3.444444444444444], [1.68521076E12, 20.0], [1.68521046E12, 10.029411764705882], [1.6852104E12, 10.0], [1.6852101E12, 1.0], [1.6852107E12, 18.81290322580644], [1.685211E12, 8.245283018867926], [1.68521064E12, 15.010869565217392], [1.68521034E12, 8.161290322580644], [1.68521094E12, 23.78996282527882], [1.68521028E12, 5.032258064516129], [1.68521058E12, 15.0], [1.68521088E12, 23.388777555110238]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.685211E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 109.46153846153847, "minX": 1.0, "maxY": 50153.833333333336, "series": [{"data": [[2.0, 6139.5], [8.0, 18397.8], [9.0, 13894.000000000002], [10.0, 38192.41379310344], [11.0, 16381.6], [12.0, 14459.500000000002], [13.0, 317.64285714285717], [14.0, 43454.0], [15.0, 2431.393162393165], [4.0, 4528.4], [16.0, 5068.15], [1.0, 327.0], [17.0, 1997.3333333333337], [18.0, 1285.9], [19.0, 31047.76000000001], [5.0, 18183.63333333334], [20.0, 3699.3774104683257], [21.0, 327.25], [22.0, 324.8196721311477], [23.0, 324.9264705882352], [24.0, 325.54545454545433], [6.0, 336.3333333333333], [25.0, 325.9869451697128], [7.0, 10821.42857142857]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[19.546726001271455, 3650.8989192625554]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 7710.666666666667], [8.0, 22595.0], [9.0, 18135.333333333336], [10.0, 39177.21428571428], [11.0, 15969.2], [12.0, 16894.4], [13.0, 109.46153846153847], [14.0, 50153.833333333336], [15.0, 2167.831428571426], [4.0, 5183.999999999999], [16.0, 5077.263157894737], [1.0, 110.0], [17.0, 1993.0], [18.0, 1124.9999999999998], [19.0, 31968.33333333334], [5.0, 18452.172413793105], [20.0, 3442.668508287291], [21.0, 110.24999999999999], [22.0, 110.23333333333332], [23.0, 110.089552238806], [24.0, 109.97701149425282], [6.0, 133.0], [25.0, 109.92670157068063], [7.0, 12262.333333333334]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[19.647096774193564, 3447.9690322580577]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 381.8], [3.0, 325.0], [4.0, 393.25], [5.0, 355.7096774193549], [6.0, 327.0], [7.0, 368.14285714285717], [8.0, 284.8], [9.0, 278.0], [10.0, 469.9310344827586], [11.0, 319.0], [12.0, 427.25], [13.0, 233.4615384615385], [14.0, 354.4285714285714], [15.0, 267.2613636363637], [1.0, 273.5], [16.0, 267.5263157894737], [17.0, 345.28571428571433], [18.0, 276.5], [19.0, 411.91304347826093], [20.0, 255.57458563535874], [21.0, 217.45070422535213], [22.0, 216.46153846153837], [23.0, 216.2463768115942], [24.0, 216.74712643678166], [25.0, 216.39164490861614]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[19.5390476190476, 253.29714285714343]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6.95, "minX": 1.6852101E12, "maxY": 50472.86666666667, "series": [{"data": [[1.68521052E12, 743.7333333333333], [1.68521022E12, 1063.65], [1.68521082E12, 6914.483333333334], [1.68521016E12, 622.5333333333333], [1.68521076E12, 1972.9166666666667], [1.68521046E12, 843.5], [1.6852104E12, 1100.75], [1.6852101E12, 36.28333333333333], [1.6852107E12, 2334.8166666666666], [1.685211E12, 803.4833333333333], [1.68521064E12, 3940.0666666666666], [1.68521034E12, 805.5833333333334], [1.68521094E12, 8125.366666666667], [1.68521028E12, 770.1166666666667], [1.68521058E12, 4165.283333333334], [1.68521088E12, 7514.266666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68521052E12, 1654.6333333333334], [1.68521022E12, 1633.9666666666667], [1.68521082E12, 42882.583333333336], [1.68521016E12, 1131.9], [1.68521076E12, 7749.55], [1.68521046E12, 1732.8], [1.6852104E12, 2028.6], [1.6852101E12, 6.95], [1.6852107E12, 6954.266666666666], [1.685211E12, 5385.966666666666], [1.68521064E12, 22241.65], [1.68521034E12, 1174.65], [1.68521094E12, 50472.86666666667], [1.68521028E12, 1131.0166666666667], [1.68521058E12, 27574.916666666668], [1.68521088E12, 49769.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.685211E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 109.97272727272724, "minX": 1.6852101E12, "maxY": 46260.45454545455, "series": [{"data": [[1.68521052E12, 42532.57142857143], [1.68521022E12, 23259.818181818184], [1.68521082E12, 347.2214983713354], [1.68521016E12, 14551.4], [1.68521076E12, 18174.68656716417], [1.68521046E12, 46260.45454545455], [1.6852104E12, 37274.8], [1.6852107E12, 17937.274509803923], [1.685211E12, 348.14285714285717], [1.68521064E12, 449.9448275862068], [1.68521034E12, 28862.333333333336], [1.68521094E12, 323.19553072625683], [1.68521028E12, 20867.6], [1.68521058E12, 3410.035714285715], [1.68521088E12, 326.38323353293384]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68521052E12, 40396.307692307695], [1.68521022E12, 22089.214285714286], [1.68521082E12, 472.9309210526314], [1.68521016E12, 12058.142857142857], [1.68521076E12, 20821.596153846156], [1.68521046E12, 45839.0], [1.6852104E12, 36926.13333333334], [1.6852107E12, 17907.86], [1.685211E12, 120.97142857142858], [1.68521064E12, 179.66451612903222], [1.68521034E12, 28483.11111111111], [1.68521094E12, 110.0445682451253], [1.68521028E12, 20491.899999999998], [1.68521058E12, 3636.5053763440847], [1.68521088E12, 109.97272727272724]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68521052E12, 581.4117647058823], [1.68521022E12, 369.93333333333334], [1.68521082E12, 236.99999999999997], [1.68521016E12, 376.7], [1.68521076E12, 346.89795918367355], [1.68521046E12, 556.4166666666665], [1.6852104E12, 421.79999999999995], [1.6852101E12, 330.0], [1.6852107E12, 367.51851851851836], [1.685211E12, 263.4444444444444], [1.68521064E12, 275.10625], [1.68521034E12, 330.46153846153845], [1.68521094E12, 216.5487465181057], [1.68521028E12, 381.5454545454545], [1.68521058E12, 246.05494505494516], [1.68521088E12, 216.43413173652692]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.685211E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 109.94545454545457, "minX": 1.6852101E12, "maxY": 46260.09090909091, "series": [{"data": [[1.68521052E12, 42532.42857142857], [1.68521022E12, 23259.272727272724], [1.68521082E12, 347.14006514658007], [1.68521016E12, 14550.099999999999], [1.68521076E12, 18174.164179104482], [1.68521046E12, 46260.09090909091], [1.6852104E12, 37274.33333333333], [1.6852107E12, 17925.470588235294], [1.685211E12, 348.14285714285717], [1.68521064E12, 447.04827586206926], [1.68521034E12, 28862.333333333336], [1.68521094E12, 323.1117318435754], [1.68521028E12, 20867.100000000002], [1.68521058E12, 3409.836734693878], [1.68521088E12, 326.31137724550865]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68521052E12, 40396.307692307695], [1.68521022E12, 22089.07142857143], [1.68521082E12, 472.89802631578885], [1.68521016E12, 12058.142857142857], [1.68521076E12, 20821.557692307688], [1.68521046E12, 45838.818181818184], [1.6852104E12, 36926.0], [1.6852107E12, 17907.839999999997], [1.685211E12, 120.94285714285715], [1.68521064E12, 179.6258064516129], [1.68521034E12, 28483.11111111111], [1.68521094E12, 110.0111420612813], [1.68521028E12, 20491.699999999997], [1.68521058E12, 3636.397849462363], [1.68521088E12, 109.94545454545457]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68521052E12, 581.1176470588235], [1.68521022E12, 369.3999999999999], [1.68521082E12, 236.95114006514657], [1.68521016E12, 376.6], [1.68521076E12, 346.42857142857156], [1.68521046E12, 556.3333333333333], [1.6852104E12, 421.59999999999997], [1.6852101E12, 319.0], [1.6852107E12, 365.46296296296293], [1.685211E12, 263.4444444444444], [1.68521064E12, 269.38750000000005], [1.68521034E12, 330.15384615384613], [1.68521094E12, 216.50139275766023], [1.68521028E12, 381.5454545454545], [1.68521058E12, 245.97802197802196], [1.68521088E12, 216.3892215568862]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.685211E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6852101E12, "maxY": 254.91666666666669, "series": [{"data": [[1.68521052E12, 247.99999999999994], [1.68521022E12, 177.72727272727272], [1.68521082E12, 112.20521172638435], [1.68521016E12, 186.5], [1.68521076E12, 157.14925373134332], [1.68521046E12, 219.63636363636363], [1.6852104E12, 166.6], [1.6852107E12, 166.80392156862743], [1.685211E12, 130.74285714285713], [1.68521064E12, 121.46206896551728], [1.68521034E12, 183.99999999999997], [1.68521094E12, 107.72346368715081], [1.68521028E12, 181.2], [1.68521058E12, 128.01020408163265], [1.68521088E12, 107.71257485029936]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68521052E12, 0.0], [1.68521022E12, 0.0], [1.68521082E12, 0.0], [1.68521016E12, 0.0], [1.68521076E12, 0.0], [1.68521046E12, 0.0], [1.6852104E12, 0.0], [1.6852107E12, 0.0], [1.685211E12, 0.0], [1.68521064E12, 0.0], [1.68521034E12, 0.0], [1.68521094E12, 0.0], [1.68521028E12, 0.0], [1.68521058E12, 0.0], [1.68521088E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68521052E12, 195.3529411764706], [1.68521022E12, 181.93333333333334], [1.68521082E12, 112.20521172638438], [1.68521016E12, 184.6], [1.68521076E12, 155.79591836734693], [1.68521046E12, 254.91666666666669], [1.6852104E12, 208.86666666666667], [1.6852101E12, 165.0], [1.6852107E12, 169.77777777777771], [1.685211E12, 130.08333333333334], [1.68521064E12, 124.03750000000002], [1.68521034E12, 163.69230769230768], [1.68521094E12, 107.72144846796654], [1.68521028E12, 184.27272727272725], [1.68521058E12, 122.84065934065936], [1.68521088E12, 107.71257485029946]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.685211E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 217.0, "minX": 1.6852101E12, "maxY": 56413.0, "series": [{"data": [[1.6852107E12, 31017.0], [1.68521052E12, 45853.0], [1.68521022E12, 26320.0], [1.68521016E12, 20484.0], [1.68521064E12, 6837.0], [1.68521034E12, 38733.0], [1.68521028E12, 24302.0], [1.68521076E12, 28859.0], [1.68521046E12, 56413.0], [1.6852104E12, 46353.0], [1.6852101E12, 330.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6852107E12, 12390.00000000004], [1.68521052E12, 42115.700000000004], [1.68521022E12, 25440.0], [1.68521016E12, 15519.199999999995], [1.68521064E12, 3845.4000000000015], [1.68521034E12, 31132.3], [1.68521028E12, 23297.600000000002], [1.68521076E12, 24568.0], [1.68521046E12, 55135.0], [1.6852104E12, 42116.3], [1.6852101E12, 330.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6852107E12, 31017.0], [1.68521052E12, 45853.0], [1.68521022E12, 26320.0], [1.68521016E12, 20484.0], [1.68521064E12, 6837.0], [1.68521034E12, 38733.0], [1.68521028E12, 24302.0], [1.68521076E12, 28859.0], [1.68521046E12, 56413.0], [1.6852104E12, 46353.0], [1.6852101E12, 330.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6852107E12, 28501.65], [1.68521052E12, 45853.0], [1.68521022E12, 25916.0], [1.68521016E12, 20484.0], [1.68521064E12, 6837.0], [1.68521034E12, 37717.94999999998], [1.68521028E12, 24233.2], [1.68521076E12, 28386.5], [1.68521046E12, 56285.4], [1.6852104E12, 45180.95], [1.6852101E12, 330.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6852107E12, 255.0], [1.68521052E12, 318.0], [1.68521022E12, 227.0], [1.68521016E12, 325.0], [1.68521064E12, 217.0], [1.68521034E12, 219.0], [1.68521028E12, 305.0], [1.68521076E12, 223.0], [1.68521046E12, 286.0], [1.6852104E12, 316.0], [1.6852101E12, 330.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6852107E12, 408.0], [1.68521052E12, 517.5], [1.68521022E12, 407.0], [1.68521016E12, 406.0], [1.68521064E12, 349.0], [1.68521034E12, 406.0], [1.68521028E12, 406.0], [1.68521076E12, 398.5], [1.68521046E12, 1011.0], [1.6852104E12, 11774.0], [1.6852101E12, 330.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68521076E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 111.5, "minX": 1.0, "maxY": 2425.5, "series": [{"data": [[1.0, 406.0], [2.0, 604.0], [8.0, 407.0], [4.0, 589.0], [9.0, 220.0], [5.0, 342.0], [20.0, 409.0], [6.0, 409.0], [3.0, 405.0], [12.0, 218.5], [7.0, 921.0], [15.0, 409.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 212.0], [8.0, 214.0], [9.0, 176.0], [10.0, 173.5], [11.0, 213.0], [3.0, 181.5], [12.0, 120.0], [13.0, 213.0], [14.0, 213.0], [15.0, 188.5], [1.0, 197.0], [4.0, 214.0], [16.0, 213.0], [17.0, 120.0], [18.0, 214.0], [19.0, 111.5], [5.0, 215.0], [20.0, 217.0], [21.0, 119.5], [6.0, 214.0], [25.0, 118.0], [28.0, 2425.5], [7.0, 213.0], [31.0, 411.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 111.5, "minX": 1.0, "maxY": 2425.5, "series": [{"data": [[1.0, 406.0], [2.0, 604.0], [8.0, 406.0], [4.0, 417.0], [9.0, 220.0], [5.0, 333.0], [20.0, 409.0], [6.0, 408.5], [3.0, 405.0], [12.0, 218.5], [7.0, 818.0], [15.0, 409.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 212.0], [8.0, 214.0], [9.0, 176.0], [10.0, 173.5], [11.0, 213.0], [3.0, 181.5], [12.0, 120.0], [13.0, 213.0], [14.0, 213.0], [15.0, 188.5], [1.0, 196.5], [4.0, 214.0], [16.0, 213.0], [17.0, 120.0], [18.0, 214.0], [19.0, 111.5], [5.0, 215.0], [20.0, 217.0], [21.0, 119.5], [6.0, 214.0], [25.0, 117.0], [28.0, 2425.5], [7.0, 213.0], [31.0, 411.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6852101E12, "maxY": 11.95, "series": [{"data": [[1.68521052E12, 0.5666666666666667], [1.68521022E12, 0.45], [1.68521082E12, 9.933333333333334], [1.68521016E12, 0.36666666666666664], [1.68521076E12, 1.65], [1.68521046E12, 0.4166666666666667], [1.6852104E12, 0.4666666666666667], [1.6852101E12, 0.016666666666666666], [1.6852107E12, 1.8], [1.685211E12, 1.15], [1.68521064E12, 5.416666666666667], [1.68521034E12, 0.43333333333333335], [1.68521094E12, 11.95], [1.68521028E12, 0.4], [1.68521058E12, 5.966666666666667], [1.68521088E12, 11.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.685211E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6852101E12, "maxY": 11.966666666666667, "series": [{"data": [[1.6852107E12, 0.7666666666666667], [1.68521052E12, 0.26666666666666666], [1.68521022E12, 0.48333333333333334], [1.68521016E12, 0.2833333333333333], [1.68521064E12, 0.25], [1.68521034E12, 0.36666666666666664], [1.68521028E12, 0.35], [1.68521076E12, 0.5666666666666667], [1.68521046E12, 0.38333333333333336], [1.6852104E12, 0.5], [1.6852101E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68521076E12, 0.11666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.6852107E12, 0.8833333333333333], [1.68521052E12, 0.13333333333333333], [1.685211E12, 1.1833333333333333], [1.68521082E12, 10.183333333333334], [1.68521064E12, 5.0], [1.68521094E12, 11.966666666666667], [1.68521076E12, 0.8], [1.68521058E12, 6.083333333333333], [1.68521088E12, 11.066666666666666]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.6852107E12, 0.08333333333333333], [1.68521052E12, 0.1], [1.68521076E12, 0.2], [1.68521058E12, 0.05]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.685211E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6852101E12, "maxY": 5.983333333333333, "series": [{"data": [[1.6852107E12, 0.6], [1.68521052E12, 0.2], [1.68521022E12, 0.25], [1.68521016E12, 0.16666666666666666], [1.68521064E12, 0.23333333333333334], [1.68521034E12, 0.21666666666666667], [1.68521028E12, 0.18333333333333332], [1.68521076E12, 0.5], [1.68521046E12, 0.2], [1.6852104E12, 0.25], [1.6852101E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.6852107E12, 0.3], [1.68521052E12, 0.08333333333333333], [1.685211E12, 0.6], [1.68521082E12, 5.116666666666666], [1.68521064E12, 2.433333333333333], [1.68521094E12, 5.983333333333333], [1.68521076E12, 0.31666666666666665], [1.68521058E12, 3.033333333333333], [1.68521088E12, 5.566666666666666]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.6852107E12, 0.6666666666666666], [1.68521052E12, 0.15], [1.685211E12, 0.5833333333333334], [1.68521082E12, 5.066666666666666], [1.68521064E12, 2.566666666666667], [1.68521094E12, 5.983333333333333], [1.68521076E12, 0.8], [1.68521058E12, 3.1], [1.68521088E12, 5.5]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.6852107E12, 0.11666666666666667], [1.68521052E12, 0.06666666666666667], [1.68521022E12, 0.18333333333333332], [1.68521016E12, 0.16666666666666666], [1.68521034E12, 0.15], [1.68521028E12, 0.16666666666666666], [1.68521076E12, 0.05], [1.68521046E12, 0.18333333333333332], [1.6852104E12, 0.25]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.6852107E12, 0.7333333333333333], [1.68521052E12, 0.16666666666666666], [1.685211E12, 0.5833333333333334], [1.68521082E12, 5.116666666666666], [1.68521064E12, 2.4166666666666665], [1.68521094E12, 5.966666666666667], [1.68521076E12, 1.0666666666666667], [1.68521058E12, 3.2666666666666666], [1.68521088E12, 5.566666666666666]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.6852107E12, 0.16666666666666666], [1.68521052E12, 0.06666666666666667], [1.68521022E12, 0.23333333333333334], [1.68521016E12, 0.11666666666666667], [1.68521064E12, 0.016666666666666666], [1.68521034E12, 0.15], [1.68521028E12, 0.16666666666666666], [1.68521076E12, 0.06666666666666667], [1.68521046E12, 0.18333333333333332], [1.6852104E12, 0.25]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.685211E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6852101E12, "maxY": 17.933333333333334, "series": [{"data": [[1.6852107E12, 0.8833333333333333], [1.68521052E12, 0.3333333333333333], [1.68521022E12, 0.6666666666666666], [1.68521016E12, 0.45], [1.68521064E12, 0.25], [1.68521034E12, 0.5166666666666667], [1.68521028E12, 0.5166666666666667], [1.68521076E12, 0.6166666666666667], [1.68521046E12, 0.5666666666666667], [1.6852104E12, 0.75], [1.6852101E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6852107E12, 1.7], [1.68521052E12, 0.4], [1.685211E12, 1.7666666666666666], [1.68521082E12, 15.3], [1.68521064E12, 7.416666666666667], [1.68521094E12, 17.933333333333334], [1.68521076E12, 2.183333333333333], [1.68521058E12, 9.4], [1.68521088E12, 16.633333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.685211E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

