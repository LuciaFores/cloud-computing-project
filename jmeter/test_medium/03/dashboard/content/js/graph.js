/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 108.0, "minX": 0.0, "maxY": 60609.0, "series": [{"data": [[0.0, 297.0], [0.1, 297.0], [0.2, 336.0], [0.3, 336.0], [0.4, 337.0], [0.5, 337.0], [0.6, 373.0], [0.7, 373.0], [0.8, 388.0], [0.9, 388.0], [1.0, 406.0], [1.1, 406.0], [1.2, 407.0], [1.3, 407.0], [1.4, 408.0], [1.5, 408.0], [1.6, 408.0], [1.7, 408.0], [1.8, 414.0], [1.9, 414.0], [2.0, 426.0], [2.1, 426.0], [2.2, 428.0], [2.3, 429.0], [2.4, 429.0], [2.5, 442.0], [2.6, 442.0], [2.7, 448.0], [2.8, 448.0], [2.9, 450.0], [3.0, 450.0], [3.1, 453.0], [3.2, 453.0], [3.3, 454.0], [3.4, 454.0], [3.5, 455.0], [3.6, 455.0], [3.7, 462.0], [3.8, 462.0], [3.9, 466.0], [4.0, 466.0], [4.1, 467.0], [4.2, 467.0], [4.3, 471.0], [4.4, 471.0], [4.5, 473.0], [4.6, 477.0], [4.7, 477.0], [4.8, 478.0], [4.9, 478.0], [5.0, 478.0], [5.1, 478.0], [5.2, 479.0], [5.3, 479.0], [5.4, 482.0], [5.5, 482.0], [5.6, 490.0], [5.7, 490.0], [5.8, 494.0], [5.9, 494.0], [6.0, 497.0], [6.1, 497.0], [6.2, 501.0], [6.3, 501.0], [6.4, 502.0], [6.5, 502.0], [6.6, 503.0], [6.7, 503.0], [6.8, 506.0], [6.9, 511.0], [7.0, 511.0], [7.1, 512.0], [7.2, 512.0], [7.3, 512.0], [7.4, 512.0], [7.5, 514.0], [7.6, 514.0], [7.7, 516.0], [7.8, 516.0], [7.9, 517.0], [8.0, 517.0], [8.1, 517.0], [8.2, 517.0], [8.3, 518.0], [8.4, 518.0], [8.5, 525.0], [8.6, 525.0], [8.7, 525.0], [8.8, 525.0], [8.9, 526.0], [9.0, 526.0], [9.1, 526.0], [9.2, 526.0], [9.3, 526.0], [9.4, 527.0], [9.5, 527.0], [9.6, 528.0], [9.7, 528.0], [9.8, 529.0], [9.9, 529.0], [10.0, 531.0], [10.1, 531.0], [10.2, 532.0], [10.3, 532.0], [10.4, 533.0], [10.5, 533.0], [10.6, 535.0], [10.7, 535.0], [10.8, 535.0], [10.9, 535.0], [11.0, 535.0], [11.1, 535.0], [11.2, 539.0], [11.3, 539.0], [11.4, 539.0], [11.5, 541.0], [11.6, 541.0], [11.7, 541.0], [11.8, 541.0], [11.9, 543.0], [12.0, 543.0], [12.1, 543.0], [12.2, 543.0], [12.3, 546.0], [12.4, 546.0], [12.5, 546.0], [12.6, 546.0], [12.7, 547.0], [12.8, 547.0], [12.9, 554.0], [13.0, 554.0], [13.1, 557.0], [13.2, 557.0], [13.3, 558.0], [13.4, 558.0], [13.5, 558.0], [13.6, 558.0], [13.7, 564.0], [13.8, 579.0], [13.9, 579.0], [14.0, 580.0], [14.1, 580.0], [14.2, 581.0], [14.3, 581.0], [14.4, 581.0], [14.5, 581.0], [14.6, 585.0], [14.7, 585.0], [14.8, 592.0], [14.9, 592.0], [15.0, 597.0], [15.1, 597.0], [15.2, 600.0], [15.3, 600.0], [15.4, 605.0], [15.5, 605.0], [15.6, 607.0], [15.7, 607.0], [15.8, 610.0], [15.9, 610.0], [16.0, 611.0], [16.1, 615.0], [16.2, 615.0], [16.3, 616.0], [16.4, 616.0], [16.5, 617.0], [16.6, 617.0], [16.7, 618.0], [16.8, 618.0], [16.9, 619.0], [17.0, 619.0], [17.1, 619.0], [17.2, 619.0], [17.3, 620.0], [17.4, 620.0], [17.5, 621.0], [17.6, 621.0], [17.7, 656.0], [17.8, 656.0], [17.9, 657.0], [18.0, 657.0], [18.1, 663.0], [18.2, 781.0], [18.3, 781.0], [18.4, 818.0], [18.5, 818.0], [18.6, 3787.0], [18.7, 3787.0], [18.8, 4779.0], [18.9, 4779.0], [19.0, 4809.0], [19.1, 4809.0], [19.2, 5180.0], [19.3, 5180.0], [19.4, 5238.0], [19.5, 5238.0], [19.6, 5643.0], [19.7, 5643.0], [19.8, 5649.0], [19.9, 5649.0], [20.0, 5714.0], [20.1, 5714.0], [20.2, 5725.0], [20.3, 5725.0], [20.4, 5739.0], [20.5, 5757.0], [20.6, 5757.0], [20.7, 5759.0], [20.8, 5759.0], [20.9, 5771.0], [21.0, 5771.0], [21.1, 5772.0], [21.2, 5772.0], [21.3, 5783.0], [21.4, 5783.0], [21.5, 5840.0], [21.6, 5840.0], [21.7, 5904.0], [21.8, 5904.0], [21.9, 5942.0], [22.0, 5942.0], [22.1, 5949.0], [22.2, 5949.0], [22.3, 5984.0], [22.4, 5984.0], [22.5, 6039.0], [22.6, 6039.0], [22.7, 6245.0], [22.8, 6267.0], [22.9, 6267.0], [23.0, 6329.0], [23.1, 6329.0], [23.2, 6397.0], [23.3, 6397.0], [23.4, 6517.0], [23.5, 6517.0], [23.6, 6540.0], [23.7, 6540.0], [23.8, 6544.0], [23.9, 6544.0], [24.0, 6730.0], [24.1, 6730.0], [24.2, 6993.0], [24.3, 6993.0], [24.4, 7010.0], [24.5, 7010.0], [24.6, 7174.0], [24.7, 7174.0], [24.8, 7306.0], [24.9, 7306.0], [25.0, 7313.0], [25.1, 7336.0], [25.2, 7336.0], [25.3, 7405.0], [25.4, 7405.0], [25.5, 7584.0], [25.6, 7584.0], [25.7, 7592.0], [25.8, 7592.0], [25.9, 7592.0], [26.0, 7592.0], [26.1, 7732.0], [26.2, 7732.0], [26.3, 8007.0], [26.4, 8007.0], [26.5, 8056.0], [26.6, 8056.0], [26.7, 8085.0], [26.8, 8085.0], [26.9, 8241.0], [27.0, 8241.0], [27.1, 8459.0], [27.2, 8459.0], [27.3, 8617.0], [27.4, 8706.0], [27.5, 8706.0], [27.6, 8707.0], [27.7, 8707.0], [27.8, 8765.0], [27.9, 8765.0], [28.0, 8847.0], [28.1, 8847.0], [28.2, 8908.0], [28.3, 8908.0], [28.4, 9013.0], [28.5, 9013.0], [28.6, 9020.0], [28.7, 9020.0], [28.8, 9092.0], [28.9, 9092.0], [29.0, 9303.0], [29.1, 9303.0], [29.2, 9337.0], [29.3, 9337.0], [29.4, 9440.0], [29.5, 9440.0], [29.6, 9602.0], [29.7, 9647.0], [29.8, 9647.0], [29.9, 9687.0], [30.0, 9687.0], [30.1, 9760.0], [30.2, 9760.0], [30.3, 9806.0], [30.4, 9806.0], [30.5, 9888.0], [30.6, 9888.0], [30.7, 9890.0], [30.8, 9890.0], [30.9, 9934.0], [31.0, 9934.0], [31.1, 9958.0], [31.2, 9958.0], [31.3, 10008.0], [31.4, 10008.0], [31.5, 10061.0], [31.6, 10061.0], [31.7, 10149.0], [31.8, 10149.0], [31.9, 10259.0], [32.0, 10549.0], [32.1, 10549.0], [32.2, 10740.0], [32.3, 10740.0], [32.4, 10773.0], [32.5, 10773.0], [32.6, 10877.0], [32.7, 10877.0], [32.8, 10880.0], [32.9, 10880.0], [33.0, 10946.0], [33.1, 10946.0], [33.2, 10996.0], [33.3, 10996.0], [33.4, 11001.0], [33.5, 11001.0], [33.6, 11234.0], [33.7, 11234.0], [33.8, 11264.0], [33.9, 11264.0], [34.0, 11354.0], [34.1, 11402.0], [34.2, 11402.0], [34.3, 11479.0], [34.4, 11479.0], [34.5, 11531.0], [34.6, 11531.0], [34.7, 11553.0], [34.8, 11553.0], [34.9, 11588.0], [35.0, 11588.0], [35.1, 11643.0], [35.2, 11643.0], [35.3, 11807.0], [35.4, 11807.0], [35.5, 11814.0], [35.6, 11814.0], [35.7, 11939.0], [35.8, 11939.0], [35.9, 12026.0], [36.0, 12026.0], [36.1, 12067.0], [36.2, 12067.0], [36.3, 12122.0], [36.4, 12185.0], [36.5, 12185.0], [36.6, 12199.0], [36.7, 12199.0], [36.8, 12261.0], [36.9, 12261.0], [37.0, 12292.0], [37.1, 12292.0], [37.2, 12304.0], [37.3, 12304.0], [37.4, 12367.0], [37.5, 12367.0], [37.6, 12484.0], [37.7, 12484.0], [37.8, 12559.0], [37.9, 12559.0], [38.0, 12589.0], [38.1, 12589.0], [38.2, 12610.0], [38.3, 12610.0], [38.4, 12637.0], [38.5, 12637.0], [38.6, 12676.0], [38.7, 12772.0], [38.8, 12772.0], [38.9, 12895.0], [39.0, 12895.0], [39.1, 12917.0], [39.2, 12917.0], [39.3, 13214.0], [39.4, 13214.0], [39.5, 13504.0], [39.6, 13504.0], [39.7, 13582.0], [39.8, 13582.0], [39.9, 13722.0], [40.0, 13722.0], [40.1, 13753.0], [40.2, 13753.0], [40.3, 13759.0], [40.4, 13759.0], [40.5, 13908.0], [40.6, 13908.0], [40.7, 14096.0], [40.8, 14096.0], [40.9, 14299.0], [41.0, 14301.0], [41.1, 14301.0], [41.2, 14315.0], [41.3, 14315.0], [41.4, 14332.0], [41.5, 14332.0], [41.6, 14437.0], [41.7, 14437.0], [41.8, 14498.0], [41.9, 14498.0], [42.0, 14544.0], [42.1, 14544.0], [42.2, 14699.0], [42.3, 14699.0], [42.4, 14713.0], [42.5, 14713.0], [42.6, 14782.0], [42.7, 14782.0], [42.8, 14822.0], [42.9, 14822.0], [43.0, 14849.0], [43.1, 14849.0], [43.2, 14879.0], [43.3, 14892.0], [43.4, 14892.0], [43.5, 14913.0], [43.6, 14913.0], [43.7, 15032.0], [43.8, 15032.0], [43.9, 15040.0], [44.0, 15040.0], [44.1, 15075.0], [44.2, 15075.0], [44.3, 15076.0], [44.4, 15076.0], [44.5, 15136.0], [44.6, 15136.0], [44.7, 15181.0], [44.8, 15181.0], [44.9, 15205.0], [45.0, 15205.0], [45.1, 15295.0], [45.2, 15295.0], [45.3, 15426.0], [45.4, 15426.0], [45.5, 15493.0], [45.6, 15514.0], [45.7, 15514.0], [45.8, 15573.0], [45.9, 15573.0], [46.0, 15605.0], [46.1, 15605.0], [46.2, 15684.0], [46.3, 15684.0], [46.4, 15700.0], [46.5, 15700.0], [46.6, 15701.0], [46.7, 15701.0], [46.8, 15792.0], [46.9, 15792.0], [47.0, 15955.0], [47.1, 15955.0], [47.2, 16004.0], [47.3, 16004.0], [47.4, 16058.0], [47.5, 16058.0], [47.6, 16142.0], [47.7, 16142.0], [47.8, 16185.0], [47.9, 16217.0], [48.0, 16217.0], [48.1, 16254.0], [48.2, 16254.0], [48.3, 16307.0], [48.4, 16307.0], [48.5, 16416.0], [48.6, 16416.0], [48.7, 16730.0], [48.8, 16730.0], [48.9, 16732.0], [49.0, 16732.0], [49.1, 16770.0], [49.2, 16770.0], [49.3, 16895.0], [49.4, 16895.0], [49.5, 16906.0], [49.6, 16906.0], [49.7, 16946.0], [49.8, 16946.0], [49.9, 16984.0], [50.0, 16984.0], [50.1, 17076.0], [50.2, 17153.0], [50.3, 17153.0], [50.4, 17226.0], [50.5, 17226.0], [50.6, 17360.0], [50.7, 17360.0], [50.8, 17414.0], [50.9, 17414.0], [51.0, 17478.0], [51.1, 17478.0], [51.2, 17494.0], [51.3, 17494.0], [51.4, 17554.0], [51.5, 17554.0], [51.6, 17739.0], [51.7, 17739.0], [51.8, 17848.0], [51.9, 17848.0], [52.0, 17914.0], [52.1, 17914.0], [52.2, 17957.0], [52.3, 18001.0], [52.4, 18001.0], [52.5, 18051.0], [52.6, 18051.0], [52.7, 18088.0], [52.8, 18088.0], [52.9, 18129.0], [53.0, 18129.0], [53.1, 18166.0], [53.2, 18166.0], [53.3, 18239.0], [53.4, 18239.0], [53.5, 18267.0], [53.6, 18267.0], [53.7, 18296.0], [53.8, 18296.0], [53.9, 18534.0], [54.0, 18534.0], [54.1, 18570.0], [54.2, 18570.0], [54.3, 18805.0], [54.4, 18805.0], [54.5, 19033.0], [54.6, 19057.0], [54.7, 19057.0], [54.8, 19076.0], [54.9, 19076.0], [55.0, 19234.0], [55.1, 19234.0], [55.2, 19543.0], [55.3, 19543.0], [55.4, 19680.0], [55.5, 19680.0], [55.6, 19707.0], [55.7, 19707.0], [55.8, 19838.0], [55.9, 19838.0], [56.0, 19879.0], [56.1, 19879.0], [56.2, 19941.0], [56.3, 19941.0], [56.4, 20419.0], [56.5, 20419.0], [56.6, 20500.0], [56.7, 20500.0], [56.8, 20511.0], [56.9, 20532.0], [57.0, 20532.0], [57.1, 20628.0], [57.2, 20628.0], [57.3, 20639.0], [57.4, 20639.0], [57.5, 20664.0], [57.6, 20664.0], [57.7, 20673.0], [57.8, 20673.0], [57.9, 20679.0], [58.0, 20679.0], [58.1, 20755.0], [58.2, 20755.0], [58.3, 20841.0], [58.4, 20841.0], [58.5, 20848.0], [58.6, 20848.0], [58.7, 20886.0], [58.8, 20886.0], [58.9, 20924.0], [59.0, 20924.0], [59.1, 20950.0], [59.2, 20957.0], [59.3, 20957.0], [59.4, 21009.0], [59.5, 21009.0], [59.6, 21080.0], [59.7, 21080.0], [59.8, 21227.0], [59.9, 21227.0], [60.0, 21270.0], [60.1, 21270.0], [60.2, 21346.0], [60.3, 21346.0], [60.4, 21417.0], [60.5, 21417.0], [60.6, 21571.0], [60.7, 21571.0], [60.8, 21618.0], [60.9, 21618.0], [61.0, 21725.0], [61.1, 21725.0], [61.2, 21747.0], [61.3, 21747.0], [61.4, 21883.0], [61.5, 21919.0], [61.6, 21919.0], [61.7, 21968.0], [61.8, 21968.0], [61.9, 21969.0], [62.0, 21969.0], [62.1, 22091.0], [62.2, 22091.0], [62.3, 22106.0], [62.4, 22106.0], [62.5, 22229.0], [62.6, 22229.0], [62.7, 22247.0], [62.8, 22247.0], [62.9, 22315.0], [63.0, 22315.0], [63.1, 22331.0], [63.2, 22331.0], [63.3, 22474.0], [63.4, 22474.0], [63.5, 22491.0], [63.6, 22491.0], [63.7, 22529.0], [63.8, 22531.0], [63.9, 22531.0], [64.0, 22809.0], [64.1, 22809.0], [64.2, 22830.0], [64.3, 22830.0], [64.4, 22831.0], [64.5, 22831.0], [64.6, 22876.0], [64.7, 22876.0], [64.8, 22979.0], [64.9, 22979.0], [65.0, 23141.0], [65.1, 23141.0], [65.2, 23227.0], [65.3, 23227.0], [65.4, 23438.0], [65.5, 23438.0], [65.6, 23626.0], [65.7, 23626.0], [65.8, 23720.0], [65.9, 23720.0], [66.0, 23746.0], [66.1, 23794.0], [66.2, 23794.0], [66.3, 23872.0], [66.4, 23872.0], [66.5, 23889.0], [66.6, 23889.0], [66.7, 23945.0], [66.8, 23945.0], [66.9, 24017.0], [67.0, 24017.0], [67.1, 24050.0], [67.2, 24050.0], [67.3, 24211.0], [67.4, 24211.0], [67.5, 24230.0], [67.6, 24230.0], [67.7, 24235.0], [67.8, 24235.0], [67.9, 24236.0], [68.0, 24236.0], [68.1, 24291.0], [68.2, 24472.0], [68.3, 24472.0], [68.4, 24567.0], [68.5, 24567.0], [68.6, 24689.0], [68.7, 24689.0], [68.8, 24731.0], [68.9, 24731.0], [69.0, 24783.0], [69.1, 24783.0], [69.2, 24888.0], [69.3, 24888.0], [69.4, 25110.0], [69.5, 25110.0], [69.6, 25178.0], [69.7, 25178.0], [69.8, 25224.0], [69.9, 25224.0], [70.0, 25327.0], [70.1, 25327.0], [70.2, 25369.0], [70.3, 25369.0], [70.4, 25421.0], [70.5, 25436.0], [70.6, 25436.0], [70.7, 25559.0], [70.8, 25559.0], [70.9, 25595.0], [71.0, 25595.0], [71.1, 25698.0], [71.2, 25698.0], [71.3, 25846.0], [71.4, 25846.0], [71.5, 26233.0], [71.6, 26233.0], [71.7, 26257.0], [71.8, 26257.0], [71.9, 26301.0], [72.0, 26301.0], [72.1, 26330.0], [72.2, 26330.0], [72.3, 26357.0], [72.4, 26357.0], [72.5, 26378.0], [72.6, 26378.0], [72.7, 26459.0], [72.8, 26516.0], [72.9, 26516.0], [73.0, 26559.0], [73.1, 26559.0], [73.2, 26589.0], [73.3, 26589.0], [73.4, 26656.0], [73.5, 26656.0], [73.6, 26747.0], [73.7, 26747.0], [73.8, 26835.0], [73.9, 26835.0], [74.0, 26885.0], [74.1, 26885.0], [74.2, 27008.0], [74.3, 27008.0], [74.4, 27106.0], [74.5, 27106.0], [74.6, 27108.0], [74.7, 27108.0], [74.8, 27245.0], [74.9, 27245.0], [75.0, 27296.0], [75.1, 27383.0], [75.2, 27383.0], [75.3, 27417.0], [75.4, 27417.0], [75.5, 27528.0], [75.6, 27528.0], [75.7, 27986.0], [75.8, 27986.0], [75.9, 28012.0], [76.0, 28012.0], [76.1, 28453.0], [76.2, 28453.0], [76.3, 28483.0], [76.4, 28483.0], [76.5, 29183.0], [76.6, 29183.0], [76.7, 29200.0], [76.8, 29200.0], [76.9, 29297.0], [77.0, 29297.0], [77.1, 29569.0], [77.2, 29569.0], [77.3, 29593.0], [77.4, 29650.0], [77.5, 29650.0], [77.6, 29783.0], [77.7, 29783.0], [77.8, 30060.0], [77.9, 30060.0], [78.0, 30101.0], [78.1, 30101.0], [78.2, 30268.0], [78.3, 30268.0], [78.4, 30469.0], [78.5, 30469.0], [78.6, 30500.0], [78.7, 30500.0], [78.8, 30525.0], [78.9, 30525.0], [79.0, 30556.0], [79.1, 30556.0], [79.2, 31055.0], [79.3, 31055.0], [79.4, 31056.0], [79.5, 31056.0], [79.6, 31090.0], [79.7, 31364.0], [79.8, 31364.0], [79.9, 31411.0], [80.0, 31411.0], [80.1, 31718.0], [80.2, 31718.0], [80.3, 31751.0], [80.4, 31751.0], [80.5, 31800.0], [80.6, 31800.0], [80.7, 31847.0], [80.8, 31847.0], [80.9, 31867.0], [81.0, 31867.0], [81.1, 32036.0], [81.2, 32036.0], [81.3, 32041.0], [81.4, 32041.0], [81.5, 32046.0], [81.6, 32046.0], [81.7, 32184.0], [81.8, 32184.0], [81.9, 32248.0], [82.0, 32307.0], [82.1, 32307.0], [82.2, 32344.0], [82.3, 32344.0], [82.4, 32387.0], [82.5, 32387.0], [82.6, 32392.0], [82.7, 32392.0], [82.8, 32554.0], [82.9, 32554.0], [83.0, 32579.0], [83.1, 32579.0], [83.2, 32615.0], [83.3, 32615.0], [83.4, 32647.0], [83.5, 32647.0], [83.6, 32834.0], [83.7, 32834.0], [83.8, 32918.0], [83.9, 32918.0], [84.0, 32973.0], [84.1, 33342.0], [84.2, 33342.0], [84.3, 33354.0], [84.4, 33354.0], [84.5, 33446.0], [84.6, 33446.0], [84.7, 33468.0], [84.8, 33468.0], [84.9, 33512.0], [85.0, 33512.0], [85.1, 33674.0], [85.2, 33674.0], [85.3, 33721.0], [85.4, 33721.0], [85.5, 33746.0], [85.6, 33746.0], [85.7, 33787.0], [85.8, 33787.0], [85.9, 34048.0], [86.0, 34048.0], [86.1, 34079.0], [86.2, 34079.0], [86.3, 34279.0], [86.4, 34348.0], [86.5, 34348.0], [86.6, 34525.0], [86.7, 34525.0], [86.8, 34556.0], [86.9, 34556.0], [87.0, 34605.0], [87.1, 34605.0], [87.2, 35452.0], [87.3, 35452.0], [87.4, 35559.0], [87.5, 35559.0], [87.6, 35615.0], [87.7, 35615.0], [87.8, 35670.0], [87.9, 35670.0], [88.0, 35750.0], [88.1, 35750.0], [88.2, 35969.0], [88.3, 35969.0], [88.4, 36044.0], [88.5, 36044.0], [88.6, 36135.0], [88.7, 36597.0], [88.8, 36597.0], [88.9, 37321.0], [89.0, 37321.0], [89.1, 38201.0], [89.2, 38201.0], [89.3, 38406.0], [89.4, 38406.0], [89.5, 38677.0], [89.6, 38677.0], [89.7, 39256.0], [89.8, 39256.0], [89.9, 39483.0], [90.0, 39483.0], [90.1, 39588.0], [90.2, 39588.0], [90.3, 39864.0], [90.4, 39864.0], [90.5, 40038.0], [90.6, 40038.0], [90.7, 40498.0], [90.8, 40498.0], [90.9, 40713.0], [91.0, 40720.0], [91.1, 40720.0], [91.2, 40763.0], [91.3, 40763.0], [91.4, 41069.0], [91.5, 41069.0], [91.6, 41187.0], [91.7, 41187.0], [91.8, 41235.0], [91.9, 41235.0], [92.0, 41328.0], [92.1, 41328.0], [92.2, 41531.0], [92.3, 41531.0], [92.4, 41855.0], [92.5, 41855.0], [92.6, 41970.0], [92.7, 41970.0], [92.8, 42041.0], [92.9, 42041.0], [93.0, 42041.0], [93.1, 42041.0], [93.2, 42087.0], [93.3, 42160.0], [93.4, 42160.0], [93.5, 42638.0], [93.6, 42638.0], [93.7, 42883.0], [93.8, 42883.0], [93.9, 43562.0], [94.0, 43562.0], [94.1, 43673.0], [94.2, 43673.0], [94.3, 43818.0], [94.4, 43818.0], [94.5, 43896.0], [94.6, 43896.0], [94.7, 44445.0], [94.8, 44445.0], [94.9, 44816.0], [95.0, 44816.0], [95.1, 45007.0], [95.2, 45007.0], [95.3, 45391.0], [95.4, 45391.0], [95.5, 45544.0], [95.6, 45612.0], [95.7, 45612.0], [95.8, 46393.0], [95.9, 46393.0], [96.0, 46533.0], [96.1, 46533.0], [96.2, 46707.0], [96.3, 46707.0], [96.4, 46797.0], [96.5, 46797.0], [96.6, 46942.0], [96.7, 46942.0], [96.8, 47192.0], [96.9, 47192.0], [97.0, 47205.0], [97.1, 47205.0], [97.2, 47654.0], [97.3, 47654.0], [97.4, 47951.0], [97.5, 47951.0], [97.6, 48314.0], [97.7, 48314.0], [97.8, 51011.0], [97.9, 51700.0], [98.0, 51700.0], [98.1, 52491.0], [98.2, 52491.0], [98.3, 54946.0], [98.4, 54946.0], [98.5, 58689.0], [98.6, 58689.0], [98.7, 60422.0], [98.8, 60422.0], [98.9, 60460.0], [99.0, 60460.0], [99.1, 60521.0], [99.2, 60521.0], [99.3, 60523.0], [99.4, 60523.0], [99.5, 60580.0], [99.6, 60580.0], [99.7, 60602.0], [99.8, 60602.0], [99.9, 60609.0], [100.0, 60609.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 108.0], [0.1, 108.0], [0.2, 108.0], [0.3, 108.0], [0.4, 109.0], [0.5, 109.0], [0.6, 110.0], [0.7, 110.0], [0.8, 110.0], [0.9, 110.0], [1.0, 111.0], [1.1, 111.0], [1.2, 111.0], [1.3, 111.0], [1.4, 115.0], [1.5, 115.0], [1.6, 117.0], [1.7, 117.0], [1.8, 118.0], [1.9, 118.0], [2.0, 118.0], [2.1, 118.0], [2.2, 119.0], [2.3, 119.0], [2.4, 120.0], [2.5, 120.0], [2.6, 121.0], [2.7, 121.0], [2.8, 121.0], [2.9, 121.0], [3.0, 122.0], [3.1, 122.0], [3.2, 122.0], [3.3, 124.0], [3.4, 124.0], [3.5, 124.0], [3.6, 124.0], [3.7, 126.0], [3.8, 126.0], [3.9, 127.0], [4.0, 127.0], [4.1, 127.0], [4.2, 127.0], [4.3, 128.0], [4.4, 128.0], [4.5, 129.0], [4.6, 129.0], [4.7, 130.0], [4.8, 130.0], [4.9, 130.0], [5.0, 130.0], [5.1, 133.0], [5.2, 133.0], [5.3, 134.0], [5.4, 134.0], [5.5, 134.0], [5.6, 134.0], [5.7, 135.0], [5.8, 135.0], [5.9, 137.0], [6.0, 138.0], [6.1, 138.0], [6.2, 138.0], [6.3, 138.0], [6.4, 138.0], [6.5, 138.0], [6.6, 140.0], [6.7, 140.0], [6.8, 141.0], [6.9, 141.0], [7.0, 141.0], [7.1, 141.0], [7.2, 143.0], [7.3, 143.0], [7.4, 143.0], [7.5, 143.0], [7.6, 144.0], [7.7, 144.0], [7.8, 147.0], [7.9, 147.0], [8.0, 147.0], [8.1, 147.0], [8.2, 147.0], [8.3, 147.0], [8.4, 148.0], [8.5, 148.0], [8.6, 148.0], [8.7, 148.0], [8.8, 148.0], [8.9, 150.0], [9.0, 150.0], [9.1, 150.0], [9.2, 150.0], [9.3, 151.0], [9.4, 151.0], [9.5, 151.0], [9.6, 151.0], [9.7, 152.0], [9.8, 152.0], [9.9, 152.0], [10.0, 152.0], [10.1, 157.0], [10.2, 157.0], [10.3, 158.0], [10.4, 158.0], [10.5, 162.0], [10.6, 162.0], [10.7, 164.0], [10.8, 164.0], [10.9, 170.0], [11.0, 170.0], [11.1, 172.0], [11.2, 172.0], [11.3, 173.0], [11.4, 173.0], [11.5, 174.0], [11.6, 174.0], [11.7, 174.0], [11.8, 175.0], [11.9, 175.0], [12.0, 177.0], [12.1, 177.0], [12.2, 177.0], [12.3, 177.0], [12.4, 178.0], [12.5, 178.0], [12.6, 186.0], [12.7, 186.0], [12.8, 191.0], [12.9, 191.0], [13.0, 192.0], [13.1, 192.0], [13.2, 194.0], [13.3, 194.0], [13.4, 194.0], [13.5, 194.0], [13.6, 196.0], [13.7, 196.0], [13.8, 197.0], [13.9, 197.0], [14.0, 199.0], [14.1, 199.0], [14.2, 200.0], [14.3, 200.0], [14.4, 201.0], [14.5, 201.0], [14.6, 201.0], [14.7, 201.0], [14.8, 203.0], [14.9, 204.0], [15.0, 204.0], [15.1, 207.0], [15.2, 207.0], [15.3, 208.0], [15.4, 208.0], [15.5, 209.0], [15.6, 209.0], [15.7, 209.0], [15.8, 209.0], [15.9, 209.0], [16.0, 209.0], [16.1, 209.0], [16.2, 209.0], [16.3, 211.0], [16.4, 211.0], [16.5, 211.0], [16.6, 211.0], [16.7, 212.0], [16.8, 212.0], [16.9, 215.0], [17.0, 215.0], [17.1, 218.0], [17.2, 218.0], [17.3, 226.0], [17.4, 226.0], [17.5, 318.0], [17.6, 318.0], [17.7, 442.0], [17.8, 3379.0], [17.9, 3379.0], [18.0, 4410.0], [18.1, 4410.0], [18.2, 4474.0], [18.3, 4474.0], [18.4, 4776.0], [18.5, 4776.0], [18.6, 4830.0], [18.7, 4830.0], [18.8, 5266.0], [18.9, 5266.0], [19.0, 5313.0], [19.1, 5313.0], [19.2, 5318.0], [19.3, 5318.0], [19.4, 5332.0], [19.5, 5332.0], [19.6, 5350.0], [19.7, 5350.0], [19.8, 5363.0], [19.9, 5363.0], [20.0, 5366.0], [20.1, 5366.0], [20.2, 5393.0], [20.3, 5393.0], [20.4, 5400.0], [20.5, 5400.0], [20.6, 5409.0], [20.7, 5432.0], [20.8, 5432.0], [20.9, 5447.0], [21.0, 5447.0], [21.1, 5534.0], [21.2, 5534.0], [21.3, 5607.0], [21.4, 5607.0], [21.5, 5621.0], [21.6, 5621.0], [21.7, 5634.0], [21.8, 5634.0], [21.9, 5859.0], [22.0, 5859.0], [22.1, 5941.0], [22.2, 5941.0], [22.3, 5989.0], [22.4, 5989.0], [22.5, 6023.0], [22.6, 6023.0], [22.7, 6138.0], [22.8, 6138.0], [22.9, 6170.0], [23.0, 6170.0], [23.1, 6214.0], [23.2, 6214.0], [23.3, 6372.0], [23.4, 6372.0], [23.5, 6595.0], [23.6, 6603.0], [23.7, 6603.0], [23.8, 6791.0], [23.9, 6791.0], [24.0, 6899.0], [24.1, 6899.0], [24.2, 6902.0], [24.3, 6902.0], [24.4, 6997.0], [24.5, 6997.0], [24.6, 7029.0], [24.7, 7029.0], [24.8, 7279.0], [24.9, 7279.0], [25.0, 7285.0], [25.1, 7285.0], [25.2, 7353.0], [25.3, 7353.0], [25.4, 7386.0], [25.5, 7386.0], [25.6, 7600.0], [25.7, 7600.0], [25.8, 7679.0], [25.9, 7679.0], [26.0, 7723.0], [26.1, 7723.0], [26.2, 7833.0], [26.3, 7833.0], [26.4, 8156.0], [26.5, 8158.0], [26.6, 8158.0], [26.7, 8287.0], [26.8, 8287.0], [26.9, 8297.0], [27.0, 8297.0], [27.1, 8358.0], [27.2, 8358.0], [27.3, 8397.0], [27.4, 8397.0], [27.5, 8402.0], [27.6, 8402.0], [27.7, 8553.0], [27.8, 8553.0], [27.9, 8610.0], [28.0, 8610.0], [28.1, 8613.0], [28.2, 8613.0], [28.3, 8631.0], [28.4, 8631.0], [28.5, 8893.0], [28.6, 8893.0], [28.7, 8929.0], [28.8, 8929.0], [28.9, 9105.0], [29.0, 9105.0], [29.1, 9195.0], [29.2, 9195.0], [29.3, 9288.0], [29.4, 9288.0], [29.5, 9319.0], [29.6, 9353.0], [29.7, 9353.0], [29.8, 9482.0], [29.9, 9482.0], [30.0, 9509.0], [30.1, 9509.0], [30.2, 9530.0], [30.3, 9530.0], [30.4, 9583.0], [30.5, 9583.0], [30.6, 9598.0], [30.7, 9598.0], [30.8, 9609.0], [30.9, 9609.0], [31.0, 9640.0], [31.1, 9640.0], [31.2, 9913.0], [31.3, 9913.0], [31.4, 9953.0], [31.5, 9953.0], [31.6, 10007.0], [31.7, 10007.0], [31.8, 10276.0], [31.9, 10276.0], [32.0, 10339.0], [32.1, 10339.0], [32.2, 10364.0], [32.3, 10364.0], [32.4, 10470.0], [32.5, 10538.0], [32.6, 10538.0], [32.7, 10575.0], [32.8, 10575.0], [32.9, 10604.0], [33.0, 10604.0], [33.1, 10657.0], [33.2, 10657.0], [33.3, 10724.0], [33.4, 10724.0], [33.5, 10857.0], [33.6, 10857.0], [33.7, 10995.0], [33.8, 10995.0], [33.9, 11042.0], [34.0, 11042.0], [34.1, 11174.0], [34.2, 11174.0], [34.3, 11181.0], [34.4, 11181.0], [34.5, 11241.0], [34.6, 11241.0], [34.7, 11370.0], [34.8, 11370.0], [34.9, 11501.0], [35.0, 11501.0], [35.1, 11619.0], [35.2, 11619.0], [35.3, 11661.0], [35.4, 11689.0], [35.5, 11689.0], [35.6, 11705.0], [35.7, 11705.0], [35.8, 11714.0], [35.9, 11714.0], [36.0, 11778.0], [36.1, 11778.0], [36.2, 11883.0], [36.3, 11883.0], [36.4, 11960.0], [36.5, 11960.0], [36.6, 11983.0], [36.7, 11983.0], [36.8, 12000.0], [36.9, 12000.0], [37.0, 12129.0], [37.1, 12129.0], [37.2, 12232.0], [37.3, 12232.0], [37.4, 12253.0], [37.5, 12253.0], [37.6, 12299.0], [37.7, 12299.0], [37.8, 12364.0], [37.9, 12364.0], [38.0, 12369.0], [38.1, 12369.0], [38.2, 12371.0], [38.3, 12487.0], [38.4, 12487.0], [38.5, 12509.0], [38.6, 12509.0], [38.7, 12808.0], [38.8, 12808.0], [38.9, 13198.0], [39.0, 13198.0], [39.1, 13241.0], [39.2, 13241.0], [39.3, 13314.0], [39.4, 13314.0], [39.5, 13368.0], [39.6, 13368.0], [39.7, 13454.0], [39.8, 13454.0], [39.9, 13502.0], [40.0, 13502.0], [40.1, 13760.0], [40.2, 13760.0], [40.3, 13822.0], [40.4, 13822.0], [40.5, 13893.0], [40.6, 13893.0], [40.7, 13908.0], [40.8, 13908.0], [40.9, 13993.0], [41.0, 13993.0], [41.1, 14034.0], [41.2, 14090.0], [41.3, 14090.0], [41.4, 14136.0], [41.5, 14136.0], [41.6, 14330.0], [41.7, 14330.0], [41.8, 14351.0], [41.9, 14351.0], [42.0, 14382.0], [42.1, 14382.0], [42.2, 14393.0], [42.3, 14393.0], [42.4, 14441.0], [42.5, 14441.0], [42.6, 14471.0], [42.7, 14471.0], [42.8, 14475.0], [42.9, 14475.0], [43.0, 14507.0], [43.1, 14507.0], [43.2, 14564.0], [43.3, 14564.0], [43.4, 14695.0], [43.5, 14695.0], [43.6, 14726.0], [43.7, 14726.0], [43.8, 14727.0], [43.9, 14727.0], [44.0, 14809.0], [44.1, 14809.0], [44.2, 14830.0], [44.3, 14877.0], [44.4, 14877.0], [44.5, 14888.0], [44.6, 14888.0], [44.7, 15018.0], [44.8, 15018.0], [44.9, 15085.0], [45.0, 15085.0], [45.1, 15187.0], [45.2, 15187.0], [45.3, 15247.0], [45.4, 15247.0], [45.5, 15268.0], [45.6, 15268.0], [45.7, 15278.0], [45.8, 15278.0], [45.9, 15296.0], [46.0, 15296.0], [46.1, 15384.0], [46.2, 15384.0], [46.3, 15410.0], [46.4, 15410.0], [46.5, 15656.0], [46.6, 15656.0], [46.7, 15672.0], [46.8, 15672.0], [46.9, 15735.0], [47.0, 15735.0], [47.1, 15810.0], [47.2, 15887.0], [47.3, 15887.0], [47.4, 15907.0], [47.5, 15907.0], [47.6, 15919.0], [47.7, 15919.0], [47.8, 15976.0], [47.9, 15976.0], [48.0, 16012.0], [48.1, 16012.0], [48.2, 16322.0], [48.3, 16322.0], [48.4, 16416.0], [48.5, 16416.0], [48.6, 16427.0], [48.7, 16427.0], [48.8, 16539.0], [48.9, 16539.0], [49.0, 16574.0], [49.1, 16574.0], [49.2, 16602.0], [49.3, 16602.0], [49.4, 16669.0], [49.5, 16669.0], [49.6, 16678.0], [49.7, 16678.0], [49.8, 16903.0], [49.9, 16903.0], [50.0, 16927.0], [50.1, 16929.0], [50.2, 16929.0], [50.3, 17064.0], [50.4, 17064.0], [50.5, 17071.0], [50.6, 17071.0], [50.7, 17171.0], [50.8, 17171.0], [50.9, 17192.0], [51.0, 17192.0], [51.1, 17434.0], [51.2, 17434.0], [51.3, 17457.0], [51.4, 17457.0], [51.5, 17592.0], [51.6, 17592.0], [51.7, 17607.0], [51.8, 17607.0], [51.9, 17645.0], [52.0, 17645.0], [52.1, 17654.0], [52.2, 17654.0], [52.3, 17825.0], [52.4, 17825.0], [52.5, 17831.0], [52.6, 17831.0], [52.7, 17859.0], [52.8, 17859.0], [52.9, 17863.0], [53.0, 17929.0], [53.1, 17929.0], [53.2, 18049.0], [53.3, 18049.0], [53.4, 18061.0], [53.5, 18061.0], [53.6, 18223.0], [53.7, 18223.0], [53.8, 18407.0], [53.9, 18407.0], [54.0, 18667.0], [54.1, 18667.0], [54.2, 18776.0], [54.3, 18776.0], [54.4, 18789.0], [54.5, 18789.0], [54.6, 18826.0], [54.7, 18826.0], [54.8, 19137.0], [54.9, 19137.0], [55.0, 19361.0], [55.1, 19361.0], [55.2, 19404.0], [55.3, 19404.0], [55.4, 19429.0], [55.5, 19429.0], [55.6, 19471.0], [55.7, 19471.0], [55.8, 19579.0], [55.9, 20014.0], [56.0, 20014.0], [56.1, 20023.0], [56.2, 20023.0], [56.3, 20181.0], [56.4, 20181.0], [56.5, 20192.0], [56.6, 20192.0], [56.7, 20219.0], [56.8, 20219.0], [56.9, 20256.0], [57.0, 20256.0], [57.1, 20263.0], [57.2, 20263.0], [57.3, 20265.0], [57.4, 20265.0], [57.5, 20326.0], [57.6, 20326.0], [57.7, 20440.0], [57.8, 20440.0], [57.9, 20477.0], [58.0, 20477.0], [58.1, 20535.0], [58.2, 20535.0], [58.3, 20574.0], [58.4, 20574.0], [58.5, 20608.0], [58.6, 20608.0], [58.7, 20617.0], [58.8, 20617.0], [58.9, 20650.0], [59.0, 20671.0], [59.1, 20671.0], [59.2, 20704.0], [59.3, 20704.0], [59.4, 20820.0], [59.5, 20820.0], [59.6, 20934.0], [59.7, 20934.0], [59.8, 20939.0], [59.9, 20939.0], [60.0, 21098.0], [60.1, 21098.0], [60.2, 21293.0], [60.3, 21293.0], [60.4, 21319.0], [60.5, 21319.0], [60.6, 21350.0], [60.7, 21350.0], [60.8, 21442.0], [60.9, 21442.0], [61.0, 21475.0], [61.1, 21475.0], [61.2, 21511.0], [61.3, 21511.0], [61.4, 21559.0], [61.5, 21559.0], [61.6, 21666.0], [61.7, 21666.0], [61.8, 21719.0], [61.9, 21748.0], [62.0, 21748.0], [62.1, 21794.0], [62.2, 21794.0], [62.3, 21909.0], [62.4, 21909.0], [62.5, 21918.0], [62.6, 21918.0], [62.7, 22025.0], [62.8, 22025.0], [62.9, 22068.0], [63.0, 22068.0], [63.1, 22126.0], [63.2, 22126.0], [63.3, 22188.0], [63.4, 22188.0], [63.5, 22223.0], [63.6, 22223.0], [63.7, 22402.0], [63.8, 22402.0], [63.9, 22472.0], [64.0, 22472.0], [64.1, 22486.0], [64.2, 22486.0], [64.3, 22525.0], [64.4, 22525.0], [64.5, 22525.0], [64.6, 22525.0], [64.7, 22716.0], [64.8, 22735.0], [64.9, 22735.0], [65.0, 23131.0], [65.1, 23131.0], [65.2, 23220.0], [65.3, 23220.0], [65.4, 23365.0], [65.5, 23365.0], [65.6, 23387.0], [65.7, 23387.0], [65.8, 23415.0], [65.9, 23415.0], [66.0, 23439.0], [66.1, 23439.0], [66.2, 23483.0], [66.3, 23483.0], [66.4, 23611.0], [66.5, 23611.0], [66.6, 23630.0], [66.7, 23630.0], [66.8, 23643.0], [66.9, 23643.0], [67.0, 23722.0], [67.1, 23722.0], [67.2, 23801.0], [67.3, 23801.0], [67.4, 23827.0], [67.5, 23827.0], [67.6, 23857.0], [67.7, 23888.0], [67.8, 23888.0], [67.9, 24098.0], [68.0, 24098.0], [68.1, 24263.0], [68.2, 24263.0], [68.3, 24325.0], [68.4, 24325.0], [68.5, 24454.0], [68.6, 24454.0], [68.7, 24562.0], [68.8, 24562.0], [68.9, 24599.0], [69.0, 24599.0], [69.1, 24671.0], [69.2, 24671.0], [69.3, 24817.0], [69.4, 24817.0], [69.5, 24842.0], [69.6, 24842.0], [69.7, 24919.0], [69.8, 24919.0], [69.9, 24962.0], [70.0, 24962.0], [70.1, 25116.0], [70.2, 25116.0], [70.3, 25125.0], [70.4, 25125.0], [70.5, 25150.0], [70.6, 25290.0], [70.7, 25290.0], [70.8, 25337.0], [70.9, 25337.0], [71.0, 25438.0], [71.1, 25438.0], [71.2, 25914.0], [71.3, 25914.0], [71.4, 25930.0], [71.5, 25930.0], [71.6, 25949.0], [71.7, 25949.0], [71.8, 26024.0], [71.9, 26024.0], [72.0, 26038.0], [72.1, 26038.0], [72.2, 26048.0], [72.3, 26048.0], [72.4, 26163.0], [72.5, 26163.0], [72.6, 26167.0], [72.7, 26167.0], [72.8, 26258.0], [72.9, 26258.0], [73.0, 26303.0], [73.1, 26303.0], [73.2, 26351.0], [73.3, 26351.0], [73.4, 26373.0], [73.5, 26373.0], [73.6, 26428.0], [73.7, 26583.0], [73.8, 26583.0], [73.9, 26700.0], [74.0, 26700.0], [74.1, 26801.0], [74.2, 26801.0], [74.3, 26801.0], [74.4, 26801.0], [74.5, 26838.0], [74.6, 26838.0], [74.7, 26888.0], [74.8, 26888.0], [74.9, 26975.0], [75.0, 26975.0], [75.1, 27080.0], [75.2, 27080.0], [75.3, 27120.0], [75.4, 27120.0], [75.5, 27579.0], [75.6, 27579.0], [75.7, 27605.0], [75.8, 27605.0], [75.9, 27939.0], [76.0, 27939.0], [76.1, 28178.0], [76.2, 28178.0], [76.3, 28571.0], [76.4, 28571.0], [76.5, 28794.0], [76.6, 28888.0], [76.7, 28888.0], [76.8, 29242.0], [76.9, 29242.0], [77.0, 29263.0], [77.1, 29263.0], [77.2, 29287.0], [77.3, 29287.0], [77.4, 29375.0], [77.5, 29375.0], [77.6, 29592.0], [77.7, 29592.0], [77.8, 29652.0], [77.9, 29652.0], [78.0, 29932.0], [78.1, 29932.0], [78.2, 30061.0], [78.3, 30061.0], [78.4, 30064.0], [78.5, 30064.0], [78.6, 30194.0], [78.7, 30194.0], [78.8, 30342.0], [78.9, 30342.0], [79.0, 30548.0], [79.1, 30548.0], [79.2, 30779.0], [79.3, 30779.0], [79.4, 30784.0], [79.5, 30955.0], [79.6, 30955.0], [79.7, 31005.0], [79.8, 31005.0], [79.9, 31311.0], [80.0, 31311.0], [80.1, 31342.0], [80.2, 31342.0], [80.3, 31440.0], [80.4, 31440.0], [80.5, 31524.0], [80.6, 31524.0], [80.7, 31588.0], [80.8, 31588.0], [80.9, 31627.0], [81.0, 31627.0], [81.1, 31634.0], [81.2, 31634.0], [81.3, 31636.0], [81.4, 31636.0], [81.5, 31771.0], [81.6, 31771.0], [81.7, 31878.0], [81.8, 31878.0], [81.9, 31899.0], [82.0, 31899.0], [82.1, 31997.0], [82.2, 31997.0], [82.3, 32033.0], [82.4, 32087.0], [82.5, 32087.0], [82.6, 32145.0], [82.7, 32145.0], [82.8, 32157.0], [82.9, 32157.0], [83.0, 32207.0], [83.1, 32207.0], [83.2, 32288.0], [83.3, 32288.0], [83.4, 32462.0], [83.5, 32462.0], [83.6, 32510.0], [83.7, 32510.0], [83.8, 32526.0], [83.9, 32526.0], [84.0, 32845.0], [84.1, 32845.0], [84.2, 33036.0], [84.3, 33036.0], [84.4, 33060.0], [84.5, 33060.0], [84.6, 33076.0], [84.7, 33076.0], [84.8, 33105.0], [84.9, 33105.0], [85.0, 33211.0], [85.1, 33211.0], [85.2, 33266.0], [85.3, 33338.0], [85.4, 33338.0], [85.5, 33574.0], [85.6, 33574.0], [85.7, 33640.0], [85.8, 33640.0], [85.9, 33770.0], [86.0, 33770.0], [86.1, 33940.0], [86.2, 33940.0], [86.3, 33944.0], [86.4, 33944.0], [86.5, 34148.0], [86.6, 34148.0], [86.7, 34183.0], [86.8, 34183.0], [86.9, 34198.0], [87.0, 34198.0], [87.1, 35146.0], [87.2, 35146.0], [87.3, 35152.0], [87.4, 35152.0], [87.5, 35277.0], [87.6, 35277.0], [87.7, 35309.0], [87.8, 35309.0], [87.9, 35341.0], [88.0, 35341.0], [88.1, 35560.0], [88.2, 35560.0], [88.3, 35588.0], [88.4, 35822.0], [88.5, 35822.0], [88.6, 36189.0], [88.7, 36189.0], [88.8, 36984.0], [88.9, 36984.0], [89.0, 37862.0], [89.1, 37862.0], [89.2, 38091.0], [89.3, 38091.0], [89.4, 38357.0], [89.5, 38357.0], [89.6, 39040.0], [89.7, 39040.0], [89.8, 39062.0], [89.9, 39062.0], [90.0, 39232.0], [90.1, 39232.0], [90.2, 39455.0], [90.3, 39455.0], [90.4, 39631.0], [90.5, 39631.0], [90.6, 40091.0], [90.7, 40091.0], [90.8, 40359.0], [90.9, 40359.0], [91.0, 40406.0], [91.1, 40406.0], [91.2, 40495.0], [91.3, 40840.0], [91.4, 40840.0], [91.5, 40881.0], [91.6, 40881.0], [91.7, 41009.0], [91.8, 41009.0], [91.9, 41022.0], [92.0, 41022.0], [92.1, 41209.0], [92.2, 41209.0], [92.3, 41448.0], [92.4, 41448.0], [92.5, 41634.0], [92.6, 41634.0], [92.7, 41658.0], [92.8, 41658.0], [92.9, 41680.0], [93.0, 41680.0], [93.1, 41719.0], [93.2, 41719.0], [93.3, 41754.0], [93.4, 41754.0], [93.5, 42423.0], [93.6, 42423.0], [93.7, 42578.0], [93.8, 42578.0], [93.9, 43155.0], [94.0, 43155.0], [94.1, 43326.0], [94.2, 43391.0], [94.3, 43391.0], [94.4, 43411.0], [94.5, 43411.0], [94.6, 44038.0], [94.7, 44038.0], [94.8, 44404.0], [94.9, 44404.0], [95.0, 44684.0], [95.1, 44684.0], [95.2, 44984.0], [95.3, 44984.0], [95.4, 45202.0], [95.5, 45202.0], [95.6, 45388.0], [95.7, 45388.0], [95.8, 45985.0], [95.9, 45985.0], [96.0, 46174.0], [96.1, 46174.0], [96.2, 46305.0], [96.3, 46305.0], [96.4, 46452.0], [96.5, 46452.0], [96.6, 46540.0], [96.7, 46540.0], [96.8, 46786.0], [96.9, 46786.0], [97.0, 46968.0], [97.1, 47247.0], [97.2, 47247.0], [97.3, 47543.0], [97.4, 47543.0], [97.5, 47908.0], [97.6, 47908.0], [97.7, 50525.0], [97.8, 50525.0], [97.9, 51291.0], [98.0, 51291.0], [98.1, 52083.0], [98.2, 52083.0], [98.3, 54640.0], [98.4, 54640.0], [98.5, 58281.0], [98.6, 58281.0], [98.7, 60108.0], [98.8, 60108.0], [98.9, 60115.0], [99.0, 60115.0], [99.1, 60155.0], [99.2, 60155.0], [99.3, 60172.0], [99.4, 60172.0], [99.5, 60193.0], [99.6, 60193.0], [99.7, 60196.0], [99.8, 60196.0], [99.9, 60214.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 212.0], [0.1, 212.0], [0.2, 213.0], [0.3, 213.0], [0.4, 213.0], [0.5, 213.0], [0.6, 213.0], [0.7, 213.0], [0.8, 214.0], [0.9, 214.0], [1.0, 215.0], [1.1, 215.0], [1.2, 215.0], [1.3, 215.0], [1.4, 216.0], [1.5, 216.0], [1.6, 216.0], [1.7, 216.0], [1.8, 217.0], [1.9, 217.0], [2.0, 217.0], [2.1, 218.0], [2.2, 218.0], [2.3, 220.0], [2.4, 220.0], [2.5, 220.0], [2.6, 220.0], [2.7, 221.0], [2.8, 221.0], [2.9, 221.0], [3.0, 221.0], [3.1, 224.0], [3.2, 224.0], [3.3, 224.0], [3.4, 224.0], [3.5, 224.0], [3.6, 224.0], [3.7, 225.0], [3.8, 225.0], [3.9, 225.0], [4.0, 225.0], [4.1, 226.0], [4.2, 229.0], [4.3, 229.0], [4.4, 230.0], [4.5, 230.0], [4.6, 231.0], [4.7, 231.0], [4.8, 232.0], [4.9, 232.0], [5.0, 233.0], [5.1, 233.0], [5.2, 235.0], [5.3, 235.0], [5.4, 235.0], [5.5, 235.0], [5.6, 236.0], [5.7, 236.0], [5.8, 237.0], [5.9, 237.0], [6.0, 239.0], [6.1, 239.0], [6.2, 244.0], [6.3, 247.0], [6.4, 247.0], [6.5, 251.0], [6.6, 251.0], [6.7, 258.0], [6.8, 258.0], [6.9, 263.0], [7.0, 263.0], [7.1, 266.0], [7.2, 266.0], [7.3, 267.0], [7.4, 267.0], [7.5, 271.0], [7.6, 271.0], [7.7, 273.0], [7.8, 273.0], [7.9, 278.0], [8.0, 278.0], [8.1, 278.0], [8.2, 278.0], [8.3, 278.0], [8.4, 280.0], [8.5, 280.0], [8.6, 280.0], [8.7, 280.0], [8.8, 291.0], [8.9, 291.0], [9.0, 296.0], [9.1, 296.0], [9.2, 296.0], [9.3, 296.0], [9.4, 297.0], [9.5, 297.0], [9.6, 297.0], [9.7, 297.0], [9.8, 299.0], [9.9, 299.0], [10.0, 300.0], [10.1, 300.0], [10.2, 301.0], [10.3, 301.0], [10.4, 301.0], [10.5, 302.0], [10.6, 302.0], [10.7, 303.0], [10.8, 303.0], [10.9, 303.0], [11.0, 303.0], [11.1, 303.0], [11.2, 303.0], [11.3, 303.0], [11.4, 303.0], [11.5, 303.0], [11.6, 303.0], [11.7, 303.0], [11.8, 303.0], [11.9, 304.0], [12.0, 304.0], [12.1, 304.0], [12.2, 304.0], [12.3, 304.0], [12.4, 304.0], [12.5, 304.0], [12.6, 304.0], [12.7, 304.0], [12.8, 304.0], [12.9, 304.0], [13.0, 304.0], [13.1, 304.0], [13.2, 304.0], [13.3, 304.0], [13.4, 304.0], [13.5, 304.0], [13.6, 305.0], [13.7, 305.0], [13.8, 305.0], [13.9, 305.0], [14.0, 305.0], [14.1, 305.0], [14.2, 305.0], [14.3, 305.0], [14.4, 305.0], [14.5, 305.0], [14.6, 305.0], [14.7, 305.0], [14.8, 305.0], [14.9, 305.0], [15.0, 305.0], [15.1, 305.0], [15.2, 305.0], [15.3, 305.0], [15.4, 305.0], [15.5, 305.0], [15.6, 305.0], [15.7, 305.0], [15.8, 305.0], [15.9, 305.0], [16.0, 305.0], [16.1, 305.0], [16.2, 305.0], [16.3, 305.0], [16.4, 305.0], [16.5, 305.0], [16.6, 305.0], [16.7, 305.0], [16.8, 305.0], [16.9, 305.0], [17.0, 305.0], [17.1, 305.0], [17.2, 305.0], [17.3, 305.0], [17.4, 305.0], [17.5, 305.0], [17.6, 305.0], [17.7, 305.0], [17.8, 305.0], [17.9, 305.0], [18.0, 305.0], [18.1, 305.0], [18.2, 305.0], [18.3, 305.0], [18.4, 305.0], [18.5, 305.0], [18.6, 305.0], [18.7, 305.0], [18.8, 306.0], [18.9, 306.0], [19.0, 306.0], [19.1, 306.0], [19.2, 306.0], [19.3, 306.0], [19.4, 306.0], [19.5, 306.0], [19.6, 306.0], [19.7, 306.0], [19.8, 306.0], [19.9, 306.0], [20.0, 306.0], [20.1, 306.0], [20.2, 306.0], [20.3, 306.0], [20.4, 306.0], [20.5, 306.0], [20.6, 306.0], [20.7, 306.0], [20.8, 306.0], [20.9, 306.0], [21.0, 306.0], [21.1, 306.0], [21.2, 306.0], [21.3, 306.0], [21.4, 306.0], [21.5, 306.0], [21.6, 306.0], [21.7, 306.0], [21.8, 306.0], [21.9, 306.0], [22.0, 306.0], [22.1, 306.0], [22.2, 306.0], [22.3, 306.0], [22.4, 306.0], [22.5, 306.0], [22.6, 306.0], [22.7, 306.0], [22.8, 306.0], [22.9, 306.0], [23.0, 307.0], [23.1, 307.0], [23.2, 307.0], [23.3, 307.0], [23.4, 307.0], [23.5, 307.0], [23.6, 307.0], [23.7, 307.0], [23.8, 307.0], [23.9, 307.0], [24.0, 307.0], [24.1, 307.0], [24.2, 307.0], [24.3, 307.0], [24.4, 307.0], [24.5, 307.0], [24.6, 307.0], [24.7, 307.0], [24.8, 307.0], [24.9, 307.0], [25.0, 307.0], [25.1, 307.0], [25.2, 307.0], [25.3, 307.0], [25.4, 308.0], [25.5, 308.0], [25.6, 308.0], [25.7, 308.0], [25.8, 309.0], [25.9, 309.0], [26.0, 311.0], [26.1, 311.0], [26.2, 311.0], [26.3, 311.0], [26.4, 311.0], [26.5, 311.0], [26.6, 311.0], [26.7, 311.0], [26.8, 311.0], [26.9, 311.0], [27.0, 311.0], [27.1, 312.0], [27.2, 312.0], [27.3, 312.0], [27.4, 312.0], [27.5, 312.0], [27.6, 312.0], [27.7, 312.0], [27.8, 312.0], [27.9, 312.0], [28.0, 312.0], [28.1, 312.0], [28.2, 312.0], [28.3, 312.0], [28.4, 312.0], [28.5, 312.0], [28.6, 312.0], [28.7, 312.0], [28.8, 312.0], [28.9, 313.0], [29.0, 313.0], [29.1, 313.0], [29.2, 313.0], [29.3, 313.0], [29.4, 314.0], [29.5, 314.0], [29.6, 314.0], [29.7, 314.0], [29.8, 315.0], [29.9, 315.0], [30.0, 315.0], [30.1, 315.0], [30.2, 315.0], [30.3, 315.0], [30.4, 316.0], [30.5, 316.0], [30.6, 317.0], [30.7, 317.0], [30.8, 319.0], [30.9, 319.0], [31.0, 319.0], [31.1, 319.0], [31.2, 319.0], [31.3, 319.0], [31.4, 319.0], [31.5, 320.0], [31.6, 320.0], [31.7, 321.0], [31.8, 321.0], [31.9, 322.0], [32.0, 322.0], [32.1, 322.0], [32.2, 322.0], [32.3, 323.0], [32.4, 323.0], [32.5, 323.0], [32.6, 323.0], [32.7, 324.0], [32.8, 324.0], [32.9, 325.0], [33.0, 325.0], [33.1, 326.0], [33.2, 326.0], [33.3, 326.0], [33.4, 328.0], [33.5, 328.0], [33.6, 329.0], [33.7, 329.0], [33.8, 330.0], [33.9, 330.0], [34.0, 330.0], [34.1, 330.0], [34.2, 330.0], [34.3, 330.0], [34.4, 330.0], [34.5, 330.0], [34.6, 331.0], [34.7, 331.0], [34.8, 332.0], [34.9, 332.0], [35.0, 333.0], [35.1, 333.0], [35.2, 335.0], [35.3, 335.0], [35.4, 335.0], [35.5, 336.0], [35.6, 336.0], [35.7, 336.0], [35.8, 336.0], [35.9, 336.0], [36.0, 336.0], [36.1, 336.0], [36.2, 336.0], [36.3, 337.0], [36.4, 337.0], [36.5, 337.0], [36.6, 337.0], [36.7, 337.0], [36.8, 337.0], [36.9, 339.0], [37.0, 339.0], [37.1, 339.0], [37.2, 339.0], [37.3, 339.0], [37.4, 339.0], [37.5, 340.0], [37.6, 341.0], [37.7, 341.0], [37.8, 341.0], [37.9, 341.0], [38.0, 341.0], [38.1, 341.0], [38.2, 342.0], [38.3, 342.0], [38.4, 342.0], [38.5, 342.0], [38.6, 342.0], [38.7, 342.0], [38.8, 342.0], [38.9, 342.0], [39.0, 343.0], [39.1, 343.0], [39.2, 343.0], [39.3, 343.0], [39.4, 345.0], [39.5, 345.0], [39.6, 345.0], [39.7, 346.0], [39.8, 346.0], [39.9, 347.0], [40.0, 347.0], [40.1, 349.0], [40.2, 349.0], [40.3, 352.0], [40.4, 352.0], [40.5, 353.0], [40.6, 353.0], [40.7, 354.0], [40.8, 354.0], [40.9, 354.0], [41.0, 354.0], [41.1, 355.0], [41.2, 355.0], [41.3, 356.0], [41.4, 356.0], [41.5, 357.0], [41.6, 357.0], [41.7, 358.0], [41.8, 358.0], [41.9, 358.0], [42.0, 359.0], [42.1, 359.0], [42.2, 359.0], [42.3, 359.0], [42.4, 359.0], [42.5, 359.0], [42.6, 361.0], [42.7, 361.0], [42.8, 362.0], [42.9, 362.0], [43.0, 362.0], [43.1, 362.0], [43.2, 362.0], [43.3, 362.0], [43.4, 363.0], [43.5, 363.0], [43.6, 363.0], [43.7, 363.0], [43.8, 366.0], [43.9, 367.0], [44.0, 367.0], [44.1, 367.0], [44.2, 367.0], [44.3, 368.0], [44.4, 368.0], [44.5, 370.0], [44.6, 370.0], [44.7, 370.0], [44.8, 370.0], [44.9, 371.0], [45.0, 371.0], [45.1, 374.0], [45.2, 374.0], [45.3, 374.0], [45.4, 374.0], [45.5, 374.0], [45.6, 374.0], [45.7, 374.0], [45.8, 374.0], [45.9, 375.0], [46.0, 378.0], [46.1, 378.0], [46.2, 379.0], [46.3, 379.0], [46.4, 381.0], [46.5, 381.0], [46.6, 382.0], [46.7, 382.0], [46.8, 383.0], [46.9, 383.0], [47.0, 383.0], [47.1, 383.0], [47.2, 383.0], [47.3, 383.0], [47.4, 385.0], [47.5, 385.0], [47.6, 387.0], [47.7, 387.0], [47.8, 390.0], [47.9, 390.0], [48.0, 390.0], [48.1, 391.0], [48.2, 391.0], [48.3, 391.0], [48.4, 391.0], [48.5, 391.0], [48.6, 391.0], [48.7, 393.0], [48.8, 393.0], [48.9, 397.0], [49.0, 397.0], [49.1, 397.0], [49.2, 397.0], [49.3, 398.0], [49.4, 398.0], [49.5, 398.0], [49.6, 398.0], [49.7, 399.0], [49.8, 399.0], [49.9, 401.0], [50.0, 401.0], [50.1, 402.0], [50.2, 402.0], [50.3, 402.0], [50.4, 402.0], [50.5, 402.0], [50.6, 403.0], [50.7, 403.0], [50.8, 403.0], [50.9, 403.0], [51.0, 403.0], [51.1, 403.0], [51.2, 403.0], [51.3, 403.0], [51.4, 404.0], [51.5, 404.0], [51.6, 404.0], [51.7, 404.0], [51.8, 404.0], [51.9, 404.0], [52.0, 404.0], [52.1, 405.0], [52.2, 405.0], [52.3, 405.0], [52.4, 405.0], [52.5, 405.0], [52.6, 405.0], [52.7, 405.0], [52.8, 405.0], [52.9, 405.0], [53.0, 405.0], [53.1, 405.0], [53.2, 405.0], [53.3, 406.0], [53.4, 406.0], [53.5, 406.0], [53.6, 406.0], [53.7, 406.0], [53.8, 406.0], [53.9, 406.0], [54.0, 406.0], [54.1, 406.0], [54.2, 406.0], [54.3, 406.0], [54.4, 406.0], [54.5, 406.0], [54.6, 406.0], [54.7, 406.0], [54.8, 406.0], [54.9, 406.0], [55.0, 406.0], [55.1, 406.0], [55.2, 406.0], [55.3, 406.0], [55.4, 406.0], [55.5, 406.0], [55.6, 406.0], [55.7, 406.0], [55.8, 406.0], [55.9, 406.0], [56.0, 406.0], [56.1, 406.0], [56.2, 406.0], [56.3, 406.0], [56.4, 406.0], [56.5, 406.0], [56.6, 406.0], [56.7, 406.0], [56.8, 406.0], [56.9, 406.0], [57.0, 406.0], [57.1, 406.0], [57.2, 406.0], [57.3, 406.0], [57.4, 406.0], [57.5, 406.0], [57.6, 406.0], [57.7, 407.0], [57.8, 407.0], [57.9, 407.0], [58.0, 407.0], [58.1, 407.0], [58.2, 407.0], [58.3, 407.0], [58.4, 407.0], [58.5, 407.0], [58.6, 407.0], [58.7, 407.0], [58.8, 407.0], [58.9, 407.0], [59.0, 407.0], [59.1, 407.0], [59.2, 407.0], [59.3, 407.0], [59.4, 407.0], [59.5, 407.0], [59.6, 407.0], [59.7, 407.0], [59.8, 407.0], [59.9, 407.0], [60.0, 407.0], [60.1, 407.0], [60.2, 407.0], [60.3, 407.0], [60.4, 407.0], [60.5, 407.0], [60.6, 407.0], [60.7, 407.0], [60.8, 407.0], [60.9, 407.0], [61.0, 407.0], [61.1, 407.0], [61.2, 407.0], [61.3, 407.0], [61.4, 407.0], [61.5, 407.0], [61.6, 407.0], [61.7, 407.0], [61.8, 407.0], [61.9, 407.0], [62.0, 407.0], [62.1, 407.0], [62.2, 407.0], [62.3, 407.0], [62.4, 407.0], [62.5, 407.0], [62.6, 407.0], [62.7, 407.0], [62.8, 407.0], [62.9, 407.0], [63.0, 407.0], [63.1, 407.0], [63.2, 407.0], [63.3, 407.0], [63.4, 407.0], [63.5, 407.0], [63.6, 407.0], [63.7, 407.0], [63.8, 407.0], [63.9, 407.0], [64.0, 407.0], [64.1, 407.0], [64.2, 407.0], [64.3, 407.0], [64.4, 407.0], [64.5, 407.0], [64.6, 407.0], [64.7, 407.0], [64.8, 407.0], [64.9, 407.0], [65.0, 407.0], [65.1, 407.0], [65.2, 407.0], [65.3, 407.0], [65.4, 407.0], [65.5, 407.0], [65.6, 407.0], [65.7, 407.0], [65.8, 407.0], [65.9, 407.0], [66.0, 407.0], [66.1, 407.0], [66.2, 407.0], [66.3, 407.0], [66.4, 407.0], [66.5, 407.0], [66.6, 407.0], [66.7, 407.0], [66.8, 407.0], [66.9, 407.0], [67.0, 407.0], [67.1, 407.0], [67.2, 407.0], [67.3, 407.0], [67.4, 407.0], [67.5, 407.0], [67.6, 407.0], [67.7, 407.0], [67.8, 407.0], [67.9, 407.0], [68.0, 407.0], [68.1, 407.0], [68.2, 407.0], [68.3, 407.0], [68.4, 407.0], [68.5, 407.0], [68.6, 408.0], [68.7, 408.0], [68.8, 408.0], [68.9, 408.0], [69.0, 408.0], [69.1, 408.0], [69.2, 408.0], [69.3, 408.0], [69.4, 408.0], [69.5, 408.0], [69.6, 408.0], [69.7, 408.0], [69.8, 408.0], [69.9, 408.0], [70.0, 408.0], [70.1, 408.0], [70.2, 408.0], [70.3, 408.0], [70.4, 408.0], [70.5, 408.0], [70.6, 408.0], [70.7, 408.0], [70.8, 408.0], [70.9, 408.0], [71.0, 408.0], [71.1, 408.0], [71.2, 408.0], [71.3, 408.0], [71.4, 408.0], [71.5, 408.0], [71.6, 408.0], [71.7, 408.0], [71.8, 408.0], [71.9, 408.0], [72.0, 408.0], [72.1, 408.0], [72.2, 408.0], [72.3, 408.0], [72.4, 408.0], [72.5, 408.0], [72.6, 408.0], [72.7, 408.0], [72.8, 408.0], [72.9, 408.0], [73.0, 408.0], [73.1, 408.0], [73.2, 408.0], [73.3, 408.0], [73.4, 408.0], [73.5, 408.0], [73.6, 408.0], [73.7, 408.0], [73.8, 408.0], [73.9, 408.0], [74.0, 408.0], [74.1, 408.0], [74.2, 408.0], [74.3, 408.0], [74.4, 408.0], [74.5, 408.0], [74.6, 408.0], [74.7, 408.0], [74.8, 408.0], [74.9, 408.0], [75.0, 408.0], [75.1, 408.0], [75.2, 408.0], [75.3, 408.0], [75.4, 408.0], [75.5, 408.0], [75.6, 408.0], [75.7, 408.0], [75.8, 408.0], [75.9, 408.0], [76.0, 408.0], [76.1, 408.0], [76.2, 408.0], [76.3, 408.0], [76.4, 408.0], [76.5, 408.0], [76.6, 408.0], [76.7, 408.0], [76.8, 408.0], [76.9, 408.0], [77.0, 408.0], [77.1, 408.0], [77.2, 408.0], [77.3, 408.0], [77.4, 408.0], [77.5, 408.0], [77.6, 408.0], [77.7, 408.0], [77.8, 408.0], [77.9, 408.0], [78.0, 408.0], [78.1, 408.0], [78.2, 408.0], [78.3, 408.0], [78.4, 408.0], [78.5, 408.0], [78.6, 408.0], [78.7, 408.0], [78.8, 408.0], [78.9, 408.0], [79.0, 408.0], [79.1, 408.0], [79.2, 408.0], [79.3, 408.0], [79.4, 408.0], [79.5, 408.0], [79.6, 408.0], [79.7, 408.0], [79.8, 408.0], [79.9, 408.0], [80.0, 408.0], [80.1, 408.0], [80.2, 408.0], [80.3, 408.0], [80.4, 408.0], [80.5, 408.0], [80.6, 408.0], [80.7, 408.0], [80.8, 408.0], [80.9, 408.0], [81.0, 408.0], [81.1, 408.0], [81.2, 408.0], [81.3, 408.0], [81.4, 408.0], [81.5, 408.0], [81.6, 408.0], [81.7, 408.0], [81.8, 408.0], [81.9, 408.0], [82.0, 408.0], [82.1, 408.0], [82.2, 408.0], [82.3, 408.0], [82.4, 408.0], [82.5, 408.0], [82.6, 408.0], [82.7, 408.0], [82.8, 408.0], [82.9, 408.0], [83.0, 408.0], [83.1, 408.0], [83.2, 408.0], [83.3, 408.0], [83.4, 408.0], [83.5, 408.0], [83.6, 408.0], [83.7, 408.0], [83.8, 408.0], [83.9, 408.0], [84.0, 408.0], [84.1, 408.0], [84.2, 408.0], [84.3, 408.0], [84.4, 409.0], [84.5, 409.0], [84.6, 409.0], [84.7, 409.0], [84.8, 409.0], [84.9, 409.0], [85.0, 409.0], [85.1, 409.0], [85.2, 409.0], [85.3, 409.0], [85.4, 409.0], [85.5, 409.0], [85.6, 409.0], [85.7, 409.0], [85.8, 409.0], [85.9, 409.0], [86.0, 409.0], [86.1, 409.0], [86.2, 409.0], [86.3, 409.0], [86.4, 409.0], [86.5, 409.0], [86.6, 409.0], [86.7, 409.0], [86.8, 409.0], [86.9, 409.0], [87.0, 409.0], [87.1, 409.0], [87.2, 409.0], [87.3, 409.0], [87.4, 409.0], [87.5, 409.0], [87.6, 409.0], [87.7, 409.0], [87.8, 409.0], [87.9, 409.0], [88.0, 409.0], [88.1, 409.0], [88.2, 409.0], [88.3, 409.0], [88.4, 409.0], [88.5, 409.0], [88.6, 409.0], [88.7, 409.0], [88.8, 409.0], [88.9, 409.0], [89.0, 409.0], [89.1, 409.0], [89.2, 409.0], [89.3, 409.0], [89.4, 410.0], [89.5, 410.0], [89.6, 410.0], [89.7, 410.0], [89.8, 410.0], [89.9, 410.0], [90.0, 410.0], [90.1, 410.0], [90.2, 410.0], [90.3, 411.0], [90.4, 411.0], [90.5, 412.0], [90.6, 412.0], [90.7, 413.0], [90.8, 413.0], [90.9, 413.0], [91.0, 413.0], [91.1, 416.0], [91.2, 416.0], [91.3, 416.0], [91.4, 416.0], [91.5, 417.0], [91.6, 417.0], [91.7, 418.0], [91.8, 419.0], [91.9, 419.0], [92.0, 421.0], [92.1, 421.0], [92.2, 421.0], [92.3, 421.0], [92.4, 422.0], [92.5, 422.0], [92.6, 422.0], [92.7, 422.0], [92.8, 437.0], [92.9, 437.0], [93.0, 456.0], [93.1, 456.0], [93.2, 461.0], [93.3, 461.0], [93.4, 471.0], [93.5, 471.0], [93.6, 486.0], [93.7, 486.0], [93.8, 505.0], [93.9, 507.0], [94.0, 507.0], [94.1, 507.0], [94.2, 507.0], [94.3, 508.0], [94.4, 508.0], [94.5, 508.0], [94.6, 508.0], [94.7, 508.0], [94.8, 508.0], [94.9, 509.0], [95.0, 509.0], [95.1, 509.0], [95.2, 509.0], [95.3, 509.0], [95.4, 509.0], [95.5, 509.0], [95.6, 509.0], [95.7, 509.0], [95.8, 509.0], [95.9, 509.0], [96.0, 509.0], [96.1, 509.0], [96.2, 510.0], [96.3, 510.0], [96.4, 510.0], [96.5, 510.0], [96.6, 510.0], [96.7, 510.0], [96.8, 510.0], [96.9, 510.0], [97.0, 510.0], [97.1, 510.0], [97.2, 510.0], [97.3, 510.0], [97.4, 511.0], [97.5, 511.0], [97.6, 511.0], [97.7, 511.0], [97.8, 511.0], [97.9, 511.0], [98.0, 511.0], [98.1, 511.0], [98.2, 511.0], [98.3, 511.0], [98.4, 511.0], [98.5, 511.0], [98.6, 511.0], [98.7, 511.0], [98.8, 511.0], [98.9, 514.0], [99.0, 514.0], [99.1, 539.0], [99.2, 539.0], [99.3, 612.0], [99.4, 612.0], [99.5, 818.0], [99.6, 818.0], [99.7, 1636.0], [99.8, 1636.0], [99.9, 3375.0], [100.0, 3375.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 230.0, "series": [{"data": [[33300.0, 2.0], [33700.0, 3.0], [32900.0, 2.0], [34500.0, 2.0], [36500.0, 1.0], [36100.0, 1.0], [35700.0, 1.0], [37300.0, 1.0], [41300.0, 1.0], [42100.0, 1.0], [46900.0, 1.0], [45300.0, 1.0], [46500.0, 1.0], [51700.0, 1.0], [200.0, 1.0], [54900.0, 1.0], [60500.0, 3.0], [300.0, 4.0], [400.0, 27.0], [500.0, 47.0], [600.0, 16.0], [700.0, 1.0], [800.0, 1.0], [3700.0, 1.0], [4800.0, 1.0], [4700.0, 1.0], [5100.0, 1.0], [5200.0, 1.0], [5600.0, 2.0], [5700.0, 8.0], [5800.0, 1.0], [6000.0, 1.0], [5900.0, 4.0], [6200.0, 2.0], [6300.0, 2.0], [6500.0, 3.0], [6900.0, 1.0], [6700.0, 1.0], [7100.0, 1.0], [7000.0, 1.0], [7300.0, 3.0], [7400.0, 1.0], [7500.0, 3.0], [7700.0, 1.0], [8000.0, 3.0], [8600.0, 1.0], [8400.0, 1.0], [8200.0, 1.0], [8700.0, 3.0], [9000.0, 3.0], [8900.0, 1.0], [8800.0, 1.0], [9600.0, 3.0], [9700.0, 1.0], [9300.0, 2.0], [9400.0, 1.0], [9900.0, 2.0], [9800.0, 3.0], [10100.0, 1.0], [10000.0, 2.0], [10200.0, 1.0], [10700.0, 2.0], [10500.0, 1.0], [10900.0, 2.0], [10800.0, 2.0], [11200.0, 2.0], [11000.0, 1.0], [11400.0, 2.0], [11300.0, 1.0], [11600.0, 1.0], [11500.0, 3.0], [12000.0, 2.0], [12100.0, 3.0], [11900.0, 1.0], [12200.0, 2.0], [11800.0, 2.0], [12600.0, 3.0], [12500.0, 2.0], [12300.0, 2.0], [12700.0, 1.0], [12400.0, 1.0], [12800.0, 1.0], [13200.0, 1.0], [12900.0, 1.0], [13700.0, 3.0], [13500.0, 2.0], [13900.0, 1.0], [14000.0, 1.0], [14300.0, 3.0], [14200.0, 1.0], [14400.0, 2.0], [14800.0, 4.0], [14700.0, 2.0], [14500.0, 1.0], [14600.0, 1.0], [14900.0, 1.0], [15100.0, 2.0], [15200.0, 2.0], [15000.0, 4.0], [15600.0, 2.0], [15700.0, 3.0], [15400.0, 2.0], [15500.0, 2.0], [16000.0, 2.0], [15900.0, 1.0], [16200.0, 2.0], [16100.0, 2.0], [16300.0, 1.0], [17400.0, 3.0], [16800.0, 1.0], [17200.0, 1.0], [17000.0, 1.0], [16400.0, 1.0], [17800.0, 1.0], [18200.0, 3.0], [18000.0, 3.0], [19000.0, 3.0], [19200.0, 1.0], [18800.0, 1.0], [19600.0, 1.0], [19800.0, 2.0], [20400.0, 1.0], [21400.0, 1.0], [21000.0, 2.0], [20800.0, 3.0], [20600.0, 5.0], [21200.0, 2.0], [22400.0, 2.0], [22000.0, 1.0], [21600.0, 1.0], [22200.0, 2.0], [21800.0, 1.0], [22800.0, 4.0], [23200.0, 1.0], [23400.0, 1.0], [23800.0, 2.0], [24200.0, 5.0], [24000.0, 2.0], [23600.0, 1.0], [24400.0, 1.0], [25200.0, 1.0], [25400.0, 2.0], [24600.0, 1.0], [24800.0, 1.0], [26200.0, 2.0], [26600.0, 1.0], [25800.0, 1.0], [26400.0, 1.0], [25600.0, 1.0], [26800.0, 2.0], [27200.0, 2.0], [27000.0, 1.0], [27400.0, 1.0], [28400.0, 2.0], [28000.0, 1.0], [29200.0, 2.0], [29600.0, 1.0], [30400.0, 1.0], [30000.0, 1.0], [30200.0, 1.0], [31000.0, 3.0], [31400.0, 1.0], [32000.0, 3.0], [31800.0, 3.0], [32200.0, 1.0], [32600.0, 2.0], [34000.0, 2.0], [33600.0, 1.0], [32800.0, 1.0], [35600.0, 2.0], [36000.0, 1.0], [38400.0, 1.0], [40400.0, 1.0], [40000.0, 1.0], [39200.0, 1.0], [42000.0, 3.0], [42800.0, 1.0], [41200.0, 1.0], [43600.0, 1.0], [44800.0, 1.0], [44400.0, 1.0], [45600.0, 1.0], [47600.0, 1.0], [47200.0, 1.0], [52400.0, 1.0], [60400.0, 2.0], [33500.0, 1.0], [34300.0, 1.0], [35900.0, 1.0], [35500.0, 1.0], [39500.0, 1.0], [40700.0, 3.0], [41900.0, 1.0], [41100.0, 1.0], [41500.0, 1.0], [43500.0, 1.0], [46700.0, 2.0], [47100.0, 1.0], [46300.0, 1.0], [45500.0, 1.0], [48300.0, 1.0], [47900.0, 1.0], [16900.0, 3.0], [16700.0, 3.0], [17300.0, 1.0], [17100.0, 1.0], [17900.0, 2.0], [18100.0, 2.0], [17500.0, 1.0], [17700.0, 1.0], [18500.0, 2.0], [19900.0, 1.0], [19700.0, 1.0], [19500.0, 1.0], [20500.0, 3.0], [21500.0, 1.0], [21300.0, 1.0], [20900.0, 3.0], [20700.0, 1.0], [21900.0, 3.0], [21700.0, 2.0], [22300.0, 2.0], [22500.0, 2.0], [22100.0, 1.0], [23100.0, 1.0], [22900.0, 1.0], [23700.0, 3.0], [23900.0, 1.0], [24500.0, 1.0], [25100.0, 2.0], [25500.0, 2.0], [24700.0, 2.0], [25300.0, 2.0], [26300.0, 4.0], [26500.0, 3.0], [26700.0, 1.0], [27300.0, 1.0], [27100.0, 2.0], [27500.0, 1.0], [27900.0, 1.0], [29100.0, 1.0], [29500.0, 2.0], [30500.0, 3.0], [30100.0, 1.0], [29700.0, 1.0], [31300.0, 1.0], [31700.0, 2.0], [32100.0, 1.0], [32500.0, 2.0], [32300.0, 4.0], [33400.0, 2.0], [34200.0, 1.0], [34600.0, 1.0], [35400.0, 1.0], [38200.0, 1.0], [38600.0, 1.0], [39400.0, 1.0], [39800.0, 1.0], [41000.0, 1.0], [42600.0, 1.0], [41800.0, 1.0], [43800.0, 2.0], [45000.0, 1.0], [51000.0, 1.0], [58600.0, 1.0], [60600.0, 2.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 73.0], [33300.0, 1.0], [33700.0, 1.0], [34100.0, 3.0], [36100.0, 1.0], [35300.0, 2.0], [36900.0, 1.0], [42500.0, 1.0], [41700.0, 2.0], [43300.0, 2.0], [44900.0, 1.0], [45300.0, 1.0], [46900.0, 1.0], [46500.0, 1.0], [46100.0, 1.0], [50500.0, 1.0], [200.0, 17.0], [60100.0, 6.0], [300.0, 1.0], [400.0, 1.0], [3300.0, 1.0], [4400.0, 2.0], [4800.0, 1.0], [4700.0, 1.0], [5300.0, 7.0], [5200.0, 1.0], [5400.0, 4.0], [5600.0, 3.0], [5500.0, 1.0], [5800.0, 1.0], [6100.0, 2.0], [5900.0, 2.0], [6000.0, 1.0], [6300.0, 1.0], [6200.0, 1.0], [6600.0, 1.0], [6500.0, 1.0], [6900.0, 2.0], [6700.0, 1.0], [6800.0, 1.0], [7000.0, 1.0], [7200.0, 2.0], [7300.0, 2.0], [7600.0, 2.0], [7800.0, 1.0], [7700.0, 1.0], [8100.0, 2.0], [8600.0, 3.0], [8200.0, 2.0], [8300.0, 2.0], [8500.0, 1.0], [8400.0, 1.0], [9200.0, 1.0], [9100.0, 2.0], [8900.0, 1.0], [8800.0, 1.0], [9300.0, 2.0], [9600.0, 2.0], [9400.0, 1.0], [9500.0, 4.0], [10000.0, 1.0], [9900.0, 2.0], [10200.0, 1.0], [10600.0, 2.0], [10400.0, 1.0], [10700.0, 1.0], [10500.0, 2.0], [10300.0, 2.0], [10900.0, 1.0], [10800.0, 1.0], [11100.0, 2.0], [11000.0, 1.0], [11200.0, 1.0], [11700.0, 3.0], [11600.0, 3.0], [11300.0, 1.0], [11500.0, 1.0], [12200.0, 3.0], [12000.0, 1.0], [11800.0, 1.0], [11900.0, 2.0], [12100.0, 1.0], [12400.0, 1.0], [12300.0, 3.0], [12500.0, 1.0], [12800.0, 1.0], [13100.0, 1.0], [13200.0, 1.0], [13300.0, 2.0], [13500.0, 1.0], [13700.0, 1.0], [13400.0, 1.0], [13800.0, 2.0], [14000.0, 2.0], [13900.0, 2.0], [14300.0, 4.0], [14100.0, 1.0], [14500.0, 2.0], [14800.0, 4.0], [14700.0, 2.0], [14400.0, 3.0], [14600.0, 1.0], [15200.0, 4.0], [15000.0, 2.0], [15300.0, 1.0], [15100.0, 1.0], [15600.0, 2.0], [15700.0, 1.0], [15800.0, 2.0], [15400.0, 1.0], [16300.0, 1.0], [15900.0, 3.0], [16000.0, 1.0], [17000.0, 2.0], [17400.0, 2.0], [16600.0, 3.0], [16400.0, 2.0], [17600.0, 3.0], [18000.0, 2.0], [17800.0, 4.0], [18200.0, 1.0], [18400.0, 1.0], [19400.0, 3.0], [18600.0, 1.0], [18800.0, 1.0], [20000.0, 2.0], [20200.0, 4.0], [20400.0, 2.0], [21000.0, 1.0], [20600.0, 4.0], [21400.0, 2.0], [21200.0, 1.0], [20800.0, 1.0], [21600.0, 1.0], [22000.0, 2.0], [22400.0, 3.0], [22200.0, 1.0], [23400.0, 3.0], [23200.0, 1.0], [23800.0, 4.0], [23600.0, 3.0], [24200.0, 1.0], [24400.0, 1.0], [24000.0, 1.0], [24800.0, 2.0], [25400.0, 1.0], [25200.0, 1.0], [24600.0, 1.0], [26000.0, 3.0], [26400.0, 1.0], [26200.0, 1.0], [26800.0, 4.0], [27600.0, 1.0], [27000.0, 1.0], [29200.0, 3.0], [29600.0, 1.0], [28800.0, 1.0], [30000.0, 2.0], [31600.0, 3.0], [31400.0, 1.0], [31000.0, 1.0], [32000.0, 2.0], [31800.0, 2.0], [32200.0, 2.0], [32400.0, 1.0], [32800.0, 1.0], [33600.0, 1.0], [33200.0, 2.0], [35200.0, 1.0], [38000.0, 1.0], [39200.0, 1.0], [40400.0, 2.0], [40800.0, 2.0], [40000.0, 1.0], [39600.0, 1.0], [41600.0, 3.0], [42400.0, 1.0], [41200.0, 1.0], [44400.0, 1.0], [44000.0, 1.0], [45200.0, 1.0], [46400.0, 1.0], [47200.0, 1.0], [51200.0, 1.0], [52000.0, 1.0], [33100.0, 1.0], [33900.0, 2.0], [33500.0, 1.0], [35500.0, 2.0], [35100.0, 2.0], [38300.0, 1.0], [40300.0, 1.0], [43100.0, 1.0], [46300.0, 1.0], [45900.0, 1.0], [46700.0, 1.0], [47900.0, 1.0], [47500.0, 1.0], [16500.0, 2.0], [16900.0, 3.0], [17100.0, 2.0], [17900.0, 1.0], [17500.0, 1.0], [19100.0, 1.0], [18700.0, 2.0], [19300.0, 1.0], [19500.0, 1.0], [20100.0, 2.0], [20300.0, 1.0], [21300.0, 2.0], [20700.0, 1.0], [20900.0, 2.0], [20500.0, 2.0], [21500.0, 2.0], [21900.0, 2.0], [21700.0, 3.0], [22100.0, 2.0], [22500.0, 2.0], [22700.0, 2.0], [23300.0, 2.0], [23100.0, 1.0], [23700.0, 1.0], [24300.0, 1.0], [24500.0, 2.0], [25300.0, 1.0], [25100.0, 3.0], [24900.0, 2.0], [25900.0, 3.0], [26500.0, 1.0], [26300.0, 3.0], [26100.0, 2.0], [26700.0, 1.0], [27500.0, 1.0], [26900.0, 1.0], [27100.0, 1.0], [28500.0, 1.0], [27900.0, 1.0], [28100.0, 1.0], [28700.0, 1.0], [29500.0, 1.0], [29300.0, 1.0], [30500.0, 1.0], [30700.0, 2.0], [30300.0, 1.0], [29900.0, 1.0], [30100.0, 1.0], [31700.0, 1.0], [30900.0, 1.0], [31500.0, 2.0], [31300.0, 2.0], [32100.0, 2.0], [31900.0, 1.0], [32500.0, 2.0], [33000.0, 3.0], [35800.0, 1.0], [37800.0, 1.0], [39000.0, 2.0], [39400.0, 1.0], [41000.0, 2.0], [41400.0, 1.0], [43400.0, 1.0], [44600.0, 1.0], [54600.0, 1.0], [58200.0, 1.0], [60200.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 209.0], [600.0, 1.0], [400.0, 230.0], [200.0, 52.0], [1600.0, 1.0], [3300.0, 1.0], [800.0, 1.0], [500.0, 29.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 406.0, "series": [{"data": [[0.0, 388.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 26.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 406.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 221.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0666666666666664, "minX": 1.68520626E12, "maxY": 24.611111111111114, "series": [{"data": [[1.68520698E12, 21.027586206896544], [1.68520632E12, 4.593749999999999], [1.68520638E12, 5.0], [1.68520668E12, 14.577981651376144], [1.68520656E12, 10.0], [1.68520626E12, 2.0666666666666664], [1.68520662E12, 10.911764705882357], [1.68520692E12, 20.0], [1.6852065E12, 9.702702702702704], [1.6852068E12, 15.936781609195405], [1.68520686E12, 19.685567010309278], [1.68520674E12, 15.0], [1.68520704E12, 24.611111111111114], [1.6852071E12, 18.74603174603175], [1.68520644E12, 5.692307692307691]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6852071E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 330.2727272727273, "minX": 1.0, "maxY": 36550.0, "series": [{"data": [[2.0, 3701.0], [3.0, 2188.0], [4.0, 13206.0], [5.0, 18266.85185185185], [6.0, 19271.25], [7.0, 18166.0], [8.0, 31056.0], [9.0, 36550.0], [10.0, 16762.35820895523], [11.0, 14584.538461538463], [12.0, 8932.000000000002], [13.0, 16691.88888888889], [14.0, 24078.58823529412], [15.0, 18511.0], [1.0, 6046.0], [16.0, 10470.076923076924], [17.0, 8091.1], [18.0, 18624.733333333334], [19.0, 18388.399999999998], [20.0, 16652.603053435116], [21.0, 27138.111111111113], [22.0, 25660.571428571424], [23.0, 14531.833333333332], [24.0, 26101.5625], [25.0, 31191.820512820515]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[16.212643678160912, 18734.005747126415]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 3294.666666666667], [3.0, 2726.0], [4.0, 12806.75], [5.0, 19324.92], [6.0, 18909.25], [7.0, 17929.0], [8.0, 30548.0], [9.0, 36168.5], [10.0, 16395.626865671642], [11.0, 14252.92307692308], [12.0, 8558.285714285714], [13.0, 16322.111111111111], [14.0, 23706.058823529416], [15.0, 18075.75], [1.0, 5688.0], [16.0, 10090.538461538461], [17.0, 7729.6], [18.0, 18258.199999999997], [19.0, 19986.555555555555], [20.0, 16295.465648854959], [21.0, 26778.777777777774], [22.0, 25292.333333333336], [23.0, 17036.2], [24.0, 25741.312500000004], [25.0, 30838.46153846154]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[16.263056092843325, 18535.605415860737]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 347.3333333333333], [3.0, 377.75], [4.0, 361.0], [5.0, 379.96551724137936], [6.0, 352.8], [7.0, 376.0], [8.0, 384.5], [9.0, 373.6666666666667], [10.0, 360.27941176470586], [11.0, 365.84615384615387], [12.0, 389.55555555555554], [13.0, 331.0], [14.0, 375.3333333333333], [15.0, 436.41304347826093], [1.0, 405.0], [16.0, 332.91666666666663], [17.0, 388.8181818181818], [18.0, 379.2857142857143], [19.0, 388.58333333333337], [20.0, 356.186046511628], [21.0, 330.2727272727273], [22.0, 353.99999999999994], [23.0, 378.125], [24.0, 346.7142857142857], [25.0, 373.0243902439024]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[16.087786259541982, 375.5553435114503]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 402.3833333333333, "minX": 1.68520626E12, "maxY": 8777.816666666668, "series": [{"data": [[1.68520698E12, 3630.4333333333334], [1.68520632E12, 806.4], [1.68520638E12, 880.6], [1.68520668E12, 2714.366666666667], [1.68520656E12, 1423.1], [1.68520626E12, 402.3833333333333], [1.68520662E12, 2371.016666666667], [1.68520692E12, 4030.6], [1.6852065E12, 853.3], [1.6852068E12, 3151.05], [1.68520686E12, 3479.4666666666667], [1.68520674E12, 2516.15], [1.68520704E12, 3081.2833333333333], [1.6852071E12, 2257.0333333333333], [1.68520644E12, 989.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68520698E12, 6464.433333333333], [1.68520632E12, 1775.3], [1.68520638E12, 1775.2], [1.68520668E12, 4805.916666666667], [1.68520656E12, 4932.05], [1.68520626E12, 758.0333333333333], [1.68520662E12, 6339.133333333333], [1.68520692E12, 8358.6], [1.6852065E12, 1924.5833333333333], [1.6852068E12, 8777.816666666668], [1.68520686E12, 8542.65], [1.68520674E12, 5471.883333333333], [1.68520704E12, 5549.083333333333], [1.6852071E12, 6464.233333333334], [1.68520644E12, 1782.7833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6852071E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 351.16666666666674, "minX": 1.68520626E12, "maxY": 39525.454545454544, "series": [{"data": [[1.68520698E12, 20854.28260869565], [1.68520632E12, 16727.6], [1.68520638E12, 20149.769230769234], [1.68520668E12, 18775.199999999997], [1.68520656E12, 13926.461538461543], [1.68520626E12, 5911.0], [1.68520662E12, 12788.622222222224], [1.68520692E12, 17387.73214285714], [1.6852065E12, 39525.454545454544], [1.6852068E12, 12854.350877192985], [1.68520686E12, 15500.093749999998], [1.68520674E12, 19512.184210526317], [1.68520704E12, 28112.85714285714], [1.6852071E12, 25870.72], [1.68520644E12, 20191.583333333336]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68520698E12, 20355.65957446808], [1.68520632E12, 16349.199999999999], [1.68520638E12, 19873.5], [1.68520668E12, 17857.583333333332], [1.68520656E12, 13641.243243243247], [1.68520626E12, 5502.5], [1.68520662E12, 12166.227272727274], [1.68520692E12, 16903.344827586203], [1.6852065E12, 38429.916666666664], [1.6852068E12, 11702.964912280704], [1.68520686E12, 15547.953125000005], [1.68520674E12, 20211.777777777777], [1.68520704E12, 27192.658536585364], [1.6852071E12, 28662.531914893618], [1.68520644E12, 18828.499999999996]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68520698E12, 354.6923076923077], [1.68520632E12, 392.9166666666667], [1.68520638E12, 351.16666666666674], [1.68520668E12, 372.86842105263145], [1.68520656E12, 357.97297297297297], [1.68520626E12, 406.85714285714283], [1.68520662E12, 366.2127659574468], [1.68520692E12, 361.1428571428572], [1.6852065E12, 388.1428571428571], [1.6852068E12, 373.3], [1.68520686E12, 351.6818181818181], [1.68520674E12, 513.638888888889], [1.68520704E12, 357.6511627906977], [1.6852071E12, 385.89655172413796], [1.68520644E12, 374.4]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6852071E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 350.8333333333333, "minX": 1.68520626E12, "maxY": 39525.181818181816, "series": [{"data": [[1.68520698E12, 20853.804347826088], [1.68520632E12, 16727.399999999998], [1.68520638E12, 20149.153846153848], [1.68520668E12, 18772.542857142857], [1.68520656E12, 13926.230769230771], [1.68520626E12, 5908.0], [1.68520662E12, 12788.28888888889], [1.68520692E12, 17387.499999999996], [1.6852065E12, 39525.181818181816], [1.6852068E12, 12854.140350877198], [1.68520686E12, 15499.921875000002], [1.68520674E12, 19510.21052631579], [1.68520704E12, 28112.7619047619], [1.6852071E12, 25868.8], [1.68520644E12, 20184.249999999996]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68520698E12, 20355.255319148942], [1.68520632E12, 16349.1], [1.68520638E12, 19873.083333333336], [1.68520668E12, 17857.5], [1.68520656E12, 13641.162162162163], [1.68520626E12, 5502.5], [1.68520662E12, 12166.113636363636], [1.68520692E12, 16903.189655172413], [1.6852065E12, 38429.75], [1.6852068E12, 11702.824561403513], [1.68520686E12, 15547.859374999998], [1.68520674E12, 20211.638888888887], [1.68520704E12, 27192.585365853658], [1.6852071E12, 28660.531914893614], [1.68520644E12, 18821.333333333332]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68520698E12, 354.6923076923077], [1.68520632E12, 392.9166666666667], [1.68520638E12, 350.8333333333333], [1.68520668E12, 368.6842105263157], [1.68520656E12, 357.8108108108109], [1.68520626E12, 405.00000000000006], [1.68520662E12, 366.02127659574467], [1.68520692E12, 361.0178571428572], [1.6852065E12, 388.07142857142856], [1.6852068E12, 373.2333333333333], [1.68520686E12, 351.63636363636374], [1.68520674E12, 513.5277777777777], [1.68520704E12, 357.62790697674416], [1.6852071E12, 385.7931034482759], [1.68520644E12, 374.33333333333337]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6852071E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68520626E12, "maxY": 204.41666666666669, "series": [{"data": [[1.68520698E12, 173.60869565217394], [1.68520632E12, 183.4], [1.68520638E12, 184.84615384615384], [1.68520668E12, 173.91428571428574], [1.68520656E12, 189.69230769230762], [1.68520626E12, 195.25], [1.68520662E12, 172.86666666666662], [1.68520692E12, 178.75], [1.6852065E12, 182.0], [1.6852068E12, 184.07017543859646], [1.68520686E12, 167.78125], [1.68520674E12, 188.92105263157893], [1.68520704E12, 175.7142857142857], [1.6852071E12, 173.0], [1.68520644E12, 196.58333333333331]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68520698E12, 0.0], [1.68520632E12, 0.0], [1.68520638E12, 0.0], [1.68520668E12, 0.0], [1.68520656E12, 0.0], [1.68520626E12, 0.0], [1.68520662E12, 0.0], [1.68520692E12, 0.0], [1.6852065E12, 0.0], [1.6852068E12, 0.0], [1.68520686E12, 0.0], [1.68520674E12, 0.0], [1.68520704E12, 0.0], [1.6852071E12, 0.0], [1.68520644E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68520698E12, 167.57692307692307], [1.68520632E12, 204.41666666666669], [1.68520638E12, 160.83333333333334], [1.68520668E12, 174.2105263157895], [1.68520656E12, 180.3783783783784], [1.68520626E12, 196.57142857142858], [1.68520662E12, 178.82978723404258], [1.68520692E12, 179.99999999999997], [1.6852065E12, 195.0], [1.6852068E12, 180.2666666666667], [1.68520686E12, 169.46969696969694], [1.68520674E12, 189.55555555555563], [1.68520704E12, 173.99999999999997], [1.6852071E12, 179.72413793103448], [1.68520644E12, 192.4]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6852071E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 216.0, "minX": 1.68520626E12, "maxY": 54640.0, "series": [{"data": [[1.68520698E12, 39455.0], [1.68520632E12, 22735.0], [1.68520638E12, 26583.0], [1.68520668E12, 46968.0], [1.68520656E12, 50525.0], [1.68520626E12, 6902.0], [1.68520662E12, 42423.0], [1.68520692E12, 33770.0], [1.6852065E12, 46305.0], [1.6852068E12, 39631.0], [1.68520686E12, 39040.0], [1.68520674E12, 43391.0], [1.68520704E12, 51291.0], [1.6852071E12, 54640.0], [1.68520644E12, 22126.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68520698E12, 31005.0], [1.68520632E12, 21947.4], [1.68520638E12, 25989.0], [1.68520668E12, 28246.0], [1.68520656E12, 47643.6], [1.68520626E12, 6594.800000000001], [1.68520662E12, 39921.8], [1.68520692E12, 26907.2], [1.6852065E12, 43274.7], [1.6852068E12, 30120.100000000006], [1.68520686E12, 31524.0], [1.68520674E12, 29864.600000000002], [1.68520704E12, 41736.5], [1.6852071E12, 32271.8], [1.68520644E12, 21780.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68520698E12, 39455.0], [1.68520632E12, 22735.0], [1.68520638E12, 26583.0], [1.68520668E12, 46968.0], [1.68520656E12, 50525.0], [1.68520626E12, 6902.0], [1.68520662E12, 42423.0], [1.68520692E12, 33658.03999999999], [1.6852065E12, 46305.0], [1.6852068E12, 39631.0], [1.68520686E12, 39040.0], [1.68520674E12, 43391.0], [1.68520704E12, 51291.0], [1.6852071E12, 54640.0], [1.68520644E12, 22126.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68520698E12, 35277.0], [1.68520632E12, 22634.949999999997], [1.68520638E12, 26449.25], [1.68520668E12, 42433.0], [1.68520656E12, 50001.59999999999], [1.68520626E12, 6902.0], [1.68520662E12, 41219.4], [1.68520692E12, 30031.499999999996], [1.6852065E12, 45858.149999999994], [1.6852068E12, 34506.99999999999], [1.68520686E12, 33266.0], [1.68520674E12, 37389.79999999996], [1.68520704E12, 45789.25], [1.6852071E12, 38533.39999999993], [1.68520644E12, 22039.2]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68520698E12, 217.0], [1.68520632E12, 220.0], [1.68520638E12, 302.0], [1.68520668E12, 216.0], [1.68520656E12, 304.0], [1.68520626E12, 399.0], [1.68520662E12, 217.0], [1.68520692E12, 221.0], [1.6852065E12, 312.0], [1.6852068E12, 235.0], [1.68520686E12, 233.0], [1.68520674E12, 258.0], [1.68520704E12, 224.0], [1.6852071E12, 218.0], [1.68520644E12, 237.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68520698E12, 456.0], [1.68520632E12, 507.5], [1.68520638E12, 4346.5], [1.68520668E12, 510.0], [1.68520656E12, 23643.0], [1.68520626E12, 411.0], [1.68520662E12, 408.0], [1.68520692E12, 2888.0], [1.6852065E12, 31159.5], [1.6852068E12, 3072.5], [1.68520686E12, 9913.0], [1.68520674E12, 7600.0], [1.68520704E12, 414.5], [1.6852071E12, 818.0], [1.68520644E12, 422.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6852071E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 208.5, "minX": 1.0, "maxY": 25949.0, "series": [{"data": [[1.0, 417.5], [2.0, 509.5], [8.0, 18593.0], [4.0, 6023.0], [9.0, 408.0], [5.0, 510.0], [10.0, 11619.0], [3.0, 6583.5], [6.0, 5363.0], [7.0, 9640.0], [15.0, 407.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 208.5], [1.0, 259.5], [4.0, 300.0], [10.0, 304.0], [5.0, 375.5], [3.0, 311.5], [6.0, 215.0], [7.0, 303.0], [15.0, 25949.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 208.5, "minX": 1.0, "maxY": 25949.0, "series": [{"data": [[1.0, 417.5], [2.0, 509.5], [8.0, 18592.5], [4.0, 6023.0], [9.0, 408.0], [5.0, 461.0], [10.0, 11619.0], [3.0, 6582.0], [6.0, 5362.0], [7.0, 9640.0], [15.0, 407.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 208.5], [1.0, 259.5], [4.0, 300.0], [10.0, 304.0], [5.0, 375.0], [3.0, 311.5], [6.0, 215.0], [7.0, 303.0], [15.0, 25949.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.68520626E12, "maxY": 2.15, "series": [{"data": [[1.68520698E12, 1.7333333333333334], [1.68520632E12, 0.4166666666666667], [1.68520638E12, 0.4], [1.68520668E12, 1.2833333333333334], [1.68520656E12, 1.2333333333333334], [1.68520626E12, 0.21666666666666667], [1.68520662E12, 1.5333333333333334], [1.68520692E12, 1.9166666666666667], [1.6852065E12, 0.45], [1.6852068E12, 1.9833333333333334], [1.68520686E12, 2.15], [1.68520674E12, 1.2166666666666666], [1.68520704E12, 1.4166666666666667], [1.6852071E12, 0.9], [1.68520644E12, 0.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6852071E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68520626E12, "maxY": 1.8, "series": [{"data": [[1.68520698E12, 1.65], [1.68520632E12, 0.36666666666666664], [1.68520638E12, 0.4], [1.68520668E12, 1.2333333333333334], [1.68520656E12, 0.38333333333333336], [1.68520626E12, 0.18333333333333332], [1.68520662E12, 0.8833333333333333], [1.68520692E12, 1.8], [1.6852065E12, 0.36666666666666664], [1.6852068E12, 1.2], [1.68520686E12, 1.3166666666666667], [1.68520674E12, 1.1166666666666667], [1.68520704E12, 1.4], [1.6852071E12, 0.9166666666666666], [1.68520644E12, 0.45]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6852065E12, 0.06666666666666667], [1.6852068E12, 0.75], [1.68520686E12, 0.85], [1.68520674E12, 0.08333333333333333], [1.68520656E12, 0.85], [1.68520662E12, 0.6333333333333333], [1.6852071E12, 0.23333333333333334], [1.68520692E12, 0.1]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.6852071E12, 0.11666666666666667]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6852071E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68520626E12, "maxY": 0.9, "series": [{"data": [[1.68520698E12, 0.8666666666666667], [1.68520632E12, 0.2], [1.68520638E12, 0.2], [1.68520668E12, 0.6333333333333333], [1.68520656E12, 0.15], [1.68520626E12, 0.11666666666666667], [1.68520662E12, 0.5166666666666667], [1.68520692E12, 0.9], [1.6852065E12, 0.16666666666666666], [1.6852068E12, 0.6], [1.68520686E12, 0.5833333333333334], [1.68520674E12, 0.5333333333333333], [1.68520704E12, 0.7166666666666667], [1.6852071E12, 0.4666666666666667], [1.68520644E12, 0.25]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.6852065E12, 0.06666666666666667], [1.6852068E12, 0.4], [1.68520686E12, 0.5166666666666667], [1.68520674E12, 0.06666666666666667], [1.68520656E12, 0.4666666666666667], [1.68520662E12, 0.26666666666666666], [1.6852071E12, 0.016666666666666666], [1.68520692E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.6852068E12, 0.35], [1.68520686E12, 0.3333333333333333], [1.68520674E12, 0.016666666666666666], [1.68520656E12, 0.38333333333333336], [1.68520662E12, 0.36666666666666664], [1.6852071E12, 0.3333333333333333], [1.68520692E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68520698E12, 0.7666666666666667], [1.68520632E12, 0.16666666666666666], [1.68520638E12, 0.21666666666666667], [1.68520668E12, 0.5833333333333334], [1.68520656E12, 0.1], [1.68520626E12, 0.06666666666666667], [1.68520662E12, 0.16666666666666666], [1.68520692E12, 0.7666666666666667], [1.6852065E12, 0.18333333333333332], [1.6852068E12, 0.4], [1.68520686E12, 0.43333333333333335], [1.68520674E12, 0.5833333333333334], [1.68520704E12, 0.7], [1.6852071E12, 0.48333333333333334], [1.68520644E12, 0.2]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.6852068E12, 0.55], [1.68520686E12, 0.6333333333333333], [1.68520674E12, 0.05], [1.68520656E12, 0.55], [1.68520662E12, 0.5833333333333334], [1.6852071E12, 0.35], [1.68520692E12, 0.16666666666666666]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68520698E12, 0.7833333333333333], [1.68520632E12, 0.16666666666666666], [1.68520638E12, 0.2], [1.68520668E12, 0.6], [1.68520656E12, 0.23333333333333334], [1.68520626E12, 0.06666666666666667], [1.68520662E12, 0.36666666666666664], [1.68520692E12, 0.9], [1.6852065E12, 0.2], [1.6852068E12, 0.6], [1.68520686E12, 0.7333333333333333], [1.68520674E12, 0.5833333333333334], [1.68520704E12, 0.6833333333333333], [1.6852071E12, 0.45], [1.68520644E12, 0.2]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6852071E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68520626E12, "maxY": 2.566666666666667, "series": [{"data": [[1.68520698E12, 2.4166666666666665], [1.68520632E12, 0.5333333333333333], [1.68520638E12, 0.6166666666666667], [1.68520668E12, 1.8166666666666667], [1.68520656E12, 0.48333333333333334], [1.68520626E12, 0.25], [1.68520662E12, 1.05], [1.68520692E12, 2.566666666666667], [1.6852065E12, 0.55], [1.6852068E12, 1.6], [1.68520686E12, 1.75], [1.68520674E12, 1.7], [1.68520704E12, 2.1], [1.6852071E12, 1.4], [1.68520644E12, 0.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6852065E12, 0.06666666666666667], [1.6852068E12, 1.3], [1.68520686E12, 1.4833333333333334], [1.68520674E12, 0.13333333333333333], [1.68520656E12, 1.4], [1.68520662E12, 1.2166666666666666], [1.6852071E12, 0.7], [1.68520692E12, 0.26666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6852071E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

