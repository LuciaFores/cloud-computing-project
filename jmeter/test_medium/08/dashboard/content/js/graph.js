/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 105.0, "minX": 0.0, "maxY": 60755.0, "series": [{"data": [[0.0, 319.0], [0.1, 319.0], [0.2, 322.0], [0.3, 322.0], [0.4, 322.0], [0.5, 322.0], [0.6, 325.0], [0.7, 325.0], [0.8, 328.0], [0.9, 328.0], [1.0, 331.0], [1.1, 331.0], [1.2, 335.0], [1.3, 335.0], [1.4, 341.0], [1.5, 341.0], [1.6, 344.0], [1.7, 344.0], [1.8, 346.0], [1.9, 346.0], [2.0, 347.0], [2.1, 347.0], [2.2, 349.0], [2.3, 349.0], [2.4, 353.0], [2.5, 353.0], [2.6, 353.0], [2.7, 353.0], [2.8, 358.0], [2.9, 358.0], [3.0, 358.0], [3.1, 362.0], [3.2, 362.0], [3.3, 363.0], [3.4, 363.0], [3.5, 364.0], [3.6, 364.0], [3.7, 370.0], [3.8, 370.0], [3.9, 370.0], [4.0, 370.0], [4.1, 374.0], [4.2, 374.0], [4.3, 378.0], [4.4, 378.0], [4.5, 381.0], [4.6, 381.0], [4.7, 382.0], [4.8, 382.0], [4.9, 383.0], [5.0, 383.0], [5.1, 386.0], [5.2, 386.0], [5.3, 398.0], [5.4, 398.0], [5.5, 412.0], [5.6, 412.0], [5.7, 414.0], [5.8, 414.0], [5.9, 418.0], [6.0, 419.0], [6.1, 419.0], [6.2, 420.0], [6.3, 420.0], [6.4, 423.0], [6.5, 423.0], [6.6, 424.0], [6.7, 424.0], [6.8, 425.0], [6.9, 425.0], [7.0, 425.0], [7.1, 425.0], [7.2, 429.0], [7.3, 429.0], [7.4, 432.0], [7.5, 432.0], [7.6, 432.0], [7.7, 432.0], [7.8, 432.0], [7.9, 432.0], [8.0, 434.0], [8.1, 434.0], [8.2, 435.0], [8.3, 435.0], [8.4, 435.0], [8.5, 435.0], [8.6, 442.0], [8.7, 442.0], [8.8, 445.0], [8.9, 447.0], [9.0, 447.0], [9.1, 447.0], [9.2, 447.0], [9.3, 448.0], [9.4, 448.0], [9.5, 453.0], [9.6, 453.0], [9.7, 454.0], [9.8, 454.0], [9.9, 455.0], [10.0, 455.0], [10.1, 456.0], [10.2, 456.0], [10.3, 456.0], [10.4, 456.0], [10.5, 457.0], [10.6, 457.0], [10.7, 457.0], [10.8, 457.0], [10.9, 462.0], [11.0, 462.0], [11.1, 463.0], [11.2, 463.0], [11.3, 467.0], [11.4, 467.0], [11.5, 469.0], [11.6, 469.0], [11.7, 473.0], [11.8, 473.0], [11.9, 473.0], [12.0, 473.0], [12.1, 473.0], [12.2, 476.0], [12.3, 476.0], [12.4, 476.0], [12.5, 476.0], [12.6, 476.0], [12.7, 476.0], [12.8, 479.0], [12.9, 479.0], [13.0, 479.0], [13.1, 479.0], [13.2, 480.0], [13.3, 480.0], [13.4, 480.0], [13.5, 480.0], [13.6, 480.0], [13.7, 480.0], [13.8, 480.0], [13.9, 480.0], [14.0, 481.0], [14.1, 481.0], [14.2, 482.0], [14.3, 482.0], [14.4, 484.0], [14.5, 484.0], [14.6, 484.0], [14.7, 484.0], [14.8, 484.0], [14.9, 491.0], [15.0, 491.0], [15.1, 493.0], [15.2, 493.0], [15.3, 494.0], [15.4, 494.0], [15.5, 494.0], [15.6, 494.0], [15.7, 496.0], [15.8, 496.0], [15.9, 499.0], [16.0, 499.0], [16.1, 499.0], [16.2, 499.0], [16.3, 500.0], [16.4, 500.0], [16.5, 500.0], [16.6, 500.0], [16.7, 512.0], [16.8, 512.0], [16.9, 513.0], [17.0, 513.0], [17.1, 514.0], [17.2, 514.0], [17.3, 514.0], [17.4, 514.0], [17.5, 515.0], [17.6, 515.0], [17.7, 515.0], [17.8, 516.0], [17.9, 516.0], [18.0, 516.0], [18.1, 516.0], [18.2, 517.0], [18.3, 517.0], [18.4, 517.0], [18.5, 517.0], [18.6, 517.0], [18.7, 517.0], [18.8, 517.0], [18.9, 517.0], [19.0, 518.0], [19.1, 518.0], [19.2, 518.0], [19.3, 518.0], [19.4, 518.0], [19.5, 518.0], [19.6, 521.0], [19.7, 521.0], [19.8, 523.0], [19.9, 523.0], [20.0, 523.0], [20.1, 523.0], [20.2, 523.0], [20.3, 523.0], [20.4, 524.0], [20.5, 524.0], [20.6, 525.0], [20.7, 525.0], [20.8, 525.0], [20.9, 526.0], [21.0, 526.0], [21.1, 526.0], [21.2, 526.0], [21.3, 527.0], [21.4, 527.0], [21.5, 528.0], [21.6, 528.0], [21.7, 529.0], [21.8, 529.0], [21.9, 530.0], [22.0, 530.0], [22.1, 531.0], [22.2, 531.0], [22.3, 531.0], [22.4, 531.0], [22.5, 531.0], [22.6, 531.0], [22.7, 534.0], [22.8, 534.0], [22.9, 534.0], [23.0, 534.0], [23.1, 535.0], [23.2, 535.0], [23.3, 536.0], [23.4, 536.0], [23.5, 536.0], [23.6, 539.0], [23.7, 539.0], [23.8, 542.0], [23.9, 542.0], [24.0, 544.0], [24.1, 544.0], [24.2, 544.0], [24.3, 544.0], [24.4, 547.0], [24.5, 547.0], [24.6, 549.0], [24.7, 549.0], [24.8, 552.0], [24.9, 552.0], [25.0, 553.0], [25.1, 553.0], [25.2, 553.0], [25.3, 553.0], [25.4, 554.0], [25.5, 554.0], [25.6, 554.0], [25.7, 554.0], [25.8, 559.0], [25.9, 559.0], [26.0, 560.0], [26.1, 560.0], [26.2, 562.0], [26.3, 562.0], [26.4, 564.0], [26.5, 565.0], [26.6, 565.0], [26.7, 569.0], [26.8, 569.0], [26.9, 569.0], [27.0, 569.0], [27.1, 572.0], [27.2, 572.0], [27.3, 572.0], [27.4, 572.0], [27.5, 574.0], [27.6, 574.0], [27.7, 577.0], [27.8, 577.0], [27.9, 580.0], [28.0, 580.0], [28.1, 584.0], [28.2, 584.0], [28.3, 586.0], [28.4, 586.0], [28.5, 586.0], [28.6, 586.0], [28.7, 588.0], [28.8, 588.0], [28.9, 589.0], [29.0, 589.0], [29.1, 589.0], [29.2, 589.0], [29.3, 594.0], [29.4, 594.0], [29.5, 598.0], [29.6, 601.0], [29.7, 601.0], [29.8, 603.0], [29.9, 603.0], [30.0, 607.0], [30.1, 607.0], [30.2, 608.0], [30.3, 608.0], [30.4, 609.0], [30.5, 609.0], [30.6, 609.0], [30.7, 609.0], [30.8, 609.0], [30.9, 609.0], [31.0, 622.0], [31.1, 622.0], [31.2, 623.0], [31.3, 623.0], [31.4, 683.0], [31.5, 683.0], [31.6, 715.0], [31.7, 715.0], [31.8, 1337.0], [31.9, 1337.0], [32.0, 1560.0], [32.1, 1560.0], [32.2, 4287.0], [32.3, 4287.0], [32.4, 4830.0], [32.5, 4926.0], [32.6, 4926.0], [32.7, 4954.0], [32.8, 4954.0], [32.9, 5357.0], [33.0, 5357.0], [33.1, 5397.0], [33.2, 5397.0], [33.3, 5454.0], [33.4, 5454.0], [33.5, 5477.0], [33.6, 5477.0], [33.7, 5525.0], [33.8, 5525.0], [33.9, 5627.0], [34.0, 5627.0], [34.1, 5787.0], [34.2, 5787.0], [34.3, 5889.0], [34.4, 5889.0], [34.5, 5922.0], [34.6, 5922.0], [34.7, 5944.0], [34.8, 5944.0], [34.9, 5945.0], [35.0, 5945.0], [35.1, 6136.0], [35.2, 6136.0], [35.3, 6282.0], [35.4, 6328.0], [35.5, 6328.0], [35.6, 6376.0], [35.7, 6376.0], [35.8, 6519.0], [35.9, 6519.0], [36.0, 6645.0], [36.1, 6645.0], [36.2, 6787.0], [36.3, 6787.0], [36.4, 6812.0], [36.5, 6812.0], [36.6, 6876.0], [36.7, 6876.0], [36.8, 6979.0], [36.9, 6979.0], [37.0, 7249.0], [37.1, 7249.0], [37.2, 7763.0], [37.3, 7763.0], [37.4, 8049.0], [37.5, 8049.0], [37.6, 8389.0], [37.7, 8389.0], [37.8, 8425.0], [37.9, 8425.0], [38.0, 8667.0], [38.1, 8667.0], [38.2, 9166.0], [38.3, 9282.0], [38.4, 9282.0], [38.5, 9341.0], [38.6, 9341.0], [38.7, 9683.0], [38.8, 9683.0], [38.9, 9736.0], [39.0, 9736.0], [39.1, 9797.0], [39.2, 9797.0], [39.3, 9818.0], [39.4, 9818.0], [39.5, 10066.0], [39.6, 10066.0], [39.7, 10068.0], [39.8, 10068.0], [39.9, 10170.0], [40.0, 10170.0], [40.1, 10315.0], [40.2, 10315.0], [40.3, 10354.0], [40.4, 10354.0], [40.5, 10511.0], [40.6, 10511.0], [40.7, 10644.0], [40.8, 10644.0], [40.9, 10803.0], [41.0, 10803.0], [41.1, 10881.0], [41.2, 10952.0], [41.3, 10952.0], [41.4, 11036.0], [41.5, 11036.0], [41.6, 11176.0], [41.7, 11176.0], [41.8, 11239.0], [41.9, 11239.0], [42.0, 11335.0], [42.1, 11335.0], [42.2, 11454.0], [42.3, 11454.0], [42.4, 11455.0], [42.5, 11455.0], [42.6, 11494.0], [42.7, 11494.0], [42.8, 11568.0], [42.9, 11568.0], [43.0, 11619.0], [43.1, 11619.0], [43.2, 11686.0], [43.3, 11686.0], [43.4, 11822.0], [43.5, 11822.0], [43.6, 11906.0], [43.7, 11906.0], [43.8, 11986.0], [43.9, 11986.0], [44.0, 12048.0], [44.1, 12048.0], [44.2, 12143.0], [44.3, 12330.0], [44.4, 12330.0], [44.5, 12443.0], [44.6, 12443.0], [44.7, 12512.0], [44.8, 12512.0], [44.9, 12532.0], [45.0, 12532.0], [45.1, 12598.0], [45.2, 12598.0], [45.3, 12655.0], [45.4, 12655.0], [45.5, 12742.0], [45.6, 12742.0], [45.7, 12931.0], [45.8, 12931.0], [45.9, 12969.0], [46.0, 12969.0], [46.1, 13161.0], [46.2, 13161.0], [46.3, 13247.0], [46.4, 13247.0], [46.5, 13265.0], [46.6, 13265.0], [46.7, 13387.0], [46.8, 13387.0], [46.9, 13528.0], [47.0, 13528.0], [47.1, 13570.0], [47.2, 13688.0], [47.3, 13688.0], [47.4, 13703.0], [47.5, 13703.0], [47.6, 13768.0], [47.7, 13768.0], [47.8, 13798.0], [47.9, 13798.0], [48.0, 13926.0], [48.1, 13926.0], [48.2, 14189.0], [48.3, 14189.0], [48.4, 14364.0], [48.5, 14364.0], [48.6, 14435.0], [48.7, 14435.0], [48.8, 14455.0], [48.9, 14455.0], [49.0, 14460.0], [49.1, 14460.0], [49.2, 14672.0], [49.3, 14672.0], [49.4, 14925.0], [49.5, 14925.0], [49.6, 14932.0], [49.7, 14932.0], [49.8, 14937.0], [49.9, 14937.0], [50.0, 15110.0], [50.1, 15158.0], [50.2, 15158.0], [50.3, 15180.0], [50.4, 15180.0], [50.5, 15244.0], [50.6, 15244.0], [50.7, 15348.0], [50.8, 15348.0], [50.9, 15447.0], [51.0, 15447.0], [51.1, 15532.0], [51.2, 15532.0], [51.3, 15561.0], [51.4, 15561.0], [51.5, 15727.0], [51.6, 15727.0], [51.7, 15731.0], [51.8, 15731.0], [51.9, 15920.0], [52.0, 15920.0], [52.1, 15962.0], [52.2, 15962.0], [52.3, 15973.0], [52.4, 15973.0], [52.5, 16156.0], [52.6, 16156.0], [52.7, 16216.0], [52.8, 16216.0], [52.9, 16303.0], [53.0, 16383.0], [53.1, 16383.0], [53.2, 16393.0], [53.3, 16393.0], [53.4, 16411.0], [53.5, 16411.0], [53.6, 16444.0], [53.7, 16444.0], [53.8, 16515.0], [53.9, 16515.0], [54.0, 16727.0], [54.1, 16727.0], [54.2, 16735.0], [54.3, 16735.0], [54.4, 17080.0], [54.5, 17080.0], [54.6, 17150.0], [54.7, 17150.0], [54.8, 17151.0], [54.9, 17151.0], [55.0, 17193.0], [55.1, 17193.0], [55.2, 17223.0], [55.3, 17223.0], [55.4, 17259.0], [55.5, 17259.0], [55.6, 17265.0], [55.7, 17265.0], [55.8, 17392.0], [55.9, 17444.0], [56.0, 17444.0], [56.1, 17619.0], [56.2, 17619.0], [56.3, 18021.0], [56.4, 18021.0], [56.5, 18372.0], [56.6, 18372.0], [56.7, 18671.0], [56.8, 18671.0], [56.9, 18801.0], [57.0, 18801.0], [57.1, 18891.0], [57.2, 18891.0], [57.3, 18959.0], [57.4, 18959.0], [57.5, 19054.0], [57.6, 19054.0], [57.7, 19237.0], [57.8, 19237.0], [57.9, 19260.0], [58.0, 19260.0], [58.1, 19464.0], [58.2, 19464.0], [58.3, 19660.0], [58.4, 19660.0], [58.5, 19660.0], [58.6, 19660.0], [58.7, 19794.0], [58.8, 19794.0], [58.9, 20036.0], [59.0, 20085.0], [59.1, 20085.0], [59.2, 20234.0], [59.3, 20234.0], [59.4, 20290.0], [59.5, 20290.0], [59.6, 20633.0], [59.7, 20633.0], [59.8, 20747.0], [59.9, 20747.0], [60.0, 20972.0], [60.1, 20972.0], [60.2, 20996.0], [60.3, 20996.0], [60.4, 21196.0], [60.5, 21196.0], [60.6, 21296.0], [60.7, 21296.0], [60.8, 21718.0], [60.9, 21718.0], [61.0, 21734.0], [61.1, 21734.0], [61.2, 21843.0], [61.3, 21843.0], [61.4, 22158.0], [61.5, 22158.0], [61.6, 22236.0], [61.7, 22236.0], [61.8, 22316.0], [61.9, 22346.0], [62.0, 22346.0], [62.1, 22585.0], [62.2, 22585.0], [62.3, 22998.0], [62.4, 22998.0], [62.5, 23052.0], [62.6, 23052.0], [62.7, 23076.0], [62.8, 23076.0], [62.9, 23288.0], [63.0, 23288.0], [63.1, 23298.0], [63.2, 23298.0], [63.3, 23488.0], [63.4, 23488.0], [63.5, 23804.0], [63.6, 23804.0], [63.7, 23810.0], [63.8, 23810.0], [63.9, 24016.0], [64.0, 24016.0], [64.1, 24369.0], [64.2, 24369.0], [64.3, 24469.0], [64.4, 24469.0], [64.5, 24587.0], [64.6, 24587.0], [64.7, 24703.0], [64.8, 24796.0], [64.9, 24796.0], [65.0, 24838.0], [65.1, 24838.0], [65.2, 24851.0], [65.3, 24851.0], [65.4, 24953.0], [65.5, 24953.0], [65.6, 24989.0], [65.7, 24989.0], [65.8, 25017.0], [65.9, 25017.0], [66.0, 25540.0], [66.1, 25540.0], [66.2, 25741.0], [66.3, 25741.0], [66.4, 25772.0], [66.5, 25772.0], [66.6, 25834.0], [66.7, 25834.0], [66.8, 26184.0], [66.9, 26184.0], [67.0, 26188.0], [67.1, 26188.0], [67.2, 26228.0], [67.3, 26228.0], [67.4, 26514.0], [67.5, 26514.0], [67.6, 26525.0], [67.7, 26618.0], [67.8, 26618.0], [67.9, 27401.0], [68.0, 27401.0], [68.1, 27553.0], [68.2, 27553.0], [68.3, 27914.0], [68.4, 27914.0], [68.5, 28020.0], [68.6, 28020.0], [68.7, 28090.0], [68.8, 28090.0], [68.9, 28232.0], [69.0, 28232.0], [69.1, 28271.0], [69.2, 28271.0], [69.3, 28400.0], [69.4, 28400.0], [69.5, 28434.0], [69.6, 28434.0], [69.7, 28443.0], [69.8, 28443.0], [69.9, 28573.0], [70.0, 28573.0], [70.1, 28622.0], [70.2, 28622.0], [70.3, 28677.0], [70.4, 28677.0], [70.5, 28725.0], [70.6, 28778.0], [70.7, 28778.0], [70.8, 28934.0], [70.9, 28934.0], [71.0, 29666.0], [71.1, 29666.0], [71.2, 29814.0], [71.3, 29814.0], [71.4, 29853.0], [71.5, 29853.0], [71.6, 30000.0], [71.7, 30000.0], [71.8, 30118.0], [71.9, 30118.0], [72.0, 30660.0], [72.1, 30660.0], [72.2, 30683.0], [72.3, 30683.0], [72.4, 31050.0], [72.5, 31050.0], [72.6, 31221.0], [72.7, 31221.0], [72.8, 31246.0], [72.9, 31246.0], [73.0, 31366.0], [73.1, 31366.0], [73.2, 31390.0], [73.3, 31390.0], [73.4, 31693.0], [73.5, 31693.0], [73.6, 31831.0], [73.7, 32304.0], [73.8, 32304.0], [73.9, 32406.0], [74.0, 32406.0], [74.1, 32424.0], [74.2, 32424.0], [74.3, 32479.0], [74.4, 32479.0], [74.5, 32753.0], [74.6, 32753.0], [74.7, 33030.0], [74.8, 33030.0], [74.9, 33697.0], [75.0, 33697.0], [75.1, 33745.0], [75.2, 33745.0], [75.3, 33912.0], [75.4, 33912.0], [75.5, 34061.0], [75.6, 34061.0], [75.7, 34140.0], [75.8, 34140.0], [75.9, 34262.0], [76.0, 34262.0], [76.1, 34569.0], [76.2, 34569.0], [76.3, 34571.0], [76.4, 34571.0], [76.5, 34619.0], [76.6, 34676.0], [76.7, 34676.0], [76.8, 34903.0], [76.9, 34903.0], [77.0, 34957.0], [77.1, 34957.0], [77.2, 35074.0], [77.3, 35074.0], [77.4, 35117.0], [77.5, 35117.0], [77.6, 35151.0], [77.7, 35151.0], [77.8, 35176.0], [77.9, 35176.0], [78.0, 35252.0], [78.1, 35252.0], [78.2, 35643.0], [78.3, 35643.0], [78.4, 36058.0], [78.5, 36058.0], [78.6, 36500.0], [78.7, 36500.0], [78.8, 37843.0], [78.9, 37843.0], [79.0, 37940.0], [79.1, 37940.0], [79.2, 37957.0], [79.3, 37957.0], [79.4, 37993.0], [79.5, 38005.0], [79.6, 38005.0], [79.7, 38253.0], [79.8, 38253.0], [79.9, 38306.0], [80.0, 38306.0], [80.1, 38376.0], [80.2, 38376.0], [80.3, 38416.0], [80.4, 38416.0], [80.5, 38869.0], [80.6, 38869.0], [80.7, 38942.0], [80.8, 38942.0], [80.9, 39097.0], [81.0, 39097.0], [81.1, 39163.0], [81.2, 39163.0], [81.3, 39234.0], [81.4, 39234.0], [81.5, 39418.0], [81.6, 39418.0], [81.7, 39803.0], [81.8, 39803.0], [81.9, 39821.0], [82.0, 39821.0], [82.1, 39885.0], [82.2, 39885.0], [82.3, 39934.0], [82.4, 40080.0], [82.5, 40080.0], [82.6, 40310.0], [82.7, 40310.0], [82.8, 40811.0], [82.9, 40811.0], [83.0, 41093.0], [83.1, 41093.0], [83.2, 41320.0], [83.3, 41320.0], [83.4, 41696.0], [83.5, 41696.0], [83.6, 41700.0], [83.7, 41700.0], [83.8, 41748.0], [83.9, 41748.0], [84.0, 41938.0], [84.1, 41938.0], [84.2, 42351.0], [84.3, 42351.0], [84.4, 42467.0], [84.5, 42467.0], [84.6, 42579.0], [84.7, 42579.0], [84.8, 42645.0], [84.9, 42645.0], [85.0, 43269.0], [85.1, 43269.0], [85.2, 43367.0], [85.3, 44781.0], [85.4, 44781.0], [85.5, 44867.0], [85.6, 44867.0], [85.7, 44871.0], [85.8, 44871.0], [85.9, 45055.0], [86.0, 45055.0], [86.1, 45346.0], [86.2, 45346.0], [86.3, 45397.0], [86.4, 45397.0], [86.5, 45905.0], [86.6, 45905.0], [86.7, 45913.0], [86.8, 45913.0], [86.9, 46008.0], [87.0, 46008.0], [87.1, 46227.0], [87.2, 46227.0], [87.3, 46263.0], [87.4, 46263.0], [87.5, 46527.0], [87.6, 46527.0], [87.7, 46631.0], [87.8, 46631.0], [87.9, 47173.0], [88.0, 47173.0], [88.1, 47362.0], [88.2, 47362.0], [88.3, 47992.0], [88.4, 48234.0], [88.5, 48234.0], [88.6, 49001.0], [88.7, 49001.0], [88.8, 49432.0], [88.9, 49432.0], [89.0, 49866.0], [89.1, 49866.0], [89.2, 49880.0], [89.3, 49880.0], [89.4, 49959.0], [89.5, 49959.0], [89.6, 50453.0], [89.7, 50453.0], [89.8, 51284.0], [89.9, 51284.0], [90.0, 51523.0], [90.1, 51523.0], [90.2, 51910.0], [90.3, 51910.0], [90.4, 52409.0], [90.5, 52409.0], [90.6, 52691.0], [90.7, 52691.0], [90.8, 53439.0], [90.9, 53439.0], [91.0, 53667.0], [91.1, 53667.0], [91.2, 54130.0], [91.3, 55439.0], [91.4, 55439.0], [91.5, 55843.0], [91.6, 55843.0], [91.7, 56026.0], [91.8, 56026.0], [91.9, 56730.0], [92.0, 56730.0], [92.1, 56889.0], [92.2, 56889.0], [92.3, 57568.0], [92.4, 57568.0], [92.5, 58067.0], [92.6, 58067.0], [92.7, 58248.0], [92.8, 58248.0], [92.9, 59968.0], [93.0, 59968.0], [93.1, 59995.0], [93.2, 59995.0], [93.3, 60319.0], [93.4, 60319.0], [93.5, 60319.0], [93.6, 60319.0], [93.7, 60322.0], [93.8, 60322.0], [93.9, 60327.0], [94.0, 60327.0], [94.1, 60412.0], [94.2, 60414.0], [94.3, 60414.0], [94.4, 60441.0], [94.5, 60441.0], [94.6, 60449.0], [94.7, 60449.0], [94.8, 60458.0], [94.9, 60458.0], [95.0, 60462.0], [95.1, 60462.0], [95.2, 60469.0], [95.3, 60469.0], [95.4, 60475.0], [95.5, 60475.0], [95.6, 60479.0], [95.7, 60479.0], [95.8, 60502.0], [95.9, 60502.0], [96.0, 60507.0], [96.1, 60507.0], [96.2, 60513.0], [96.3, 60513.0], [96.4, 60515.0], [96.5, 60515.0], [96.6, 60515.0], [96.7, 60515.0], [96.8, 60517.0], [96.9, 60517.0], [97.0, 60517.0], [97.1, 60517.0], [97.2, 60517.0], [97.3, 60520.0], [97.4, 60520.0], [97.5, 60531.0], [97.6, 60531.0], [97.7, 60534.0], [97.8, 60534.0], [97.9, 60561.0], [98.0, 60561.0], [98.1, 60566.0], [98.2, 60566.0], [98.3, 60572.0], [98.4, 60572.0], [98.5, 60591.0], [98.6, 60591.0], [98.7, 60605.0], [98.8, 60605.0], [98.9, 60608.0], [99.0, 60608.0], [99.1, 60619.0], [99.2, 60619.0], [99.3, 60644.0], [99.4, 60644.0], [99.5, 60681.0], [99.6, 60681.0], [99.7, 60688.0], [99.8, 60688.0], [99.9, 60755.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 105.0], [0.1, 105.0], [0.2, 106.0], [0.3, 106.0], [0.4, 106.0], [0.5, 106.0], [0.6, 106.0], [0.7, 106.0], [0.8, 106.0], [0.9, 106.0], [1.0, 107.0], [1.1, 107.0], [1.2, 107.0], [1.3, 107.0], [1.4, 107.0], [1.5, 107.0], [1.6, 107.0], [1.7, 107.0], [1.8, 107.0], [1.9, 107.0], [2.0, 107.0], [2.1, 107.0], [2.2, 107.0], [2.3, 107.0], [2.4, 107.0], [2.5, 107.0], [2.6, 108.0], [2.7, 108.0], [2.8, 108.0], [2.9, 108.0], [3.0, 108.0], [3.1, 108.0], [3.2, 108.0], [3.3, 108.0], [3.4, 108.0], [3.5, 108.0], [3.6, 108.0], [3.7, 109.0], [3.8, 109.0], [3.9, 109.0], [4.0, 109.0], [4.1, 109.0], [4.2, 109.0], [4.3, 109.0], [4.4, 109.0], [4.5, 109.0], [4.6, 109.0], [4.7, 109.0], [4.8, 109.0], [4.9, 109.0], [5.0, 109.0], [5.1, 109.0], [5.2, 109.0], [5.3, 109.0], [5.4, 109.0], [5.5, 109.0], [5.6, 109.0], [5.7, 109.0], [5.8, 109.0], [5.9, 110.0], [6.0, 110.0], [6.1, 110.0], [6.2, 110.0], [6.3, 110.0], [6.4, 110.0], [6.5, 110.0], [6.6, 110.0], [6.7, 110.0], [6.8, 111.0], [6.9, 111.0], [7.0, 111.0], [7.1, 111.0], [7.2, 111.0], [7.3, 111.0], [7.4, 112.0], [7.5, 112.0], [7.6, 113.0], [7.7, 113.0], [7.8, 113.0], [7.9, 113.0], [8.0, 114.0], [8.1, 114.0], [8.2, 115.0], [8.3, 115.0], [8.4, 115.0], [8.5, 115.0], [8.6, 116.0], [8.7, 116.0], [8.8, 116.0], [8.9, 117.0], [9.0, 117.0], [9.1, 118.0], [9.2, 118.0], [9.3, 118.0], [9.4, 118.0], [9.5, 118.0], [9.6, 118.0], [9.7, 119.0], [9.8, 119.0], [9.9, 120.0], [10.0, 120.0], [10.1, 121.0], [10.2, 121.0], [10.3, 121.0], [10.4, 121.0], [10.5, 121.0], [10.6, 121.0], [10.7, 122.0], [10.8, 122.0], [10.9, 122.0], [11.0, 122.0], [11.1, 122.0], [11.2, 122.0], [11.3, 122.0], [11.4, 122.0], [11.5, 123.0], [11.6, 123.0], [11.7, 123.0], [11.8, 125.0], [11.9, 125.0], [12.0, 126.0], [12.1, 126.0], [12.2, 126.0], [12.3, 126.0], [12.4, 126.0], [12.5, 126.0], [12.6, 127.0], [12.7, 127.0], [12.8, 127.0], [12.9, 127.0], [13.0, 128.0], [13.1, 128.0], [13.2, 128.0], [13.3, 128.0], [13.4, 128.0], [13.5, 128.0], [13.6, 131.0], [13.7, 131.0], [13.8, 132.0], [13.9, 132.0], [14.0, 134.0], [14.1, 134.0], [14.2, 135.0], [14.3, 135.0], [14.4, 135.0], [14.5, 135.0], [14.6, 135.0], [14.7, 135.0], [14.8, 136.0], [14.9, 136.0], [15.0, 136.0], [15.1, 136.0], [15.2, 136.0], [15.3, 138.0], [15.4, 138.0], [15.5, 140.0], [15.6, 140.0], [15.7, 141.0], [15.8, 141.0], [15.9, 141.0], [16.0, 141.0], [16.1, 142.0], [16.2, 142.0], [16.3, 144.0], [16.4, 144.0], [16.5, 144.0], [16.6, 144.0], [16.7, 144.0], [16.8, 144.0], [16.9, 144.0], [17.0, 144.0], [17.1, 145.0], [17.2, 145.0], [17.3, 146.0], [17.4, 146.0], [17.5, 147.0], [17.6, 147.0], [17.7, 148.0], [17.8, 149.0], [17.9, 149.0], [18.0, 149.0], [18.1, 149.0], [18.2, 149.0], [18.3, 149.0], [18.4, 150.0], [18.5, 150.0], [18.6, 151.0], [18.7, 151.0], [18.8, 152.0], [18.9, 152.0], [19.0, 152.0], [19.1, 152.0], [19.2, 153.0], [19.3, 153.0], [19.4, 153.0], [19.5, 153.0], [19.6, 154.0], [19.7, 154.0], [19.8, 155.0], [19.9, 155.0], [20.0, 156.0], [20.1, 156.0], [20.2, 158.0], [20.3, 158.0], [20.4, 161.0], [20.5, 161.0], [20.6, 162.0], [20.7, 164.0], [20.8, 164.0], [20.9, 165.0], [21.0, 165.0], [21.1, 166.0], [21.2, 166.0], [21.3, 167.0], [21.4, 167.0], [21.5, 168.0], [21.6, 168.0], [21.7, 170.0], [21.8, 170.0], [21.9, 171.0], [22.0, 171.0], [22.1, 171.0], [22.2, 171.0], [22.3, 171.0], [22.4, 171.0], [22.5, 171.0], [22.6, 171.0], [22.7, 173.0], [22.8, 173.0], [22.9, 174.0], [23.0, 174.0], [23.1, 174.0], [23.2, 174.0], [23.3, 175.0], [23.4, 175.0], [23.5, 177.0], [23.6, 180.0], [23.7, 180.0], [23.8, 181.0], [23.9, 181.0], [24.0, 181.0], [24.1, 181.0], [24.2, 182.0], [24.3, 182.0], [24.4, 184.0], [24.5, 184.0], [24.6, 186.0], [24.7, 186.0], [24.8, 188.0], [24.9, 188.0], [25.0, 188.0], [25.1, 188.0], [25.2, 189.0], [25.3, 189.0], [25.4, 189.0], [25.5, 189.0], [25.6, 189.0], [25.7, 189.0], [25.8, 190.0], [25.9, 190.0], [26.0, 195.0], [26.1, 195.0], [26.2, 196.0], [26.3, 196.0], [26.4, 196.0], [26.5, 197.0], [26.6, 197.0], [26.7, 197.0], [26.8, 197.0], [26.9, 198.0], [27.0, 198.0], [27.1, 199.0], [27.2, 199.0], [27.3, 199.0], [27.4, 199.0], [27.5, 199.0], [27.6, 199.0], [27.7, 200.0], [27.8, 200.0], [27.9, 201.0], [28.0, 201.0], [28.1, 201.0], [28.2, 201.0], [28.3, 201.0], [28.4, 201.0], [28.5, 202.0], [28.6, 202.0], [28.7, 202.0], [28.8, 202.0], [28.9, 203.0], [29.0, 203.0], [29.1, 204.0], [29.2, 204.0], [29.3, 205.0], [29.4, 205.0], [29.5, 206.0], [29.6, 206.0], [29.7, 206.0], [29.8, 207.0], [29.9, 207.0], [30.0, 212.0], [30.1, 212.0], [30.2, 212.0], [30.3, 212.0], [30.4, 213.0], [30.5, 213.0], [30.6, 213.0], [30.7, 213.0], [30.8, 214.0], [30.9, 214.0], [31.0, 215.0], [31.1, 215.0], [31.2, 217.0], [31.3, 217.0], [31.4, 217.0], [31.5, 217.0], [31.6, 223.0], [31.7, 223.0], [31.8, 234.0], [31.9, 234.0], [32.0, 985.0], [32.1, 985.0], [32.2, 3776.0], [32.3, 3776.0], [32.4, 4518.0], [32.5, 4525.0], [32.6, 4525.0], [32.7, 4547.0], [32.8, 4547.0], [32.9, 5130.0], [33.0, 5130.0], [33.1, 5140.0], [33.2, 5140.0], [33.3, 5145.0], [33.4, 5145.0], [33.5, 5170.0], [33.6, 5170.0], [33.7, 5219.0], [33.8, 5219.0], [33.9, 5312.0], [34.0, 5312.0], [34.1, 5380.0], [34.2, 5380.0], [34.3, 5514.0], [34.4, 5514.0], [34.5, 5552.0], [34.6, 5552.0], [34.7, 5585.0], [34.8, 5585.0], [34.9, 5727.0], [35.0, 5727.0], [35.1, 5729.0], [35.2, 5729.0], [35.3, 5817.0], [35.4, 5968.0], [35.5, 5968.0], [35.6, 5998.0], [35.7, 5998.0], [35.8, 6237.0], [35.9, 6237.0], [36.0, 6305.0], [36.1, 6305.0], [36.2, 6365.0], [36.3, 6365.0], [36.4, 6404.0], [36.5, 6404.0], [36.6, 6572.0], [36.7, 6572.0], [36.8, 6661.0], [36.9, 6661.0], [37.0, 6869.0], [37.1, 6869.0], [37.2, 7150.0], [37.3, 7150.0], [37.4, 7754.0], [37.5, 7754.0], [37.6, 8035.0], [37.7, 8035.0], [37.8, 8117.0], [37.9, 8117.0], [38.0, 8156.0], [38.1, 8156.0], [38.2, 8761.0], [38.3, 8931.0], [38.4, 8931.0], [38.5, 8956.0], [38.6, 8956.0], [38.7, 9327.0], [38.8, 9327.0], [38.9, 9366.0], [39.0, 9366.0], [39.1, 9404.0], [39.2, 9404.0], [39.3, 9410.0], [39.4, 9410.0], [39.5, 9559.0], [39.6, 9559.0], [39.7, 9756.0], [39.8, 9756.0], [39.9, 9852.0], [40.0, 9852.0], [40.1, 10002.0], [40.2, 10002.0], [40.3, 10009.0], [40.4, 10009.0], [40.5, 10205.0], [40.6, 10205.0], [40.7, 10238.0], [40.8, 10238.0], [40.9, 10392.0], [41.0, 10392.0], [41.1, 10545.0], [41.2, 10572.0], [41.3, 10572.0], [41.4, 10629.0], [41.5, 10629.0], [41.6, 10866.0], [41.7, 10866.0], [41.8, 10928.0], [41.9, 10928.0], [42.0, 10938.0], [42.1, 10938.0], [42.2, 11086.0], [42.3, 11086.0], [42.4, 11240.0], [42.5, 11240.0], [42.6, 11243.0], [42.7, 11243.0], [42.8, 11262.0], [42.9, 11262.0], [43.0, 11286.0], [43.1, 11286.0], [43.2, 11302.0], [43.3, 11302.0], [43.4, 11538.0], [43.5, 11538.0], [43.6, 11601.0], [43.7, 11601.0], [43.8, 11680.0], [43.9, 11680.0], [44.0, 11759.0], [44.1, 11759.0], [44.2, 11861.0], [44.3, 12007.0], [44.4, 12007.0], [44.5, 12034.0], [44.6, 12034.0], [44.7, 12123.0], [44.8, 12123.0], [44.9, 12297.0], [45.0, 12297.0], [45.1, 12339.0], [45.2, 12339.0], [45.3, 12368.0], [45.4, 12368.0], [45.5, 12420.0], [45.6, 12420.0], [45.7, 12539.0], [45.8, 12539.0], [45.9, 12567.0], [46.0, 12567.0], [46.1, 12755.0], [46.2, 12755.0], [46.3, 12839.0], [46.4, 12839.0], [46.5, 12857.0], [46.6, 12857.0], [46.7, 12999.0], [46.8, 12999.0], [46.9, 13163.0], [47.0, 13163.0], [47.1, 13204.0], [47.2, 13360.0], [47.3, 13360.0], [47.4, 13389.0], [47.5, 13389.0], [47.6, 13438.0], [47.7, 13438.0], [47.8, 13468.0], [47.9, 13468.0], [48.0, 13559.0], [48.1, 13559.0], [48.2, 13888.0], [48.3, 13888.0], [48.4, 13957.0], [48.5, 13957.0], [48.6, 14055.0], [48.7, 14055.0], [48.8, 14095.0], [48.9, 14095.0], [49.0, 14140.0], [49.1, 14140.0], [49.2, 14415.0], [49.3, 14415.0], [49.4, 14453.0], [49.5, 14453.0], [49.6, 14628.0], [49.7, 14628.0], [49.8, 14649.0], [49.9, 14649.0], [50.0, 14700.0], [50.1, 14716.0], [50.2, 14716.0], [50.3, 14868.0], [50.4, 14868.0], [50.5, 14947.0], [50.6, 14947.0], [50.7, 15030.0], [50.8, 15030.0], [50.9, 15040.0], [51.0, 15040.0], [51.1, 15123.0], [51.2, 15123.0], [51.3, 15153.0], [51.4, 15153.0], [51.5, 15338.0], [51.6, 15338.0], [51.7, 15412.0], [51.8, 15412.0], [51.9, 15509.0], [52.0, 15509.0], [52.1, 15632.0], [52.2, 15632.0], [52.3, 15676.0], [52.4, 15676.0], [52.5, 15849.0], [52.6, 15849.0], [52.7, 15910.0], [52.8, 15910.0], [52.9, 15987.0], [53.0, 16004.0], [53.1, 16004.0], [53.2, 16049.0], [53.3, 16049.0], [53.4, 16107.0], [53.5, 16107.0], [53.6, 16108.0], [53.7, 16108.0], [53.8, 16138.0], [53.9, 16138.0], [54.0, 16318.0], [54.1, 16318.0], [54.2, 16328.0], [54.3, 16328.0], [54.4, 16673.0], [54.5, 16673.0], [54.6, 16741.0], [54.7, 16741.0], [54.8, 16829.0], [54.9, 16829.0], [55.0, 16857.0], [55.1, 16857.0], [55.2, 16890.0], [55.3, 16890.0], [55.4, 16916.0], [55.5, 16916.0], [55.6, 16955.0], [55.7, 16955.0], [55.8, 16986.0], [55.9, 17036.0], [56.0, 17036.0], [56.1, 17312.0], [56.2, 17312.0], [56.3, 17625.0], [56.4, 17625.0], [56.5, 18058.0], [56.6, 18058.0], [56.7, 18264.0], [56.8, 18264.0], [56.9, 18393.0], [57.0, 18393.0], [57.1, 18552.0], [57.2, 18552.0], [57.3, 18584.0], [57.4, 18584.0], [57.5, 18645.0], [57.6, 18645.0], [57.7, 18915.0], [57.8, 18915.0], [57.9, 18998.0], [58.0, 18998.0], [58.1, 19152.0], [58.2, 19152.0], [58.3, 19337.0], [58.4, 19337.0], [58.5, 19356.0], [58.6, 19356.0], [58.7, 19436.0], [58.8, 19436.0], [58.9, 19742.0], [59.0, 19819.0], [59.1, 19819.0], [59.2, 19828.0], [59.3, 19828.0], [59.4, 19882.0], [59.5, 19882.0], [59.6, 20230.0], [59.7, 20230.0], [59.8, 20428.0], [59.9, 20428.0], [60.0, 20631.0], [60.1, 20631.0], [60.2, 20764.0], [60.3, 20764.0], [60.4, 20887.0], [60.5, 20887.0], [60.6, 20991.0], [60.7, 20991.0], [60.8, 21312.0], [60.9, 21312.0], [61.0, 21328.0], [61.1, 21328.0], [61.2, 21436.0], [61.3, 21436.0], [61.4, 21752.0], [61.5, 21752.0], [61.6, 21829.0], [61.7, 21829.0], [61.8, 21835.0], [61.9, 21939.0], [62.0, 21939.0], [62.1, 22280.0], [62.2, 22280.0], [62.3, 22590.0], [62.4, 22590.0], [62.5, 22644.0], [62.6, 22644.0], [62.7, 22734.0], [62.8, 22734.0], [62.9, 22880.0], [63.0, 22880.0], [63.1, 23043.0], [63.2, 23043.0], [63.3, 23184.0], [63.4, 23184.0], [63.5, 23405.0], [63.6, 23405.0], [63.7, 23467.0], [63.8, 23467.0], [63.9, 23710.0], [64.0, 23710.0], [64.1, 23964.0], [64.2, 23964.0], [64.3, 24064.0], [64.4, 24064.0], [64.5, 24180.0], [64.6, 24180.0], [64.7, 24430.0], [64.8, 24470.0], [64.9, 24470.0], [65.0, 24545.0], [65.1, 24545.0], [65.2, 24581.0], [65.3, 24581.0], [65.4, 24582.0], [65.5, 24582.0], [65.6, 24595.0], [65.7, 24595.0], [65.8, 24704.0], [65.9, 24704.0], [66.0, 25234.0], [66.1, 25234.0], [66.2, 25365.0], [66.3, 25365.0], [66.4, 25435.0], [66.5, 25435.0], [66.6, 25543.0], [66.7, 25543.0], [66.8, 25781.0], [66.9, 25781.0], [67.0, 25820.0], [67.1, 25820.0], [67.2, 25844.0], [67.3, 25844.0], [67.4, 26113.0], [67.5, 26113.0], [67.6, 26120.0], [67.7, 26273.0], [67.8, 26273.0], [67.9, 26994.0], [68.0, 26994.0], [68.1, 27248.0], [68.2, 27248.0], [68.3, 27577.0], [68.4, 27577.0], [68.5, 27613.0], [68.6, 27613.0], [68.7, 27786.0], [68.8, 27786.0], [68.9, 27991.0], [69.0, 27991.0], [69.1, 28018.0], [69.2, 28018.0], [69.3, 28036.0], [69.4, 28036.0], [69.5, 28057.0], [69.6, 28057.0], [69.7, 28141.0], [69.8, 28141.0], [69.9, 28165.0], [70.0, 28165.0], [70.1, 28293.0], [70.2, 28293.0], [70.3, 28327.0], [70.4, 28327.0], [70.5, 28370.0], [70.6, 28492.0], [70.7, 28492.0], [70.8, 28534.0], [70.9, 28534.0], [71.0, 29257.0], [71.1, 29257.0], [71.2, 29556.0], [71.3, 29556.0], [71.4, 29596.0], [71.5, 29596.0], [71.6, 29695.0], [71.7, 29695.0], [71.8, 29754.0], [71.9, 29754.0], [72.0, 30361.0], [72.1, 30361.0], [72.2, 30378.0], [72.3, 30378.0], [72.4, 30763.0], [72.5, 30763.0], [72.6, 30814.0], [72.7, 30814.0], [72.8, 30958.0], [72.9, 30958.0], [73.0, 31025.0], [73.1, 31025.0], [73.2, 31074.0], [73.3, 31074.0], [73.4, 31285.0], [73.5, 31285.0], [73.6, 31422.0], [73.7, 31991.0], [73.8, 31991.0], [73.9, 32101.0], [74.0, 32101.0], [74.1, 32134.0], [74.2, 32134.0], [74.3, 32174.0], [74.4, 32174.0], [74.5, 32383.0], [74.6, 32383.0], [74.7, 32816.0], [74.8, 32816.0], [74.9, 33290.0], [75.0, 33290.0], [75.1, 33337.0], [75.2, 33337.0], [75.3, 33506.0], [75.4, 33506.0], [75.5, 33653.0], [75.6, 33653.0], [75.7, 33773.0], [75.8, 33773.0], [75.9, 33854.0], [76.0, 33854.0], [76.1, 34160.0], [76.2, 34160.0], [76.3, 34266.0], [76.4, 34266.0], [76.5, 34371.0], [76.6, 34405.0], [76.7, 34405.0], [76.8, 34495.0], [76.9, 34495.0], [77.0, 34652.0], [77.1, 34652.0], [77.2, 34715.0], [77.3, 34715.0], [77.4, 34807.0], [77.5, 34807.0], [77.6, 34832.0], [77.7, 34832.0], [77.8, 34940.0], [77.9, 34940.0], [78.0, 34967.0], [78.1, 34967.0], [78.2, 35237.0], [78.3, 35237.0], [78.4, 35650.0], [78.5, 35650.0], [78.6, 36186.0], [78.7, 36186.0], [78.8, 37436.0], [78.9, 37436.0], [79.0, 37531.0], [79.1, 37531.0], [79.2, 37596.0], [79.3, 37596.0], [79.4, 37611.0], [79.5, 37687.0], [79.6, 37687.0], [79.7, 37845.0], [79.8, 37845.0], [79.9, 37954.0], [80.0, 37954.0], [80.1, 37970.0], [80.2, 37970.0], [80.3, 38009.0], [80.4, 38009.0], [80.5, 38433.0], [80.6, 38433.0], [80.7, 38564.0], [80.8, 38564.0], [80.9, 38851.0], [81.0, 38851.0], [81.1, 38947.0], [81.2, 38947.0], [81.3, 38990.0], [81.4, 38990.0], [81.5, 39113.0], [81.6, 39113.0], [81.7, 39498.0], [81.8, 39498.0], [81.9, 39516.0], [82.0, 39516.0], [82.1, 39526.0], [82.2, 39526.0], [82.3, 39532.0], [82.4, 39671.0], [82.5, 39671.0], [82.6, 39902.0], [82.7, 39902.0], [82.8, 40592.0], [82.9, 40592.0], [83.0, 40787.0], [83.1, 40787.0], [83.2, 41067.0], [83.3, 41067.0], [83.4, 41289.0], [83.5, 41289.0], [83.6, 41395.0], [83.7, 41395.0], [83.8, 41407.0], [83.9, 41407.0], [84.0, 41588.0], [84.1, 41588.0], [84.2, 42137.0], [84.3, 42137.0], [84.4, 42160.0], [84.5, 42160.0], [84.6, 42259.0], [84.7, 42259.0], [84.8, 42274.0], [84.9, 42274.0], [85.0, 42958.0], [85.1, 42958.0], [85.2, 42963.0], [85.3, 44459.0], [85.4, 44459.0], [85.5, 44464.0], [85.6, 44464.0], [85.7, 44568.0], [85.8, 44568.0], [85.9, 44647.0], [86.0, 44647.0], [86.1, 44989.0], [86.2, 44989.0], [86.3, 45000.0], [86.4, 45000.0], [86.5, 45570.0], [86.6, 45570.0], [86.7, 45599.0], [86.8, 45599.0], [86.9, 45599.0], [87.0, 45599.0], [87.1, 45818.0], [87.2, 45818.0], [87.3, 45855.0], [87.4, 45855.0], [87.5, 46120.0], [87.6, 46120.0], [87.7, 46222.0], [87.8, 46222.0], [87.9, 46764.0], [88.0, 46764.0], [88.1, 46956.0], [88.2, 46956.0], [88.3, 47677.0], [88.4, 47840.0], [88.5, 47840.0], [88.6, 48594.0], [88.7, 48594.0], [88.8, 49100.0], [88.9, 49100.0], [89.0, 49533.0], [89.1, 49533.0], [89.2, 49573.0], [89.3, 49573.0], [89.4, 49665.0], [89.5, 49665.0], [89.6, 50045.0], [89.7, 50045.0], [89.8, 50981.0], [89.9, 50981.0], [90.0, 51210.0], [90.1, 51210.0], [90.2, 51643.0], [90.3, 51643.0], [90.4, 52193.0], [90.5, 52193.0], [90.6, 52282.0], [90.7, 52282.0], [90.8, 53228.0], [90.9, 53228.0], [91.0, 53456.0], [91.1, 53456.0], [91.2, 53817.0], [91.3, 55098.0], [91.4, 55098.0], [91.5, 55249.0], [91.6, 55249.0], [91.7, 55617.0], [91.8, 55617.0], [91.9, 56321.0], [92.0, 56321.0], [92.1, 56584.0], [92.2, 56584.0], [92.3, 57159.0], [92.4, 57159.0], [92.5, 57660.0], [92.6, 57660.0], [92.7, 57943.0], [92.8, 57943.0], [92.9, 59560.0], [93.0, 59560.0], [93.1, 59627.0], [93.2, 59627.0], [93.3, 60105.0], [93.4, 60105.0], [93.5, 60106.0], [93.6, 60106.0], [93.7, 60107.0], [93.8, 60107.0], [93.9, 60108.0], [94.0, 60108.0], [94.1, 60108.0], [94.2, 60108.0], [94.3, 60108.0], [94.4, 60108.0], [94.5, 60108.0], [94.6, 60108.0], [94.7, 60108.0], [94.8, 60108.0], [94.9, 60108.0], [95.0, 60108.0], [95.1, 60108.0], [95.2, 60109.0], [95.3, 60109.0], [95.4, 60109.0], [95.5, 60109.0], [95.6, 60111.0], [95.7, 60111.0], [95.8, 60112.0], [95.9, 60112.0], [96.0, 60125.0], [96.1, 60125.0], [96.2, 60125.0], [96.3, 60125.0], [96.4, 60148.0], [96.5, 60148.0], [96.6, 60152.0], [96.7, 60152.0], [96.8, 60159.0], [96.9, 60159.0], [97.0, 60160.0], [97.1, 60162.0], [97.2, 60162.0], [97.3, 60166.0], [97.4, 60166.0], [97.5, 60167.0], [97.6, 60167.0], [97.7, 60174.0], [97.8, 60174.0], [97.9, 60178.0], [98.0, 60178.0], [98.1, 60186.0], [98.2, 60186.0], [98.3, 60197.0], [98.4, 60197.0], [98.5, 60198.0], [98.6, 60198.0], [98.7, 60202.0], [98.8, 60202.0], [98.9, 60204.0], [99.0, 60204.0], [99.1, 60211.0], [99.2, 60211.0], [99.3, 60234.0], [99.4, 60234.0], [99.5, 60281.0], [99.6, 60281.0], [99.7, 60310.0], [99.8, 60310.0], [99.9, 60381.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 209.0], [0.1, 209.0], [0.2, 210.0], [0.3, 210.0], [0.4, 211.0], [0.5, 211.0], [0.6, 211.0], [0.7, 211.0], [0.8, 211.0], [0.9, 211.0], [1.0, 211.0], [1.1, 211.0], [1.2, 211.0], [1.3, 211.0], [1.4, 211.0], [1.5, 211.0], [1.6, 211.0], [1.7, 211.0], [1.8, 212.0], [1.9, 212.0], [2.0, 212.0], [2.1, 212.0], [2.2, 212.0], [2.3, 212.0], [2.4, 212.0], [2.5, 212.0], [2.6, 212.0], [2.7, 212.0], [2.8, 212.0], [2.9, 212.0], [3.0, 213.0], [3.1, 213.0], [3.2, 213.0], [3.3, 213.0], [3.4, 213.0], [3.5, 213.0], [3.6, 213.0], [3.7, 214.0], [3.8, 214.0], [3.9, 214.0], [4.0, 214.0], [4.1, 214.0], [4.2, 214.0], [4.3, 214.0], [4.4, 214.0], [4.5, 214.0], [4.6, 214.0], [4.7, 214.0], [4.8, 214.0], [4.9, 214.0], [5.0, 214.0], [5.1, 215.0], [5.2, 215.0], [5.3, 215.0], [5.4, 215.0], [5.5, 215.0], [5.6, 215.0], [5.7, 215.0], [5.8, 215.0], [5.9, 215.0], [6.0, 215.0], [6.1, 215.0], [6.2, 215.0], [6.3, 215.0], [6.4, 216.0], [6.5, 216.0], [6.6, 216.0], [6.7, 216.0], [6.8, 217.0], [6.9, 217.0], [7.0, 217.0], [7.1, 217.0], [7.2, 218.0], [7.3, 218.0], [7.4, 218.0], [7.5, 218.0], [7.6, 218.0], [7.7, 218.0], [7.8, 218.0], [7.9, 218.0], [8.0, 218.0], [8.1, 218.0], [8.2, 219.0], [8.3, 219.0], [8.4, 219.0], [8.5, 219.0], [8.6, 221.0], [8.7, 221.0], [8.8, 221.0], [8.9, 222.0], [9.0, 222.0], [9.1, 226.0], [9.2, 226.0], [9.3, 226.0], [9.4, 226.0], [9.5, 230.0], [9.6, 230.0], [9.7, 230.0], [9.8, 230.0], [9.9, 231.0], [10.0, 231.0], [10.1, 232.0], [10.2, 232.0], [10.3, 233.0], [10.4, 233.0], [10.5, 233.0], [10.6, 233.0], [10.7, 233.0], [10.8, 233.0], [10.9, 234.0], [11.0, 234.0], [11.1, 235.0], [11.2, 235.0], [11.3, 235.0], [11.4, 235.0], [11.5, 236.0], [11.6, 236.0], [11.7, 238.0], [11.8, 244.0], [11.9, 244.0], [12.0, 245.0], [12.1, 245.0], [12.2, 246.0], [12.3, 246.0], [12.4, 246.0], [12.5, 246.0], [12.6, 246.0], [12.7, 246.0], [12.8, 248.0], [12.9, 248.0], [13.0, 249.0], [13.1, 249.0], [13.2, 250.0], [13.3, 250.0], [13.4, 253.0], [13.5, 253.0], [13.6, 255.0], [13.7, 255.0], [13.8, 255.0], [13.9, 255.0], [14.0, 255.0], [14.1, 255.0], [14.2, 256.0], [14.3, 256.0], [14.4, 259.0], [14.5, 259.0], [14.6, 259.0], [14.7, 259.0], [14.8, 262.0], [14.9, 265.0], [15.0, 265.0], [15.1, 265.0], [15.2, 265.0], [15.3, 267.0], [15.4, 267.0], [15.5, 267.0], [15.6, 267.0], [15.7, 270.0], [15.8, 270.0], [15.9, 272.0], [16.0, 272.0], [16.1, 272.0], [16.2, 272.0], [16.3, 276.0], [16.4, 276.0], [16.5, 281.0], [16.6, 281.0], [16.7, 282.0], [16.8, 282.0], [16.9, 284.0], [17.0, 284.0], [17.1, 284.0], [17.2, 284.0], [17.3, 285.0], [17.4, 285.0], [17.5, 285.0], [17.6, 285.0], [17.7, 287.0], [17.8, 289.0], [17.9, 289.0], [18.0, 290.0], [18.1, 290.0], [18.2, 290.0], [18.3, 290.0], [18.4, 291.0], [18.5, 291.0], [18.6, 293.0], [18.7, 293.0], [18.8, 294.0], [18.9, 294.0], [19.0, 295.0], [19.1, 295.0], [19.2, 295.0], [19.3, 295.0], [19.4, 297.0], [19.5, 297.0], [19.6, 297.0], [19.7, 297.0], [19.8, 297.0], [19.9, 297.0], [20.0, 298.0], [20.1, 298.0], [20.2, 299.0], [20.3, 299.0], [20.4, 299.0], [20.5, 299.0], [20.6, 301.0], [20.7, 301.0], [20.8, 301.0], [20.9, 303.0], [21.0, 303.0], [21.1, 303.0], [21.2, 303.0], [21.3, 303.0], [21.4, 303.0], [21.5, 303.0], [21.6, 303.0], [21.7, 304.0], [21.8, 304.0], [21.9, 304.0], [22.0, 304.0], [22.1, 304.0], [22.2, 304.0], [22.3, 304.0], [22.4, 304.0], [22.5, 304.0], [22.6, 304.0], [22.7, 304.0], [22.8, 304.0], [22.9, 304.0], [23.0, 304.0], [23.1, 305.0], [23.2, 305.0], [23.3, 305.0], [23.4, 305.0], [23.5, 305.0], [23.6, 305.0], [23.7, 305.0], [23.8, 305.0], [23.9, 305.0], [24.0, 305.0], [24.1, 305.0], [24.2, 305.0], [24.3, 305.0], [24.4, 305.0], [24.5, 305.0], [24.6, 305.0], [24.7, 305.0], [24.8, 305.0], [24.9, 305.0], [25.0, 305.0], [25.1, 305.0], [25.2, 305.0], [25.3, 305.0], [25.4, 305.0], [25.5, 305.0], [25.6, 305.0], [25.7, 305.0], [25.8, 305.0], [25.9, 305.0], [26.0, 305.0], [26.1, 305.0], [26.2, 305.0], [26.3, 305.0], [26.4, 305.0], [26.5, 305.0], [26.6, 305.0], [26.7, 305.0], [26.8, 305.0], [26.9, 305.0], [27.0, 305.0], [27.1, 305.0], [27.2, 305.0], [27.3, 305.0], [27.4, 305.0], [27.5, 305.0], [27.6, 305.0], [27.7, 305.0], [27.8, 305.0], [27.9, 305.0], [28.0, 305.0], [28.1, 305.0], [28.2, 305.0], [28.3, 305.0], [28.4, 305.0], [28.5, 306.0], [28.6, 306.0], [28.7, 306.0], [28.8, 306.0], [28.9, 306.0], [29.0, 306.0], [29.1, 306.0], [29.2, 306.0], [29.3, 306.0], [29.4, 306.0], [29.5, 306.0], [29.6, 306.0], [29.7, 306.0], [29.8, 306.0], [29.9, 306.0], [30.0, 306.0], [30.1, 306.0], [30.2, 306.0], [30.3, 306.0], [30.4, 306.0], [30.5, 306.0], [30.6, 306.0], [30.7, 306.0], [30.8, 306.0], [30.9, 306.0], [31.0, 306.0], [31.1, 306.0], [31.2, 306.0], [31.3, 306.0], [31.4, 306.0], [31.5, 306.0], [31.6, 306.0], [31.7, 306.0], [31.8, 306.0], [31.9, 306.0], [32.0, 306.0], [32.1, 306.0], [32.2, 306.0], [32.3, 306.0], [32.4, 306.0], [32.5, 306.0], [32.6, 306.0], [32.7, 306.0], [32.8, 306.0], [32.9, 306.0], [33.0, 306.0], [33.1, 307.0], [33.2, 307.0], [33.3, 307.0], [33.4, 307.0], [33.5, 307.0], [33.6, 307.0], [33.7, 307.0], [33.8, 307.0], [33.9, 307.0], [34.0, 307.0], [34.1, 307.0], [34.2, 307.0], [34.3, 307.0], [34.4, 307.0], [34.5, 307.0], [34.6, 307.0], [34.7, 307.0], [34.8, 307.0], [34.9, 307.0], [35.0, 307.0], [35.1, 307.0], [35.2, 307.0], [35.3, 309.0], [35.4, 309.0], [35.5, 309.0], [35.6, 309.0], [35.7, 309.0], [35.8, 309.0], [35.9, 309.0], [36.0, 309.0], [36.1, 309.0], [36.2, 310.0], [36.3, 310.0], [36.4, 310.0], [36.5, 310.0], [36.6, 310.0], [36.7, 310.0], [36.8, 310.0], [36.9, 310.0], [37.0, 312.0], [37.1, 312.0], [37.2, 312.0], [37.3, 312.0], [37.4, 312.0], [37.5, 312.0], [37.6, 312.0], [37.7, 312.0], [37.8, 313.0], [37.9, 313.0], [38.0, 313.0], [38.1, 313.0], [38.2, 313.0], [38.3, 313.0], [38.4, 313.0], [38.5, 313.0], [38.6, 313.0], [38.7, 314.0], [38.8, 314.0], [38.9, 314.0], [39.0, 314.0], [39.1, 314.0], [39.2, 314.0], [39.3, 315.0], [39.4, 315.0], [39.5, 315.0], [39.6, 315.0], [39.7, 315.0], [39.8, 315.0], [39.9, 315.0], [40.0, 315.0], [40.1, 316.0], [40.2, 316.0], [40.3, 316.0], [40.4, 316.0], [40.5, 316.0], [40.6, 316.0], [40.7, 316.0], [40.8, 316.0], [40.9, 317.0], [41.0, 317.0], [41.1, 317.0], [41.2, 318.0], [41.3, 318.0], [41.4, 318.0], [41.5, 318.0], [41.6, 318.0], [41.7, 318.0], [41.8, 319.0], [41.9, 319.0], [42.0, 319.0], [42.1, 319.0], [42.2, 320.0], [42.3, 320.0], [42.4, 322.0], [42.5, 322.0], [42.6, 322.0], [42.7, 322.0], [42.8, 322.0], [42.9, 322.0], [43.0, 322.0], [43.1, 322.0], [43.2, 323.0], [43.3, 323.0], [43.4, 323.0], [43.5, 323.0], [43.6, 324.0], [43.7, 324.0], [43.8, 324.0], [43.9, 324.0], [44.0, 324.0], [44.1, 324.0], [44.2, 328.0], [44.3, 328.0], [44.4, 328.0], [44.5, 330.0], [44.6, 330.0], [44.7, 330.0], [44.8, 330.0], [44.9, 332.0], [45.0, 332.0], [45.1, 332.0], [45.2, 332.0], [45.3, 333.0], [45.4, 333.0], [45.5, 337.0], [45.6, 337.0], [45.7, 337.0], [45.8, 337.0], [45.9, 338.0], [46.0, 338.0], [46.1, 340.0], [46.2, 340.0], [46.3, 341.0], [46.4, 341.0], [46.5, 341.0], [46.6, 341.0], [46.7, 341.0], [46.8, 341.0], [46.9, 341.0], [47.0, 341.0], [47.1, 342.0], [47.2, 343.0], [47.3, 343.0], [47.4, 343.0], [47.5, 343.0], [47.6, 343.0], [47.7, 343.0], [47.8, 344.0], [47.9, 344.0], [48.0, 344.0], [48.1, 344.0], [48.2, 344.0], [48.3, 344.0], [48.4, 345.0], [48.5, 345.0], [48.6, 345.0], [48.7, 345.0], [48.8, 346.0], [48.9, 346.0], [49.0, 346.0], [49.1, 346.0], [49.2, 348.0], [49.3, 348.0], [49.4, 350.0], [49.5, 350.0], [49.6, 351.0], [49.7, 351.0], [49.8, 352.0], [49.9, 352.0], [50.0, 352.0], [50.1, 352.0], [50.2, 352.0], [50.3, 353.0], [50.4, 353.0], [50.5, 357.0], [50.6, 357.0], [50.7, 358.0], [50.8, 358.0], [50.9, 359.0], [51.0, 359.0], [51.1, 359.0], [51.2, 359.0], [51.3, 360.0], [51.4, 360.0], [51.5, 360.0], [51.6, 360.0], [51.7, 360.0], [51.8, 360.0], [51.9, 362.0], [52.0, 362.0], [52.1, 362.0], [52.2, 362.0], [52.3, 363.0], [52.4, 363.0], [52.5, 364.0], [52.6, 364.0], [52.7, 366.0], [52.8, 366.0], [52.9, 367.0], [53.0, 367.0], [53.1, 367.0], [53.2, 367.0], [53.3, 367.0], [53.4, 368.0], [53.5, 368.0], [53.6, 369.0], [53.7, 369.0], [53.8, 370.0], [53.9, 370.0], [54.0, 370.0], [54.1, 370.0], [54.2, 371.0], [54.3, 371.0], [54.4, 374.0], [54.5, 374.0], [54.6, 377.0], [54.7, 377.0], [54.8, 377.0], [54.9, 377.0], [55.0, 377.0], [55.1, 377.0], [55.2, 380.0], [55.3, 380.0], [55.4, 380.0], [55.5, 380.0], [55.6, 384.0], [55.7, 384.0], [55.8, 385.0], [55.9, 385.0], [56.0, 385.0], [56.1, 385.0], [56.2, 385.0], [56.3, 386.0], [56.4, 386.0], [56.5, 386.0], [56.6, 386.0], [56.7, 386.0], [56.8, 386.0], [56.9, 388.0], [57.0, 388.0], [57.1, 390.0], [57.2, 390.0], [57.3, 392.0], [57.4, 392.0], [57.5, 392.0], [57.6, 392.0], [57.7, 392.0], [57.8, 392.0], [57.9, 393.0], [58.0, 393.0], [58.1, 393.0], [58.2, 393.0], [58.3, 393.0], [58.4, 393.0], [58.5, 394.0], [58.6, 394.0], [58.7, 394.0], [58.8, 394.0], [58.9, 396.0], [59.0, 396.0], [59.1, 396.0], [59.2, 399.0], [59.3, 399.0], [59.4, 400.0], [59.5, 400.0], [59.6, 400.0], [59.7, 400.0], [59.8, 401.0], [59.9, 401.0], [60.0, 402.0], [60.1, 402.0], [60.2, 403.0], [60.3, 403.0], [60.4, 404.0], [60.5, 404.0], [60.6, 405.0], [60.7, 405.0], [60.8, 405.0], [60.9, 405.0], [61.0, 405.0], [61.1, 405.0], [61.2, 405.0], [61.3, 405.0], [61.4, 405.0], [61.5, 405.0], [61.6, 405.0], [61.7, 405.0], [61.8, 405.0], [61.9, 405.0], [62.0, 405.0], [62.1, 406.0], [62.2, 406.0], [62.3, 406.0], [62.4, 406.0], [62.5, 406.0], [62.6, 406.0], [62.7, 406.0], [62.8, 406.0], [62.9, 406.0], [63.0, 406.0], [63.1, 406.0], [63.2, 406.0], [63.3, 406.0], [63.4, 406.0], [63.5, 406.0], [63.6, 406.0], [63.7, 406.0], [63.8, 406.0], [63.9, 406.0], [64.0, 406.0], [64.1, 406.0], [64.2, 406.0], [64.3, 406.0], [64.4, 406.0], [64.5, 406.0], [64.6, 406.0], [64.7, 406.0], [64.8, 406.0], [64.9, 406.0], [65.0, 406.0], [65.1, 406.0], [65.2, 406.0], [65.3, 406.0], [65.4, 406.0], [65.5, 406.0], [65.6, 406.0], [65.7, 406.0], [65.8, 407.0], [65.9, 407.0], [66.0, 407.0], [66.1, 407.0], [66.2, 407.0], [66.3, 407.0], [66.4, 407.0], [66.5, 407.0], [66.6, 407.0], [66.7, 407.0], [66.8, 407.0], [66.9, 407.0], [67.0, 407.0], [67.1, 407.0], [67.2, 407.0], [67.3, 407.0], [67.4, 407.0], [67.5, 407.0], [67.6, 407.0], [67.7, 407.0], [67.8, 407.0], [67.9, 407.0], [68.0, 407.0], [68.1, 407.0], [68.2, 407.0], [68.3, 407.0], [68.4, 407.0], [68.5, 407.0], [68.6, 407.0], [68.7, 407.0], [68.8, 407.0], [68.9, 407.0], [69.0, 407.0], [69.1, 407.0], [69.2, 407.0], [69.3, 407.0], [69.4, 407.0], [69.5, 407.0], [69.6, 407.0], [69.7, 407.0], [69.8, 407.0], [69.9, 407.0], [70.0, 407.0], [70.1, 407.0], [70.2, 407.0], [70.3, 407.0], [70.4, 407.0], [70.5, 407.0], [70.6, 407.0], [70.7, 407.0], [70.8, 407.0], [70.9, 407.0], [71.0, 407.0], [71.1, 407.0], [71.2, 407.0], [71.3, 407.0], [71.4, 407.0], [71.5, 407.0], [71.6, 407.0], [71.7, 407.0], [71.8, 407.0], [71.9, 407.0], [72.0, 407.0], [72.1, 407.0], [72.2, 407.0], [72.3, 407.0], [72.4, 407.0], [72.5, 407.0], [72.6, 407.0], [72.7, 407.0], [72.8, 407.0], [72.9, 407.0], [73.0, 407.0], [73.1, 407.0], [73.2, 407.0], [73.3, 407.0], [73.4, 407.0], [73.5, 407.0], [73.6, 407.0], [73.7, 407.0], [73.8, 407.0], [73.9, 407.0], [74.0, 407.0], [74.1, 407.0], [74.2, 407.0], [74.3, 407.0], [74.4, 407.0], [74.5, 407.0], [74.6, 407.0], [74.7, 407.0], [74.8, 407.0], [74.9, 408.0], [75.0, 408.0], [75.1, 408.0], [75.2, 408.0], [75.3, 408.0], [75.4, 408.0], [75.5, 408.0], [75.6, 408.0], [75.7, 408.0], [75.8, 408.0], [75.9, 408.0], [76.0, 408.0], [76.1, 408.0], [76.2, 408.0], [76.3, 408.0], [76.4, 408.0], [76.5, 408.0], [76.6, 408.0], [76.7, 408.0], [76.8, 408.0], [76.9, 408.0], [77.0, 408.0], [77.1, 408.0], [77.2, 408.0], [77.3, 408.0], [77.4, 408.0], [77.5, 408.0], [77.6, 408.0], [77.7, 408.0], [77.8, 408.0], [77.9, 408.0], [78.0, 408.0], [78.1, 408.0], [78.2, 408.0], [78.3, 408.0], [78.4, 408.0], [78.5, 408.0], [78.6, 408.0], [78.7, 408.0], [78.8, 408.0], [78.9, 408.0], [79.0, 408.0], [79.1, 408.0], [79.2, 408.0], [79.3, 408.0], [79.4, 408.0], [79.5, 408.0], [79.6, 408.0], [79.7, 408.0], [79.8, 408.0], [79.9, 408.0], [80.0, 408.0], [80.1, 408.0], [80.2, 408.0], [80.3, 408.0], [80.4, 408.0], [80.5, 408.0], [80.6, 408.0], [80.7, 408.0], [80.8, 408.0], [80.9, 408.0], [81.0, 408.0], [81.1, 408.0], [81.2, 408.0], [81.3, 408.0], [81.4, 408.0], [81.5, 408.0], [81.6, 408.0], [81.7, 408.0], [81.8, 408.0], [81.9, 408.0], [82.0, 408.0], [82.1, 408.0], [82.2, 408.0], [82.3, 408.0], [82.4, 408.0], [82.5, 408.0], [82.6, 408.0], [82.7, 408.0], [82.8, 408.0], [82.9, 408.0], [83.0, 408.0], [83.1, 408.0], [83.2, 408.0], [83.3, 408.0], [83.4, 408.0], [83.5, 408.0], [83.6, 408.0], [83.7, 408.0], [83.8, 408.0], [83.9, 408.0], [84.0, 408.0], [84.1, 408.0], [84.2, 408.0], [84.3, 408.0], [84.4, 408.0], [84.5, 408.0], [84.6, 408.0], [84.7, 408.0], [84.8, 408.0], [84.9, 408.0], [85.0, 408.0], [85.1, 408.0], [85.2, 408.0], [85.3, 408.0], [85.4, 408.0], [85.5, 408.0], [85.6, 408.0], [85.7, 408.0], [85.8, 408.0], [85.9, 408.0], [86.0, 408.0], [86.1, 408.0], [86.2, 408.0], [86.3, 408.0], [86.4, 408.0], [86.5, 408.0], [86.6, 408.0], [86.7, 408.0], [86.8, 408.0], [86.9, 408.0], [87.0, 408.0], [87.1, 408.0], [87.2, 408.0], [87.3, 408.0], [87.4, 408.0], [87.5, 408.0], [87.6, 408.0], [87.7, 408.0], [87.8, 408.0], [87.9, 408.0], [88.0, 408.0], [88.1, 408.0], [88.2, 408.0], [88.3, 408.0], [88.4, 409.0], [88.5, 409.0], [88.6, 409.0], [88.7, 409.0], [88.8, 409.0], [88.9, 409.0], [89.0, 409.0], [89.1, 409.0], [89.2, 409.0], [89.3, 409.0], [89.4, 409.0], [89.5, 409.0], [89.6, 409.0], [89.7, 409.0], [89.8, 409.0], [89.9, 409.0], [90.0, 409.0], [90.1, 409.0], [90.2, 409.0], [90.3, 409.0], [90.4, 409.0], [90.5, 409.0], [90.6, 409.0], [90.7, 409.0], [90.8, 409.0], [90.9, 409.0], [91.0, 409.0], [91.1, 409.0], [91.2, 409.0], [91.3, 409.0], [91.4, 409.0], [91.5, 409.0], [91.6, 409.0], [91.7, 409.0], [91.8, 409.0], [91.9, 409.0], [92.0, 409.0], [92.1, 409.0], [92.2, 409.0], [92.3, 409.0], [92.4, 409.0], [92.5, 409.0], [92.6, 409.0], [92.7, 409.0], [92.8, 409.0], [92.9, 409.0], [93.0, 409.0], [93.1, 409.0], [93.2, 409.0], [93.3, 409.0], [93.4, 409.0], [93.5, 409.0], [93.6, 409.0], [93.7, 409.0], [93.8, 409.0], [93.9, 409.0], [94.0, 409.0], [94.1, 409.0], [94.2, 409.0], [94.3, 409.0], [94.4, 409.0], [94.5, 409.0], [94.6, 409.0], [94.7, 409.0], [94.8, 409.0], [94.9, 409.0], [95.0, 409.0], [95.1, 409.0], [95.2, 409.0], [95.3, 409.0], [95.4, 409.0], [95.5, 409.0], [95.6, 409.0], [95.7, 409.0], [95.8, 409.0], [95.9, 409.0], [96.0, 410.0], [96.1, 410.0], [96.2, 410.0], [96.3, 410.0], [96.4, 410.0], [96.5, 410.0], [96.6, 411.0], [96.7, 411.0], [96.8, 411.0], [96.9, 411.0], [97.0, 413.0], [97.1, 414.0], [97.2, 414.0], [97.3, 509.0], [97.4, 509.0], [97.5, 509.0], [97.6, 509.0], [97.7, 509.0], [97.8, 509.0], [97.9, 510.0], [98.0, 510.0], [98.1, 510.0], [98.2, 510.0], [98.3, 511.0], [98.4, 511.0], [98.5, 511.0], [98.6, 511.0], [98.7, 511.0], [98.8, 511.0], [98.9, 511.0], [99.0, 511.0], [99.1, 512.0], [99.2, 512.0], [99.3, 594.0], [99.4, 594.0], [99.5, 613.0], [99.6, 613.0], [99.7, 614.0], [99.8, 614.0], [99.9, 1434.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 201.0, "series": [{"data": [[34100.0, 1.0], [34500.0, 2.0], [33700.0, 1.0], [34900.0, 2.0], [36500.0, 1.0], [38900.0, 1.0], [42500.0, 1.0], [41700.0, 2.0], [41300.0, 1.0], [43300.0, 1.0], [45300.0, 2.0], [46500.0, 1.0], [47300.0, 1.0], [54100.0, 1.0], [60500.0, 15.0], [300.0, 28.0], [400.0, 56.0], [500.0, 69.0], [600.0, 10.0], [700.0, 1.0], [1300.0, 1.0], [1500.0, 1.0], [4200.0, 1.0], [4800.0, 1.0], [4900.0, 2.0], [5300.0, 2.0], [5500.0, 1.0], [5600.0, 1.0], [5400.0, 2.0], [5700.0, 1.0], [5800.0, 1.0], [6100.0, 1.0], [5900.0, 3.0], [6300.0, 2.0], [6200.0, 1.0], [6500.0, 1.0], [6600.0, 1.0], [6800.0, 2.0], [6900.0, 1.0], [6700.0, 1.0], [7200.0, 1.0], [7700.0, 1.0], [8000.0, 1.0], [8400.0, 1.0], [8600.0, 1.0], [8300.0, 1.0], [9100.0, 1.0], [9200.0, 1.0], [9700.0, 2.0], [9300.0, 1.0], [9600.0, 1.0], [9800.0, 1.0], [10000.0, 2.0], [10100.0, 1.0], [10300.0, 2.0], [10600.0, 1.0], [10500.0, 1.0], [11200.0, 1.0], [11100.0, 1.0], [10900.0, 1.0], [10800.0, 2.0], [11000.0, 1.0], [11600.0, 2.0], [11300.0, 1.0], [11400.0, 3.0], [11500.0, 1.0], [11800.0, 1.0], [12100.0, 1.0], [12000.0, 1.0], [11900.0, 2.0], [12600.0, 1.0], [12300.0, 1.0], [12500.0, 3.0], [12400.0, 1.0], [12700.0, 1.0], [13200.0, 2.0], [12900.0, 2.0], [13300.0, 1.0], [13100.0, 1.0], [13700.0, 3.0], [13500.0, 2.0], [13600.0, 1.0], [13900.0, 1.0], [14100.0, 1.0], [14300.0, 1.0], [14600.0, 1.0], [14400.0, 3.0], [15100.0, 3.0], [14900.0, 3.0], [15200.0, 1.0], [15300.0, 1.0], [15700.0, 2.0], [15500.0, 2.0], [15400.0, 1.0], [16300.0, 3.0], [15900.0, 3.0], [16100.0, 1.0], [16200.0, 1.0], [17200.0, 3.0], [17000.0, 1.0], [16400.0, 2.0], [17400.0, 1.0], [18000.0, 1.0], [17600.0, 1.0], [19200.0, 2.0], [18800.0, 2.0], [19400.0, 1.0], [19000.0, 1.0], [18600.0, 1.0], [20200.0, 2.0], [20000.0, 2.0], [19600.0, 2.0], [20600.0, 1.0], [21200.0, 1.0], [22200.0, 1.0], [21800.0, 1.0], [23400.0, 1.0], [23000.0, 2.0], [23200.0, 2.0], [23800.0, 2.0], [24000.0, 1.0], [24400.0, 1.0], [25000.0, 1.0], [24800.0, 2.0], [25800.0, 1.0], [26200.0, 1.0], [26600.0, 1.0], [27400.0, 1.0], [28400.0, 3.0], [28000.0, 2.0], [28200.0, 2.0], [28600.0, 2.0], [29600.0, 1.0], [29800.0, 2.0], [30600.0, 2.0], [30000.0, 1.0], [31200.0, 2.0], [31000.0, 1.0], [31600.0, 1.0], [32400.0, 3.0], [31800.0, 1.0], [34000.0, 1.0], [33600.0, 1.0], [35600.0, 1.0], [35200.0, 1.0], [36000.0, 1.0], [38400.0, 1.0], [38000.0, 1.0], [38800.0, 1.0], [40000.0, 1.0], [39200.0, 1.0], [40800.0, 1.0], [41600.0, 1.0], [42400.0, 1.0], [44800.0, 2.0], [43200.0, 1.0], [46000.0, 1.0], [50400.0, 1.0], [51200.0, 1.0], [52400.0, 1.0], [53600.0, 1.0], [56800.0, 1.0], [56000.0, 1.0], [58000.0, 1.0], [60400.0, 9.0], [33900.0, 1.0], [35100.0, 3.0], [38300.0, 2.0], [37900.0, 3.0], [39100.0, 1.0], [40300.0, 1.0], [39900.0, 1.0], [42300.0, 1.0], [41900.0, 1.0], [44700.0, 1.0], [47100.0, 1.0], [45900.0, 2.0], [47900.0, 1.0], [49900.0, 1.0], [51500.0, 1.0], [51900.0, 1.0], [56700.0, 1.0], [57500.0, 1.0], [59900.0, 2.0], [60700.0, 1.0], [60300.0, 4.0], [17100.0, 3.0], [17300.0, 1.0], [16700.0, 2.0], [16500.0, 1.0], [18300.0, 1.0], [18900.0, 1.0], [19700.0, 1.0], [21100.0, 1.0], [20700.0, 1.0], [20900.0, 2.0], [21700.0, 2.0], [22100.0, 1.0], [22500.0, 1.0], [22300.0, 2.0], [22900.0, 1.0], [24300.0, 1.0], [24500.0, 1.0], [24900.0, 2.0], [24700.0, 2.0], [25500.0, 1.0], [26500.0, 2.0], [25700.0, 2.0], [26100.0, 2.0], [27500.0, 1.0], [27900.0, 1.0], [28500.0, 1.0], [28700.0, 2.0], [28900.0, 1.0], [30100.0, 1.0], [31300.0, 2.0], [32700.0, 1.0], [32300.0, 1.0], [34600.0, 2.0], [34200.0, 1.0], [33000.0, 1.0], [35000.0, 1.0], [38200.0, 1.0], [37800.0, 1.0], [39800.0, 3.0], [39400.0, 1.0], [39000.0, 1.0], [42600.0, 1.0], [41000.0, 1.0], [45000.0, 1.0], [46600.0, 1.0], [46200.0, 2.0], [48200.0, 1.0], [49000.0, 1.0], [49400.0, 1.0], [49800.0, 2.0], [52600.0, 1.0], [53400.0, 1.0], [55400.0, 1.0], [55800.0, 1.0], [58200.0, 1.0], [60600.0, 6.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 143.0], [33700.0, 1.0], [33300.0, 1.0], [34100.0, 1.0], [36100.0, 1.0], [34900.0, 2.0], [38900.0, 2.0], [38500.0, 1.0], [40500.0, 1.0], [42100.0, 2.0], [42900.0, 2.0], [41300.0, 1.0], [44900.0, 1.0], [44500.0, 1.0], [46100.0, 1.0], [46900.0, 1.0], [48500.0, 1.0], [50900.0, 1.0], [200.0, 22.0], [52100.0, 1.0], [56500.0, 1.0], [60100.0, 28.0], [900.0, 1.0], [3700.0, 1.0], [4500.0, 3.0], [5100.0, 4.0], [5300.0, 2.0], [5200.0, 1.0], [5500.0, 3.0], [5700.0, 2.0], [5800.0, 1.0], [5900.0, 2.0], [6300.0, 2.0], [6200.0, 1.0], [6400.0, 1.0], [6600.0, 1.0], [6500.0, 1.0], [6800.0, 1.0], [7100.0, 1.0], [7700.0, 1.0], [8000.0, 1.0], [8100.0, 2.0], [8700.0, 1.0], [8900.0, 2.0], [9400.0, 2.0], [9500.0, 1.0], [9700.0, 1.0], [9300.0, 2.0], [10000.0, 2.0], [10200.0, 2.0], [9800.0, 1.0], [10500.0, 2.0], [10600.0, 1.0], [10300.0, 1.0], [10900.0, 2.0], [10800.0, 1.0], [11200.0, 4.0], [11000.0, 1.0], [11500.0, 1.0], [11700.0, 1.0], [11600.0, 2.0], [11300.0, 1.0], [12000.0, 2.0], [11800.0, 1.0], [12100.0, 1.0], [12200.0, 1.0], [12300.0, 2.0], [12500.0, 2.0], [12700.0, 1.0], [12400.0, 1.0], [12800.0, 2.0], [13100.0, 1.0], [13300.0, 2.0], [12900.0, 1.0], [13200.0, 1.0], [13500.0, 1.0], [13800.0, 1.0], [13400.0, 2.0], [13900.0, 1.0], [14100.0, 1.0], [14000.0, 2.0], [14400.0, 2.0], [14600.0, 2.0], [14800.0, 1.0], [14700.0, 2.0], [14900.0, 1.0], [15300.0, 1.0], [15000.0, 2.0], [15100.0, 2.0], [15600.0, 2.0], [15800.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [16100.0, 3.0], [16300.0, 2.0], [15900.0, 2.0], [16000.0, 2.0], [16800.0, 3.0], [16600.0, 1.0], [17000.0, 1.0], [17600.0, 1.0], [18000.0, 1.0], [18200.0, 1.0], [18600.0, 1.0], [19400.0, 1.0], [20200.0, 1.0], [19800.0, 3.0], [20400.0, 1.0], [20800.0, 1.0], [21400.0, 1.0], [20600.0, 1.0], [22200.0, 1.0], [21800.0, 2.0], [23400.0, 2.0], [22600.0, 1.0], [23000.0, 1.0], [22800.0, 1.0], [24400.0, 2.0], [24000.0, 1.0], [25200.0, 1.0], [25400.0, 1.0], [25800.0, 2.0], [26200.0, 1.0], [27200.0, 1.0], [27600.0, 1.0], [28000.0, 3.0], [28400.0, 1.0], [28200.0, 1.0], [29200.0, 1.0], [29600.0, 1.0], [31000.0, 2.0], [30800.0, 1.0], [31200.0, 1.0], [31400.0, 1.0], [34400.0, 2.0], [33600.0, 1.0], [33200.0, 1.0], [32800.0, 1.0], [34800.0, 2.0], [35200.0, 1.0], [35600.0, 1.0], [38400.0, 1.0], [38000.0, 1.0], [37600.0, 2.0], [38800.0, 1.0], [39600.0, 1.0], [41200.0, 1.0], [44400.0, 2.0], [47600.0, 1.0], [50000.0, 1.0], [49600.0, 1.0], [51200.0, 1.0], [51600.0, 1.0], [53200.0, 1.0], [55200.0, 1.0], [55600.0, 1.0], [57600.0, 1.0], [59600.0, 1.0], [34300.0, 1.0], [33500.0, 1.0], [34700.0, 1.0], [37900.0, 2.0], [37500.0, 2.0], [39500.0, 3.0], [39100.0, 1.0], [39900.0, 1.0], [40700.0, 1.0], [41500.0, 1.0], [45500.0, 3.0], [46700.0, 1.0], [49100.0, 1.0], [49500.0, 2.0], [56300.0, 1.0], [57100.0, 1.0], [57900.0, 1.0], [59500.0, 1.0], [60300.0, 2.0], [16900.0, 3.0], [17300.0, 1.0], [16700.0, 1.0], [18300.0, 1.0], [18900.0, 2.0], [18500.0, 2.0], [19300.0, 2.0], [19100.0, 1.0], [19700.0, 1.0], [21300.0, 2.0], [20900.0, 1.0], [20700.0, 1.0], [21700.0, 1.0], [21900.0, 1.0], [22500.0, 1.0], [23100.0, 1.0], [22700.0, 1.0], [24500.0, 4.0], [23700.0, 1.0], [23900.0, 1.0], [24100.0, 1.0], [25500.0, 1.0], [24700.0, 1.0], [25300.0, 1.0], [26100.0, 2.0], [25700.0, 1.0], [26900.0, 1.0], [27500.0, 1.0], [27700.0, 1.0], [28300.0, 2.0], [27900.0, 1.0], [28100.0, 2.0], [28500.0, 1.0], [29500.0, 2.0], [30300.0, 2.0], [30700.0, 1.0], [29700.0, 1.0], [30900.0, 1.0], [32100.0, 3.0], [32300.0, 1.0], [31900.0, 1.0], [33800.0, 1.0], [34200.0, 1.0], [34600.0, 1.0], [37800.0, 1.0], [37400.0, 1.0], [39400.0, 1.0], [42200.0, 2.0], [41400.0, 1.0], [41000.0, 1.0], [45000.0, 1.0], [44600.0, 1.0], [46200.0, 1.0], [45800.0, 2.0], [47800.0, 1.0], [52200.0, 1.0], [55000.0, 1.0], [53800.0, 1.0], [53400.0, 1.0], [60200.0, 5.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 201.0], [600.0, 2.0], [1400.0, 1.0], [200.0, 106.0], [400.0, 196.0], [500.0, 11.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 393.0, "series": [{"data": [[0.0, 342.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 10.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 289.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 393.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.68527946E12, "maxY": 25.0, "series": [{"data": [[1.68528018E12, 22.493333333333332], [1.68527964E12, 7.263157894736842], [1.68527988E12, 15.0], [1.68528024E12, 25.0], [1.68527958E12, 5.0], [1.68527994E12, 15.0], [1.6852803E12, 16.709090909090904], [1.68527952E12, 5.0], [1.68528E12, 17.587301587301585], [1.68528036E12, 2.0], [1.68527946E12, 3.3333333333333335], [1.68528006E12, 20.0], [1.68527976E12, 10.0], [1.68528012E12, 20.0], [1.6852797E12, 10.0], [1.68527982E12, 11.870967741935479]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528036E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 285.99999999999994, "minX": 1.0, "maxY": 60517.0, "series": [{"data": [[2.0, 33881.0], [3.0, 26533.333333333332], [4.0, 24999.5], [5.0, 20120.83333333333], [6.0, 32531.666666666664], [7.0, 27264.6], [8.0, 60322.0], [9.0, 37788.666666666664], [10.0, 21535.333333333336], [11.0, 4190.0], [12.0, 3002.888888888889], [13.0, 20375.5], [14.0, 35729.25], [15.0, 24705.975308641973], [16.0, 25043.8], [1.0, 60517.0], [17.0, 13806.23076923077], [18.0, 14532.421052631582], [19.0, 12526.857142857141], [20.0, 16911.034782608698], [21.0, 30432.499999999996], [22.0, 29631.090909090908], [23.0, 27712.13333333333], [24.0, 18886.727272727276], [25.0, 16133.234567901234]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[16.91489361702128, 19815.328820116058]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 33487.5], [3.0, 26173.0], [4.0, 24654.75], [5.0, 19778.866666666672], [6.0, 32222.0], [7.0, 26946.4], [8.0, 60109.0], [9.0, 37447.333333333336], [10.0, 21173.55], [11.0, 3849.1111111111113], [12.0, 2638.8888888888887], [13.0, 20037.625], [14.0, 35430.75], [15.0, 24341.03703703703], [16.0, 24688.4], [1.0, 60107.0], [17.0, 13409.0], [18.0, 14221.210526315786], [19.0, 12210.928571428572], [20.0, 16571.817391304343], [21.0, 30063.799999999996], [22.0, 29272.63636363636], [23.0, 27371.600000000002], [24.0, 18545.0], [25.0, 15784.493827160491]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[16.91489361702128, 19466.754352030955]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 389.0], [3.0, 323.0], [4.0, 286.5], [5.0, 347.46666666666664], [6.0, 363.5], [7.0, 356.2], [8.0, 386.0], [9.0, 393.6666666666667], [10.0, 353.4833333333333], [11.0, 365.90000000000003], [12.0, 378.7], [13.0, 361.0], [14.0, 392.25], [15.0, 363.79746835443035], [1.0, 380.0], [16.0, 313.7142857142857], [17.0, 369.9230769230769], [18.0, 285.99999999999994], [19.0, 348.85714285714295], [20.0, 341.7739130434783], [21.0, 357.40000000000003], [22.0, 384.0], [23.0, 334.06666666666666], [24.0, 362.7], [25.0, 339.76829268292676]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[16.918762088974848, 348.57253384912957]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 34.7, "minX": 1.68527946E12, "maxY": 10941.316666666668, "series": [{"data": [[1.68528018E12, 3094.25], [1.68527964E12, 1024.9166666666667], [1.68527988E12, 1441.25], [1.68528024E12, 3326.1], [1.68527958E12, 1064.4666666666667], [1.68527994E12, 2763.0333333333333], [1.6852803E12, 788.05], [1.68527952E12, 880.6], [1.68528E12, 3479.233333333333], [1.68528036E12, 34.7], [1.68527946E12, 621.7166666666667], [1.68528006E12, 2566.3166666666666], [1.68527976E12, 1581.65], [1.68528012E12, 3011.7], [1.6852797E12, 807.2166666666667], [1.68527982E12, 1464.6333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68528018E12, 6838.5], [1.68527964E12, 1735.3333333333333], [1.68527988E12, 3995.6666666666665], [1.68528024E12, 10941.316666666668], [1.68527958E12, 2003.85], [1.68527994E12, 5933.083333333333], [1.6852803E12, 3347.133333333333], [1.68527952E12, 1670.5333333333333], [1.68528E12, 8050.916666666667], [1.68528036E12, 382.6333333333333], [1.68527946E12, 624.7333333333333], [1.68528006E12, 7112.4], [1.68527976E12, 5982.366666666667], [1.68528012E12, 8769.85], [1.6852797E12, 1853.6], [1.68527982E12, 6133.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528036E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 327.54545454545456, "minX": 1.68527946E12, "maxY": 60497.333333333336, "series": [{"data": [[1.68528018E12, 22314.755102040814], [1.68527964E12, 20671.5], [1.68527988E12, 30906.000000000004], [1.68528024E12, 16309.88], [1.68527958E12, 19051.153846153844], [1.68527994E12, 22809.714285714286], [1.6852803E12, 49753.66666666667], [1.68527952E12, 19457.857142857145], [1.68528E12, 12029.539682539684], [1.68528036E12, 60497.333333333336], [1.68527946E12, 11349.142857142857], [1.68528006E12, 17860.980000000003], [1.68527976E12, 16351.307692307688], [1.68528012E12, 17180.40740740741], [1.6852797E12, 43076.0], [1.68527982E12, 5764.324324324324]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68528018E12, 22884.625000000004], [1.68527964E12, 20015.454545454544], [1.68527988E12, 27635.51724137931], [1.68528024E12, 15125.42666666667], [1.68527958E12, 19279.4], [1.68527994E12, 23697.44736842105], [1.6852803E12, 48054.0], [1.68527952E12, 18176.500000000004], [1.68528E12, 12188.147540983604], [1.68528036E12, 60124.0], [1.68527946E12, 10602.333333333334], [1.68528006E12, 14358.938775510209], [1.68527976E12, 19980.17142857143], [1.68528012E12, 18999.80701754385], [1.6852797E12, 42564.45454545455], [1.68527982E12, 5148.09756097561]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68528018E12, 357.50943396226415], [1.68527964E12, 373.3529411764706], [1.68527988E12, 381.06896551724145], [1.68528024E12, 336.9594594594595], [1.68527958E12, 350.9285714285714], [1.68527994E12, 346.36842105263156], [1.6852803E12, 372.2], [1.68527952E12, 336.25], [1.68528E12, 335.0615384615385], [1.68527946E12, 327.54545454545456], [1.68528006E12, 338.7], [1.68527976E12, 364.85714285714283], [1.68528012E12, 342.2456140350878], [1.6852797E12, 377.3636363636363], [1.68527982E12, 352.47826086956513]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528036E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 326.45454545454544, "minX": 1.68527946E12, "maxY": 60497.0, "series": [{"data": [[1.68528018E12, 22314.591836734693], [1.68527964E12, 20671.4], [1.68527988E12, 30905.90322580645], [1.68528024E12, 16309.679999999993], [1.68527958E12, 19050.769230769227], [1.68527994E12, 22803.600000000002], [1.6852803E12, 49752.666666666664], [1.68527952E12, 19457.42857142857], [1.68528E12, 12029.317460317456], [1.68528036E12, 60497.0], [1.68527946E12, 11347.57142857143], [1.68528006E12, 17860.76000000001], [1.68527976E12, 16351.025641025639], [1.68528012E12, 17180.222222222226], [1.6852797E12, 43075.692307692305], [1.68527982E12, 5763.891891891892]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68528018E12, 22884.47916666667], [1.68527964E12, 20015.454545454544], [1.68527988E12, 27635.44827586207], [1.68528024E12, 15125.386666666669], [1.68527958E12, 19279.266666666666], [1.68527994E12, 23697.342105263157], [1.6852803E12, 48053.07692307693], [1.68527952E12, 18176.333333333336], [1.68528E12, 12187.967213114754], [1.68528036E12, 60124.0], [1.68527946E12, 10602.333333333334], [1.68528006E12, 14358.795918367348], [1.68527976E12, 19980.057142857146], [1.68528012E12, 18999.701754385955], [1.6852797E12, 42564.27272727273], [1.68527982E12, 5147.951219512194]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68528018E12, 357.49056603773585], [1.68527964E12, 373.29411764705884], [1.68527988E12, 380.9655172413793], [1.68528024E12, 336.7972972972972], [1.68527958E12, 350.71428571428567], [1.68527994E12, 340.89473684210515], [1.6852803E12, 372.0], [1.68527952E12, 335.9166666666667], [1.68528E12, 335.01538461538456], [1.68527946E12, 326.45454545454544], [1.68528006E12, 338.66], [1.68527976E12, 364.77142857142866], [1.68528012E12, 342.14035087719304], [1.6852797E12, 377.0909090909091], [1.68527982E12, 352.23913043478274]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528036E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68527946E12, "maxY": 190.54545454545453, "series": [{"data": [[1.68528018E12, 178.26530612244906], [1.68527964E12, 174.89999999999998], [1.68527988E12, 189.09677419354838], [1.68528024E12, 167.8666666666667], [1.68527958E12, 172.53846153846155], [1.68527994E12, 168.65714285714287], [1.6852803E12, 158.70833333333334], [1.68527952E12, 165.78571428571428], [1.68528E12, 156.30158730158726], [1.68528036E12, 171.33333333333334], [1.68527946E12, 158.28571428571428], [1.68528006E12, 160.7], [1.68527976E12, 184.66666666666669], [1.68528012E12, 169.35185185185188], [1.6852797E12, 176.0], [1.68527982E12, 163.99999999999997]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68528018E12, 0.0], [1.68527964E12, 0.0], [1.68527988E12, 0.0], [1.68528024E12, 0.0], [1.68527958E12, 0.0], [1.68527994E12, 0.0], [1.6852803E12, 0.0], [1.68527952E12, 0.0], [1.68528E12, 0.0], [1.68528036E12, 0.0], [1.68527946E12, 0.0], [1.68528006E12, 0.0], [1.68527976E12, 0.0], [1.68528012E12, 0.0], [1.6852797E12, 0.0], [1.68527982E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68528018E12, 174.24528301886795], [1.68527964E12, 177.88235294117646], [1.68527988E12, 173.3793103448276], [1.68528024E12, 166.5810810810811], [1.68527958E12, 181.2142857142857], [1.68527994E12, 167.47368421052633], [1.6852803E12, 184.2], [1.68527952E12, 154.58333333333331], [1.68528E12, 158.89230769230767], [1.68527946E12, 162.36363636363637], [1.68528006E12, 163.02000000000007], [1.68527976E12, 178.14285714285714], [1.68528012E12, 167.54385964912282], [1.6852797E12, 190.54545454545453], [1.68527982E12, 173.52173913043478]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528036E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 212.0, "minX": 1.68527946E12, "maxY": 57943.0, "series": [{"data": [[1.68528018E12, 57943.0], [1.68527964E12, 31074.0], [1.68527988E12, 21939.0], [1.68528024E12, 57159.0], [1.68527958E12, 27248.0], [1.68527994E12, 56321.0], [1.6852803E12, 53456.0], [1.68527952E12, 23405.0], [1.68528E12, 32816.0], [1.68527946E12, 13888.0], [1.68528006E12, 50045.0], [1.68527976E12, 49100.0], [1.68528012E12, 32383.0], [1.6852797E12, 49573.0], [1.68527982E12, 50981.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68528018E12, 46513.00000000001], [1.68527964E12, 26113.7], [1.68527988E12, 18395.200000000004], [1.68528024E12, 30385.8], [1.68527958E12, 24704.0], [1.68527994E12, 36786.40000000001], [1.6852803E12, 53273.6], [1.68527952E12, 21532.0], [1.68528E12, 25421.0], [1.68527946E12, 13624.8], [1.68528006E12, 38986.0], [1.68527976E12, 41528.2], [1.68528012E12, 16893.300000000003], [1.6852797E12, 47324.0], [1.68527982E12, 49533.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68528018E12, 57943.0], [1.68527964E12, 31074.0], [1.68527988E12, 21939.0], [1.68528024E12, 57159.0], [1.68527958E12, 27248.0], [1.68527994E12, 56321.0], [1.6852803E12, 53456.0], [1.68527952E12, 23405.0], [1.68528E12, 32816.0], [1.68527946E12, 13888.0], [1.68528006E12, 50045.0], [1.68527976E12, 49100.0], [1.68528012E12, 32383.0], [1.6852797E12, 49573.0], [1.68527982E12, 50981.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68528018E12, 53996.99999999999], [1.68527964E12, 28844.699999999986], [1.68527988E12, 21873.0], [1.68528024E12, 39230.399999999994], [1.68527958E12, 26395.5], [1.68527994E12, 41708.600000000006], [1.6852803E12, 53456.0], [1.68527952E12, 22991.75], [1.68528E12, 27768.699999999997], [1.68527946E12, 13888.0], [1.68528006E12, 44681.2], [1.68527976E12, 47813.6], [1.68528012E12, 24275.899999999987], [1.6852797E12, 49313.049999999996], [1.68527982E12, 50981.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68528018E12, 267.0], [1.68527964E12, 305.0], [1.68527988E12, 244.0], [1.68528024E12, 218.0], [1.68527958E12, 217.0], [1.68527994E12, 212.0], [1.6852803E12, 303.0], [1.68527952E12, 219.0], [1.68528E12, 214.0], [1.68527946E12, 235.0], [1.68528006E12, 215.0], [1.68527976E12, 226.0], [1.68528012E12, 214.0], [1.6852797E12, 214.0], [1.68527982E12, 246.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68528018E12, 409.0], [1.68527964E12, 406.5], [1.68527988E12, 352.0], [1.68528024E12, 408.0], [1.68527958E12, 10002.0], [1.68527994E12, 613.0], [1.6852803E12, 40787.0], [1.68527952E12, 6937.0], [1.68528E12, 409.0], [1.68527946E12, 380.0], [1.68528006E12, 409.0], [1.68527976E12, 30814.0], [1.68528012E12, 409.0], [1.6852797E12, 17141.0], [1.68527982E12, 408.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6852803E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 111.0, "minX": 1.0, "maxY": 26061.0, "series": [{"data": [[2.0, 408.0], [8.0, 5380.0], [9.0, 13438.0], [10.0, 306.0], [3.0, 510.0], [12.0, 19685.5], [14.0, 409.0], [1.0, 408.0], [4.0, 409.0], [5.0, 11759.0], [6.0, 10290.5], [7.0, 403.5], [30.0, 408.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 217.0], [8.0, 306.0], [9.0, 127.0], [10.0, 213.0], [3.0, 211.0], [12.0, 213.0], [14.0, 26061.0], [4.0, 212.0], [1.0, 360.0], [5.0, 281.0], [6.0, 351.5], [7.0, 111.0], [30.0, 16318.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 111.0, "minX": 1.0, "maxY": 26061.0, "series": [{"data": [[2.0, 408.0], [8.0, 5380.0], [9.0, 13438.0], [10.0, 306.0], [3.0, 510.0], [12.0, 19685.5], [14.0, 409.0], [1.0, 408.0], [4.0, 409.0], [5.0, 11759.0], [6.0, 10290.5], [7.0, 403.5], [30.0, 408.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 217.0], [8.0, 306.0], [9.0, 127.0], [10.0, 213.0], [3.0, 211.0], [12.0, 213.0], [14.0, 26061.0], [4.0, 212.0], [1.0, 360.0], [5.0, 281.0], [6.0, 351.5], [7.0, 111.0], [30.0, 16318.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.68527946E12, "maxY": 2.533333333333333, "series": [{"data": [[1.68528018E12, 1.7333333333333334], [1.68527964E12, 0.5666666666666667], [1.68527988E12, 1.0166666666666666], [1.68528024E12, 2.533333333333333], [1.68527958E12, 0.48333333333333334], [1.68527994E12, 1.2333333333333334], [1.6852803E12, 0.16666666666666666], [1.68527952E12, 0.36666666666666664], [1.68528E12, 2.1666666666666665], [1.68527946E12, 0.36666666666666664], [1.68528006E12, 1.6833333333333333], [1.68527976E12, 1.0333333333333334], [1.68528012E12, 1.8833333333333333], [1.6852797E12, 0.38333333333333336], [1.68527982E12, 1.6166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6852803E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68527946E12, "maxY": 1.35, "series": [{"data": [[1.68528018E12, 1.2833333333333334], [1.68527964E12, 0.4666666666666667], [1.68527988E12, 0.5166666666666667], [1.68528024E12, 1.0833333333333333], [1.68527958E12, 0.48333333333333334], [1.68527994E12, 1.25], [1.6852803E12, 0.2833333333333333], [1.68527952E12, 0.4], [1.68528E12, 1.35], [1.68527946E12, 0.2833333333333333], [1.68528006E12, 0.95], [1.68527976E12, 0.5166666666666667], [1.68528012E12, 1.1333333333333333], [1.6852797E12, 0.36666666666666664], [1.68527982E12, 0.31666666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68528E12, 0.75], [1.68528018E12, 0.38333333333333336], [1.68527988E12, 0.26666666666666666], [1.68528006E12, 0.7], [1.68527976E12, 0.65], [1.68528024E12, 1.35], [1.68528012E12, 0.7], [1.68527982E12, 1.1333333333333333], [1.6852803E12, 0.03333333333333333]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68528018E12, 0.016666666666666666], [1.68527988E12, 0.18333333333333332], [1.68528036E12, 0.05], [1.68528024E12, 0.05], [1.68527994E12, 0.016666666666666666], [1.68528012E12, 0.06666666666666667], [1.6852803E12, 0.2]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528036E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68527946E12, "maxY": 1.0, "series": [{"data": [[1.68528018E12, 0.7], [1.68527964E12, 0.2833333333333333], [1.68527988E12, 0.35], [1.68528024E12, 0.75], [1.68527958E12, 0.23333333333333334], [1.68527994E12, 0.6333333333333333], [1.6852803E12, 0.08333333333333333], [1.68527952E12, 0.2], [1.68528E12, 0.7166666666666667], [1.68527946E12, 0.18333333333333332], [1.68528006E12, 0.48333333333333334], [1.68527976E12, 0.2], [1.68528012E12, 0.6666666666666666], [1.6852797E12, 0.18333333333333332], [1.68527982E12, 0.2]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68528E12, 0.36666666666666664], [1.68528018E12, 0.18333333333333332], [1.68527988E12, 0.13333333333333333], [1.68528006E12, 0.35], [1.68527976E12, 0.38333333333333336], [1.68528024E12, 0.48333333333333334], [1.68528012E12, 0.2833333333333333], [1.68527982E12, 0.5666666666666667]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68528E12, 0.38333333333333336], [1.68528018E12, 0.21666666666666667], [1.68527988E12, 0.31666666666666665], [1.68528036E12, 0.05], [1.68528006E12, 0.35], [1.68527976E12, 0.26666666666666666], [1.68528024E12, 0.9166666666666666], [1.68527994E12, 0.016666666666666666], [1.68528012E12, 0.48333333333333334], [1.68527982E12, 0.5666666666666667], [1.6852803E12, 0.23333333333333334]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68528018E12, 0.36666666666666664], [1.68527964E12, 0.16666666666666666], [1.68527988E12, 0.16666666666666666], [1.68528024E12, 0.25], [1.68527958E12, 0.21666666666666667], [1.68527994E12, 0.55], [1.6852803E12, 0.08333333333333333], [1.68527952E12, 0.23333333333333334], [1.68528E12, 0.5833333333333334], [1.68527946E12, 0.11666666666666667], [1.68528006E12, 0.3], [1.68527976E12, 0.16666666666666666], [1.68528012E12, 0.2833333333333333], [1.6852797E12, 0.21666666666666667], [1.68527982E12, 0.016666666666666666]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68528E12, 0.4666666666666667], [1.68528018E12, 0.45], [1.68527988E12, 0.35], [1.68528036E12, 0.05], [1.68528006E12, 0.5333333333333333], [1.68527976E12, 0.48333333333333334], [1.68528024E12, 1.0], [1.68527994E12, 0.03333333333333333], [1.68528012E12, 0.6166666666666667], [1.68527982E12, 0.6], [1.6852803E12, 0.31666666666666665]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68528018E12, 0.5833333333333334], [1.68527964E12, 0.18333333333333332], [1.68527988E12, 0.16666666666666666], [1.68528024E12, 0.3333333333333333], [1.68527958E12, 0.25], [1.68527994E12, 0.6166666666666667], [1.6852803E12, 0.2], [1.68527952E12, 0.2], [1.68528E12, 0.6333333333333333], [1.68527946E12, 0.1], [1.68528006E12, 0.4666666666666667], [1.68527976E12, 0.31666666666666665], [1.68528012E12, 0.4666666666666667], [1.6852797E12, 0.18333333333333332], [1.68527982E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528036E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68527946E12, "maxY": 2.4, "series": [{"data": [[1.68528018E12, 1.65], [1.68527964E12, 0.6333333333333333], [1.68527988E12, 0.6833333333333333], [1.68528024E12, 1.3333333333333333], [1.68527958E12, 0.7], [1.68527994E12, 1.8], [1.6852803E12, 0.36666666666666664], [1.68527952E12, 0.6333333333333333], [1.68528E12, 1.9333333333333333], [1.68527946E12, 0.4], [1.68528006E12, 1.25], [1.68527976E12, 0.6833333333333333], [1.68528012E12, 1.4166666666666667], [1.6852797E12, 0.5833333333333334], [1.68527982E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68528E12, 1.2166666666666666], [1.68528018E12, 0.85], [1.68527988E12, 0.8], [1.68528036E12, 0.1], [1.68528006E12, 1.2333333333333334], [1.68527976E12, 1.1333333333333333], [1.68528024E12, 2.4], [1.68527994E12, 0.05], [1.68528012E12, 1.3833333333333333], [1.68527982E12, 1.7333333333333334], [1.6852803E12, 0.55]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528036E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

