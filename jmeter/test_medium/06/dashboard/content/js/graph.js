/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 106.0, "minX": 0.0, "maxY": 81720.0, "series": [{"data": [[0.0, 326.0], [0.1, 326.0], [0.2, 329.0], [0.3, 329.0], [0.4, 335.0], [0.5, 335.0], [0.6, 335.0], [0.7, 338.0], [0.8, 338.0], [0.9, 339.0], [1.0, 339.0], [1.1, 341.0], [1.2, 343.0], [1.3, 343.0], [1.4, 366.0], [1.5, 366.0], [1.6, 375.0], [1.7, 380.0], [1.8, 380.0], [1.9, 383.0], [2.0, 383.0], [2.1, 389.0], [2.2, 412.0], [2.3, 412.0], [2.4, 413.0], [2.5, 413.0], [2.6, 413.0], [2.7, 413.0], [2.8, 415.0], [2.9, 420.0], [3.0, 420.0], [3.1, 421.0], [3.2, 421.0], [3.3, 423.0], [3.4, 423.0], [3.5, 423.0], [3.6, 424.0], [3.7, 424.0], [3.8, 429.0], [3.9, 436.0], [4.0, 436.0], [4.1, 437.0], [4.2, 437.0], [4.3, 437.0], [4.4, 438.0], [4.5, 438.0], [4.6, 442.0], [4.7, 442.0], [4.8, 442.0], [4.9, 442.0], [5.0, 442.0], [5.1, 442.0], [5.2, 442.0], [5.3, 443.0], [5.4, 443.0], [5.5, 451.0], [5.6, 453.0], [5.7, 453.0], [5.8, 455.0], [5.9, 455.0], [6.0, 456.0], [6.1, 457.0], [6.2, 457.0], [6.3, 458.0], [6.4, 458.0], [6.5, 460.0], [6.6, 460.0], [6.7, 460.0], [6.8, 461.0], [6.9, 461.0], [7.0, 462.0], [7.1, 462.0], [7.2, 464.0], [7.3, 465.0], [7.4, 465.0], [7.5, 465.0], [7.6, 465.0], [7.7, 470.0], [7.8, 480.0], [7.9, 480.0], [8.0, 482.0], [8.1, 482.0], [8.2, 482.0], [8.3, 485.0], [8.4, 485.0], [8.5, 485.0], [8.6, 485.0], [8.7, 487.0], [8.8, 489.0], [8.9, 489.0], [9.0, 492.0], [9.1, 492.0], [9.2, 500.0], [9.3, 500.0], [9.4, 502.0], [9.5, 504.0], [9.6, 504.0], [9.7, 504.0], [9.8, 504.0], [9.9, 505.0], [10.0, 510.0], [10.1, 510.0], [10.2, 510.0], [10.3, 510.0], [10.4, 511.0], [10.5, 512.0], [10.6, 512.0], [10.7, 516.0], [10.8, 516.0], [10.9, 517.0], [11.0, 517.0], [11.1, 517.0], [11.2, 517.0], [11.3, 517.0], [11.4, 521.0], [11.5, 521.0], [11.6, 522.0], [11.7, 522.0], [11.8, 522.0], [11.9, 522.0], [12.0, 522.0], [12.1, 525.0], [12.2, 526.0], [12.3, 526.0], [12.4, 527.0], [12.5, 527.0], [12.6, 527.0], [12.7, 527.0], [12.8, 527.0], [12.9, 527.0], [13.0, 527.0], [13.1, 529.0], [13.2, 531.0], [13.3, 531.0], [13.4, 533.0], [13.5, 533.0], [13.6, 533.0], [13.7, 533.0], [13.8, 535.0], [13.9, 535.0], [14.0, 535.0], [14.1, 536.0], [14.2, 536.0], [14.3, 537.0], [14.4, 542.0], [14.5, 542.0], [14.6, 542.0], [14.7, 542.0], [14.8, 543.0], [14.9, 546.0], [15.0, 546.0], [15.1, 549.0], [15.2, 549.0], [15.3, 550.0], [15.4, 552.0], [15.5, 552.0], [15.6, 553.0], [15.7, 553.0], [15.8, 553.0], [15.9, 553.0], [16.0, 555.0], [16.1, 555.0], [16.2, 555.0], [16.3, 556.0], [16.4, 556.0], [16.5, 557.0], [16.6, 559.0], [16.7, 559.0], [16.8, 564.0], [16.9, 564.0], [17.0, 564.0], [17.1, 567.0], [17.2, 567.0], [17.3, 575.0], [17.4, 575.0], [17.5, 585.0], [17.6, 586.0], [17.7, 586.0], [17.8, 587.0], [17.9, 587.0], [18.0, 587.0], [18.1, 587.0], [18.2, 587.0], [18.3, 590.0], [18.4, 590.0], [18.5, 590.0], [18.6, 590.0], [18.7, 592.0], [18.8, 597.0], [18.9, 597.0], [19.0, 598.0], [19.1, 598.0], [19.2, 601.0], [19.3, 603.0], [19.4, 603.0], [19.5, 608.0], [19.6, 608.0], [19.7, 611.0], [19.8, 615.0], [19.9, 615.0], [20.0, 621.0], [20.1, 621.0], [20.2, 630.0], [20.3, 630.0], [20.4, 660.0], [20.5, 725.0], [20.6, 725.0], [20.7, 742.0], [20.8, 742.0], [20.9, 3198.0], [21.0, 5247.0], [21.1, 5247.0], [21.2, 5440.0], [21.3, 5440.0], [21.4, 5514.0], [21.5, 5553.0], [21.6, 5553.0], [21.7, 5557.0], [21.8, 5557.0], [21.9, 5645.0], [22.0, 5651.0], [22.1, 5651.0], [22.2, 5704.0], [22.3, 5704.0], [22.4, 5763.0], [22.5, 5763.0], [22.6, 5797.0], [22.7, 5866.0], [22.8, 5866.0], [22.9, 5931.0], [23.0, 5931.0], [23.1, 5970.0], [23.2, 5975.0], [23.3, 5975.0], [23.4, 6098.0], [23.5, 6098.0], [23.6, 6187.0], [23.7, 6198.0], [23.8, 6198.0], [23.9, 6199.0], [24.0, 6199.0], [24.1, 6237.0], [24.2, 6303.0], [24.3, 6303.0], [24.4, 6377.0], [24.5, 6377.0], [24.6, 6501.0], [24.7, 6501.0], [24.8, 6509.0], [24.9, 6606.0], [25.0, 6606.0], [25.1, 6611.0], [25.2, 6611.0], [25.3, 6630.0], [25.4, 6786.0], [25.5, 6786.0], [25.6, 6833.0], [25.7, 6833.0], [25.8, 6855.0], [25.9, 6968.0], [26.0, 6968.0], [26.1, 6973.0], [26.2, 6973.0], [26.3, 7063.0], [26.4, 7077.0], [26.5, 7077.0], [26.6, 7093.0], [26.7, 7093.0], [26.8, 7261.0], [26.9, 7261.0], [27.0, 7265.0], [27.1, 7346.0], [27.2, 7346.0], [27.3, 7557.0], [27.4, 7557.0], [27.5, 7635.0], [27.6, 7639.0], [27.7, 7639.0], [27.8, 7650.0], [27.9, 7650.0], [28.0, 7755.0], [28.1, 7836.0], [28.2, 7836.0], [28.3, 7979.0], [28.4, 7979.0], [28.5, 7994.0], [28.6, 8015.0], [28.7, 8015.0], [28.8, 8147.0], [28.9, 8147.0], [29.0, 8325.0], [29.1, 8325.0], [29.2, 8412.0], [29.3, 8544.0], [29.4, 8544.0], [29.5, 8600.0], [29.6, 8600.0], [29.7, 8747.0], [29.8, 8856.0], [29.9, 8856.0], [30.0, 8951.0], [30.1, 8951.0], [30.2, 9020.0], [30.3, 9224.0], [30.4, 9224.0], [30.5, 9272.0], [30.6, 9272.0], [30.7, 9284.0], [30.8, 9331.0], [30.9, 9331.0], [31.0, 9340.0], [31.1, 9340.0], [31.2, 9350.0], [31.3, 9350.0], [31.4, 9359.0], [31.5, 9362.0], [31.6, 9362.0], [31.7, 9364.0], [31.8, 9364.0], [31.9, 9474.0], [32.0, 9507.0], [32.1, 9507.0], [32.2, 9553.0], [32.3, 9553.0], [32.4, 9615.0], [32.5, 9624.0], [32.6, 9624.0], [32.7, 9634.0], [32.8, 9634.0], [32.9, 9721.0], [33.0, 9741.0], [33.1, 9741.0], [33.2, 9777.0], [33.3, 9777.0], [33.4, 9818.0], [33.5, 9818.0], [33.6, 9911.0], [33.7, 9949.0], [33.8, 9949.0], [33.9, 9962.0], [34.0, 9962.0], [34.1, 9972.0], [34.2, 9979.0], [34.3, 9979.0], [34.4, 10014.0], [34.5, 10014.0], [34.6, 10049.0], [34.7, 10093.0], [34.8, 10093.0], [34.9, 10102.0], [35.0, 10102.0], [35.1, 10108.0], [35.2, 10108.0], [35.3, 10108.0], [35.4, 10165.0], [35.5, 10165.0], [35.6, 10178.0], [35.7, 10178.0], [35.8, 10221.0], [35.9, 10254.0], [36.0, 10254.0], [36.1, 10267.0], [36.2, 10267.0], [36.3, 10303.0], [36.4, 10466.0], [36.5, 10466.0], [36.6, 10511.0], [36.7, 10511.0], [36.8, 10602.0], [36.9, 10630.0], [37.0, 10630.0], [37.1, 10797.0], [37.2, 10797.0], [37.3, 10901.0], [37.4, 10930.0], [37.5, 10930.0], [37.6, 10931.0], [37.7, 10931.0], [37.8, 10953.0], [37.9, 10953.0], [38.0, 11013.0], [38.1, 11026.0], [38.2, 11026.0], [38.3, 11054.0], [38.4, 11054.0], [38.5, 11068.0], [38.6, 11083.0], [38.7, 11083.0], [38.8, 11095.0], [38.9, 11095.0], [39.0, 11139.0], [39.1, 11172.0], [39.2, 11172.0], [39.3, 11209.0], [39.4, 11209.0], [39.5, 11210.0], [39.6, 11280.0], [39.7, 11280.0], [39.8, 11284.0], [39.9, 11284.0], [40.0, 11295.0], [40.1, 11295.0], [40.2, 11403.0], [40.3, 11442.0], [40.4, 11442.0], [40.5, 11497.0], [40.6, 11497.0], [40.7, 11550.0], [40.8, 11607.0], [40.9, 11607.0], [41.0, 11623.0], [41.1, 11623.0], [41.2, 11626.0], [41.3, 11629.0], [41.4, 11629.0], [41.5, 11687.0], [41.6, 11687.0], [41.7, 11701.0], [41.8, 11716.0], [41.9, 11716.0], [42.0, 11738.0], [42.1, 11738.0], [42.2, 11823.0], [42.3, 11823.0], [42.4, 11845.0], [42.5, 11883.0], [42.6, 11883.0], [42.7, 11954.0], [42.8, 11954.0], [42.9, 11959.0], [43.0, 11961.0], [43.1, 11961.0], [43.2, 12127.0], [43.3, 12127.0], [43.4, 12150.0], [43.5, 12186.0], [43.6, 12186.0], [43.7, 12195.0], [43.8, 12195.0], [43.9, 12228.0], [44.0, 12253.0], [44.1, 12253.0], [44.2, 12316.0], [44.3, 12316.0], [44.4, 12495.0], [44.5, 12495.0], [44.6, 12504.0], [44.7, 12518.0], [44.8, 12518.0], [44.9, 12650.0], [45.0, 12650.0], [45.1, 12693.0], [45.2, 12700.0], [45.3, 12700.0], [45.4, 12736.0], [45.5, 12736.0], [45.6, 12821.0], [45.7, 12854.0], [45.8, 12854.0], [45.9, 12899.0], [46.0, 12899.0], [46.1, 12958.0], [46.2, 13020.0], [46.3, 13020.0], [46.4, 13035.0], [46.5, 13035.0], [46.6, 13068.0], [46.7, 13068.0], [46.8, 13128.0], [46.9, 13146.0], [47.0, 13146.0], [47.1, 13206.0], [47.2, 13206.0], [47.3, 13215.0], [47.4, 13244.0], [47.5, 13244.0], [47.6, 13403.0], [47.7, 13403.0], [47.8, 13497.0], [47.9, 13548.0], [48.0, 13548.0], [48.1, 13626.0], [48.2, 13626.0], [48.3, 13663.0], [48.4, 13788.0], [48.5, 13788.0], [48.6, 13799.0], [48.7, 13799.0], [48.8, 13887.0], [48.9, 13887.0], [49.0, 13894.0], [49.1, 13972.0], [49.2, 13972.0], [49.3, 13977.0], [49.4, 13977.0], [49.5, 14049.0], [49.6, 14105.0], [49.7, 14105.0], [49.8, 14135.0], [49.9, 14135.0], [50.0, 14162.0], [50.1, 14177.0], [50.2, 14177.0], [50.3, 14196.0], [50.4, 14196.0], [50.5, 14254.0], [50.6, 14546.0], [50.7, 14546.0], [50.8, 14574.0], [50.9, 14574.0], [51.0, 14629.0], [51.1, 14683.0], [51.2, 14683.0], [51.3, 14686.0], [51.4, 14686.0], [51.5, 14776.0], [51.6, 14776.0], [51.7, 14784.0], [51.8, 14828.0], [51.9, 14828.0], [52.0, 14871.0], [52.1, 14871.0], [52.2, 14958.0], [52.3, 15002.0], [52.4, 15002.0], [52.5, 15096.0], [52.6, 15096.0], [52.7, 15148.0], [52.8, 15162.0], [52.9, 15162.0], [53.0, 15184.0], [53.1, 15184.0], [53.2, 15193.0], [53.3, 15571.0], [53.4, 15571.0], [53.5, 15752.0], [53.6, 15752.0], [53.7, 15859.0], [53.8, 15859.0], [53.9, 15954.0], [54.0, 15982.0], [54.1, 15982.0], [54.2, 16008.0], [54.3, 16008.0], [54.4, 16017.0], [54.5, 16027.0], [54.6, 16027.0], [54.7, 16050.0], [54.8, 16050.0], [54.9, 16152.0], [55.0, 16172.0], [55.1, 16172.0], [55.2, 16421.0], [55.3, 16421.0], [55.4, 16529.0], [55.5, 16600.0], [55.6, 16600.0], [55.7, 16669.0], [55.8, 16669.0], [55.9, 16670.0], [56.0, 16670.0], [56.1, 16843.0], [56.2, 16856.0], [56.3, 16856.0], [56.4, 16882.0], [56.5, 16882.0], [56.6, 17024.0], [56.7, 17053.0], [56.8, 17053.0], [56.9, 17074.0], [57.0, 17074.0], [57.1, 17079.0], [57.2, 17136.0], [57.3, 17136.0], [57.4, 17139.0], [57.5, 17139.0], [57.6, 17192.0], [57.7, 17192.0], [57.8, 17192.0], [57.9, 17231.0], [58.0, 17231.0], [58.1, 17248.0], [58.2, 17248.0], [58.3, 17393.0], [58.4, 17471.0], [58.5, 17471.0], [58.6, 17581.0], [58.7, 17581.0], [58.8, 17624.0], [58.9, 17651.0], [59.0, 17651.0], [59.1, 17671.0], [59.2, 17671.0], [59.3, 17730.0], [59.4, 17775.0], [59.5, 17775.0], [59.6, 17838.0], [59.7, 17838.0], [59.8, 17897.0], [59.9, 18056.0], [60.0, 18056.0], [60.1, 18065.0], [60.2, 18065.0], [60.3, 18271.0], [60.4, 18271.0], [60.5, 18328.0], [60.6, 18341.0], [60.7, 18341.0], [60.8, 18353.0], [60.9, 18353.0], [61.0, 18375.0], [61.1, 18401.0], [61.2, 18401.0], [61.3, 18487.0], [61.4, 18487.0], [61.5, 18614.0], [61.6, 18658.0], [61.7, 18658.0], [61.8, 18823.0], [61.9, 18823.0], [62.0, 18998.0], [62.1, 19085.0], [62.2, 19085.0], [62.3, 19209.0], [62.4, 19209.0], [62.5, 19243.0], [62.6, 19243.0], [62.7, 19246.0], [62.8, 19372.0], [62.9, 19372.0], [63.0, 19462.0], [63.1, 19462.0], [63.2, 19462.0], [63.3, 19551.0], [63.4, 19551.0], [63.5, 19618.0], [63.6, 19618.0], [63.7, 19879.0], [63.8, 19915.0], [63.9, 19915.0], [64.0, 19935.0], [64.1, 19935.0], [64.2, 19952.0], [64.3, 19965.0], [64.4, 19965.0], [64.5, 20063.0], [64.6, 20063.0], [64.7, 20079.0], [64.8, 20079.0], [64.9, 20104.0], [65.0, 20412.0], [65.1, 20412.0], [65.2, 20448.0], [65.3, 20448.0], [65.4, 20509.0], [65.5, 20593.0], [65.6, 20593.0], [65.7, 20677.0], [65.8, 20677.0], [65.9, 20787.0], [66.0, 20806.0], [66.1, 20806.0], [66.2, 20812.0], [66.3, 20812.0], [66.4, 20889.0], [66.5, 20919.0], [66.6, 20919.0], [66.7, 21053.0], [66.8, 21053.0], [66.9, 21127.0], [67.0, 21127.0], [67.1, 21160.0], [67.2, 21178.0], [67.3, 21178.0], [67.4, 21210.0], [67.5, 21210.0], [67.6, 21211.0], [67.7, 21217.0], [67.8, 21217.0], [67.9, 21236.0], [68.0, 21236.0], [68.1, 21338.0], [68.2, 21343.0], [68.3, 21343.0], [68.4, 21428.0], [68.5, 21428.0], [68.6, 21436.0], [68.7, 21439.0], [68.8, 21439.0], [68.9, 21479.0], [69.0, 21479.0], [69.1, 21493.0], [69.2, 21493.0], [69.3, 21547.0], [69.4, 21602.0], [69.5, 21602.0], [69.6, 21640.0], [69.7, 21640.0], [69.8, 21649.0], [69.9, 21660.0], [70.0, 21660.0], [70.1, 21756.0], [70.2, 21756.0], [70.3, 21759.0], [70.4, 21809.0], [70.5, 21809.0], [70.6, 21861.0], [70.7, 21861.0], [70.8, 21884.0], [70.9, 21933.0], [71.0, 21933.0], [71.1, 21981.0], [71.2, 21981.0], [71.3, 21988.0], [71.4, 21988.0], [71.5, 22004.0], [71.6, 22096.0], [71.7, 22096.0], [71.8, 22163.0], [71.9, 22163.0], [72.0, 22248.0], [72.1, 22522.0], [72.2, 22522.0], [72.3, 22571.0], [72.4, 22571.0], [72.5, 22576.0], [72.6, 22746.0], [72.7, 22746.0], [72.8, 22763.0], [72.9, 22763.0], [73.0, 22778.0], [73.1, 22816.0], [73.2, 22816.0], [73.3, 22855.0], [73.4, 22855.0], [73.5, 22865.0], [73.6, 22865.0], [73.7, 23013.0], [73.8, 23036.0], [73.9, 23036.0], [74.0, 23059.0], [74.1, 23059.0], [74.2, 23074.0], [74.3, 23177.0], [74.4, 23177.0], [74.5, 23179.0], [74.6, 23179.0], [74.7, 23190.0], [74.8, 23233.0], [74.9, 23233.0], [75.0, 23237.0], [75.1, 23237.0], [75.2, 23262.0], [75.3, 23278.0], [75.4, 23278.0], [75.5, 23356.0], [75.6, 23356.0], [75.7, 23464.0], [75.8, 23464.0], [75.9, 23466.0], [76.0, 23486.0], [76.1, 23486.0], [76.2, 23509.0], [76.3, 23509.0], [76.4, 23515.0], [76.5, 23769.0], [76.6, 23769.0], [76.7, 23810.0], [76.8, 23810.0], [76.9, 23840.0], [77.0, 23841.0], [77.1, 23841.0], [77.2, 24059.0], [77.3, 24059.0], [77.4, 24060.0], [77.5, 24070.0], [77.6, 24070.0], [77.7, 24145.0], [77.8, 24145.0], [77.9, 24234.0], [78.0, 24234.0], [78.1, 24284.0], [78.2, 24330.0], [78.3, 24330.0], [78.4, 24455.0], [78.5, 24455.0], [78.6, 24480.0], [78.7, 24514.0], [78.8, 24514.0], [78.9, 24571.0], [79.0, 24571.0], [79.1, 24634.0], [79.2, 24723.0], [79.3, 24723.0], [79.4, 24775.0], [79.5, 24775.0], [79.6, 24777.0], [79.7, 24936.0], [79.8, 24936.0], [79.9, 25005.0], [80.0, 25005.0], [80.1, 25136.0], [80.2, 25136.0], [80.3, 25193.0], [80.4, 25273.0], [80.5, 25273.0], [80.6, 25358.0], [80.7, 25358.0], [80.8, 25445.0], [80.9, 25525.0], [81.0, 25525.0], [81.1, 25873.0], [81.2, 25873.0], [81.3, 26039.0], [81.4, 26063.0], [81.5, 26063.0], [81.6, 26148.0], [81.7, 26148.0], [81.8, 26245.0], [81.9, 26282.0], [82.0, 26282.0], [82.1, 26324.0], [82.2, 26324.0], [82.3, 26494.0], [82.4, 26494.0], [82.5, 26530.0], [82.6, 26535.0], [82.7, 26535.0], [82.8, 26599.0], [82.9, 26599.0], [83.0, 26640.0], [83.1, 26681.0], [83.2, 26681.0], [83.3, 26834.0], [83.4, 26834.0], [83.5, 27245.0], [83.6, 27283.0], [83.7, 27283.0], [83.8, 27377.0], [83.9, 27377.0], [84.0, 27418.0], [84.1, 27448.0], [84.2, 27448.0], [84.3, 27462.0], [84.4, 27462.0], [84.5, 27524.0], [84.6, 27524.0], [84.7, 27605.0], [84.8, 27708.0], [84.9, 27708.0], [85.0, 27797.0], [85.1, 27797.0], [85.2, 27856.0], [85.3, 27929.0], [85.4, 27929.0], [85.5, 28077.0], [85.6, 28077.0], [85.7, 28103.0], [85.8, 28103.0], [85.9, 28103.0], [86.0, 28302.0], [86.1, 28302.0], [86.2, 28520.0], [86.3, 28546.0], [86.4, 28546.0], [86.5, 28669.0], [86.6, 28669.0], [86.7, 28889.0], [86.8, 28889.0], [86.9, 28960.0], [87.0, 29047.0], [87.1, 29047.0], [87.2, 29175.0], [87.3, 29175.0], [87.4, 29495.0], [87.5, 29519.0], [87.6, 29519.0], [87.7, 29903.0], [87.8, 29903.0], [87.9, 29922.0], [88.0, 30378.0], [88.1, 30378.0], [88.2, 30848.0], [88.3, 30848.0], [88.4, 30929.0], [88.5, 31515.0], [88.6, 31515.0], [88.7, 31584.0], [88.8, 31584.0], [88.9, 31760.0], [89.0, 31760.0], [89.1, 31964.0], [89.2, 32430.0], [89.3, 32430.0], [89.4, 32707.0], [89.5, 32707.0], [89.6, 32782.0], [89.7, 32810.0], [89.8, 32810.0], [89.9, 33549.0], [90.0, 33549.0], [90.1, 33685.0], [90.2, 33877.0], [90.3, 33877.0], [90.4, 33984.0], [90.5, 33984.0], [90.6, 34026.0], [90.7, 34478.0], [90.8, 34478.0], [90.9, 35267.0], [91.0, 35267.0], [91.1, 35301.0], [91.2, 35301.0], [91.3, 36129.0], [91.4, 36296.0], [91.5, 36296.0], [91.6, 36402.0], [91.7, 36402.0], [91.8, 36580.0], [91.9, 37199.0], [92.0, 37199.0], [92.1, 39514.0], [92.2, 39514.0], [92.3, 40191.0], [92.4, 40410.0], [92.5, 40410.0], [92.6, 41496.0], [92.7, 41496.0], [92.8, 42020.0], [92.9, 42575.0], [93.0, 42575.0], [93.1, 42940.0], [93.2, 42940.0], [93.3, 44494.0], [93.4, 44494.0], [93.5, 44969.0], [93.6, 46751.0], [93.7, 46751.0], [93.8, 47138.0], [93.9, 47138.0], [94.0, 47266.0], [94.1, 47432.0], [94.2, 47432.0], [94.3, 47464.0], [94.4, 47464.0], [94.5, 47498.0], [94.6, 48933.0], [94.7, 48933.0], [94.8, 50049.0], [94.9, 50049.0], [95.0, 50766.0], [95.1, 50828.0], [95.2, 50828.0], [95.3, 55457.0], [95.4, 55457.0], [95.5, 60365.0], [95.6, 60365.0], [95.7, 60389.0], [95.8, 60474.0], [95.9, 60474.0], [96.0, 60480.0], [96.1, 60480.0], [96.2, 60499.0], [96.3, 60500.0], [96.4, 60500.0], [96.5, 60504.0], [96.6, 60504.0], [96.7, 60506.0], [96.8, 60513.0], [96.9, 60513.0], [97.0, 60521.0], [97.1, 60521.0], [97.2, 60531.0], [97.3, 60542.0], [97.4, 60542.0], [97.5, 60544.0], [97.6, 60544.0], [97.7, 60551.0], [97.8, 60551.0], [97.9, 60559.0], [98.0, 60572.0], [98.1, 60572.0], [98.2, 60580.0], [98.3, 60580.0], [98.4, 60594.0], [98.5, 60610.0], [98.6, 60610.0], [98.7, 60623.0], [98.8, 60623.0], [98.9, 60652.0], [99.0, 60669.0], [99.1, 60669.0], [99.2, 60756.0], [99.3, 60756.0], [99.4, 60761.0], [99.5, 61942.0], [99.6, 61942.0], [99.7, 66118.0], [99.8, 66118.0], [99.9, 81720.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 106.0], [0.1, 106.0], [0.2, 107.0], [0.3, 107.0], [0.4, 107.0], [0.5, 107.0], [0.6, 108.0], [0.7, 108.0], [0.8, 108.0], [0.9, 108.0], [1.0, 108.0], [1.1, 109.0], [1.2, 109.0], [1.3, 109.0], [1.4, 109.0], [1.5, 109.0], [1.6, 109.0], [1.7, 109.0], [1.8, 109.0], [1.9, 110.0], [2.0, 110.0], [2.1, 110.0], [2.2, 110.0], [2.3, 110.0], [2.4, 110.0], [2.5, 110.0], [2.6, 110.0], [2.7, 110.0], [2.8, 110.0], [2.9, 111.0], [3.0, 111.0], [3.1, 111.0], [3.2, 111.0], [3.3, 112.0], [3.4, 112.0], [3.5, 112.0], [3.6, 113.0], [3.7, 113.0], [3.8, 114.0], [3.9, 114.0], [4.0, 114.0], [4.1, 116.0], [4.2, 116.0], [4.3, 116.0], [4.4, 117.0], [4.5, 117.0], [4.6, 118.0], [4.7, 118.0], [4.8, 119.0], [4.9, 119.0], [5.0, 119.0], [5.1, 120.0], [5.2, 120.0], [5.3, 120.0], [5.4, 120.0], [5.5, 120.0], [5.6, 120.0], [5.7, 120.0], [5.8, 121.0], [5.9, 121.0], [6.0, 123.0], [6.1, 125.0], [6.2, 125.0], [6.3, 125.0], [6.4, 125.0], [6.5, 125.0], [6.6, 125.0], [6.7, 125.0], [6.8, 128.0], [6.9, 128.0], [7.0, 130.0], [7.1, 130.0], [7.2, 130.0], [7.3, 132.0], [7.4, 132.0], [7.5, 133.0], [7.6, 133.0], [7.7, 135.0], [7.8, 136.0], [7.9, 136.0], [8.0, 136.0], [8.1, 136.0], [8.2, 136.0], [8.3, 137.0], [8.4, 137.0], [8.5, 137.0], [8.6, 137.0], [8.7, 137.0], [8.8, 138.0], [8.9, 138.0], [9.0, 139.0], [9.1, 139.0], [9.2, 141.0], [9.3, 141.0], [9.4, 142.0], [9.5, 142.0], [9.6, 142.0], [9.7, 142.0], [9.8, 142.0], [9.9, 144.0], [10.0, 145.0], [10.1, 145.0], [10.2, 147.0], [10.3, 147.0], [10.4, 148.0], [10.5, 151.0], [10.6, 151.0], [10.7, 151.0], [10.8, 151.0], [10.9, 151.0], [11.0, 152.0], [11.1, 152.0], [11.2, 152.0], [11.3, 152.0], [11.4, 154.0], [11.5, 154.0], [11.6, 156.0], [11.7, 156.0], [11.8, 156.0], [11.9, 156.0], [12.0, 156.0], [12.1, 156.0], [12.2, 159.0], [12.3, 159.0], [12.4, 159.0], [12.5, 159.0], [12.6, 160.0], [12.7, 160.0], [12.8, 160.0], [12.9, 161.0], [13.0, 161.0], [13.1, 162.0], [13.2, 162.0], [13.3, 162.0], [13.4, 163.0], [13.5, 163.0], [13.6, 165.0], [13.7, 165.0], [13.8, 166.0], [13.9, 170.0], [14.0, 170.0], [14.1, 171.0], [14.2, 171.0], [14.3, 176.0], [14.4, 176.0], [14.5, 176.0], [14.6, 176.0], [14.7, 176.0], [14.8, 177.0], [14.9, 179.0], [15.0, 179.0], [15.1, 179.0], [15.2, 179.0], [15.3, 179.0], [15.4, 181.0], [15.5, 181.0], [15.6, 181.0], [15.7, 181.0], [15.8, 182.0], [15.9, 182.0], [16.0, 183.0], [16.1, 185.0], [16.2, 185.0], [16.3, 185.0], [16.4, 185.0], [16.5, 186.0], [16.6, 186.0], [16.7, 186.0], [16.8, 187.0], [16.9, 187.0], [17.0, 190.0], [17.1, 190.0], [17.2, 190.0], [17.3, 191.0], [17.4, 191.0], [17.5, 192.0], [17.6, 192.0], [17.7, 192.0], [17.8, 192.0], [17.9, 192.0], [18.0, 195.0], [18.1, 195.0], [18.2, 195.0], [18.3, 196.0], [18.4, 196.0], [18.5, 196.0], [18.6, 196.0], [18.7, 199.0], [18.8, 201.0], [18.9, 201.0], [19.0, 203.0], [19.1, 203.0], [19.2, 204.0], [19.3, 204.0], [19.4, 204.0], [19.5, 204.0], [19.6, 204.0], [19.7, 206.0], [19.8, 206.0], [19.9, 206.0], [20.0, 206.0], [20.1, 206.0], [20.2, 207.0], [20.3, 207.0], [20.4, 210.0], [20.5, 212.0], [20.6, 212.0], [20.7, 216.0], [20.8, 216.0], [20.9, 216.0], [21.0, 2885.0], [21.1, 2885.0], [21.2, 4841.0], [21.3, 4841.0], [21.4, 5124.0], [21.5, 5146.0], [21.6, 5146.0], [21.7, 5149.0], [21.8, 5149.0], [21.9, 5208.0], [22.0, 5238.0], [22.1, 5238.0], [22.2, 5243.0], [22.3, 5243.0], [22.4, 5355.0], [22.5, 5355.0], [22.6, 5398.0], [22.7, 5420.0], [22.8, 5420.0], [22.9, 5522.0], [23.0, 5522.0], [23.1, 5554.0], [23.2, 5614.0], [23.3, 5614.0], [23.4, 5691.0], [23.5, 5691.0], [23.6, 5734.0], [23.7, 5779.0], [23.8, 5779.0], [23.9, 5791.0], [24.0, 5791.0], [24.1, 5828.0], [24.2, 5875.0], [24.3, 5875.0], [24.4, 6061.0], [24.5, 6061.0], [24.6, 6070.0], [24.7, 6070.0], [24.8, 6177.0], [24.9, 6201.0], [25.0, 6201.0], [25.1, 6204.0], [25.2, 6204.0], [25.3, 6290.0], [25.4, 6301.0], [25.5, 6301.0], [25.6, 6425.0], [25.7, 6425.0], [25.8, 6518.0], [25.9, 6548.0], [26.0, 6548.0], [26.1, 6558.0], [26.2, 6558.0], [26.3, 6662.0], [26.4, 6670.0], [26.5, 6670.0], [26.6, 6686.0], [26.7, 6686.0], [26.8, 6700.0], [26.9, 6700.0], [27.0, 6904.0], [27.1, 6963.0], [27.2, 6963.0], [27.3, 7115.0], [27.4, 7115.0], [27.5, 7219.0], [27.6, 7231.0], [27.7, 7231.0], [27.8, 7243.0], [27.9, 7243.0], [28.0, 7346.0], [28.1, 7389.0], [28.2, 7389.0], [28.3, 7463.0], [28.4, 7463.0], [28.5, 7673.0], [28.6, 7697.0], [28.7, 7697.0], [28.8, 7712.0], [28.9, 7712.0], [29.0, 7739.0], [29.1, 7739.0], [29.2, 7917.0], [29.3, 8106.0], [29.4, 8106.0], [29.5, 8192.0], [29.6, 8192.0], [29.7, 8238.0], [29.8, 8340.0], [29.9, 8340.0], [30.0, 8560.0], [30.1, 8560.0], [30.2, 8581.0], [30.3, 8612.0], [30.4, 8612.0], [30.5, 8828.0], [30.6, 8828.0], [30.7, 8875.0], [30.8, 8875.0], [30.9, 8875.0], [31.0, 8932.0], [31.1, 8932.0], [31.2, 8954.0], [31.3, 8954.0], [31.4, 8961.0], [31.5, 8996.0], [31.6, 8996.0], [31.7, 9045.0], [31.8, 9045.0], [31.9, 9099.0], [32.0, 9130.0], [32.1, 9130.0], [32.2, 9169.0], [32.3, 9169.0], [32.4, 9207.0], [32.5, 9249.0], [32.6, 9249.0], [32.7, 9297.0], [32.8, 9297.0], [32.9, 9313.0], [33.0, 9317.0], [33.1, 9317.0], [33.2, 9439.0], [33.3, 9439.0], [33.4, 9466.0], [33.5, 9466.0], [33.6, 9521.0], [33.7, 9582.0], [33.8, 9582.0], [33.9, 9626.0], [34.0, 9626.0], [34.1, 9643.0], [34.2, 9676.0], [34.3, 9676.0], [34.4, 9708.0], [34.5, 9708.0], [34.6, 9744.0], [34.7, 9796.0], [34.8, 9796.0], [34.9, 9802.0], [35.0, 9802.0], [35.1, 9802.0], [35.2, 9803.0], [35.3, 9803.0], [35.4, 9823.0], [35.5, 9823.0], [35.6, 9832.0], [35.7, 9832.0], [35.8, 9835.0], [35.9, 9847.0], [36.0, 9847.0], [36.1, 9871.0], [36.2, 9871.0], [36.3, 9895.0], [36.4, 9960.0], [36.5, 9960.0], [36.6, 10131.0], [36.7, 10131.0], [36.8, 10172.0], [36.9, 10194.0], [37.0, 10194.0], [37.1, 10225.0], [37.2, 10225.0], [37.3, 10492.0], [37.4, 10493.0], [37.5, 10493.0], [37.6, 10547.0], [37.7, 10547.0], [37.8, 10611.0], [37.9, 10611.0], [38.0, 10624.0], [38.1, 10672.0], [38.2, 10672.0], [38.3, 10711.0], [38.4, 10711.0], [38.5, 10720.0], [38.6, 10731.0], [38.7, 10731.0], [38.8, 10762.0], [38.9, 10762.0], [39.0, 10789.0], [39.1, 10861.0], [39.2, 10861.0], [39.3, 10862.0], [39.4, 10862.0], [39.5, 10920.0], [39.6, 10934.0], [39.7, 10934.0], [39.8, 10936.0], [39.9, 10936.0], [40.0, 10975.0], [40.1, 10975.0], [40.2, 10990.0], [40.3, 11088.0], [40.4, 11088.0], [40.5, 11097.0], [40.6, 11097.0], [40.7, 11152.0], [40.8, 11212.0], [40.9, 11212.0], [41.0, 11217.0], [41.1, 11217.0], [41.2, 11218.0], [41.3, 11223.0], [41.4, 11223.0], [41.5, 11268.0], [41.6, 11268.0], [41.7, 11278.0], [41.8, 11308.0], [41.9, 11308.0], [42.0, 11395.0], [42.1, 11395.0], [42.2, 11424.0], [42.3, 11424.0], [42.4, 11437.0], [42.5, 11546.0], [42.6, 11546.0], [42.7, 11551.0], [42.8, 11551.0], [42.9, 11555.0], [43.0, 11563.0], [43.1, 11563.0], [43.2, 11603.0], [43.3, 11603.0], [43.4, 11744.0], [43.5, 11821.0], [43.6, 11821.0], [43.7, 11841.0], [43.8, 11841.0], [43.9, 11845.0], [44.0, 11870.0], [44.1, 11870.0], [44.2, 11889.0], [44.3, 11889.0], [44.4, 12013.0], [44.5, 12013.0], [44.6, 12189.0], [44.7, 12197.0], [44.8, 12197.0], [44.9, 12241.0], [45.0, 12241.0], [45.1, 12284.0], [45.2, 12302.0], [45.3, 12302.0], [45.4, 12357.0], [45.5, 12357.0], [45.6, 12425.0], [45.7, 12430.0], [45.8, 12430.0], [45.9, 12488.0], [46.0, 12488.0], [46.1, 12551.0], [46.2, 12612.0], [46.3, 12612.0], [46.4, 12627.0], [46.5, 12627.0], [46.6, 12681.0], [46.7, 12681.0], [46.8, 12738.0], [46.9, 12764.0], [47.0, 12764.0], [47.1, 12797.0], [47.2, 12797.0], [47.3, 12836.0], [47.4, 12906.0], [47.5, 12906.0], [47.6, 12994.0], [47.7, 12994.0], [47.8, 13001.0], [47.9, 13089.0], [48.0, 13089.0], [48.1, 13218.0], [48.2, 13218.0], [48.3, 13255.0], [48.4, 13357.0], [48.5, 13357.0], [48.6, 13382.0], [48.7, 13382.0], [48.8, 13479.0], [48.9, 13479.0], [49.0, 13493.0], [49.1, 13564.0], [49.2, 13564.0], [49.3, 13568.0], [49.4, 13568.0], [49.5, 13574.0], [49.6, 13641.0], [49.7, 13641.0], [49.8, 13698.0], [49.9, 13698.0], [50.0, 13750.0], [50.1, 13768.0], [50.2, 13768.0], [50.3, 13787.0], [50.4, 13787.0], [50.5, 13842.0], [50.6, 13846.0], [50.7, 13846.0], [50.8, 14181.0], [50.9, 14181.0], [51.0, 14268.0], [51.1, 14275.0], [51.2, 14275.0], [51.3, 14324.0], [51.4, 14324.0], [51.5, 14343.0], [51.6, 14343.0], [51.7, 14369.0], [51.8, 14421.0], [51.9, 14421.0], [52.0, 14421.0], [52.1, 14421.0], [52.2, 14548.0], [52.3, 14654.0], [52.4, 14654.0], [52.5, 14686.0], [52.6, 14686.0], [52.7, 14775.0], [52.8, 14783.0], [52.9, 14783.0], [53.0, 14785.0], [53.1, 14785.0], [53.2, 14842.0], [53.3, 14857.0], [53.4, 14857.0], [53.5, 15155.0], [53.6, 15155.0], [53.7, 15344.0], [53.8, 15344.0], [53.9, 15546.0], [54.0, 15608.0], [54.1, 15608.0], [54.2, 15619.0], [54.3, 15619.0], [54.4, 15703.0], [54.5, 15725.0], [54.6, 15725.0], [54.7, 15744.0], [54.8, 15744.0], [54.9, 15745.0], [55.0, 15762.0], [55.1, 15762.0], [55.2, 15765.0], [55.3, 15765.0], [55.4, 15981.0], [55.5, 16085.0], [55.6, 16085.0], [55.7, 16193.0], [55.8, 16193.0], [55.9, 16224.0], [56.0, 16224.0], [56.1, 16291.0], [56.2, 16363.0], [56.3, 16363.0], [56.4, 16438.0], [56.5, 16438.0], [56.6, 16568.0], [56.7, 16618.0], [56.8, 16618.0], [56.9, 16640.0], [57.0, 16640.0], [57.1, 16645.0], [57.2, 16683.0], [57.3, 16683.0], [57.4, 16774.0], [57.5, 16774.0], [57.6, 16830.0], [57.7, 16846.0], [57.8, 16846.0], [57.9, 16887.0], [58.0, 16887.0], [58.1, 16887.0], [58.2, 16887.0], [58.3, 16893.0], [58.4, 16924.0], [58.5, 16924.0], [58.6, 17158.0], [58.7, 17158.0], [58.8, 17160.0], [58.9, 17231.0], [59.0, 17231.0], [59.1, 17263.0], [59.2, 17263.0], [59.3, 17291.0], [59.4, 17390.0], [59.5, 17390.0], [59.6, 17487.0], [59.7, 17487.0], [59.8, 17490.0], [59.9, 17507.0], [60.0, 17507.0], [60.1, 17575.0], [60.2, 17575.0], [60.3, 17647.0], [60.4, 17647.0], [60.5, 17730.0], [60.6, 17948.0], [60.7, 17948.0], [60.8, 17969.0], [60.9, 17969.0], [61.0, 17989.0], [61.1, 18022.0], [61.2, 18022.0], [61.3, 18027.0], [61.4, 18027.0], [61.5, 18044.0], [61.6, 18171.0], [61.7, 18171.0], [61.8, 18206.0], [61.9, 18206.0], [62.0, 18250.0], [62.1, 18588.0], [62.2, 18588.0], [62.3, 18590.0], [62.4, 18590.0], [62.5, 18600.0], [62.6, 18600.0], [62.7, 18685.0], [62.8, 18838.0], [62.9, 18838.0], [63.0, 18906.0], [63.1, 18906.0], [63.2, 18930.0], [63.3, 18964.0], [63.4, 18964.0], [63.5, 19054.0], [63.6, 19054.0], [63.7, 19058.0], [63.8, 19211.0], [63.9, 19211.0], [64.0, 19237.0], [64.1, 19237.0], [64.2, 19470.0], [64.3, 19528.0], [64.4, 19528.0], [64.5, 19545.0], [64.6, 19545.0], [64.7, 19655.0], [64.8, 19655.0], [64.9, 19655.0], [65.0, 19672.0], [65.1, 19672.0], [65.2, 19705.0], [65.3, 19705.0], [65.4, 20040.0], [65.5, 20105.0], [65.6, 20105.0], [65.7, 20106.0], [65.8, 20106.0], [65.9, 20166.0], [66.0, 20361.0], [66.1, 20361.0], [66.2, 20380.0], [66.3, 20380.0], [66.4, 20398.0], [66.5, 20407.0], [66.6, 20407.0], [66.7, 20500.0], [66.8, 20500.0], [66.9, 20583.0], [67.0, 20583.0], [67.1, 20645.0], [67.2, 20722.0], [67.3, 20722.0], [67.4, 20752.0], [67.5, 20752.0], [67.6, 20772.0], [67.7, 20791.0], [67.8, 20791.0], [67.9, 20808.0], [68.0, 20808.0], [68.1, 20894.0], [68.2, 20929.0], [68.3, 20929.0], [68.4, 20935.0], [68.5, 20935.0], [68.6, 21021.0], [68.7, 21032.0], [68.8, 21032.0], [68.9, 21122.0], [69.0, 21122.0], [69.1, 21139.0], [69.2, 21139.0], [69.3, 21153.0], [69.4, 21163.0], [69.5, 21163.0], [69.6, 21187.0], [69.7, 21187.0], [69.8, 21196.0], [69.9, 21243.0], [70.0, 21243.0], [70.1, 21345.0], [70.2, 21345.0], [70.3, 21348.0], [70.4, 21421.0], [70.5, 21421.0], [70.6, 21442.0], [70.7, 21442.0], [70.8, 21453.0], [70.9, 21477.0], [71.0, 21477.0], [71.1, 21560.0], [71.2, 21560.0], [71.3, 21561.0], [71.4, 21561.0], [71.5, 21676.0], [71.6, 21683.0], [71.7, 21683.0], [71.8, 21699.0], [71.9, 21699.0], [72.0, 21716.0], [72.1, 21767.0], [72.2, 21767.0], [72.3, 21843.0], [72.4, 21843.0], [72.5, 22114.0], [72.6, 22168.0], [72.7, 22168.0], [72.8, 22284.0], [72.9, 22284.0], [73.0, 22354.0], [73.1, 22374.0], [73.2, 22374.0], [73.3, 22423.0], [73.4, 22423.0], [73.5, 22458.0], [73.6, 22458.0], [73.7, 22537.0], [73.8, 22604.0], [73.9, 22604.0], [74.0, 22605.0], [74.1, 22605.0], [74.2, 22628.0], [74.3, 22653.0], [74.4, 22653.0], [74.5, 22670.0], [74.6, 22670.0], [74.7, 22771.0], [74.8, 22772.0], [74.9, 22772.0], [75.0, 22828.0], [75.1, 22828.0], [75.2, 22854.0], [75.3, 22915.0], [75.4, 22915.0], [75.5, 22939.0], [75.6, 22939.0], [75.7, 22957.0], [75.8, 22957.0], [75.9, 23037.0], [76.0, 23058.0], [76.1, 23058.0], [76.2, 23108.0], [76.3, 23108.0], [76.4, 23162.0], [76.5, 23175.0], [76.6, 23175.0], [76.7, 23204.0], [76.8, 23204.0], [76.9, 23402.0], [77.0, 23432.0], [77.1, 23432.0], [77.2, 23434.0], [77.3, 23434.0], [77.4, 23476.0], [77.5, 23713.0], [77.6, 23713.0], [77.7, 23838.0], [77.8, 23838.0], [77.9, 23843.0], [78.0, 23843.0], [78.1, 23855.0], [78.2, 23921.0], [78.3, 23921.0], [78.4, 23980.0], [78.5, 23980.0], [78.6, 24054.0], [78.7, 24103.0], [78.8, 24103.0], [78.9, 24107.0], [79.0, 24107.0], [79.1, 24163.0], [79.2, 24315.0], [79.3, 24315.0], [79.4, 24318.0], [79.5, 24318.0], [79.6, 24367.0], [79.7, 24401.0], [79.8, 24401.0], [79.9, 24597.0], [80.0, 24597.0], [80.1, 24625.0], [80.2, 24625.0], [80.3, 24831.0], [80.4, 24857.0], [80.5, 24857.0], [80.6, 24865.0], [80.7, 24865.0], [80.8, 24949.0], [80.9, 25079.0], [81.0, 25079.0], [81.1, 25219.0], [81.2, 25219.0], [81.3, 25465.0], [81.4, 25654.0], [81.5, 25654.0], [81.6, 25663.0], [81.7, 25663.0], [81.8, 25837.0], [81.9, 25842.0], [82.0, 25842.0], [82.1, 25874.0], [82.2, 25874.0], [82.3, 25918.0], [82.4, 25918.0], [82.5, 26085.0], [82.6, 26129.0], [82.7, 26129.0], [82.8, 26191.0], [82.9, 26191.0], [83.0, 26218.0], [83.1, 26334.0], [83.2, 26334.0], [83.3, 26375.0], [83.4, 26375.0], [83.5, 26425.0], [83.6, 26835.0], [83.7, 26835.0], [83.8, 26983.0], [83.9, 26983.0], [84.0, 27010.0], [84.1, 27100.0], [84.2, 27100.0], [84.3, 27133.0], [84.4, 27133.0], [84.5, 27173.0], [84.6, 27173.0], [84.7, 27218.0], [84.8, 27300.0], [84.9, 27300.0], [85.0, 27373.0], [85.1, 27373.0], [85.2, 27492.0], [85.3, 27553.0], [85.4, 27553.0], [85.5, 27624.0], [85.6, 27624.0], [85.7, 27678.0], [85.8, 27695.0], [85.9, 27695.0], [86.0, 27797.0], [86.1, 27797.0], [86.2, 27893.0], [86.3, 28121.0], [86.4, 28121.0], [86.5, 28145.0], [86.6, 28145.0], [86.7, 28260.0], [86.8, 28260.0], [86.9, 28481.0], [87.0, 28639.0], [87.1, 28639.0], [87.2, 28656.0], [87.3, 28656.0], [87.4, 28869.0], [87.5, 29111.0], [87.6, 29111.0], [87.7, 29189.0], [87.8, 29189.0], [87.9, 29505.0], [88.0, 29616.0], [88.1, 29616.0], [88.2, 30065.0], [88.3, 30065.0], [88.4, 30507.0], [88.5, 30594.0], [88.6, 30594.0], [88.7, 31209.0], [88.8, 31209.0], [88.9, 31228.0], [89.0, 31228.0], [89.1, 31353.0], [89.2, 31634.0], [89.3, 31634.0], [89.4, 32024.0], [89.5, 32024.0], [89.6, 32374.0], [89.7, 32376.0], [89.8, 32376.0], [89.9, 32491.0], [90.0, 32491.0], [90.1, 33144.0], [90.2, 33275.0], [90.3, 33275.0], [90.4, 33604.0], [90.5, 33604.0], [90.6, 33644.0], [90.7, 33702.0], [90.8, 33702.0], [90.9, 34226.0], [91.0, 34226.0], [91.1, 34866.0], [91.2, 34866.0], [91.3, 34892.0], [91.4, 35911.0], [91.5, 35911.0], [91.6, 36084.0], [91.7, 36084.0], [91.8, 36178.0], [91.9, 36274.0], [92.0, 36274.0], [92.1, 36793.0], [92.2, 36793.0], [92.3, 39131.0], [92.4, 39783.0], [92.5, 39783.0], [92.6, 40002.0], [92.7, 40002.0], [92.8, 41088.0], [92.9, 41714.0], [93.0, 41714.0], [93.1, 41745.0], [93.2, 41745.0], [93.3, 42165.0], [93.4, 42165.0], [93.5, 42623.0], [93.6, 43729.0], [93.7, 43729.0], [93.8, 44085.0], [93.9, 44085.0], [94.0, 44560.0], [94.1, 45556.0], [94.2, 45556.0], [94.3, 46343.0], [94.4, 46343.0], [94.5, 46745.0], [94.6, 46885.0], [94.7, 46885.0], [94.8, 46890.0], [94.9, 46890.0], [95.0, 47140.0], [95.1, 50360.0], [95.2, 50360.0], [95.3, 50418.0], [95.4, 50418.0], [95.5, 55050.0], [95.6, 55050.0], [95.7, 60128.0], [95.8, 60129.0], [95.9, 60129.0], [96.0, 60134.0], [96.1, 60134.0], [96.2, 60137.0], [96.3, 60137.0], [96.4, 60137.0], [96.5, 60144.0], [96.6, 60144.0], [96.7, 60151.0], [96.8, 60159.0], [96.9, 60159.0], [97.0, 60167.0], [97.1, 60167.0], [97.2, 60171.0], [97.3, 60175.0], [97.4, 60175.0], [97.5, 60186.0], [97.6, 60186.0], [97.7, 60198.0], [97.8, 60198.0], [97.9, 60200.0], [98.0, 60203.0], [98.1, 60203.0], [98.2, 60214.0], [98.3, 60214.0], [98.4, 60217.0], [98.5, 60246.0], [98.6, 60246.0], [98.7, 60277.0], [98.8, 60277.0], [98.9, 60281.0], [99.0, 60293.0], [99.1, 60293.0], [99.2, 60337.0], [99.3, 60337.0], [99.4, 60353.0], [99.5, 60400.0], [99.6, 60400.0], [99.7, 60408.0], [99.8, 60408.0], [99.9, 60425.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 212.0], [0.1, 212.0], [0.2, 214.0], [0.3, 214.0], [0.4, 215.0], [0.5, 215.0], [0.6, 216.0], [0.7, 216.0], [0.8, 216.0], [0.9, 216.0], [1.0, 216.0], [1.1, 217.0], [1.2, 217.0], [1.3, 217.0], [1.4, 217.0], [1.5, 217.0], [1.6, 218.0], [1.7, 218.0], [1.8, 218.0], [1.9, 218.0], [2.0, 218.0], [2.1, 218.0], [2.2, 219.0], [2.3, 219.0], [2.4, 219.0], [2.5, 219.0], [2.6, 219.0], [2.7, 219.0], [2.8, 219.0], [2.9, 219.0], [3.0, 219.0], [3.1, 220.0], [3.2, 220.0], [3.3, 220.0], [3.4, 220.0], [3.5, 220.0], [3.6, 220.0], [3.7, 220.0], [3.8, 220.0], [3.9, 221.0], [4.0, 221.0], [4.1, 221.0], [4.2, 221.0], [4.3, 222.0], [4.4, 222.0], [4.5, 222.0], [4.6, 223.0], [4.7, 223.0], [4.8, 223.0], [4.9, 224.0], [5.0, 224.0], [5.1, 226.0], [5.2, 226.0], [5.3, 226.0], [5.4, 226.0], [5.5, 226.0], [5.6, 227.0], [5.7, 227.0], [5.8, 229.0], [5.9, 229.0], [6.0, 229.0], [6.1, 230.0], [6.2, 230.0], [6.3, 231.0], [6.4, 232.0], [6.5, 232.0], [6.6, 232.0], [6.7, 232.0], [6.8, 233.0], [6.9, 233.0], [7.0, 233.0], [7.1, 233.0], [7.2, 233.0], [7.3, 233.0], [7.4, 234.0], [7.5, 234.0], [7.6, 235.0], [7.7, 235.0], [7.8, 236.0], [7.9, 240.0], [8.0, 240.0], [8.1, 241.0], [8.2, 241.0], [8.3, 242.0], [8.4, 242.0], [8.5, 243.0], [8.6, 246.0], [8.7, 246.0], [8.8, 246.0], [8.9, 246.0], [9.0, 248.0], [9.1, 252.0], [9.2, 252.0], [9.3, 254.0], [9.4, 254.0], [9.5, 254.0], [9.6, 255.0], [9.7, 255.0], [9.8, 255.0], [9.9, 255.0], [10.0, 261.0], [10.1, 261.0], [10.2, 261.0], [10.3, 267.0], [10.4, 267.0], [10.5, 267.0], [10.6, 268.0], [10.7, 268.0], [10.8, 268.0], [10.9, 268.0], [11.0, 269.0], [11.1, 274.0], [11.2, 274.0], [11.3, 276.0], [11.4, 276.0], [11.5, 277.0], [11.6, 280.0], [11.7, 280.0], [11.8, 282.0], [11.9, 282.0], [12.0, 284.0], [12.1, 284.0], [12.2, 284.0], [12.3, 285.0], [12.4, 285.0], [12.5, 286.0], [12.6, 286.0], [12.7, 287.0], [12.8, 289.0], [12.9, 289.0], [13.0, 290.0], [13.1, 290.0], [13.2, 290.0], [13.3, 290.0], [13.4, 290.0], [13.5, 291.0], [13.6, 291.0], [13.7, 292.0], [13.8, 293.0], [13.9, 293.0], [14.0, 293.0], [14.1, 293.0], [14.2, 296.0], [14.3, 296.0], [14.4, 296.0], [14.5, 297.0], [14.6, 297.0], [14.7, 297.0], [14.8, 298.0], [14.9, 298.0], [15.0, 299.0], [15.1, 299.0], [15.2, 300.0], [15.3, 301.0], [15.4, 301.0], [15.5, 301.0], [15.6, 301.0], [15.7, 302.0], [15.8, 303.0], [15.9, 303.0], [16.0, 303.0], [16.1, 303.0], [16.2, 303.0], [16.3, 303.0], [16.4, 303.0], [16.5, 303.0], [16.6, 303.0], [16.7, 303.0], [16.8, 303.0], [16.9, 303.0], [17.0, 304.0], [17.1, 304.0], [17.2, 304.0], [17.3, 304.0], [17.4, 304.0], [17.5, 304.0], [17.6, 304.0], [17.7, 304.0], [17.8, 304.0], [17.9, 304.0], [18.0, 304.0], [18.1, 304.0], [18.2, 304.0], [18.3, 304.0], [18.4, 305.0], [18.5, 305.0], [18.6, 305.0], [18.7, 305.0], [18.8, 305.0], [18.9, 305.0], [19.0, 305.0], [19.1, 305.0], [19.2, 305.0], [19.3, 305.0], [19.4, 305.0], [19.5, 305.0], [19.6, 305.0], [19.7, 305.0], [19.8, 305.0], [19.9, 305.0], [20.0, 305.0], [20.1, 305.0], [20.2, 305.0], [20.3, 305.0], [20.4, 305.0], [20.5, 305.0], [20.6, 305.0], [20.7, 305.0], [20.8, 305.0], [20.9, 305.0], [21.0, 305.0], [21.1, 305.0], [21.2, 305.0], [21.3, 305.0], [21.4, 305.0], [21.5, 305.0], [21.6, 305.0], [21.7, 305.0], [21.8, 305.0], [21.9, 305.0], [22.0, 305.0], [22.1, 305.0], [22.2, 306.0], [22.3, 306.0], [22.4, 306.0], [22.5, 306.0], [22.6, 306.0], [22.7, 306.0], [22.8, 306.0], [22.9, 306.0], [23.0, 306.0], [23.1, 306.0], [23.2, 306.0], [23.3, 306.0], [23.4, 306.0], [23.5, 306.0], [23.6, 306.0], [23.7, 306.0], [23.8, 306.0], [23.9, 306.0], [24.0, 306.0], [24.1, 306.0], [24.2, 306.0], [24.3, 306.0], [24.4, 306.0], [24.5, 306.0], [24.6, 306.0], [24.7, 306.0], [24.8, 306.0], [24.9, 306.0], [25.0, 306.0], [25.1, 306.0], [25.2, 306.0], [25.3, 306.0], [25.4, 306.0], [25.5, 306.0], [25.6, 306.0], [25.7, 306.0], [25.8, 306.0], [25.9, 306.0], [26.0, 306.0], [26.1, 306.0], [26.2, 306.0], [26.3, 306.0], [26.4, 306.0], [26.5, 306.0], [26.6, 306.0], [26.7, 306.0], [26.8, 306.0], [26.9, 306.0], [27.0, 306.0], [27.1, 306.0], [27.2, 306.0], [27.3, 306.0], [27.4, 306.0], [27.5, 306.0], [27.6, 306.0], [27.7, 306.0], [27.8, 306.0], [27.9, 306.0], [28.0, 306.0], [28.1, 306.0], [28.2, 306.0], [28.3, 306.0], [28.4, 306.0], [28.5, 306.0], [28.6, 306.0], [28.7, 306.0], [28.8, 306.0], [28.9, 306.0], [29.0, 306.0], [29.1, 306.0], [29.2, 306.0], [29.3, 306.0], [29.4, 306.0], [29.5, 306.0], [29.6, 306.0], [29.7, 306.0], [29.8, 307.0], [29.9, 307.0], [30.0, 307.0], [30.1, 307.0], [30.2, 307.0], [30.3, 307.0], [30.4, 307.0], [30.5, 307.0], [30.6, 307.0], [30.7, 307.0], [30.8, 307.0], [30.9, 307.0], [31.0, 307.0], [31.1, 307.0], [31.2, 307.0], [31.3, 307.0], [31.4, 307.0], [31.5, 307.0], [31.6, 307.0], [31.7, 307.0], [31.8, 307.0], [31.9, 307.0], [32.0, 309.0], [32.1, 309.0], [32.2, 310.0], [32.3, 310.0], [32.4, 310.0], [32.5, 311.0], [32.6, 311.0], [32.7, 311.0], [32.8, 311.0], [32.9, 311.0], [33.0, 311.0], [33.1, 311.0], [33.2, 311.0], [33.3, 311.0], [33.4, 311.0], [33.5, 312.0], [33.6, 312.0], [33.7, 312.0], [33.8, 312.0], [33.9, 312.0], [34.0, 313.0], [34.1, 313.0], [34.2, 313.0], [34.3, 313.0], [34.4, 313.0], [34.5, 313.0], [34.6, 313.0], [34.7, 313.0], [34.8, 313.0], [34.9, 313.0], [35.0, 314.0], [35.1, 314.0], [35.2, 314.0], [35.3, 314.0], [35.4, 314.0], [35.5, 314.0], [35.6, 314.0], [35.7, 314.0], [35.8, 315.0], [35.9, 315.0], [36.0, 315.0], [36.1, 315.0], [36.2, 315.0], [36.3, 315.0], [36.4, 315.0], [36.5, 315.0], [36.6, 315.0], [36.7, 316.0], [36.8, 316.0], [36.9, 316.0], [37.0, 316.0], [37.1, 316.0], [37.2, 316.0], [37.3, 316.0], [37.4, 316.0], [37.5, 316.0], [37.6, 316.0], [37.7, 317.0], [37.8, 317.0], [37.9, 317.0], [38.0, 317.0], [38.1, 317.0], [38.2, 318.0], [38.3, 318.0], [38.4, 319.0], [38.5, 319.0], [38.6, 319.0], [38.7, 319.0], [38.8, 319.0], [38.9, 320.0], [39.0, 320.0], [39.1, 320.0], [39.2, 320.0], [39.3, 320.0], [39.4, 322.0], [39.5, 322.0], [39.6, 322.0], [39.7, 323.0], [39.8, 323.0], [39.9, 323.0], [40.0, 324.0], [40.1, 324.0], [40.2, 324.0], [40.3, 324.0], [40.4, 325.0], [40.5, 325.0], [40.6, 325.0], [40.7, 326.0], [40.8, 326.0], [40.9, 329.0], [41.0, 329.0], [41.1, 330.0], [41.2, 330.0], [41.3, 330.0], [41.4, 331.0], [41.5, 331.0], [41.6, 331.0], [41.7, 332.0], [41.8, 332.0], [41.9, 334.0], [42.0, 334.0], [42.1, 334.0], [42.2, 335.0], [42.3, 335.0], [42.4, 335.0], [42.5, 335.0], [42.6, 335.0], [42.7, 336.0], [42.8, 336.0], [42.9, 336.0], [43.0, 336.0], [43.1, 336.0], [43.2, 337.0], [43.3, 337.0], [43.4, 338.0], [43.5, 338.0], [43.6, 338.0], [43.7, 338.0], [43.8, 338.0], [43.9, 339.0], [44.0, 339.0], [44.1, 339.0], [44.2, 339.0], [44.3, 339.0], [44.4, 340.0], [44.5, 340.0], [44.6, 340.0], [44.7, 340.0], [44.8, 341.0], [44.9, 343.0], [45.0, 343.0], [45.1, 343.0], [45.2, 343.0], [45.3, 343.0], [45.4, 345.0], [45.5, 345.0], [45.6, 345.0], [45.7, 345.0], [45.8, 346.0], [45.9, 346.0], [46.0, 346.0], [46.1, 346.0], [46.2, 346.0], [46.3, 348.0], [46.4, 348.0], [46.5, 348.0], [46.6, 348.0], [46.7, 348.0], [46.8, 349.0], [46.9, 351.0], [47.0, 351.0], [47.1, 352.0], [47.2, 352.0], [47.3, 352.0], [47.4, 354.0], [47.5, 354.0], [47.6, 356.0], [47.7, 356.0], [47.8, 356.0], [47.9, 357.0], [48.0, 357.0], [48.1, 358.0], [48.2, 358.0], [48.3, 361.0], [48.4, 361.0], [48.5, 362.0], [48.6, 363.0], [48.7, 363.0], [48.8, 363.0], [48.9, 363.0], [49.0, 363.0], [49.1, 365.0], [49.2, 365.0], [49.3, 366.0], [49.4, 366.0], [49.5, 366.0], [49.6, 367.0], [49.7, 367.0], [49.8, 367.0], [49.9, 367.0], [50.0, 368.0], [50.1, 370.0], [50.2, 370.0], [50.3, 373.0], [50.4, 373.0], [50.5, 373.0], [50.6, 375.0], [50.7, 375.0], [50.8, 376.0], [50.9, 376.0], [51.0, 376.0], [51.1, 376.0], [51.2, 376.0], [51.3, 377.0], [51.4, 377.0], [51.5, 378.0], [51.6, 379.0], [51.7, 379.0], [51.8, 380.0], [51.9, 380.0], [52.0, 382.0], [52.1, 382.0], [52.2, 383.0], [52.3, 383.0], [52.4, 383.0], [52.5, 385.0], [52.6, 385.0], [52.7, 386.0], [52.8, 387.0], [52.9, 387.0], [53.0, 391.0], [53.1, 391.0], [53.2, 391.0], [53.3, 393.0], [53.4, 393.0], [53.5, 393.0], [53.6, 393.0], [53.7, 393.0], [53.8, 393.0], [53.9, 393.0], [54.0, 394.0], [54.1, 394.0], [54.2, 394.0], [54.3, 396.0], [54.4, 396.0], [54.5, 396.0], [54.6, 396.0], [54.7, 396.0], [54.8, 398.0], [54.9, 398.0], [55.0, 399.0], [55.1, 399.0], [55.2, 399.0], [55.3, 399.0], [55.4, 399.0], [55.5, 400.0], [55.6, 400.0], [55.7, 401.0], [55.8, 401.0], [55.9, 401.0], [56.0, 402.0], [56.1, 402.0], [56.2, 402.0], [56.3, 402.0], [56.4, 404.0], [56.5, 404.0], [56.6, 404.0], [56.7, 404.0], [56.8, 404.0], [56.9, 404.0], [57.0, 404.0], [57.1, 404.0], [57.2, 404.0], [57.3, 404.0], [57.4, 405.0], [57.5, 405.0], [57.6, 405.0], [57.7, 405.0], [57.8, 405.0], [57.9, 405.0], [58.0, 405.0], [58.1, 405.0], [58.2, 405.0], [58.3, 405.0], [58.4, 405.0], [58.5, 405.0], [58.6, 405.0], [58.7, 405.0], [58.8, 405.0], [58.9, 405.0], [59.0, 405.0], [59.1, 405.0], [59.2, 405.0], [59.3, 405.0], [59.4, 405.0], [59.5, 406.0], [59.6, 406.0], [59.7, 406.0], [59.8, 406.0], [59.9, 406.0], [60.0, 406.0], [60.1, 406.0], [60.2, 406.0], [60.3, 406.0], [60.4, 406.0], [60.5, 406.0], [60.6, 406.0], [60.7, 406.0], [60.8, 406.0], [60.9, 406.0], [61.0, 406.0], [61.1, 406.0], [61.2, 406.0], [61.3, 406.0], [61.4, 406.0], [61.5, 406.0], [61.6, 406.0], [61.7, 406.0], [61.8, 406.0], [61.9, 406.0], [62.0, 406.0], [62.1, 406.0], [62.2, 406.0], [62.3, 406.0], [62.4, 406.0], [62.5, 406.0], [62.6, 406.0], [62.7, 406.0], [62.8, 406.0], [62.9, 406.0], [63.0, 406.0], [63.1, 406.0], [63.2, 406.0], [63.3, 406.0], [63.4, 406.0], [63.5, 406.0], [63.6, 407.0], [63.7, 407.0], [63.8, 407.0], [63.9, 407.0], [64.0, 407.0], [64.1, 407.0], [64.2, 407.0], [64.3, 407.0], [64.4, 407.0], [64.5, 407.0], [64.6, 407.0], [64.7, 407.0], [64.8, 407.0], [64.9, 407.0], [65.0, 407.0], [65.1, 407.0], [65.2, 407.0], [65.3, 407.0], [65.4, 407.0], [65.5, 407.0], [65.6, 407.0], [65.7, 407.0], [65.8, 407.0], [65.9, 407.0], [66.0, 407.0], [66.1, 407.0], [66.2, 407.0], [66.3, 407.0], [66.4, 407.0], [66.5, 407.0], [66.6, 407.0], [66.7, 407.0], [66.8, 407.0], [66.9, 407.0], [67.0, 407.0], [67.1, 407.0], [67.2, 407.0], [67.3, 407.0], [67.4, 407.0], [67.5, 407.0], [67.6, 407.0], [67.7, 407.0], [67.8, 407.0], [67.9, 407.0], [68.0, 407.0], [68.1, 407.0], [68.2, 407.0], [68.3, 407.0], [68.4, 407.0], [68.5, 407.0], [68.6, 407.0], [68.7, 407.0], [68.8, 407.0], [68.9, 407.0], [69.0, 407.0], [69.1, 407.0], [69.2, 407.0], [69.3, 407.0], [69.4, 407.0], [69.5, 407.0], [69.6, 407.0], [69.7, 407.0], [69.8, 407.0], [69.9, 407.0], [70.0, 407.0], [70.1, 407.0], [70.2, 407.0], [70.3, 407.0], [70.4, 407.0], [70.5, 408.0], [70.6, 408.0], [70.7, 408.0], [70.8, 408.0], [70.9, 408.0], [71.0, 408.0], [71.1, 408.0], [71.2, 408.0], [71.3, 408.0], [71.4, 408.0], [71.5, 408.0], [71.6, 408.0], [71.7, 408.0], [71.8, 408.0], [71.9, 408.0], [72.0, 408.0], [72.1, 408.0], [72.2, 408.0], [72.3, 408.0], [72.4, 408.0], [72.5, 408.0], [72.6, 408.0], [72.7, 408.0], [72.8, 408.0], [72.9, 408.0], [73.0, 408.0], [73.1, 408.0], [73.2, 408.0], [73.3, 408.0], [73.4, 408.0], [73.5, 408.0], [73.6, 408.0], [73.7, 408.0], [73.8, 408.0], [73.9, 408.0], [74.0, 408.0], [74.1, 408.0], [74.2, 408.0], [74.3, 408.0], [74.4, 408.0], [74.5, 408.0], [74.6, 408.0], [74.7, 408.0], [74.8, 408.0], [74.9, 408.0], [75.0, 408.0], [75.1, 408.0], [75.2, 408.0], [75.3, 408.0], [75.4, 408.0], [75.5, 408.0], [75.6, 408.0], [75.7, 408.0], [75.8, 408.0], [75.9, 408.0], [76.0, 408.0], [76.1, 408.0], [76.2, 408.0], [76.3, 408.0], [76.4, 408.0], [76.5, 408.0], [76.6, 408.0], [76.7, 408.0], [76.8, 408.0], [76.9, 408.0], [77.0, 408.0], [77.1, 408.0], [77.2, 408.0], [77.3, 408.0], [77.4, 408.0], [77.5, 408.0], [77.6, 408.0], [77.7, 408.0], [77.8, 408.0], [77.9, 408.0], [78.0, 408.0], [78.1, 408.0], [78.2, 408.0], [78.3, 408.0], [78.4, 408.0], [78.5, 408.0], [78.6, 408.0], [78.7, 408.0], [78.8, 408.0], [78.9, 408.0], [79.0, 408.0], [79.1, 408.0], [79.2, 408.0], [79.3, 408.0], [79.4, 408.0], [79.5, 408.0], [79.6, 408.0], [79.7, 408.0], [79.8, 408.0], [79.9, 408.0], [80.0, 408.0], [80.1, 408.0], [80.2, 408.0], [80.3, 408.0], [80.4, 408.0], [80.5, 408.0], [80.6, 408.0], [80.7, 408.0], [80.8, 408.0], [80.9, 408.0], [81.0, 408.0], [81.1, 408.0], [81.2, 408.0], [81.3, 408.0], [81.4, 408.0], [81.5, 408.0], [81.6, 408.0], [81.7, 408.0], [81.8, 408.0], [81.9, 408.0], [82.0, 408.0], [82.1, 408.0], [82.2, 408.0], [82.3, 408.0], [82.4, 408.0], [82.5, 408.0], [82.6, 408.0], [82.7, 408.0], [82.8, 408.0], [82.9, 408.0], [83.0, 408.0], [83.1, 408.0], [83.2, 408.0], [83.3, 408.0], [83.4, 408.0], [83.5, 408.0], [83.6, 408.0], [83.7, 408.0], [83.8, 408.0], [83.9, 408.0], [84.0, 408.0], [84.1, 408.0], [84.2, 408.0], [84.3, 408.0], [84.4, 408.0], [84.5, 408.0], [84.6, 408.0], [84.7, 408.0], [84.8, 408.0], [84.9, 408.0], [85.0, 408.0], [85.1, 408.0], [85.2, 408.0], [85.3, 408.0], [85.4, 408.0], [85.5, 408.0], [85.6, 408.0], [85.7, 408.0], [85.8, 408.0], [85.9, 408.0], [86.0, 408.0], [86.1, 408.0], [86.2, 408.0], [86.3, 408.0], [86.4, 408.0], [86.5, 408.0], [86.6, 408.0], [86.7, 408.0], [86.8, 408.0], [86.9, 409.0], [87.0, 409.0], [87.1, 409.0], [87.2, 409.0], [87.3, 409.0], [87.4, 409.0], [87.5, 409.0], [87.6, 409.0], [87.7, 409.0], [87.8, 409.0], [87.9, 409.0], [88.0, 409.0], [88.1, 409.0], [88.2, 409.0], [88.3, 409.0], [88.4, 409.0], [88.5, 409.0], [88.6, 409.0], [88.7, 409.0], [88.8, 409.0], [88.9, 409.0], [89.0, 409.0], [89.1, 409.0], [89.2, 409.0], [89.3, 409.0], [89.4, 409.0], [89.5, 409.0], [89.6, 409.0], [89.7, 409.0], [89.8, 409.0], [89.9, 409.0], [90.0, 409.0], [90.1, 409.0], [90.2, 409.0], [90.3, 409.0], [90.4, 409.0], [90.5, 409.0], [90.6, 409.0], [90.7, 409.0], [90.8, 409.0], [90.9, 409.0], [91.0, 409.0], [91.1, 409.0], [91.2, 409.0], [91.3, 409.0], [91.4, 409.0], [91.5, 409.0], [91.6, 409.0], [91.7, 409.0], [91.8, 409.0], [91.9, 409.0], [92.0, 409.0], [92.1, 409.0], [92.2, 409.0], [92.3, 409.0], [92.4, 409.0], [92.5, 409.0], [92.6, 409.0], [92.7, 409.0], [92.8, 409.0], [92.9, 409.0], [93.0, 410.0], [93.1, 410.0], [93.2, 410.0], [93.3, 410.0], [93.4, 410.0], [93.5, 410.0], [93.6, 410.0], [93.7, 410.0], [93.8, 410.0], [93.9, 410.0], [94.0, 410.0], [94.1, 410.0], [94.2, 410.0], [94.3, 410.0], [94.4, 410.0], [94.5, 410.0], [94.6, 410.0], [94.7, 411.0], [94.8, 413.0], [94.9, 413.0], [95.0, 413.0], [95.1, 413.0], [95.2, 416.0], [95.3, 419.0], [95.4, 419.0], [95.5, 420.0], [95.6, 420.0], [95.7, 420.0], [95.8, 420.0], [95.9, 420.0], [96.0, 420.0], [96.1, 420.0], [96.2, 420.0], [96.3, 420.0], [96.4, 420.0], [96.5, 426.0], [96.6, 426.0], [96.7, 426.0], [96.8, 426.0], [96.9, 456.0], [97.0, 510.0], [97.1, 510.0], [97.2, 511.0], [97.3, 511.0], [97.4, 535.0], [97.5, 612.0], [97.6, 612.0], [97.7, 613.0], [97.8, 613.0], [97.9, 613.0], [98.0, 1327.0], [98.1, 1327.0], [98.2, 1534.0], [98.3, 1534.0], [98.4, 3377.0], [98.5, 5718.0], [98.6, 5718.0], [98.7, 5719.0], [98.8, 5719.0], [98.9, 6320.0], [99.0, 23918.0], [99.1, 23918.0], [99.2, 60316.0], [99.3, 60316.0], [99.4, 60372.0], [99.5, 60403.0], [99.6, 60403.0], [99.7, 60419.0], [99.8, 60419.0], [99.9, 65739.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 247.0, "series": [{"data": [[36100.0, 1.0], [36500.0, 1.0], [35300.0, 1.0], [40100.0, 1.0], [42500.0, 1.0], [42900.0, 1.0], [44900.0, 1.0], [48900.0, 1.0], [60500.0, 13.0], [300.0, 13.0], [400.0, 41.0], [500.0, 59.0], [600.0, 8.0], [700.0, 2.0], [3100.0, 1.0], [81700.0, 1.0], [5200.0, 1.0], [5500.0, 3.0], [5600.0, 2.0], [5400.0, 1.0], [5700.0, 3.0], [5800.0, 1.0], [6100.0, 3.0], [5900.0, 3.0], [6000.0, 1.0], [6300.0, 2.0], [6200.0, 1.0], [6500.0, 2.0], [6600.0, 3.0], [6700.0, 1.0], [6800.0, 2.0], [6900.0, 2.0], [7000.0, 3.0], [7200.0, 2.0], [7300.0, 1.0], [7600.0, 3.0], [7500.0, 1.0], [7800.0, 1.0], [7900.0, 2.0], [7700.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8700.0, 1.0], [8300.0, 1.0], [8500.0, 1.0], [8600.0, 1.0], [8400.0, 1.0], [8800.0, 1.0], [9200.0, 3.0], [8900.0, 1.0], [9000.0, 1.0], [9400.0, 1.0], [9300.0, 6.0], [9500.0, 2.0], [9700.0, 3.0], [9600.0, 3.0], [10100.0, 5.0], [9900.0, 5.0], [10200.0, 3.0], [9800.0, 1.0], [10000.0, 3.0], [10600.0, 2.0], [10300.0, 1.0], [10500.0, 1.0], [10700.0, 1.0], [10400.0, 1.0], [11200.0, 5.0], [11100.0, 2.0], [10900.0, 4.0], [11000.0, 6.0], [11500.0, 1.0], [11600.0, 5.0], [11700.0, 3.0], [11400.0, 3.0], [11900.0, 3.0], [12100.0, 4.0], [11800.0, 3.0], [12200.0, 2.0], [12300.0, 1.0], [12500.0, 2.0], [12700.0, 2.0], [12400.0, 1.0], [12600.0, 2.0], [12800.0, 3.0], [12900.0, 1.0], [13200.0, 3.0], [13000.0, 3.0], [13100.0, 2.0], [13700.0, 2.0], [13800.0, 2.0], [13500.0, 1.0], [13600.0, 2.0], [13400.0, 2.0], [13900.0, 2.0], [14100.0, 5.0], [14200.0, 1.0], [14000.0, 1.0], [14700.0, 2.0], [14600.0, 3.0], [14500.0, 2.0], [14800.0, 2.0], [14900.0, 1.0], [15100.0, 4.0], [15000.0, 2.0], [15700.0, 1.0], [15800.0, 1.0], [15500.0, 1.0], [16100.0, 2.0], [16000.0, 4.0], [15900.0, 2.0], [16600.0, 3.0], [16800.0, 3.0], [17400.0, 1.0], [17000.0, 4.0], [16400.0, 1.0], [17200.0, 2.0], [18000.0, 2.0], [17600.0, 3.0], [18400.0, 2.0], [17800.0, 2.0], [18200.0, 1.0], [19200.0, 3.0], [19400.0, 2.0], [19000.0, 1.0], [18600.0, 2.0], [18800.0, 1.0], [20000.0, 2.0], [20400.0, 2.0], [19600.0, 1.0], [19800.0, 1.0], [21400.0, 5.0], [21200.0, 4.0], [20800.0, 3.0], [20600.0, 1.0], [21000.0, 1.0], [21800.0, 3.0], [21600.0, 4.0], [22000.0, 2.0], [22200.0, 1.0], [23400.0, 3.0], [23000.0, 4.0], [22800.0, 3.0], [23200.0, 4.0], [23800.0, 3.0], [24000.0, 3.0], [24200.0, 2.0], [24400.0, 2.0], [25200.0, 1.0], [25400.0, 1.0], [24600.0, 1.0], [25000.0, 1.0], [26200.0, 2.0], [26600.0, 2.0], [26000.0, 2.0], [25800.0, 1.0], [26400.0, 1.0], [27200.0, 2.0], [27600.0, 1.0], [26800.0, 1.0], [27400.0, 3.0], [27800.0, 1.0], [28000.0, 1.0], [28600.0, 1.0], [29000.0, 1.0], [29400.0, 1.0], [28800.0, 1.0], [30800.0, 1.0], [32400.0, 1.0], [32800.0, 1.0], [34400.0, 1.0], [33600.0, 1.0], [34000.0, 1.0], [36400.0, 1.0], [35200.0, 1.0], [40400.0, 1.0], [42000.0, 1.0], [44400.0, 1.0], [47200.0, 1.0], [50800.0, 1.0], [50000.0, 1.0], [60400.0, 3.0], [33900.0, 1.0], [33500.0, 1.0], [37100.0, 1.0], [39500.0, 1.0], [46700.0, 1.0], [47100.0, 1.0], [50700.0, 1.0], [60700.0, 2.0], [60300.0, 2.0], [61900.0, 1.0], [66100.0, 1.0], [17100.0, 4.0], [17300.0, 1.0], [16500.0, 1.0], [18300.0, 4.0], [17700.0, 2.0], [17500.0, 1.0], [18900.0, 1.0], [19300.0, 1.0], [19900.0, 4.0], [20100.0, 1.0], [19500.0, 1.0], [21100.0, 3.0], [20500.0, 2.0], [20900.0, 1.0], [21300.0, 2.0], [20700.0, 1.0], [21500.0, 1.0], [21900.0, 3.0], [21700.0, 2.0], [22500.0, 3.0], [22100.0, 1.0], [22700.0, 3.0], [23100.0, 3.0], [23300.0, 1.0], [23500.0, 2.0], [24100.0, 1.0], [23700.0, 1.0], [24300.0, 1.0], [24500.0, 2.0], [25100.0, 2.0], [25500.0, 1.0], [24900.0, 1.0], [25300.0, 1.0], [24700.0, 3.0], [26300.0, 1.0], [26500.0, 3.0], [26100.0, 1.0], [27500.0, 1.0], [27300.0, 1.0], [27900.0, 1.0], [28100.0, 2.0], [28500.0, 2.0], [27700.0, 2.0], [28300.0, 1.0], [28900.0, 1.0], [29100.0, 1.0], [29500.0, 1.0], [29900.0, 2.0], [30300.0, 1.0], [31500.0, 2.0], [31700.0, 1.0], [30900.0, 1.0], [31900.0, 1.0], [32700.0, 2.0], [33800.0, 1.0], [36200.0, 1.0], [41400.0, 1.0], [47400.0, 3.0], [55400.0, 1.0], [60600.0, 4.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 111.0], [33700.0, 1.0], [36100.0, 1.0], [39700.0, 1.0], [42100.0, 1.0], [41700.0, 2.0], [44500.0, 1.0], [43700.0, 1.0], [200.0, 13.0], [60100.0, 13.0], [2800.0, 1.0], [4800.0, 1.0], [5100.0, 3.0], [5200.0, 3.0], [5300.0, 2.0], [5600.0, 2.0], [5400.0, 1.0], [5500.0, 2.0], [5700.0, 3.0], [5800.0, 2.0], [6000.0, 2.0], [6100.0, 1.0], [6200.0, 3.0], [6300.0, 1.0], [6500.0, 3.0], [6400.0, 1.0], [6600.0, 3.0], [6700.0, 1.0], [6900.0, 2.0], [7100.0, 1.0], [7200.0, 3.0], [7300.0, 2.0], [7400.0, 1.0], [7600.0, 2.0], [7700.0, 2.0], [7900.0, 1.0], [8100.0, 2.0], [8500.0, 2.0], [8300.0, 1.0], [8200.0, 1.0], [8600.0, 1.0], [9100.0, 2.0], [8800.0, 3.0], [9000.0, 2.0], [8900.0, 4.0], [9200.0, 3.0], [9600.0, 3.0], [9700.0, 3.0], [9400.0, 2.0], [9300.0, 2.0], [9500.0, 2.0], [10200.0, 1.0], [9800.0, 9.0], [10100.0, 3.0], [9900.0, 1.0], [10700.0, 5.0], [10400.0, 2.0], [10600.0, 3.0], [10500.0, 1.0], [11200.0, 6.0], [10900.0, 5.0], [10800.0, 2.0], [11000.0, 2.0], [11100.0, 1.0], [11500.0, 4.0], [11400.0, 2.0], [11700.0, 1.0], [11300.0, 2.0], [11600.0, 1.0], [12000.0, 1.0], [11800.0, 5.0], [12100.0, 2.0], [12200.0, 2.0], [12400.0, 3.0], [12500.0, 1.0], [12700.0, 3.0], [12600.0, 3.0], [12300.0, 2.0], [13300.0, 2.0], [13000.0, 2.0], [13200.0, 2.0], [12900.0, 2.0], [12800.0, 1.0], [13500.0, 3.0], [13700.0, 3.0], [13400.0, 2.0], [13800.0, 2.0], [13600.0, 2.0], [14300.0, 3.0], [14100.0, 1.0], [14200.0, 2.0], [14400.0, 2.0], [14500.0, 1.0], [14800.0, 2.0], [14700.0, 3.0], [14600.0, 2.0], [15300.0, 1.0], [15100.0, 1.0], [15700.0, 6.0], [15600.0, 2.0], [15500.0, 1.0], [16100.0, 1.0], [15900.0, 1.0], [16200.0, 2.0], [16000.0, 1.0], [16300.0, 1.0], [16400.0, 1.0], [16800.0, 5.0], [17200.0, 3.0], [16600.0, 4.0], [17400.0, 2.0], [18000.0, 3.0], [17600.0, 1.0], [18200.0, 2.0], [19000.0, 2.0], [18800.0, 1.0], [19200.0, 2.0], [18600.0, 2.0], [19400.0, 1.0], [20400.0, 1.0], [19600.0, 3.0], [20000.0, 1.0], [21400.0, 4.0], [21000.0, 2.0], [21200.0, 1.0], [20800.0, 2.0], [20600.0, 1.0], [21600.0, 3.0], [21800.0, 1.0], [22400.0, 2.0], [22200.0, 1.0], [23400.0, 4.0], [23000.0, 2.0], [22600.0, 5.0], [23200.0, 1.0], [22800.0, 2.0], [23800.0, 3.0], [24000.0, 1.0], [24400.0, 1.0], [24800.0, 3.0], [25200.0, 1.0], [24600.0, 1.0], [25000.0, 1.0], [25400.0, 1.0], [25800.0, 3.0], [26200.0, 1.0], [26400.0, 1.0], [25600.0, 2.0], [26000.0, 1.0], [27600.0, 3.0], [27200.0, 1.0], [26800.0, 1.0], [27400.0, 1.0], [27000.0, 1.0], [28600.0, 2.0], [28200.0, 1.0], [27800.0, 1.0], [28400.0, 1.0], [29600.0, 1.0], [28800.0, 1.0], [30000.0, 1.0], [31200.0, 2.0], [31600.0, 1.0], [32000.0, 1.0], [32400.0, 1.0], [33600.0, 2.0], [33200.0, 1.0], [34800.0, 2.0], [36000.0, 1.0], [40000.0, 1.0], [44000.0, 1.0], [46800.0, 2.0], [50400.0, 1.0], [60400.0, 3.0], [33100.0, 1.0], [35900.0, 1.0], [36700.0, 1.0], [39100.0, 1.0], [46300.0, 1.0], [47100.0, 1.0], [45500.0, 1.0], [46700.0, 1.0], [50300.0, 1.0], [60300.0, 2.0], [16500.0, 1.0], [17100.0, 2.0], [17300.0, 1.0], [16700.0, 1.0], [16900.0, 1.0], [17700.0, 1.0], [18100.0, 1.0], [17900.0, 3.0], [17500.0, 2.0], [18900.0, 3.0], [18500.0, 2.0], [20100.0, 3.0], [19500.0, 2.0], [20300.0, 3.0], [19700.0, 1.0], [20700.0, 4.0], [21500.0, 2.0], [21100.0, 6.0], [20500.0, 2.0], [20900.0, 2.0], [21300.0, 2.0], [22300.0, 2.0], [22500.0, 1.0], [22100.0, 2.0], [21700.0, 2.0], [22700.0, 2.0], [23100.0, 3.0], [22900.0, 3.0], [23900.0, 2.0], [24300.0, 3.0], [24100.0, 3.0], [24500.0, 1.0], [23700.0, 1.0], [24900.0, 1.0], [25900.0, 1.0], [26300.0, 2.0], [26100.0, 2.0], [27500.0, 1.0], [27300.0, 2.0], [26900.0, 1.0], [27100.0, 3.0], [27700.0, 1.0], [28100.0, 2.0], [29100.0, 2.0], [29500.0, 1.0], [30500.0, 2.0], [31300.0, 1.0], [32300.0, 2.0], [34200.0, 1.0], [36200.0, 1.0], [41000.0, 1.0], [42600.0, 1.0], [55000.0, 1.0], [60200.0, 8.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[600.0, 3.0], [200.0, 90.0], [3300.0, 1.0], [60300.0, 2.0], [60400.0, 2.0], [65700.0, 1.0], [300.0, 240.0], [1300.0, 1.0], [5700.0, 2.0], [23900.0, 1.0], [1500.0, 1.0], [6300.0, 1.0], [400.0, 247.0], [500.0, 3.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 81700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 461.0, "series": [{"data": [[0.0, 461.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 427.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 292.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.68526548E12, "maxY": 24.78313253012048, "series": [{"data": [[1.68526626E12, 24.13281250000001], [1.6852656E12, 5.0], [1.68526566E12, 6.102040816326528], [1.68526596E12, 15.0], [1.68526602E12, 15.654545454545454], [1.68526632E12, 24.78313253012048], [1.68526638E12, 12.07894736842105], [1.68526572E12, 9.347826086956523], [1.68526578E12, 10.0], [1.68526608E12, 19.483660130718953], [1.68526614E12, 20.0], [1.68526548E12, 2.0], [1.68526554E12, 4.7142857142857135], [1.68526584E12, 10.918238993710688], [1.6852659E12, 14.459183673469397], [1.6852662E12, 21.189024390243905]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68526638E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 242.09090909090912, "minX": 1.0, "maxY": 35188.11111111112, "series": [{"data": [[2.0, 7821.0], [8.0, 9615.5], [9.0, 9877.0], [10.0, 14912.192307692305], [11.0, 10458.8], [12.0, 12229.0], [13.0, 10587.5], [14.0, 9624.866666666667], [15.0, 11534.906976744187], [1.0, 33857.5], [4.0, 12240.0], [16.0, 13425.5], [17.0, 12731.800000000001], [18.0, 22925.750000000004], [19.0, 22080.666666666668], [5.0, 19238.575757575763], [20.0, 20772.76635514019], [21.0, 27376.625], [22.0, 30732.894736842103], [23.0, 6747.227272727272], [6.0, 12364.333333333332], [24.0, 12751.090909090908], [25.0, 35188.11111111112], [7.0, 6485.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[15.587140439932318, 16889.50423011845]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 7539.0], [8.0, 9242.4], [9.0, 9407.888888888889], [10.0, 13394.551282051281], [11.0, 10105.4], [12.0, 11864.187500000002], [13.0, 10264.785714285714], [14.0, 9263.866666666667], [15.0, 11194.511627906975], [1.0, 33473.0], [4.0, 11904.333333333334], [16.0, 13079.9], [17.0, 12363.799999999997], [18.0, 21856.75], [19.0, 21708.333333333332], [5.0, 18688.363636363643], [20.0, 20422.10280373833], [21.0, 27022.125], [22.0, 30202.263157894733], [23.0, 6425.045454545454], [6.0, 12008.5], [24.0, 12417.090909090908], [25.0, 34847.48888888888], [7.0, 6120.1]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[15.587140439932318, 16350.03214890017]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 20322.333333333332], [3.0, 15356.5], [4.0, 12384.0], [5.0, 388.93939393939394], [6.0, 390.0], [7.0, 5338.833333333334], [8.0, 364.44444444444446], [9.0, 350.4], [10.0, 1513.6794871794878], [11.0, 353.77777777777777], [12.0, 344.75], [13.0, 363.8571428571429], [14.0, 344.3125], [15.0, 338.58461538461546], [1.0, 363.0], [16.0, 367.99999999999994], [17.0, 363.09090909090907], [18.0, 345.5], [19.0, 343.57142857142856], [20.0, 355.51401869158883], [21.0, 341.62500000000006], [22.0, 386.6842105263158], [23.0, 242.09090909090912], [24.0, 358.3], [25.0, 872.1190476190476]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[15.373109243697472, 941.7445378151255]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 329.0, "minX": 1.68526548E12, "maxY": 8885.3, "series": [{"data": [[1.68526626E12, 2472.4], [1.6852656E12, 733.8333333333334], [1.68526566E12, 1483.1833333333334], [1.68526596E12, 3729.25], [1.68526602E12, 4108.65], [1.68526632E12, 1501.1], [1.68526638E12, 433.2], [1.68526572E12, 1178.45], [1.68526578E12, 2005.3833333333334], [1.68526608E12, 3815.116666666667], [1.68526614E12, 3632.0666666666666], [1.68526548E12, 329.0], [1.68526554E12, 879.7833333333333], [1.68526584E12, 3126.4333333333334], [1.6852659E12, 3431.1666666666665], [1.6852662E12, 3212.4666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68526626E12, 5946.183333333333], [1.6852656E12, 1450.7166666666667], [1.68526566E12, 4681.316666666667], [1.68526596E12, 8208.166666666666], [1.68526602E12, 7461.566666666667], [1.68526632E12, 4845.666666666667], [1.68526638E12, 2622.35], [1.68526572E12, 4426.583333333333], [1.68526578E12, 4756.633333333333], [1.68526608E12, 7112.233333333334], [1.68526614E12, 7195.366666666667], [1.68526548E12, 333.0], [1.68526554E12, 1677.1], [1.68526584E12, 7711.233333333334], [1.6852659E12, 8885.3], [1.6852662E12, 7769.366666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68526638E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 321.1111111111111, "minX": 1.68526548E12, "maxY": 60377.5, "series": [{"data": [[1.68526626E12, 17136.871794871793], [1.6852656E12, 21220.0], [1.68526566E12, 8798.34375], [1.68526596E12, 13698.543859649124], [1.68526602E12, 11814.735849056604], [1.68526632E12, 42470.379310344826], [1.68526638E12, 54766.6875], [1.68526572E12, 13269.24242424242], [1.68526578E12, 14286.500000000002], [1.68526608E12, 18434.04081632654], [1.68526614E12, 19878.877551020407], [1.68526548E12, 7568.333333333333], [1.68526554E12, 15547.363636363636], [1.68526584E12, 8527.962264150945], [1.6852659E12, 8076.365079365079], [1.6852662E12, 22508.61016949153]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68526626E12, 11528.022727272728], [1.6852656E12, 21000.2], [1.68526566E12, 9016.125], [1.68526596E12, 13082.75], [1.68526602E12, 11610.109090909087], [1.68526632E12, 43112.933333333334], [1.68526638E12, 53213.888888888876], [1.68526572E12, 13040.8], [1.68526578E12, 10585.000000000002], [1.68526608E12, 17705.725490196077], [1.68526614E12, 19529.20408163265], [1.68526548E12, 7259.333333333333], [1.68526554E12, 15182.454545454546], [1.68526584E12, 9050.48076923077], [1.6852659E12, 7535.246153846155], [1.6852662E12, 24989.254901960783]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68526626E12, 321.1111111111111], [1.6852656E12, 399.40000000000003], [1.68526566E12, 364.9411764705882], [1.68526596E12, 331.9642857142857], [1.68526602E12, 354.1052631578948], [1.68526632E12, 1248.0833333333335], [1.68526638E12, 60377.5], [1.68526572E12, 409.34482758620686], [1.68526578E12, 2697.9736842105267], [1.68526608E12, 333.188679245283], [1.68526614E12, 366.02], [1.68526548E12, 322.3333333333333], [1.68526554E12, 387.46153846153845], [1.68526584E12, 350.1666666666667], [1.6852659E12, 346.67647058823536], [1.6852662E12, 359.99999999999983]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68526638E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 318.6666666666667, "minX": 1.68526548E12, "maxY": 60377.5, "series": [{"data": [[1.68526626E12, 17136.153846153848], [1.6852656E12, 21219.727272727272], [1.68526566E12, 8798.0], [1.68526596E12, 13698.263157894735], [1.68526602E12, 11814.641509433965], [1.68526632E12, 42469.72413793103], [1.68526638E12, 54766.6875], [1.68526572E12, 13268.939393939396], [1.68526578E12, 14280.235294117647], [1.68526608E12, 18433.755102040806], [1.68526614E12, 19877.408163265307], [1.68526548E12, 7561.333333333333], [1.68526554E12, 15547.181818181818], [1.68526584E12, 8527.641509433963], [1.6852659E12, 8076.1587301587315], [1.6852662E12, 22508.474576271186]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68526626E12, 11527.522727272728], [1.6852656E12, 21000.0], [1.68526566E12, 9015.96875], [1.68526596E12, 13082.589285714286], [1.68526602E12, 11610.054545454543], [1.68526632E12, 43112.833333333336], [1.68526638E12, 53213.833333333336], [1.68526572E12, 13040.566666666666], [1.68526578E12, 10578.911764705883], [1.68526608E12, 17705.549019607843], [1.68526614E12, 19529.102040816324], [1.68526548E12, 7259.333333333333], [1.68526554E12, 15182.363636363638], [1.68526584E12, 9050.365384615383], [1.6852659E12, 7535.092307692308], [1.6852662E12, 24989.21568627451]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68526626E12, 320.66666666666663], [1.6852656E12, 399.2], [1.68526566E12, 364.7941176470588], [1.68526596E12, 331.8392857142856], [1.68526602E12, 354.0877192982457], [1.68526632E12, 1248.0833333333335], [1.68526638E12, 60377.5], [1.68526572E12, 409.2758620689655], [1.68526578E12, 2697.7894736842104], [1.68526608E12, 333.0943396226415], [1.68526614E12, 364.6200000000001], [1.68526548E12, 318.6666666666667], [1.68526554E12, 387.46153846153845], [1.68526584E12, 349.9814814814815], [1.6852659E12, 346.60294117647055], [1.6852662E12, 359.92592592592587]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68526638E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68526548E12, "maxY": 2818.6470588235293, "series": [{"data": [[1.68526626E12, 153.35897435897436], [1.6852656E12, 190.9090909090909], [1.68526566E12, 175.53125], [1.68526596E12, 164.36842105263162], [1.68526602E12, 161.20754716981125], [1.68526632E12, 163.6206896551724], [1.68526638E12, 164.0], [1.68526572E12, 175.45454545454547], [1.68526578E12, 2818.6470588235293], [1.68526608E12, 161.97959183673464], [1.68526614E12, 169.6734693877551], [1.68526548E12, 135.0], [1.68526554E12, 176.63636363636363], [1.68526584E12, 175.71698113207543], [1.6852659E12, 167.82539682539687], [1.6852662E12, 177.06779661016947]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68526626E12, 0.0], [1.6852656E12, 0.0], [1.68526566E12, 0.0], [1.68526596E12, 0.0], [1.68526602E12, 0.0], [1.68526632E12, 0.0], [1.68526638E12, 0.0], [1.68526572E12, 0.0], [1.68526578E12, 0.0], [1.68526608E12, 0.0], [1.68526614E12, 0.0], [1.68526548E12, 0.0], [1.68526554E12, 0.0], [1.68526584E12, 3.0576923076923075], [1.6852659E12, 0.0], [1.6852662E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68526626E12, 148.44444444444449], [1.6852656E12, 194.0], [1.68526566E12, 167.11764705882354], [1.68526596E12, 157.66071428571425], [1.68526602E12, 166.4912280701754], [1.68526632E12, 167.45833333333331], [1.68526638E12, 164.0], [1.68526572E12, 212.0], [1.68526578E12, 2510.1578947368425], [1.68526608E12, 159.52830188679252], [1.68526614E12, 174.83999999999997], [1.68526548E12, 152.5], [1.68526554E12, 187.00000000000003], [1.68526584E12, 175.0555555555555], [1.6852659E12, 170.0294117647059], [1.6852662E12, 178.61111111111106]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68526638E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 215.0, "minX": 1.68526548E12, "maxY": 65739.0, "series": [{"data": [[1.68526626E12, 44560.0], [1.6852656E12, 23434.0], [1.68526566E12, 23037.0], [1.68526596E12, 27624.0], [1.68526602E12, 18022.0], [1.68526632E12, 32376.0], [1.68526638E12, 46885.0], [1.68526572E12, 33604.0], [1.68526578E12, 65739.0], [1.68526608E12, 34226.0], [1.68526614E12, 36178.0], [1.68526548E12, 8560.0], [1.68526554E12, 21032.0], [1.68526584E12, 23204.0], [1.6852659E12, 27678.0], [1.6852662E12, 46890.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68526626E12, 27137.0], [1.6852656E12, 23029.4], [1.68526566E12, 21843.0], [1.68526596E12, 22919.8], [1.68526602E12, 15043.400000000001], [1.68526632E12, 28670.000000000004], [1.68526638E12, 46885.0], [1.68526572E12, 32339.0], [1.68526578E12, 23839.0], [1.68526608E12, 26605.0], [1.68526614E12, 28260.0], [1.68526548E12, 8560.0], [1.68526554E12, 20413.5], [1.68526584E12, 19083.1], [1.6852659E12, 19805.5], [1.6852662E12, 24106.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68526626E12, 44560.0], [1.6852656E12, 23434.0], [1.68526566E12, 23037.0], [1.68526596E12, 27624.0], [1.68526602E12, 17952.45], [1.68526632E12, 32376.0], [1.68526638E12, 46885.0], [1.68526572E12, 33604.0], [1.68526578E12, 65739.0], [1.68526608E12, 34196.9], [1.68526614E12, 36178.0], [1.68526548E12, 8560.0], [1.68526554E12, 21032.0], [1.68526584E12, 23204.0], [1.6852659E12, 27678.0], [1.6852662E12, 46890.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68526626E12, 36334.19999999998], [1.6852656E12, 23415.2], [1.68526566E12, 22853.5], [1.68526596E12, 24649.0], [1.68526602E12, 16456.049999999996], [1.68526632E12, 29935.649999999994], [1.68526638E12, 46885.0], [1.68526572E12, 33542.5], [1.68526578E12, 25434.599999999995], [1.68526608E12, 30570.75], [1.68526614E12, 33275.0], [1.68526548E12, 8560.0], [1.68526554E12, 20954.5], [1.68526584E12, 21514.49999999999], [1.6852659E12, 24005.299999999992], [1.6852662E12, 36204.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68526626E12, 219.0], [1.6852656E12, 303.0], [1.68526566E12, 291.0], [1.68526596E12, 216.0], [1.68526602E12, 220.0], [1.68526632E12, 277.0], [1.68526638E12, 28145.0], [1.68526572E12, 248.0], [1.68526578E12, 280.0], [1.68526608E12, 217.0], [1.68526614E12, 219.0], [1.68526548E12, 268.0], [1.68526554E12, 309.0], [1.68526584E12, 219.0], [1.6852659E12, 220.0], [1.6852662E12, 215.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68526626E12, 408.0], [1.6852656E12, 8429.0], [1.68526566E12, 11217.0], [1.68526596E12, 5208.0], [1.68526602E12, 421.0], [1.68526632E12, 561.5], [1.68526638E12, 43729.0], [1.68526572E12, 26735.5], [1.68526578E12, 419.0], [1.68526608E12, 410.0], [1.68526614E12, 511.0], [1.68526548E12, 363.0], [1.68526554E12, 407.0], [1.68526584E12, 411.0], [1.6852659E12, 408.0], [1.6852662E12, 409.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68526638E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 194.5, "minX": 1.0, "maxY": 42899.5, "series": [{"data": [[1.0, 419.0], [2.0, 408.5], [4.0, 2923.0], [8.0, 9554.5], [17.0, 408.0], [9.0, 393.0], [10.0, 9663.0], [5.0, 7901.5], [6.0, 409.5], [3.0, 409.0], [7.0, 6791.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 400.5], [4.0, 210.0], [2.0, 304.0], [8.0, 275.5], [17.0, 408.0], [9.0, 42899.5], [5.0, 310.0], [3.0, 212.0], [6.0, 194.5], [7.0, 195.5], [14.0, 24891.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 194.5, "minX": 1.0, "maxY": 42899.0, "series": [{"data": [[1.0, 419.0], [2.0, 408.5], [4.0, 2922.5], [8.0, 9554.5], [17.0, 408.0], [9.0, 393.0], [10.0, 9663.0], [5.0, 7901.5], [6.0, 409.5], [3.0, 409.0], [7.0, 6791.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 400.5], [4.0, 210.0], [2.0, 304.0], [8.0, 275.0], [17.0, 408.0], [9.0, 42899.0], [5.0, 310.0], [3.0, 212.0], [6.0, 194.5], [7.0, 195.0], [14.0, 24891.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.68526548E12, "maxY": 2.3, "series": [{"data": [[1.68526626E12, 1.7333333333333334], [1.6852656E12, 0.3333333333333333], [1.68526566E12, 1.0833333333333333], [1.68526596E12, 1.85], [1.68526602E12, 1.95], [1.68526632E12, 0.8833333333333333], [1.68526572E12, 1.0333333333333334], [1.68526578E12, 1.2333333333333334], [1.68526608E12, 1.7666666666666666], [1.68526614E12, 1.6666666666666667], [1.68526548E12, 0.15], [1.68526554E12, 0.48333333333333334], [1.68526584E12, 1.7333333333333334], [1.6852659E12, 2.3], [1.6852662E12, 1.5666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68526632E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68526548E12, "maxY": 1.8666666666666667, "series": [{"data": [[1.68526626E12, 0.9666666666666667], [1.6852656E12, 0.3333333333333333], [1.68526566E12, 0.48333333333333334], [1.68526596E12, 1.6166666666666667], [1.68526602E12, 1.8666666666666667], [1.68526632E12, 0.6], [1.68526638E12, 0.11666666666666667], [1.68526572E12, 0.3333333333333333], [1.68526578E12, 0.7833333333333333], [1.68526608E12, 1.7333333333333334], [1.68526614E12, 1.65], [1.68526548E12, 0.15], [1.68526554E12, 0.4], [1.68526584E12, 1.2666666666666666], [1.6852659E12, 1.2666666666666666], [1.6852662E12, 1.3333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68526632E12, 0.1]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68526578E12, 0.4166666666666667], [1.68526626E12, 0.5166666666666667], [1.68526566E12, 0.6166666666666667], [1.68526596E12, 0.25], [1.68526584E12, 0.5], [1.6852659E12, 0.95], [1.68526572E12, 0.65], [1.6852662E12, 0.36666666666666664]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68526632E12, 0.2], [1.68526638E12, 0.25], [1.6852662E12, 0.05]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68526638E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68526548E12, "maxY": 0.95, "series": [{"data": [[1.68526626E12, 0.6166666666666667], [1.6852656E12, 0.16666666666666666], [1.68526566E12, 0.23333333333333334], [1.68526596E12, 0.8], [1.68526602E12, 0.95], [1.68526632E12, 0.4], [1.68526572E12, 0.1], [1.68526578E12, 0.43333333333333335], [1.68526608E12, 0.8833333333333333], [1.68526614E12, 0.8333333333333334], [1.68526548E12, 0.1], [1.68526554E12, 0.21666666666666667], [1.68526584E12, 0.6666666666666666], [1.6852659E12, 0.6833333333333333], [1.6852662E12, 0.8]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68526578E12, 0.2], [1.68526626E12, 0.13333333333333333], [1.68526566E12, 0.3333333333333333], [1.68526596E12, 0.13333333333333333], [1.68526584E12, 0.23333333333333334], [1.6852659E12, 0.45], [1.68526638E12, 0.06666666666666667], [1.68526572E12, 0.38333333333333336], [1.6852662E12, 0.1]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68526578E12, 0.21666666666666667], [1.68526626E12, 0.38333333333333336], [1.68526566E12, 0.2833333333333333], [1.68526596E12, 0.11666666666666667], [1.68526584E12, 0.26666666666666666], [1.68526632E12, 0.3], [1.6852659E12, 0.5], [1.68526638E12, 0.18333333333333332], [1.68526572E12, 0.26666666666666666], [1.6852662E12, 0.31666666666666665]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68526626E12, 0.21666666666666667], [1.6852656E12, 0.18333333333333332], [1.68526566E12, 0.15], [1.68526596E12, 0.65], [1.68526602E12, 0.8833333333333333], [1.68526632E12, 0.2], [1.68526638E12, 0.1], [1.68526572E12, 0.06666666666666667], [1.68526578E12, 0.26666666666666666], [1.68526608E12, 0.8166666666666667], [1.68526614E12, 0.8166666666666667], [1.68526548E12, 0.05], [1.68526554E12, 0.18333333333333332], [1.68526584E12, 0.48333333333333334], [1.6852659E12, 0.3], [1.6852662E12, 0.5666666666666667]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68526578E12, 0.3], [1.68526626E12, 0.43333333333333335], [1.68526566E12, 0.38333333333333336], [1.68526596E12, 0.3], [1.68526584E12, 0.4], [1.68526632E12, 0.2833333333333333], [1.6852659E12, 0.75], [1.68526638E12, 0.16666666666666666], [1.68526572E12, 0.48333333333333334], [1.6852662E12, 0.4166666666666667]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68526626E12, 0.35], [1.6852656E12, 0.16666666666666666], [1.68526566E12, 0.25], [1.68526596E12, 0.8166666666666667], [1.68526602E12, 0.9166666666666666], [1.68526632E12, 0.2], [1.68526638E12, 0.11666666666666667], [1.68526572E12, 0.23333333333333334], [1.68526578E12, 0.35], [1.68526608E12, 0.85], [1.68526614E12, 0.8166666666666667], [1.68526548E12, 0.05], [1.68526554E12, 0.18333333333333332], [1.68526584E12, 0.6], [1.6852659E12, 0.5833333333333334], [1.6852662E12, 0.5333333333333333]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68526638E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.68526548E12, "maxY": 2.75, "series": [{"data": [[1.68526626E12, 1.1833333333333333], [1.6852656E12, 0.5166666666666667], [1.68526566E12, 0.6333333333333333], [1.68526596E12, 2.2666666666666666], [1.68526602E12, 2.75], [1.68526632E12, 0.8], [1.68526638E12, 0.21666666666666667], [1.68526572E12, 0.4], [1.68526578E12, 1.05], [1.68526608E12, 2.55], [1.68526614E12, 2.466666666666667], [1.68526548E12, 0.2], [1.68526554E12, 0.5833333333333334], [1.68526584E12, 1.75], [1.6852659E12, 1.5666666666666667], [1.6852662E12, 1.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68526578E12, 0.7166666666666667], [1.68526626E12, 0.95], [1.68526566E12, 1.0], [1.68526596E12, 0.55], [1.68526584E12, 0.9], [1.68526632E12, 0.5833333333333334], [1.6852659E12, 1.7], [1.68526638E12, 0.4166666666666667], [1.68526572E12, 1.1333333333333333], [1.6852662E12, 0.8333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68526638E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

