/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 102.0, "minX": 0.0, "maxY": 125153.0, "series": [{"data": [[0.0, 307.0], [0.1, 307.0], [0.2, 307.0], [0.3, 308.0], [0.4, 308.0], [0.5, 308.0], [0.6, 308.0], [0.7, 308.0], [0.8, 308.0], [0.9, 309.0], [1.0, 309.0], [1.1, 309.0], [1.2, 309.0], [1.3, 309.0], [1.4, 309.0], [1.5, 309.0], [1.6, 309.0], [1.7, 309.0], [1.8, 309.0], [1.9, 309.0], [2.0, 309.0], [2.1, 309.0], [2.2, 309.0], [2.3, 309.0], [2.4, 310.0], [2.5, 310.0], [2.6, 310.0], [2.7, 310.0], [2.8, 310.0], [2.9, 310.0], [3.0, 310.0], [3.1, 310.0], [3.2, 310.0], [3.3, 310.0], [3.4, 310.0], [3.5, 310.0], [3.6, 310.0], [3.7, 310.0], [3.8, 310.0], [3.9, 310.0], [4.0, 310.0], [4.1, 310.0], [4.2, 310.0], [4.3, 310.0], [4.4, 310.0], [4.5, 310.0], [4.6, 310.0], [4.7, 310.0], [4.8, 310.0], [4.9, 310.0], [5.0, 310.0], [5.1, 310.0], [5.2, 310.0], [5.3, 310.0], [5.4, 310.0], [5.5, 310.0], [5.6, 310.0], [5.7, 310.0], [5.8, 310.0], [5.9, 310.0], [6.0, 310.0], [6.1, 310.0], [6.2, 310.0], [6.3, 310.0], [6.4, 310.0], [6.5, 310.0], [6.6, 310.0], [6.7, 311.0], [6.8, 311.0], [6.9, 311.0], [7.0, 311.0], [7.1, 311.0], [7.2, 311.0], [7.3, 311.0], [7.4, 311.0], [7.5, 311.0], [7.6, 311.0], [7.7, 311.0], [7.8, 311.0], [7.9, 311.0], [8.0, 311.0], [8.1, 311.0], [8.2, 311.0], [8.3, 311.0], [8.4, 311.0], [8.5, 311.0], [8.6, 311.0], [8.7, 311.0], [8.8, 311.0], [8.9, 311.0], [9.0, 311.0], [9.1, 311.0], [9.2, 311.0], [9.3, 311.0], [9.4, 311.0], [9.5, 311.0], [9.6, 311.0], [9.7, 311.0], [9.8, 311.0], [9.9, 311.0], [10.0, 311.0], [10.1, 311.0], [10.2, 311.0], [10.3, 311.0], [10.4, 311.0], [10.5, 311.0], [10.6, 311.0], [10.7, 311.0], [10.8, 311.0], [10.9, 311.0], [11.0, 311.0], [11.1, 311.0], [11.2, 311.0], [11.3, 311.0], [11.4, 311.0], [11.5, 311.0], [11.6, 311.0], [11.7, 311.0], [11.8, 311.0], [11.9, 311.0], [12.0, 311.0], [12.1, 311.0], [12.2, 311.0], [12.3, 311.0], [12.4, 311.0], [12.5, 311.0], [12.6, 311.0], [12.7, 312.0], [12.8, 312.0], [12.9, 312.0], [13.0, 312.0], [13.1, 312.0], [13.2, 312.0], [13.3, 312.0], [13.4, 312.0], [13.5, 312.0], [13.6, 312.0], [13.7, 312.0], [13.8, 312.0], [13.9, 312.0], [14.0, 312.0], [14.1, 312.0], [14.2, 312.0], [14.3, 312.0], [14.4, 312.0], [14.5, 312.0], [14.6, 312.0], [14.7, 312.0], [14.8, 312.0], [14.9, 312.0], [15.0, 312.0], [15.1, 312.0], [15.2, 312.0], [15.3, 312.0], [15.4, 312.0], [15.5, 312.0], [15.6, 312.0], [15.7, 312.0], [15.8, 312.0], [15.9, 312.0], [16.0, 312.0], [16.1, 312.0], [16.2, 312.0], [16.3, 312.0], [16.4, 312.0], [16.5, 312.0], [16.6, 312.0], [16.7, 312.0], [16.8, 312.0], [16.9, 312.0], [17.0, 312.0], [17.1, 312.0], [17.2, 312.0], [17.3, 312.0], [17.4, 312.0], [17.5, 312.0], [17.6, 312.0], [17.7, 312.0], [17.8, 312.0], [17.9, 312.0], [18.0, 312.0], [18.1, 312.0], [18.2, 312.0], [18.3, 312.0], [18.4, 312.0], [18.5, 312.0], [18.6, 312.0], [18.7, 313.0], [18.8, 313.0], [18.9, 313.0], [19.0, 313.0], [19.1, 313.0], [19.2, 313.0], [19.3, 313.0], [19.4, 313.0], [19.5, 313.0], [19.6, 313.0], [19.7, 313.0], [19.8, 313.0], [19.9, 313.0], [20.0, 313.0], [20.1, 313.0], [20.2, 313.0], [20.3, 313.0], [20.4, 313.0], [20.5, 313.0], [20.6, 313.0], [20.7, 313.0], [20.8, 313.0], [20.9, 313.0], [21.0, 313.0], [21.1, 313.0], [21.2, 313.0], [21.3, 313.0], [21.4, 313.0], [21.5, 313.0], [21.6, 313.0], [21.7, 313.0], [21.8, 313.0], [21.9, 313.0], [22.0, 313.0], [22.1, 313.0], [22.2, 313.0], [22.3, 313.0], [22.4, 313.0], [22.5, 313.0], [22.6, 313.0], [22.7, 313.0], [22.8, 313.0], [22.9, 313.0], [23.0, 313.0], [23.1, 313.0], [23.2, 313.0], [23.3, 313.0], [23.4, 313.0], [23.5, 313.0], [23.6, 313.0], [23.7, 313.0], [23.8, 313.0], [23.9, 313.0], [24.0, 313.0], [24.1, 314.0], [24.2, 314.0], [24.3, 314.0], [24.4, 314.0], [24.5, 314.0], [24.6, 314.0], [24.7, 314.0], [24.8, 314.0], [24.9, 314.0], [25.0, 314.0], [25.1, 314.0], [25.2, 314.0], [25.3, 314.0], [25.4, 314.0], [25.5, 314.0], [25.6, 314.0], [25.7, 314.0], [25.8, 314.0], [25.9, 314.0], [26.0, 314.0], [26.1, 314.0], [26.2, 314.0], [26.3, 314.0], [26.4, 314.0], [26.5, 314.0], [26.6, 314.0], [26.7, 314.0], [26.8, 314.0], [26.9, 314.0], [27.0, 314.0], [27.1, 314.0], [27.2, 314.0], [27.3, 314.0], [27.4, 314.0], [27.5, 314.0], [27.6, 314.0], [27.7, 314.0], [27.8, 314.0], [27.9, 314.0], [28.0, 314.0], [28.1, 314.0], [28.2, 314.0], [28.3, 314.0], [28.4, 314.0], [28.5, 314.0], [28.6, 315.0], [28.7, 315.0], [28.8, 315.0], [28.9, 315.0], [29.0, 315.0], [29.1, 315.0], [29.2, 315.0], [29.3, 315.0], [29.4, 315.0], [29.5, 315.0], [29.6, 315.0], [29.7, 315.0], [29.8, 315.0], [29.9, 315.0], [30.0, 315.0], [30.1, 315.0], [30.2, 315.0], [30.3, 315.0], [30.4, 315.0], [30.5, 315.0], [30.6, 315.0], [30.7, 315.0], [30.8, 315.0], [30.9, 315.0], [31.0, 315.0], [31.1, 315.0], [31.2, 315.0], [31.3, 315.0], [31.4, 315.0], [31.5, 315.0], [31.6, 315.0], [31.7, 315.0], [31.8, 316.0], [31.9, 316.0], [32.0, 316.0], [32.1, 316.0], [32.2, 316.0], [32.3, 316.0], [32.4, 316.0], [32.5, 316.0], [32.6, 316.0], [32.7, 316.0], [32.8, 316.0], [32.9, 316.0], [33.0, 316.0], [33.1, 316.0], [33.2, 316.0], [33.3, 316.0], [33.4, 316.0], [33.5, 316.0], [33.6, 316.0], [33.7, 317.0], [33.8, 317.0], [33.9, 317.0], [34.0, 317.0], [34.1, 317.0], [34.2, 317.0], [34.3, 317.0], [34.4, 317.0], [34.5, 317.0], [34.6, 317.0], [34.7, 317.0], [34.8, 317.0], [34.9, 317.0], [35.0, 317.0], [35.1, 317.0], [35.2, 317.0], [35.3, 318.0], [35.4, 318.0], [35.5, 318.0], [35.6, 318.0], [35.7, 318.0], [35.8, 318.0], [35.9, 318.0], [36.0, 318.0], [36.1, 318.0], [36.2, 319.0], [36.3, 319.0], [36.4, 319.0], [36.5, 319.0], [36.6, 319.0], [36.7, 319.0], [36.8, 319.0], [36.9, 319.0], [37.0, 319.0], [37.1, 319.0], [37.2, 319.0], [37.3, 320.0], [37.4, 320.0], [37.5, 320.0], [37.6, 320.0], [37.7, 321.0], [37.8, 321.0], [37.9, 321.0], [38.0, 321.0], [38.1, 321.0], [38.2, 321.0], [38.3, 321.0], [38.4, 321.0], [38.5, 322.0], [38.6, 322.0], [38.7, 322.0], [38.8, 322.0], [38.9, 322.0], [39.0, 322.0], [39.1, 323.0], [39.2, 323.0], [39.3, 323.0], [39.4, 323.0], [39.5, 323.0], [39.6, 323.0], [39.7, 323.0], [39.8, 323.0], [39.9, 324.0], [40.0, 324.0], [40.1, 324.0], [40.2, 324.0], [40.3, 325.0], [40.4, 325.0], [40.5, 325.0], [40.6, 325.0], [40.7, 325.0], [40.8, 325.0], [40.9, 325.0], [41.0, 326.0], [41.1, 326.0], [41.2, 326.0], [41.3, 326.0], [41.4, 326.0], [41.5, 326.0], [41.6, 327.0], [41.7, 327.0], [41.8, 327.0], [41.9, 327.0], [42.0, 327.0], [42.1, 327.0], [42.2, 327.0], [42.3, 328.0], [42.4, 328.0], [42.5, 328.0], [42.6, 328.0], [42.7, 328.0], [42.8, 328.0], [42.9, 328.0], [43.0, 329.0], [43.1, 329.0], [43.2, 329.0], [43.3, 329.0], [43.4, 329.0], [43.5, 329.0], [43.6, 329.0], [43.7, 330.0], [43.8, 330.0], [43.9, 330.0], [44.0, 330.0], [44.1, 330.0], [44.2, 330.0], [44.3, 330.0], [44.4, 330.0], [44.5, 330.0], [44.6, 331.0], [44.7, 331.0], [44.8, 331.0], [44.9, 331.0], [45.0, 331.0], [45.1, 331.0], [45.2, 332.0], [45.3, 332.0], [45.4, 332.0], [45.5, 332.0], [45.6, 332.0], [45.7, 332.0], [45.8, 333.0], [45.9, 333.0], [46.0, 333.0], [46.1, 333.0], [46.2, 333.0], [46.3, 334.0], [46.4, 334.0], [46.5, 334.0], [46.6, 334.0], [46.7, 334.0], [46.8, 334.0], [46.9, 334.0], [47.0, 334.0], [47.1, 335.0], [47.2, 335.0], [47.3, 335.0], [47.4, 335.0], [47.5, 335.0], [47.6, 335.0], [47.7, 335.0], [47.8, 336.0], [47.9, 336.0], [48.0, 336.0], [48.1, 336.0], [48.2, 336.0], [48.3, 336.0], [48.4, 336.0], [48.5, 337.0], [48.6, 337.0], [48.7, 337.0], [48.8, 337.0], [48.9, 337.0], [49.0, 337.0], [49.1, 337.0], [49.2, 337.0], [49.3, 337.0], [49.4, 337.0], [49.5, 338.0], [49.6, 338.0], [49.7, 338.0], [49.8, 338.0], [49.9, 338.0], [50.0, 338.0], [50.1, 338.0], [50.2, 338.0], [50.3, 338.0], [50.4, 338.0], [50.5, 339.0], [50.6, 339.0], [50.7, 339.0], [50.8, 339.0], [50.9, 339.0], [51.0, 339.0], [51.1, 340.0], [51.2, 340.0], [51.3, 340.0], [51.4, 340.0], [51.5, 340.0], [51.6, 340.0], [51.7, 340.0], [51.8, 340.0], [51.9, 340.0], [52.0, 340.0], [52.1, 341.0], [52.2, 341.0], [52.3, 341.0], [52.4, 341.0], [52.5, 341.0], [52.6, 342.0], [52.7, 342.0], [52.8, 342.0], [52.9, 342.0], [53.0, 342.0], [53.1, 342.0], [53.2, 342.0], [53.3, 342.0], [53.4, 342.0], [53.5, 342.0], [53.6, 343.0], [53.7, 343.0], [53.8, 343.0], [53.9, 343.0], [54.0, 343.0], [54.1, 343.0], [54.2, 343.0], [54.3, 344.0], [54.4, 344.0], [54.5, 344.0], [54.6, 344.0], [54.7, 344.0], [54.8, 344.0], [54.9, 344.0], [55.0, 344.0], [55.1, 344.0], [55.2, 344.0], [55.3, 345.0], [55.4, 345.0], [55.5, 345.0], [55.6, 345.0], [55.7, 345.0], [55.8, 345.0], [55.9, 345.0], [56.0, 345.0], [56.1, 345.0], [56.2, 345.0], [56.3, 346.0], [56.4, 346.0], [56.5, 346.0], [56.6, 346.0], [56.7, 346.0], [56.8, 346.0], [56.9, 346.0], [57.0, 346.0], [57.1, 346.0], [57.2, 346.0], [57.3, 346.0], [57.4, 347.0], [57.5, 347.0], [57.6, 347.0], [57.7, 347.0], [57.8, 347.0], [57.9, 347.0], [58.0, 348.0], [58.1, 348.0], [58.2, 348.0], [58.3, 348.0], [58.4, 348.0], [58.5, 348.0], [58.6, 348.0], [58.7, 349.0], [58.8, 349.0], [58.9, 349.0], [59.0, 349.0], [59.1, 349.0], [59.2, 350.0], [59.3, 350.0], [59.4, 350.0], [59.5, 350.0], [59.6, 350.0], [59.7, 351.0], [59.8, 351.0], [59.9, 351.0], [60.0, 351.0], [60.1, 351.0], [60.2, 351.0], [60.3, 351.0], [60.4, 351.0], [60.5, 351.0], [60.6, 352.0], [60.7, 352.0], [60.8, 352.0], [60.9, 352.0], [61.0, 352.0], [61.1, 353.0], [61.2, 353.0], [61.3, 353.0], [61.4, 353.0], [61.5, 353.0], [61.6, 354.0], [61.7, 354.0], [61.8, 354.0], [61.9, 354.0], [62.0, 354.0], [62.1, 354.0], [62.2, 354.0], [62.3, 354.0], [62.4, 354.0], [62.5, 355.0], [62.6, 355.0], [62.7, 355.0], [62.8, 355.0], [62.9, 355.0], [63.0, 355.0], [63.1, 356.0], [63.2, 356.0], [63.3, 356.0], [63.4, 356.0], [63.5, 356.0], [63.6, 357.0], [63.7, 357.0], [63.8, 357.0], [63.9, 357.0], [64.0, 357.0], [64.1, 357.0], [64.2, 358.0], [64.3, 358.0], [64.4, 358.0], [64.5, 358.0], [64.6, 358.0], [64.7, 358.0], [64.8, 358.0], [64.9, 358.0], [65.0, 359.0], [65.1, 360.0], [65.2, 360.0], [65.3, 360.0], [65.4, 361.0], [65.5, 362.0], [65.6, 362.0], [65.7, 362.0], [65.8, 363.0], [65.9, 363.0], [66.0, 363.0], [66.1, 363.0], [66.2, 363.0], [66.3, 363.0], [66.4, 364.0], [66.5, 364.0], [66.6, 364.0], [66.7, 365.0], [66.8, 365.0], [66.9, 366.0], [67.0, 366.0], [67.1, 366.0], [67.2, 367.0], [67.3, 367.0], [67.4, 367.0], [67.5, 369.0], [67.6, 370.0], [67.7, 370.0], [67.8, 370.0], [67.9, 371.0], [68.0, 371.0], [68.1, 371.0], [68.2, 373.0], [68.3, 373.0], [68.4, 374.0], [68.5, 375.0], [68.6, 376.0], [68.7, 380.0], [68.8, 381.0], [68.9, 381.0], [69.0, 383.0], [69.1, 384.0], [69.2, 385.0], [69.3, 387.0], [69.4, 388.0], [69.5, 389.0], [69.6, 390.0], [69.7, 391.0], [69.8, 391.0], [69.9, 392.0], [70.0, 393.0], [70.1, 394.0], [70.2, 394.0], [70.3, 395.0], [70.4, 397.0], [70.5, 398.0], [70.6, 398.0], [70.7, 400.0], [70.8, 403.0], [70.9, 403.0], [71.0, 408.0], [71.1, 409.0], [71.2, 410.0], [71.3, 410.0], [71.4, 411.0], [71.5, 412.0], [71.6, 412.0], [71.7, 412.0], [71.8, 414.0], [71.9, 415.0], [72.0, 415.0], [72.1, 416.0], [72.2, 417.0], [72.3, 417.0], [72.4, 418.0], [72.5, 419.0], [72.6, 420.0], [72.7, 421.0], [72.8, 426.0], [72.9, 428.0], [73.0, 430.0], [73.1, 430.0], [73.2, 434.0], [73.3, 435.0], [73.4, 437.0], [73.5, 439.0], [73.6, 440.0], [73.7, 442.0], [73.8, 445.0], [73.9, 446.0], [74.0, 448.0], [74.1, 449.0], [74.2, 450.0], [74.3, 451.0], [74.4, 452.0], [74.5, 452.0], [74.6, 453.0], [74.7, 456.0], [74.8, 460.0], [74.9, 461.0], [75.0, 463.0], [75.1, 465.0], [75.2, 468.0], [75.3, 472.0], [75.4, 474.0], [75.5, 481.0], [75.6, 484.0], [75.7, 486.0], [75.8, 493.0], [75.9, 493.0], [76.0, 494.0], [76.1, 501.0], [76.2, 502.0], [76.3, 505.0], [76.4, 507.0], [76.5, 510.0], [76.6, 514.0], [76.7, 514.0], [76.8, 515.0], [76.9, 516.0], [77.0, 516.0], [77.1, 517.0], [77.2, 522.0], [77.3, 525.0], [77.4, 525.0], [77.5, 529.0], [77.6, 531.0], [77.7, 531.0], [77.8, 534.0], [77.9, 536.0], [78.0, 536.0], [78.1, 537.0], [78.2, 538.0], [78.3, 540.0], [78.4, 542.0], [78.5, 542.0], [78.6, 545.0], [78.7, 548.0], [78.8, 551.0], [78.9, 553.0], [79.0, 556.0], [79.1, 557.0], [79.2, 558.0], [79.3, 562.0], [79.4, 563.0], [79.5, 563.0], [79.6, 564.0], [79.7, 567.0], [79.8, 571.0], [79.9, 574.0], [80.0, 575.0], [80.1, 579.0], [80.2, 580.0], [80.3, 580.0], [80.4, 580.0], [80.5, 587.0], [80.6, 587.0], [80.7, 591.0], [80.8, 597.0], [80.9, 599.0], [81.0, 601.0], [81.1, 605.0], [81.2, 607.0], [81.3, 614.0], [81.4, 616.0], [81.5, 620.0], [81.6, 635.0], [81.7, 635.0], [81.8, 648.0], [81.9, 653.0], [82.0, 657.0], [82.1, 660.0], [82.2, 691.0], [82.3, 716.0], [82.4, 720.0], [82.5, 724.0], [82.6, 730.0], [82.7, 746.0], [82.8, 747.0], [82.9, 766.0], [83.0, 777.0], [83.1, 782.0], [83.2, 793.0], [83.3, 826.0], [83.4, 830.0], [83.5, 838.0], [83.6, 854.0], [83.7, 866.0], [83.8, 972.0], [83.9, 981.0], [84.0, 995.0], [84.1, 1012.0], [84.2, 1013.0], [84.3, 1032.0], [84.4, 1041.0], [84.5, 1083.0], [84.6, 1095.0], [84.7, 1162.0], [84.8, 1173.0], [84.9, 1328.0], [85.0, 1354.0], [85.1, 1405.0], [85.2, 1521.0], [85.3, 1581.0], [85.4, 1669.0], [85.5, 1763.0], [85.6, 1812.0], [85.7, 1874.0], [85.8, 2696.0], [85.9, 3915.0], [86.0, 3961.0], [86.1, 4136.0], [86.2, 6160.0], [86.3, 7379.0], [86.4, 7387.0], [86.5, 7705.0], [86.6, 7859.0], [86.7, 7910.0], [86.8, 8519.0], [86.9, 9274.0], [87.0, 9565.0], [87.1, 9943.0], [87.2, 10138.0], [87.3, 10466.0], [87.4, 10609.0], [87.5, 10859.0], [87.6, 11336.0], [87.7, 11505.0], [87.8, 11612.0], [87.9, 12247.0], [88.0, 13330.0], [88.1, 14484.0], [88.2, 15326.0], [88.3, 16179.0], [88.4, 16585.0], [88.5, 16636.0], [88.6, 16889.0], [88.7, 18242.0], [88.8, 18717.0], [88.9, 19085.0], [89.0, 19282.0], [89.1, 19744.0], [89.2, 20064.0], [89.3, 20177.0], [89.4, 20489.0], [89.5, 21094.0], [89.6, 21192.0], [89.7, 21891.0], [89.8, 22106.0], [89.9, 22922.0], [90.0, 23021.0], [90.1, 23201.0], [90.2, 23593.0], [90.3, 23795.0], [90.4, 23916.0], [90.5, 24478.0], [90.6, 25772.0], [90.7, 26291.0], [90.8, 30514.0], [90.9, 30694.0], [91.0, 33295.0], [91.1, 34489.0], [91.2, 34907.0], [91.3, 36156.0], [91.4, 36623.0], [91.5, 37369.0], [91.6, 38217.0], [91.7, 38727.0], [91.8, 39623.0], [91.9, 41137.0], [92.0, 41387.0], [92.1, 41503.0], [92.2, 41625.0], [92.3, 42896.0], [92.4, 43815.0], [92.5, 47674.0], [92.6, 48932.0], [92.7, 51076.0], [92.8, 53449.0], [92.9, 55264.0], [93.0, 60105.0], [93.1, 60376.0], [93.2, 60383.0], [93.3, 60425.0], [93.4, 60452.0], [93.5, 60471.0], [93.6, 60484.0], [93.7, 60511.0], [93.8, 60512.0], [93.9, 60513.0], [94.0, 60516.0], [94.1, 60553.0], [94.2, 60569.0], [94.3, 60583.0], [94.4, 60653.0], [94.5, 60703.0], [94.6, 60882.0], [94.7, 60998.0], [94.8, 61049.0], [94.9, 61183.0], [95.0, 61221.0], [95.1, 61673.0], [95.2, 61773.0], [95.3, 61821.0], [95.4, 62234.0], [95.5, 62417.0], [95.6, 62675.0], [95.7, 63516.0], [95.8, 63695.0], [95.9, 64529.0], [96.0, 64688.0], [96.1, 66021.0], [96.2, 66251.0], [96.3, 66365.0], [96.4, 66783.0], [96.5, 66913.0], [96.6, 67447.0], [96.7, 67746.0], [96.8, 67766.0], [96.9, 68016.0], [97.0, 68417.0], [97.1, 68568.0], [97.2, 68793.0], [97.3, 69444.0], [97.4, 70346.0], [97.5, 70602.0], [97.6, 71152.0], [97.7, 71222.0], [97.8, 72007.0], [97.9, 72015.0], [98.0, 72311.0], [98.1, 72898.0], [98.2, 74022.0], [98.3, 74457.0], [98.4, 75169.0], [98.5, 76018.0], [98.6, 76486.0], [98.7, 78391.0], [98.8, 80304.0], [98.9, 82347.0], [99.0, 83198.0], [99.1, 92338.0], [99.2, 100250.0], [99.3, 100402.0], [99.4, 104505.0], [99.5, 105872.0], [99.6, 109133.0], [99.7, 115731.0], [99.8, 121897.0], [99.9, 123647.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 102.0], [0.1, 102.0], [0.2, 102.0], [0.3, 103.0], [0.4, 103.0], [0.5, 103.0], [0.6, 103.0], [0.7, 103.0], [0.8, 103.0], [0.9, 103.0], [1.0, 103.0], [1.1, 103.0], [1.2, 103.0], [1.3, 103.0], [1.4, 103.0], [1.5, 103.0], [1.6, 103.0], [1.7, 103.0], [1.8, 103.0], [1.9, 103.0], [2.0, 103.0], [2.1, 103.0], [2.2, 103.0], [2.3, 103.0], [2.4, 103.0], [2.5, 103.0], [2.6, 103.0], [2.7, 104.0], [2.8, 104.0], [2.9, 104.0], [3.0, 104.0], [3.1, 104.0], [3.2, 104.0], [3.3, 104.0], [3.4, 104.0], [3.5, 104.0], [3.6, 104.0], [3.7, 104.0], [3.8, 104.0], [3.9, 104.0], [4.0, 104.0], [4.1, 104.0], [4.2, 104.0], [4.3, 104.0], [4.4, 104.0], [4.5, 104.0], [4.6, 104.0], [4.7, 104.0], [4.8, 104.0], [4.9, 104.0], [5.0, 104.0], [5.1, 104.0], [5.2, 104.0], [5.3, 104.0], [5.4, 104.0], [5.5, 104.0], [5.6, 104.0], [5.7, 104.0], [5.8, 104.0], [5.9, 104.0], [6.0, 104.0], [6.1, 104.0], [6.2, 104.0], [6.3, 104.0], [6.4, 104.0], [6.5, 104.0], [6.6, 104.0], [6.7, 104.0], [6.8, 104.0], [6.9, 104.0], [7.0, 104.0], [7.1, 104.0], [7.2, 104.0], [7.3, 104.0], [7.4, 104.0], [7.5, 104.0], [7.6, 104.0], [7.7, 104.0], [7.8, 104.0], [7.9, 104.0], [8.0, 104.0], [8.1, 104.0], [8.2, 104.0], [8.3, 104.0], [8.4, 104.0], [8.5, 104.0], [8.6, 104.0], [8.7, 104.0], [8.8, 104.0], [8.9, 104.0], [9.0, 104.0], [9.1, 104.0], [9.2, 104.0], [9.3, 104.0], [9.4, 104.0], [9.5, 104.0], [9.6, 104.0], [9.7, 104.0], [9.8, 104.0], [9.9, 104.0], [10.0, 104.0], [10.1, 104.0], [10.2, 104.0], [10.3, 104.0], [10.4, 104.0], [10.5, 104.0], [10.6, 104.0], [10.7, 104.0], [10.8, 104.0], [10.9, 104.0], [11.0, 104.0], [11.1, 104.0], [11.2, 104.0], [11.3, 104.0], [11.4, 104.0], [11.5, 104.0], [11.6, 104.0], [11.7, 104.0], [11.8, 105.0], [11.9, 105.0], [12.0, 105.0], [12.1, 105.0], [12.2, 105.0], [12.3, 105.0], [12.4, 105.0], [12.5, 105.0], [12.6, 105.0], [12.7, 105.0], [12.8, 105.0], [12.9, 105.0], [13.0, 105.0], [13.1, 105.0], [13.2, 105.0], [13.3, 105.0], [13.4, 105.0], [13.5, 105.0], [13.6, 105.0], [13.7, 105.0], [13.8, 105.0], [13.9, 105.0], [14.0, 105.0], [14.1, 105.0], [14.2, 105.0], [14.3, 105.0], [14.4, 105.0], [14.5, 105.0], [14.6, 105.0], [14.7, 105.0], [14.8, 105.0], [14.9, 105.0], [15.0, 105.0], [15.1, 105.0], [15.2, 105.0], [15.3, 105.0], [15.4, 105.0], [15.5, 105.0], [15.6, 105.0], [15.7, 105.0], [15.8, 105.0], [15.9, 105.0], [16.0, 105.0], [16.1, 105.0], [16.2, 105.0], [16.3, 105.0], [16.4, 105.0], [16.5, 105.0], [16.6, 105.0], [16.7, 105.0], [16.8, 105.0], [16.9, 105.0], [17.0, 105.0], [17.1, 105.0], [17.2, 105.0], [17.3, 105.0], [17.4, 105.0], [17.5, 105.0], [17.6, 105.0], [17.7, 105.0], [17.8, 105.0], [17.9, 105.0], [18.0, 105.0], [18.1, 105.0], [18.2, 105.0], [18.3, 105.0], [18.4, 105.0], [18.5, 105.0], [18.6, 105.0], [18.7, 105.0], [18.8, 105.0], [18.9, 105.0], [19.0, 105.0], [19.1, 105.0], [19.2, 105.0], [19.3, 105.0], [19.4, 105.0], [19.5, 105.0], [19.6, 105.0], [19.7, 105.0], [19.8, 105.0], [19.9, 105.0], [20.0, 105.0], [20.1, 105.0], [20.2, 105.0], [20.3, 105.0], [20.4, 105.0], [20.5, 105.0], [20.6, 105.0], [20.7, 105.0], [20.8, 105.0], [20.9, 105.0], [21.0, 105.0], [21.1, 105.0], [21.2, 105.0], [21.3, 105.0], [21.4, 105.0], [21.5, 105.0], [21.6, 105.0], [21.7, 105.0], [21.8, 105.0], [21.9, 105.0], [22.0, 105.0], [22.1, 105.0], [22.2, 105.0], [22.3, 105.0], [22.4, 105.0], [22.5, 105.0], [22.6, 105.0], [22.7, 105.0], [22.8, 105.0], [22.9, 105.0], [23.0, 105.0], [23.1, 105.0], [23.2, 105.0], [23.3, 105.0], [23.4, 105.0], [23.5, 105.0], [23.6, 105.0], [23.7, 105.0], [23.8, 105.0], [23.9, 105.0], [24.0, 105.0], [24.1, 105.0], [24.2, 105.0], [24.3, 105.0], [24.4, 105.0], [24.5, 105.0], [24.6, 105.0], [24.7, 105.0], [24.8, 105.0], [24.9, 105.0], [25.0, 105.0], [25.1, 105.0], [25.2, 105.0], [25.3, 105.0], [25.4, 105.0], [25.5, 105.0], [25.6, 105.0], [25.7, 105.0], [25.8, 105.0], [25.9, 105.0], [26.0, 105.0], [26.1, 105.0], [26.2, 105.0], [26.3, 105.0], [26.4, 105.0], [26.5, 105.0], [26.6, 105.0], [26.7, 105.0], [26.8, 105.0], [26.9, 105.0], [27.0, 105.0], [27.1, 105.0], [27.2, 105.0], [27.3, 105.0], [27.4, 105.0], [27.5, 106.0], [27.6, 106.0], [27.7, 106.0], [27.8, 106.0], [27.9, 106.0], [28.0, 106.0], [28.1, 106.0], [28.2, 106.0], [28.3, 106.0], [28.4, 106.0], [28.5, 106.0], [28.6, 106.0], [28.7, 106.0], [28.8, 106.0], [28.9, 106.0], [29.0, 106.0], [29.1, 106.0], [29.2, 106.0], [29.3, 106.0], [29.4, 106.0], [29.5, 106.0], [29.6, 106.0], [29.7, 106.0], [29.8, 106.0], [29.9, 106.0], [30.0, 106.0], [30.1, 106.0], [30.2, 106.0], [30.3, 106.0], [30.4, 106.0], [30.5, 106.0], [30.6, 106.0], [30.7, 106.0], [30.8, 106.0], [30.9, 106.0], [31.0, 106.0], [31.1, 106.0], [31.2, 106.0], [31.3, 106.0], [31.4, 106.0], [31.5, 106.0], [31.6, 106.0], [31.7, 106.0], [31.8, 106.0], [31.9, 106.0], [32.0, 106.0], [32.1, 106.0], [32.2, 106.0], [32.3, 106.0], [32.4, 106.0], [32.5, 106.0], [32.6, 106.0], [32.7, 106.0], [32.8, 106.0], [32.9, 106.0], [33.0, 106.0], [33.1, 106.0], [33.2, 106.0], [33.3, 106.0], [33.4, 106.0], [33.5, 106.0], [33.6, 106.0], [33.7, 106.0], [33.8, 106.0], [33.9, 106.0], [34.0, 106.0], [34.1, 106.0], [34.2, 106.0], [34.3, 106.0], [34.4, 106.0], [34.5, 106.0], [34.6, 106.0], [34.7, 106.0], [34.8, 106.0], [34.9, 106.0], [35.0, 106.0], [35.1, 106.0], [35.2, 106.0], [35.3, 106.0], [35.4, 106.0], [35.5, 106.0], [35.6, 106.0], [35.7, 106.0], [35.8, 106.0], [35.9, 106.0], [36.0, 106.0], [36.1, 106.0], [36.2, 106.0], [36.3, 106.0], [36.4, 106.0], [36.5, 106.0], [36.6, 106.0], [36.7, 106.0], [36.8, 106.0], [36.9, 106.0], [37.0, 106.0], [37.1, 106.0], [37.2, 106.0], [37.3, 106.0], [37.4, 106.0], [37.5, 106.0], [37.6, 106.0], [37.7, 106.0], [37.8, 106.0], [37.9, 106.0], [38.0, 106.0], [38.1, 106.0], [38.2, 106.0], [38.3, 106.0], [38.4, 106.0], [38.5, 106.0], [38.6, 106.0], [38.7, 106.0], [38.8, 106.0], [38.9, 106.0], [39.0, 106.0], [39.1, 106.0], [39.2, 106.0], [39.3, 106.0], [39.4, 106.0], [39.5, 106.0], [39.6, 106.0], [39.7, 106.0], [39.8, 106.0], [39.9, 106.0], [40.0, 106.0], [40.1, 106.0], [40.2, 106.0], [40.3, 106.0], [40.4, 106.0], [40.5, 106.0], [40.6, 106.0], [40.7, 106.0], [40.8, 106.0], [40.9, 106.0], [41.0, 107.0], [41.1, 107.0], [41.2, 107.0], [41.3, 107.0], [41.4, 107.0], [41.5, 107.0], [41.6, 107.0], [41.7, 107.0], [41.8, 107.0], [41.9, 107.0], [42.0, 107.0], [42.1, 107.0], [42.2, 107.0], [42.3, 107.0], [42.4, 107.0], [42.5, 107.0], [42.6, 107.0], [42.7, 107.0], [42.8, 107.0], [42.9, 107.0], [43.0, 107.0], [43.1, 107.0], [43.2, 107.0], [43.3, 107.0], [43.4, 107.0], [43.5, 107.0], [43.6, 107.0], [43.7, 107.0], [43.8, 107.0], [43.9, 107.0], [44.0, 107.0], [44.1, 107.0], [44.2, 107.0], [44.3, 107.0], [44.4, 107.0], [44.5, 107.0], [44.6, 107.0], [44.7, 107.0], [44.8, 107.0], [44.9, 107.0], [45.0, 107.0], [45.1, 107.0], [45.2, 107.0], [45.3, 107.0], [45.4, 107.0], [45.5, 107.0], [45.6, 107.0], [45.7, 107.0], [45.8, 107.0], [45.9, 107.0], [46.0, 107.0], [46.1, 107.0], [46.2, 107.0], [46.3, 107.0], [46.4, 107.0], [46.5, 107.0], [46.6, 107.0], [46.7, 107.0], [46.8, 107.0], [46.9, 107.0], [47.0, 107.0], [47.1, 107.0], [47.2, 107.0], [47.3, 107.0], [47.4, 107.0], [47.5, 108.0], [47.6, 108.0], [47.7, 108.0], [47.8, 108.0], [47.9, 108.0], [48.0, 108.0], [48.1, 108.0], [48.2, 108.0], [48.3, 108.0], [48.4, 108.0], [48.5, 108.0], [48.6, 108.0], [48.7, 108.0], [48.8, 108.0], [48.9, 108.0], [49.0, 108.0], [49.1, 108.0], [49.2, 108.0], [49.3, 108.0], [49.4, 108.0], [49.5, 108.0], [49.6, 108.0], [49.7, 108.0], [49.8, 108.0], [49.9, 108.0], [50.0, 108.0], [50.1, 108.0], [50.2, 108.0], [50.3, 108.0], [50.4, 108.0], [50.5, 108.0], [50.6, 109.0], [50.7, 109.0], [50.8, 109.0], [50.9, 109.0], [51.0, 109.0], [51.1, 109.0], [51.2, 109.0], [51.3, 109.0], [51.4, 109.0], [51.5, 109.0], [51.6, 109.0], [51.7, 109.0], [51.8, 109.0], [51.9, 109.0], [52.0, 109.0], [52.1, 109.0], [52.2, 109.0], [52.3, 109.0], [52.4, 110.0], [52.5, 110.0], [52.6, 110.0], [52.7, 110.0], [52.8, 110.0], [52.9, 110.0], [53.0, 110.0], [53.1, 110.0], [53.2, 111.0], [53.3, 111.0], [53.4, 111.0], [53.5, 111.0], [53.6, 111.0], [53.7, 111.0], [53.8, 111.0], [53.9, 111.0], [54.0, 112.0], [54.1, 112.0], [54.2, 112.0], [54.3, 112.0], [54.4, 112.0], [54.5, 112.0], [54.6, 112.0], [54.7, 113.0], [54.8, 113.0], [54.9, 113.0], [55.0, 113.0], [55.1, 113.0], [55.2, 113.0], [55.3, 113.0], [55.4, 114.0], [55.5, 114.0], [55.6, 114.0], [55.7, 114.0], [55.8, 114.0], [55.9, 115.0], [56.0, 115.0], [56.1, 115.0], [56.2, 115.0], [56.3, 115.0], [56.4, 115.0], [56.5, 116.0], [56.6, 116.0], [56.7, 116.0], [56.8, 116.0], [56.9, 116.0], [57.0, 116.0], [57.1, 117.0], [57.2, 117.0], [57.3, 117.0], [57.4, 117.0], [57.5, 117.0], [57.6, 117.0], [57.7, 117.0], [57.8, 117.0], [57.9, 118.0], [58.0, 118.0], [58.1, 118.0], [58.2, 118.0], [58.3, 118.0], [58.4, 119.0], [58.5, 119.0], [58.6, 119.0], [58.7, 119.0], [58.8, 119.0], [58.9, 119.0], [59.0, 120.0], [59.1, 120.0], [59.2, 120.0], [59.3, 120.0], [59.4, 120.0], [59.5, 120.0], [59.6, 121.0], [59.7, 121.0], [59.8, 121.0], [59.9, 121.0], [60.0, 122.0], [60.1, 122.0], [60.2, 122.0], [60.3, 122.0], [60.4, 122.0], [60.5, 122.0], [60.6, 122.0], [60.7, 122.0], [60.8, 123.0], [60.9, 123.0], [61.0, 123.0], [61.1, 123.0], [61.2, 123.0], [61.3, 123.0], [61.4, 123.0], [61.5, 123.0], [61.6, 123.0], [61.7, 123.0], [61.8, 124.0], [61.9, 124.0], [62.0, 124.0], [62.1, 124.0], [62.2, 124.0], [62.3, 124.0], [62.4, 124.0], [62.5, 125.0], [62.6, 125.0], [62.7, 125.0], [62.8, 125.0], [62.9, 125.0], [63.0, 125.0], [63.1, 125.0], [63.2, 125.0], [63.3, 125.0], [63.4, 126.0], [63.5, 126.0], [63.6, 126.0], [63.7, 126.0], [63.8, 126.0], [63.9, 127.0], [64.0, 127.0], [64.1, 127.0], [64.2, 128.0], [64.3, 128.0], [64.4, 128.0], [64.5, 128.0], [64.6, 128.0], [64.7, 128.0], [64.8, 128.0], [64.9, 129.0], [65.0, 129.0], [65.1, 129.0], [65.2, 129.0], [65.3, 129.0], [65.4, 129.0], [65.5, 130.0], [65.6, 130.0], [65.7, 130.0], [65.8, 130.0], [65.9, 130.0], [66.0, 130.0], [66.1, 131.0], [66.2, 131.0], [66.3, 131.0], [66.4, 131.0], [66.5, 131.0], [66.6, 131.0], [66.7, 131.0], [66.8, 132.0], [66.9, 132.0], [67.0, 132.0], [67.1, 132.0], [67.2, 132.0], [67.3, 132.0], [67.4, 132.0], [67.5, 133.0], [67.6, 133.0], [67.7, 133.0], [67.8, 133.0], [67.9, 133.0], [68.0, 133.0], [68.1, 134.0], [68.2, 134.0], [68.3, 134.0], [68.4, 134.0], [68.5, 134.0], [68.6, 134.0], [68.7, 134.0], [68.8, 135.0], [68.9, 135.0], [69.0, 135.0], [69.1, 135.0], [69.2, 135.0], [69.3, 135.0], [69.4, 135.0], [69.5, 136.0], [69.6, 136.0], [69.7, 136.0], [69.8, 136.0], [69.9, 136.0], [70.0, 136.0], [70.1, 136.0], [70.2, 136.0], [70.3, 137.0], [70.4, 137.0], [70.5, 137.0], [70.6, 137.0], [70.7, 137.0], [70.8, 138.0], [70.9, 138.0], [71.0, 138.0], [71.1, 138.0], [71.2, 138.0], [71.3, 138.0], [71.4, 138.0], [71.5, 138.0], [71.6, 139.0], [71.7, 139.0], [71.8, 139.0], [71.9, 139.0], [72.0, 139.0], [72.1, 139.0], [72.2, 139.0], [72.3, 139.0], [72.4, 140.0], [72.5, 140.0], [72.6, 140.0], [72.7, 140.0], [72.8, 140.0], [72.9, 141.0], [73.0, 141.0], [73.1, 141.0], [73.2, 141.0], [73.3, 141.0], [73.4, 142.0], [73.5, 142.0], [73.6, 142.0], [73.7, 143.0], [73.8, 143.0], [73.9, 143.0], [74.0, 143.0], [74.1, 143.0], [74.2, 143.0], [74.3, 143.0], [74.4, 144.0], [74.5, 144.0], [74.6, 144.0], [74.7, 144.0], [74.8, 145.0], [74.9, 145.0], [75.0, 145.0], [75.1, 145.0], [75.2, 146.0], [75.3, 146.0], [75.4, 146.0], [75.5, 146.0], [75.6, 147.0], [75.7, 147.0], [75.8, 147.0], [75.9, 148.0], [76.0, 148.0], [76.1, 149.0], [76.2, 149.0], [76.3, 149.0], [76.4, 149.0], [76.5, 149.0], [76.6, 150.0], [76.7, 150.0], [76.8, 150.0], [76.9, 151.0], [77.0, 152.0], [77.1, 152.0], [77.2, 153.0], [77.3, 153.0], [77.4, 153.0], [77.5, 153.0], [77.6, 155.0], [77.7, 155.0], [77.8, 156.0], [77.9, 157.0], [78.0, 158.0], [78.1, 159.0], [78.2, 160.0], [78.3, 161.0], [78.4, 162.0], [78.5, 163.0], [78.6, 165.0], [78.7, 166.0], [78.8, 166.0], [78.9, 169.0], [79.0, 171.0], [79.1, 172.0], [79.2, 172.0], [79.3, 175.0], [79.4, 177.0], [79.5, 179.0], [79.6, 180.0], [79.7, 180.0], [79.8, 180.0], [79.9, 182.0], [80.0, 187.0], [80.1, 188.0], [80.2, 191.0], [80.3, 191.0], [80.4, 194.0], [80.5, 195.0], [80.6, 196.0], [80.7, 197.0], [80.8, 198.0], [80.9, 198.0], [81.0, 198.0], [81.1, 200.0], [81.2, 200.0], [81.3, 201.0], [81.4, 207.0], [81.5, 210.0], [81.6, 211.0], [81.7, 211.0], [81.8, 212.0], [81.9, 216.0], [82.0, 220.0], [82.1, 224.0], [82.2, 231.0], [82.3, 239.0], [82.4, 245.0], [82.5, 248.0], [82.6, 249.0], [82.7, 252.0], [82.8, 261.0], [82.9, 276.0], [83.0, 280.0], [83.1, 286.0], [83.2, 291.0], [83.3, 304.0], [83.4, 305.0], [83.5, 308.0], [83.6, 344.0], [83.7, 350.0], [83.8, 367.0], [83.9, 384.0], [84.0, 395.0], [84.1, 410.0], [84.2, 426.0], [84.3, 427.0], [84.4, 515.0], [84.5, 542.0], [84.6, 561.0], [84.7, 576.0], [84.8, 624.0], [84.9, 647.0], [85.0, 669.0], [85.1, 741.0], [85.2, 750.0], [85.3, 779.0], [85.4, 804.0], [85.5, 849.0], [85.6, 859.0], [85.7, 887.0], [85.8, 920.0], [85.9, 1135.0], [86.0, 1194.0], [86.1, 1600.0], [86.2, 1818.0], [86.3, 1823.0], [86.4, 3770.0], [86.5, 5781.0], [86.6, 6016.0], [86.7, 7170.0], [86.8, 7586.0], [86.9, 7704.0], [87.0, 8079.0], [87.1, 8887.0], [87.2, 9157.0], [87.3, 9787.0], [87.4, 9870.0], [87.5, 10104.0], [87.6, 10121.0], [87.7, 10131.0], [87.8, 10148.0], [87.9, 10166.0], [88.0, 10171.0], [88.1, 10256.0], [88.2, 10590.0], [88.3, 11255.0], [88.4, 11705.0], [88.5, 12777.0], [88.6, 14078.0], [88.7, 15397.0], [88.8, 16178.0], [88.9, 16250.0], [89.0, 16662.0], [89.1, 17360.0], [89.2, 18017.0], [89.3, 18341.0], [89.4, 18698.0], [89.5, 19148.0], [89.6, 19715.0], [89.7, 20167.0], [89.8, 20787.0], [89.9, 21167.0], [90.0, 21617.0], [90.1, 22029.0], [90.2, 22622.0], [90.3, 22728.0], [90.4, 22795.0], [90.5, 23188.0], [90.6, 23542.0], [90.7, 24073.0], [90.8, 25564.0], [90.9, 25884.0], [91.0, 29180.0], [91.1, 32816.0], [91.2, 32891.0], [91.3, 34208.0], [91.4, 35403.0], [91.5, 36320.0], [91.6, 36456.0], [91.7, 37769.0], [91.8, 38083.0], [91.9, 38288.0], [92.0, 40730.0], [92.1, 40936.0], [92.2, 41166.0], [92.3, 41202.0], [92.4, 42370.0], [92.5, 42557.0], [92.6, 43409.0], [92.7, 47374.0], [92.8, 49401.0], [92.9, 50997.0], [93.0, 53143.0], [93.1, 57336.0], [93.2, 60105.0], [93.3, 60107.0], [93.4, 60143.0], [93.5, 60155.0], [93.6, 60165.0], [93.7, 60170.0], [93.8, 60179.0], [93.9, 60195.0], [94.0, 60202.0], [94.1, 60212.0], [94.2, 60215.0], [94.3, 60252.0], [94.4, 60252.0], [94.5, 60257.0], [94.6, 60262.0], [94.7, 60266.0], [94.8, 60280.0], [94.9, 60306.0], [95.0, 60398.0], [95.1, 60571.0], [95.2, 60608.0], [95.3, 60676.0], [95.4, 60682.0], [95.5, 60709.0], [95.6, 60730.0], [95.7, 60746.0], [95.8, 60746.0], [95.9, 60762.0], [96.0, 60776.0], [96.1, 60821.0], [96.2, 60842.0], [96.3, 60881.0], [96.4, 60932.0], [96.5, 60938.0], [96.6, 60946.0], [96.7, 60957.0], [96.8, 60972.0], [96.9, 60978.0], [97.0, 60993.0], [97.1, 61164.0], [97.2, 61210.0], [97.3, 61307.0], [97.4, 61363.0], [97.5, 61554.0], [97.6, 61597.0], [97.7, 61705.0], [97.8, 61761.0], [97.9, 61783.0], [98.0, 61804.0], [98.1, 61833.0], [98.2, 61930.0], [98.3, 61940.0], [98.4, 62131.0], [98.5, 62687.0], [98.6, 62752.0], [98.7, 63108.0], [98.8, 63601.0], [98.9, 63756.0], [99.0, 63875.0], [99.1, 63895.0], [99.2, 63985.0], [99.3, 63990.0], [99.4, 65662.0], [99.5, 65786.0], [99.6, 65822.0], [99.7, 65858.0], [99.8, 67918.0], [99.9, 68072.0], [100.0, 68224.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 204.0], [0.1, 204.0], [0.2, 204.0], [0.3, 204.0], [0.4, 204.0], [0.5, 204.0], [0.6, 204.0], [0.7, 204.0], [0.8, 204.0], [0.9, 204.0], [1.0, 204.0], [1.1, 204.0], [1.2, 204.0], [1.3, 204.0], [1.4, 205.0], [1.5, 205.0], [1.6, 205.0], [1.7, 205.0], [1.8, 205.0], [1.9, 205.0], [2.0, 205.0], [2.1, 205.0], [2.2, 205.0], [2.3, 205.0], [2.4, 205.0], [2.5, 205.0], [2.6, 205.0], [2.7, 205.0], [2.8, 205.0], [2.9, 205.0], [3.0, 205.0], [3.1, 205.0], [3.2, 205.0], [3.3, 205.0], [3.4, 205.0], [3.5, 205.0], [3.6, 205.0], [3.7, 205.0], [3.8, 205.0], [3.9, 205.0], [4.0, 205.0], [4.1, 205.0], [4.2, 205.0], [4.3, 205.0], [4.4, 205.0], [4.5, 205.0], [4.6, 205.0], [4.7, 205.0], [4.8, 205.0], [4.9, 205.0], [5.0, 205.0], [5.1, 205.0], [5.2, 205.0], [5.3, 205.0], [5.4, 205.0], [5.5, 205.0], [5.6, 205.0], [5.7, 205.0], [5.8, 205.0], [5.9, 205.0], [6.0, 205.0], [6.1, 205.0], [6.2, 205.0], [6.3, 205.0], [6.4, 205.0], [6.5, 205.0], [6.6, 205.0], [6.7, 205.0], [6.8, 205.0], [6.9, 205.0], [7.0, 205.0], [7.1, 205.0], [7.2, 205.0], [7.3, 205.0], [7.4, 205.0], [7.5, 205.0], [7.6, 205.0], [7.7, 205.0], [7.8, 205.0], [7.9, 205.0], [8.0, 205.0], [8.1, 205.0], [8.2, 205.0], [8.3, 205.0], [8.4, 205.0], [8.5, 205.0], [8.6, 205.0], [8.7, 205.0], [8.8, 205.0], [8.9, 205.0], [9.0, 205.0], [9.1, 205.0], [9.2, 205.0], [9.3, 205.0], [9.4, 205.0], [9.5, 205.0], [9.6, 205.0], [9.7, 206.0], [9.8, 206.0], [9.9, 206.0], [10.0, 206.0], [10.1, 206.0], [10.2, 206.0], [10.3, 206.0], [10.4, 206.0], [10.5, 206.0], [10.6, 206.0], [10.7, 206.0], [10.8, 206.0], [10.9, 206.0], [11.0, 206.0], [11.1, 206.0], [11.2, 206.0], [11.3, 206.0], [11.4, 206.0], [11.5, 206.0], [11.6, 206.0], [11.7, 206.0], [11.8, 206.0], [11.9, 206.0], [12.0, 206.0], [12.1, 206.0], [12.2, 206.0], [12.3, 206.0], [12.4, 206.0], [12.5, 206.0], [12.6, 206.0], [12.7, 206.0], [12.8, 206.0], [12.9, 206.0], [13.0, 206.0], [13.1, 206.0], [13.2, 206.0], [13.3, 206.0], [13.4, 206.0], [13.5, 206.0], [13.6, 206.0], [13.7, 206.0], [13.8, 206.0], [13.9, 206.0], [14.0, 206.0], [14.1, 206.0], [14.2, 206.0], [14.3, 206.0], [14.4, 206.0], [14.5, 206.0], [14.6, 206.0], [14.7, 206.0], [14.8, 206.0], [14.9, 206.0], [15.0, 206.0], [15.1, 206.0], [15.2, 206.0], [15.3, 206.0], [15.4, 206.0], [15.5, 206.0], [15.6, 206.0], [15.7, 206.0], [15.8, 206.0], [15.9, 206.0], [16.0, 206.0], [16.1, 206.0], [16.2, 206.0], [16.3, 206.0], [16.4, 206.0], [16.5, 206.0], [16.6, 206.0], [16.7, 206.0], [16.8, 206.0], [16.9, 206.0], [17.0, 206.0], [17.1, 206.0], [17.2, 206.0], [17.3, 206.0], [17.4, 206.0], [17.5, 206.0], [17.6, 206.0], [17.7, 206.0], [17.8, 206.0], [17.9, 206.0], [18.0, 206.0], [18.1, 206.0], [18.2, 206.0], [18.3, 206.0], [18.4, 206.0], [18.5, 206.0], [18.6, 206.0], [18.7, 206.0], [18.8, 206.0], [18.9, 206.0], [19.0, 206.0], [19.1, 206.0], [19.2, 206.0], [19.3, 206.0], [19.4, 206.0], [19.5, 206.0], [19.6, 206.0], [19.7, 206.0], [19.8, 206.0], [19.9, 206.0], [20.0, 206.0], [20.1, 206.0], [20.2, 206.0], [20.3, 206.0], [20.4, 206.0], [20.5, 206.0], [20.6, 206.0], [20.7, 206.0], [20.8, 206.0], [20.9, 206.0], [21.0, 206.0], [21.1, 206.0], [21.2, 206.0], [21.3, 206.0], [21.4, 206.0], [21.5, 206.0], [21.6, 206.0], [21.7, 206.0], [21.8, 206.0], [21.9, 206.0], [22.0, 206.0], [22.1, 206.0], [22.2, 206.0], [22.3, 206.0], [22.4, 206.0], [22.5, 206.0], [22.6, 206.0], [22.7, 206.0], [22.8, 206.0], [22.9, 206.0], [23.0, 206.0], [23.1, 206.0], [23.2, 206.0], [23.3, 206.0], [23.4, 206.0], [23.5, 206.0], [23.6, 207.0], [23.7, 207.0], [23.8, 207.0], [23.9, 207.0], [24.0, 207.0], [24.1, 207.0], [24.2, 207.0], [24.3, 207.0], [24.4, 207.0], [24.5, 207.0], [24.6, 207.0], [24.7, 207.0], [24.8, 207.0], [24.9, 207.0], [25.0, 207.0], [25.1, 207.0], [25.2, 207.0], [25.3, 207.0], [25.4, 207.0], [25.5, 207.0], [25.6, 207.0], [25.7, 207.0], [25.8, 207.0], [25.9, 207.0], [26.0, 207.0], [26.1, 207.0], [26.2, 207.0], [26.3, 207.0], [26.4, 207.0], [26.5, 207.0], [26.6, 207.0], [26.7, 207.0], [26.8, 207.0], [26.9, 207.0], [27.0, 207.0], [27.1, 207.0], [27.2, 207.0], [27.3, 207.0], [27.4, 207.0], [27.5, 207.0], [27.6, 207.0], [27.7, 207.0], [27.8, 207.0], [27.9, 207.0], [28.0, 207.0], [28.1, 207.0], [28.2, 207.0], [28.3, 207.0], [28.4, 207.0], [28.5, 207.0], [28.6, 207.0], [28.7, 207.0], [28.8, 207.0], [28.9, 207.0], [29.0, 207.0], [29.1, 207.0], [29.2, 207.0], [29.3, 207.0], [29.4, 207.0], [29.5, 207.0], [29.6, 207.0], [29.7, 207.0], [29.8, 207.0], [29.9, 207.0], [30.0, 207.0], [30.1, 207.0], [30.2, 207.0], [30.3, 207.0], [30.4, 207.0], [30.5, 207.0], [30.6, 207.0], [30.7, 207.0], [30.8, 207.0], [30.9, 207.0], [31.0, 207.0], [31.1, 207.0], [31.2, 207.0], [31.3, 207.0], [31.4, 207.0], [31.5, 207.0], [31.6, 207.0], [31.7, 207.0], [31.8, 207.0], [31.9, 207.0], [32.0, 207.0], [32.1, 207.0], [32.2, 207.0], [32.3, 207.0], [32.4, 207.0], [32.5, 207.0], [32.6, 207.0], [32.7, 207.0], [32.8, 207.0], [32.9, 207.0], [33.0, 207.0], [33.1, 207.0], [33.2, 207.0], [33.3, 207.0], [33.4, 207.0], [33.5, 207.0], [33.6, 207.0], [33.7, 207.0], [33.8, 207.0], [33.9, 207.0], [34.0, 207.0], [34.1, 207.0], [34.2, 207.0], [34.3, 207.0], [34.4, 207.0], [34.5, 207.0], [34.6, 207.0], [34.7, 207.0], [34.8, 207.0], [34.9, 207.0], [35.0, 207.0], [35.1, 207.0], [35.2, 207.0], [35.3, 207.0], [35.4, 207.0], [35.5, 207.0], [35.6, 207.0], [35.7, 207.0], [35.8, 207.0], [35.9, 207.0], [36.0, 207.0], [36.1, 207.0], [36.2, 207.0], [36.3, 207.0], [36.4, 207.0], [36.5, 207.0], [36.6, 207.0], [36.7, 207.0], [36.8, 207.0], [36.9, 207.0], [37.0, 207.0], [37.1, 208.0], [37.2, 208.0], [37.3, 208.0], [37.4, 208.0], [37.5, 208.0], [37.6, 208.0], [37.7, 208.0], [37.8, 208.0], [37.9, 208.0], [38.0, 208.0], [38.1, 208.0], [38.2, 208.0], [38.3, 208.0], [38.4, 208.0], [38.5, 208.0], [38.6, 208.0], [38.7, 208.0], [38.8, 208.0], [38.9, 208.0], [39.0, 208.0], [39.1, 208.0], [39.2, 208.0], [39.3, 208.0], [39.4, 208.0], [39.5, 208.0], [39.6, 208.0], [39.7, 208.0], [39.8, 208.0], [39.9, 208.0], [40.0, 208.0], [40.1, 208.0], [40.2, 208.0], [40.3, 208.0], [40.4, 208.0], [40.5, 208.0], [40.6, 208.0], [40.7, 208.0], [40.8, 208.0], [40.9, 208.0], [41.0, 208.0], [41.1, 208.0], [41.2, 208.0], [41.3, 208.0], [41.4, 208.0], [41.5, 208.0], [41.6, 208.0], [41.7, 208.0], [41.8, 208.0], [41.9, 208.0], [42.0, 208.0], [42.1, 208.0], [42.2, 208.0], [42.3, 208.0], [42.4, 208.0], [42.5, 208.0], [42.6, 208.0], [42.7, 208.0], [42.8, 208.0], [42.9, 208.0], [43.0, 208.0], [43.1, 208.0], [43.2, 208.0], [43.3, 208.0], [43.4, 208.0], [43.5, 208.0], [43.6, 208.0], [43.7, 208.0], [43.8, 208.0], [43.9, 208.0], [44.0, 209.0], [44.1, 209.0], [44.2, 209.0], [44.3, 209.0], [44.4, 209.0], [44.5, 209.0], [44.6, 209.0], [44.7, 209.0], [44.8, 209.0], [44.9, 209.0], [45.0, 209.0], [45.1, 209.0], [45.2, 209.0], [45.3, 209.0], [45.4, 209.0], [45.5, 209.0], [45.6, 209.0], [45.7, 209.0], [45.8, 209.0], [45.9, 209.0], [46.0, 209.0], [46.1, 209.0], [46.2, 209.0], [46.3, 209.0], [46.4, 209.0], [46.5, 209.0], [46.6, 209.0], [46.7, 209.0], [46.8, 209.0], [46.9, 209.0], [47.0, 209.0], [47.1, 209.0], [47.2, 209.0], [47.3, 209.0], [47.4, 209.0], [47.5, 209.0], [47.6, 209.0], [47.7, 209.0], [47.8, 209.0], [47.9, 209.0], [48.0, 209.0], [48.1, 209.0], [48.2, 209.0], [48.3, 209.0], [48.4, 209.0], [48.5, 209.0], [48.6, 209.0], [48.7, 210.0], [48.8, 210.0], [48.9, 210.0], [49.0, 210.0], [49.1, 210.0], [49.2, 210.0], [49.3, 210.0], [49.4, 210.0], [49.5, 210.0], [49.6, 210.0], [49.7, 210.0], [49.8, 210.0], [49.9, 210.0], [50.0, 210.0], [50.1, 210.0], [50.2, 210.0], [50.3, 210.0], [50.4, 210.0], [50.5, 210.0], [50.6, 210.0], [50.7, 210.0], [50.8, 210.0], [50.9, 211.0], [51.0, 211.0], [51.1, 211.0], [51.2, 211.0], [51.3, 211.0], [51.4, 211.0], [51.5, 211.0], [51.6, 211.0], [51.7, 211.0], [51.8, 211.0], [51.9, 211.0], [52.0, 211.0], [52.1, 211.0], [52.2, 211.0], [52.3, 211.0], [52.4, 211.0], [52.5, 211.0], [52.6, 211.0], [52.7, 211.0], [52.8, 211.0], [52.9, 211.0], [53.0, 212.0], [53.1, 212.0], [53.2, 212.0], [53.3, 212.0], [53.4, 212.0], [53.5, 212.0], [53.6, 212.0], [53.7, 212.0], [53.8, 212.0], [53.9, 213.0], [54.0, 213.0], [54.1, 213.0], [54.2, 213.0], [54.3, 213.0], [54.4, 213.0], [54.5, 213.0], [54.6, 213.0], [54.7, 214.0], [54.8, 214.0], [54.9, 214.0], [55.0, 214.0], [55.1, 214.0], [55.2, 214.0], [55.3, 214.0], [55.4, 215.0], [55.5, 215.0], [55.6, 215.0], [55.7, 215.0], [55.8, 216.0], [55.9, 216.0], [56.0, 216.0], [56.1, 216.0], [56.2, 216.0], [56.3, 217.0], [56.4, 217.0], [56.5, 217.0], [56.6, 217.0], [56.7, 217.0], [56.8, 218.0], [56.9, 218.0], [57.0, 218.0], [57.1, 218.0], [57.2, 218.0], [57.3, 218.0], [57.4, 219.0], [57.5, 219.0], [57.6, 219.0], [57.7, 219.0], [57.8, 220.0], [57.9, 220.0], [58.0, 220.0], [58.1, 221.0], [58.2, 221.0], [58.3, 221.0], [58.4, 221.0], [58.5, 221.0], [58.6, 221.0], [58.7, 221.0], [58.8, 221.0], [58.9, 222.0], [59.0, 222.0], [59.1, 222.0], [59.2, 222.0], [59.3, 222.0], [59.4, 222.0], [59.5, 223.0], [59.6, 223.0], [59.7, 223.0], [59.8, 223.0], [59.9, 223.0], [60.0, 223.0], [60.1, 224.0], [60.2, 224.0], [60.3, 224.0], [60.4, 224.0], [60.5, 224.0], [60.6, 225.0], [60.7, 225.0], [60.8, 225.0], [60.9, 225.0], [61.0, 225.0], [61.1, 225.0], [61.2, 225.0], [61.3, 225.0], [61.4, 226.0], [61.5, 226.0], [61.6, 226.0], [61.7, 226.0], [61.8, 226.0], [61.9, 227.0], [62.0, 227.0], [62.1, 227.0], [62.2, 227.0], [62.3, 228.0], [62.4, 228.0], [62.5, 228.0], [62.6, 228.0], [62.7, 228.0], [62.8, 228.0], [62.9, 229.0], [63.0, 229.0], [63.1, 229.0], [63.2, 229.0], [63.3, 229.0], [63.4, 230.0], [63.5, 230.0], [63.6, 230.0], [63.7, 230.0], [63.8, 230.0], [63.9, 230.0], [64.0, 230.0], [64.1, 230.0], [64.2, 231.0], [64.3, 231.0], [64.4, 231.0], [64.5, 232.0], [64.6, 232.0], [64.7, 232.0], [64.8, 232.0], [64.9, 232.0], [65.0, 232.0], [65.1, 232.0], [65.2, 233.0], [65.3, 233.0], [65.4, 233.0], [65.5, 233.0], [65.6, 233.0], [65.7, 233.0], [65.8, 233.0], [65.9, 234.0], [66.0, 234.0], [66.1, 234.0], [66.2, 234.0], [66.3, 234.0], [66.4, 235.0], [66.5, 235.0], [66.6, 235.0], [66.7, 235.0], [66.8, 235.0], [66.9, 235.0], [67.0, 236.0], [67.1, 236.0], [67.2, 236.0], [67.3, 236.0], [67.4, 236.0], [67.5, 236.0], [67.6, 237.0], [67.7, 237.0], [67.8, 237.0], [67.9, 238.0], [68.0, 238.0], [68.1, 238.0], [68.2, 238.0], [68.3, 238.0], [68.4, 238.0], [68.5, 239.0], [68.6, 239.0], [68.7, 239.0], [68.8, 239.0], [68.9, 239.0], [69.0, 240.0], [69.1, 240.0], [69.2, 240.0], [69.3, 240.0], [69.4, 240.0], [69.5, 240.0], [69.6, 240.0], [69.7, 240.0], [69.8, 241.0], [69.9, 241.0], [70.0, 241.0], [70.1, 241.0], [70.2, 241.0], [70.3, 241.0], [70.4, 242.0], [70.5, 242.0], [70.6, 242.0], [70.7, 242.0], [70.8, 242.0], [70.9, 243.0], [71.0, 243.0], [71.1, 243.0], [71.2, 244.0], [71.3, 244.0], [71.4, 244.0], [71.5, 244.0], [71.6, 245.0], [71.7, 245.0], [71.8, 246.0], [71.9, 246.0], [72.0, 246.0], [72.1, 246.0], [72.2, 246.0], [72.3, 247.0], [72.4, 247.0], [72.5, 247.0], [72.6, 248.0], [72.7, 248.0], [72.8, 248.0], [72.9, 249.0], [73.0, 249.0], [73.1, 250.0], [73.2, 250.0], [73.3, 250.0], [73.4, 250.0], [73.5, 251.0], [73.6, 251.0], [73.7, 251.0], [73.8, 251.0], [73.9, 251.0], [74.0, 252.0], [74.1, 252.0], [74.2, 252.0], [74.3, 253.0], [74.4, 253.0], [74.5, 255.0], [74.6, 255.0], [74.7, 256.0], [74.8, 257.0], [74.9, 258.0], [75.0, 258.0], [75.1, 259.0], [75.2, 260.0], [75.3, 262.0], [75.4, 268.0], [75.5, 269.0], [75.6, 270.0], [75.7, 270.0], [75.8, 274.0], [75.9, 276.0], [76.0, 287.0], [76.1, 288.0], [76.2, 290.0], [76.3, 290.0], [76.4, 292.0], [76.5, 293.0], [76.6, 296.0], [76.7, 299.0], [76.8, 299.0], [76.9, 301.0], [77.0, 303.0], [77.1, 303.0], [77.2, 303.0], [77.3, 304.0], [77.4, 304.0], [77.5, 304.0], [77.6, 304.0], [77.7, 305.0], [77.8, 305.0], [77.9, 305.0], [78.0, 305.0], [78.1, 306.0], [78.2, 306.0], [78.3, 306.0], [78.4, 306.0], [78.5, 306.0], [78.6, 306.0], [78.7, 306.0], [78.8, 306.0], [78.9, 306.0], [79.0, 307.0], [79.1, 307.0], [79.2, 307.0], [79.3, 307.0], [79.4, 308.0], [79.5, 308.0], [79.6, 310.0], [79.7, 310.0], [79.8, 311.0], [79.9, 311.0], [80.0, 312.0], [80.1, 313.0], [80.2, 315.0], [80.3, 316.0], [80.4, 316.0], [80.5, 318.0], [80.6, 321.0], [80.7, 322.0], [80.8, 323.0], [80.9, 323.0], [81.0, 328.0], [81.1, 335.0], [81.2, 337.0], [81.3, 338.0], [81.4, 344.0], [81.5, 347.0], [81.6, 351.0], [81.7, 351.0], [81.8, 355.0], [81.9, 356.0], [82.0, 359.0], [82.1, 360.0], [82.2, 362.0], [82.3, 363.0], [82.4, 364.0], [82.5, 366.0], [82.6, 368.0], [82.7, 376.0], [82.8, 376.0], [82.9, 379.0], [83.0, 379.0], [83.1, 383.0], [83.2, 387.0], [83.3, 387.0], [83.4, 389.0], [83.5, 390.0], [83.6, 394.0], [83.7, 396.0], [83.8, 397.0], [83.9, 399.0], [84.0, 400.0], [84.1, 401.0], [84.2, 402.0], [84.3, 402.0], [84.4, 403.0], [84.5, 403.0], [84.6, 404.0], [84.7, 404.0], [84.8, 404.0], [84.9, 405.0], [85.0, 405.0], [85.1, 405.0], [85.2, 405.0], [85.3, 406.0], [85.4, 406.0], [85.5, 406.0], [85.6, 406.0], [85.7, 406.0], [85.8, 406.0], [85.9, 407.0], [86.0, 407.0], [86.1, 407.0], [86.2, 407.0], [86.3, 407.0], [86.4, 407.0], [86.5, 407.0], [86.6, 407.0], [86.7, 407.0], [86.8, 407.0], [86.9, 407.0], [87.0, 407.0], [87.1, 408.0], [87.2, 408.0], [87.3, 408.0], [87.4, 408.0], [87.5, 408.0], [87.6, 408.0], [87.7, 408.0], [87.8, 408.0], [87.9, 408.0], [88.0, 408.0], [88.1, 408.0], [88.2, 408.0], [88.3, 409.0], [88.4, 409.0], [88.5, 409.0], [88.6, 409.0], [88.7, 409.0], [88.8, 409.0], [88.9, 410.0], [89.0, 410.0], [89.1, 410.0], [89.2, 411.0], [89.3, 411.0], [89.4, 411.0], [89.5, 411.0], [89.6, 412.0], [89.7, 412.0], [89.8, 416.0], [89.9, 416.0], [90.0, 418.0], [90.1, 432.0], [90.2, 439.0], [90.3, 440.0], [90.4, 455.0], [90.5, 458.0], [90.6, 463.0], [90.7, 469.0], [90.8, 484.0], [90.9, 498.0], [91.0, 504.0], [91.1, 507.0], [91.2, 509.0], [91.3, 509.0], [91.4, 510.0], [91.5, 511.0], [91.6, 544.0], [91.7, 545.0], [91.8, 585.0], [91.9, 611.0], [92.0, 614.0], [92.1, 615.0], [92.2, 621.0], [92.3, 634.0], [92.4, 669.0], [92.5, 689.0], [92.6, 713.0], [92.7, 724.0], [92.8, 732.0], [92.9, 739.0], [93.0, 761.0], [93.1, 767.0], [93.2, 852.0], [93.3, 873.0], [93.4, 890.0], [93.5, 893.0], [93.6, 908.0], [93.7, 936.0], [93.8, 969.0], [93.9, 972.0], [94.0, 1315.0], [94.1, 1334.0], [94.2, 1334.0], [94.3, 1536.0], [94.4, 1675.0], [94.5, 1729.0], [94.6, 1810.0], [94.7, 3166.0], [94.8, 3378.0], [94.9, 3620.0], [95.0, 3780.0], [95.1, 3808.0], [95.2, 3915.0], [95.3, 3993.0], [95.4, 4096.0], [95.5, 4403.0], [95.6, 4811.0], [95.7, 4881.0], [95.8, 5169.0], [95.9, 5323.0], [96.0, 5631.0], [96.1, 5828.0], [96.2, 5836.0], [96.3, 6656.0], [96.4, 6662.0], [96.5, 7267.0], [96.6, 7599.0], [96.7, 8097.0], [96.8, 8395.0], [96.9, 9128.0], [97.0, 9311.0], [97.1, 9828.0], [97.2, 10213.0], [97.3, 10250.0], [97.4, 10291.0], [97.5, 10319.0], [97.6, 10341.0], [97.7, 10341.0], [97.8, 10342.0], [97.9, 10343.0], [98.0, 10757.0], [98.1, 11688.0], [98.2, 11985.0], [98.3, 12722.0], [98.4, 13199.0], [98.5, 14338.0], [98.6, 16588.0], [98.7, 19558.0], [98.8, 22220.0], [98.9, 30633.0], [99.0, 39430.0], [99.1, 41679.0], [99.2, 44030.0], [99.3, 45157.0], [99.4, 45258.0], [99.5, 53042.0], [99.6, 60887.0], [99.7, 60928.0], [99.8, 61121.0], [99.9, 62055.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 1392.0, "series": [{"data": [[66700.0, 1.0], [69100.0, 1.0], [67500.0, 1.0], [72300.0, 1.0], [73900.0, 1.0], [80300.0, 1.0], [92300.0, 1.0], [109100.0, 1.0], [122700.0, 1.0], [125100.0, 1.0], [36100.0, 1.0], [34900.0, 1.0], [38100.0, 1.0], [37300.0, 1.0], [42900.0, 1.0], [41300.0, 2.0], [48900.0, 1.0], [60100.0, 1.0], [60500.0, 11.0], [60900.0, 1.0], [61700.0, 3.0], [64100.0, 1.0], [64500.0, 2.0], [67400.0, 1.0], [68200.0, 1.0], [70600.0, 1.0], [300.0, 1217.0], [100200.0, 1.0], [400.0, 93.0], [105800.0, 1.0], [121800.0, 2.0], [500.0, 84.0], [600.0, 22.0], [700.0, 17.0], [800.0, 9.0], [900.0, 5.0], [1000.0, 10.0], [1100.0, 4.0], [1300.0, 4.0], [1400.0, 2.0], [1500.0, 2.0], [1600.0, 2.0], [1700.0, 3.0], [1800.0, 2.0], [2000.0, 1.0], [2600.0, 1.0], [3300.0, 1.0], [3900.0, 3.0], [4100.0, 1.0], [72100.0, 1.0], [4900.0, 1.0], [80100.0, 1.0], [6100.0, 1.0], [6300.0, 1.0], [108900.0, 1.0], [7300.0, 2.0], [7600.0, 1.0], [7800.0, 1.0], [7700.0, 2.0], [7900.0, 1.0], [8600.0, 1.0], [8400.0, 1.0], [8500.0, 1.0], [9200.0, 1.0], [9300.0, 1.0], [9500.0, 1.0], [10100.0, 1.0], [10000.0, 1.0], [9900.0, 1.0], [10300.0, 1.0], [10400.0, 1.0], [10600.0, 1.0], [10500.0, 1.0], [10800.0, 1.0], [10900.0, 1.0], [11600.0, 1.0], [11300.0, 1.0], [11500.0, 2.0], [12000.0, 1.0], [12200.0, 1.0], [13200.0, 1.0], [13300.0, 1.0], [14300.0, 1.0], [14400.0, 1.0], [15300.0, 1.0], [15800.0, 1.0], [16100.0, 1.0], [16800.0, 2.0], [16600.0, 1.0], [18200.0, 1.0], [19000.0, 1.0], [19200.0, 2.0], [20000.0, 2.0], [20400.0, 1.0], [21400.0, 1.0], [21000.0, 1.0], [22000.0, 1.0], [21800.0, 1.0], [23200.0, 2.0], [23000.0, 1.0], [24400.0, 2.0], [23800.0, 1.0], [26200.0, 1.0], [30600.0, 2.0], [33200.0, 2.0], [34400.0, 1.0], [36800.0, 1.0], [38400.0, 1.0], [39600.0, 1.0], [41600.0, 2.0], [42800.0, 1.0], [47600.0, 1.0], [55200.0, 1.0], [56400.0, 1.0], [60400.0, 7.0], [61200.0, 2.0], [60800.0, 2.0], [61600.0, 1.0], [62400.0, 1.0], [63600.0, 2.0], [68000.0, 2.0], [66400.0, 1.0], [72800.0, 1.0], [72000.0, 2.0], [71200.0, 2.0], [74400.0, 1.0], [76000.0, 1.0], [66300.0, 1.0], [67100.0, 1.0], [69500.0, 1.0], [68700.0, 1.0], [71100.0, 2.0], [70300.0, 1.0], [75900.0, 1.0], [75100.0, 2.0], [78300.0, 1.0], [82300.0, 1.0], [83100.0, 1.0], [93500.0, 1.0], [102300.0, 1.0], [38700.0, 1.0], [41100.0, 1.0], [42700.0, 1.0], [41500.0, 1.0], [47900.0, 1.0], [50700.0, 1.0], [60700.0, 1.0], [60300.0, 4.0], [61100.0, 1.0], [63500.0, 1.0], [66200.0, 2.0], [69400.0, 1.0], [71000.0, 1.0], [72600.0, 1.0], [76600.0, 1.0], [104600.0, 1.0], [66900.0, 1.0], [68500.0, 1.0], [67700.0, 2.0], [104500.0, 1.0], [115700.0, 1.0], [16500.0, 2.0], [17700.0, 1.0], [18300.0, 1.0], [18700.0, 1.0], [20100.0, 1.0], [19700.0, 1.0], [19500.0, 1.0], [20300.0, 1.0], [20500.0, 1.0], [21100.0, 1.0], [22300.0, 1.0], [22100.0, 1.0], [23100.0, 1.0], [22900.0, 1.0], [23500.0, 1.0], [23900.0, 1.0], [23700.0, 1.0], [25100.0, 1.0], [25700.0, 1.0], [27100.0, 1.0], [30500.0, 1.0], [34600.0, 1.0], [36600.0, 1.0], [35800.0, 1.0], [38200.0, 1.0], [41000.0, 1.0], [43800.0, 1.0], [51000.0, 1.0], [51400.0, 1.0], [53400.0, 1.0], [60600.0, 3.0], [61000.0, 3.0], [62200.0, 2.0], [62600.0, 2.0], [61800.0, 1.0], [64600.0, 1.0], [68400.0, 2.0], [66000.0, 2.0], [76400.0, 1.0], [74000.0, 1.0], [80400.0, 1.0], [83600.0, 1.0], [100400.0, 1.0], [123600.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[67900.0, 1.0], [65900.0, 1.0], [100.0, 1392.0], [34500.0, 1.0], [34100.0, 1.0], [36300.0, 1.0], [35700.0, 1.0], [37700.0, 1.0], [40700.0, 2.0], [40900.0, 1.0], [42500.0, 1.0], [42300.0, 1.0], [41100.0, 1.0], [48500.0, 1.0], [47300.0, 2.0], [50900.0, 1.0], [200.0, 37.0], [53100.0, 1.0], [57300.0, 1.0], [55700.0, 1.0], [60100.0, 13.0], [60300.0, 3.0], [60700.0, 10.0], [60900.0, 12.0], [61100.0, 1.0], [60500.0, 2.0], [61300.0, 3.0], [63100.0, 1.0], [61900.0, 3.0], [62700.0, 2.0], [61700.0, 5.0], [62500.0, 1.0], [61500.0, 3.0], [62100.0, 1.0], [63900.0, 3.0], [63700.0, 2.0], [64100.0, 1.0], [63500.0, 1.0], [68200.0, 1.0], [65800.0, 3.0], [300.0, 14.0], [400.0, 6.0], [500.0, 6.0], [600.0, 6.0], [700.0, 5.0], [800.0, 6.0], [900.0, 2.0], [1100.0, 3.0], [1500.0, 1.0], [1600.0, 2.0], [1800.0, 2.0], [3100.0, 1.0], [3700.0, 1.0], [65700.0, 1.0], [4700.0, 1.0], [5700.0, 1.0], [6000.0, 1.0], [6700.0, 1.0], [7100.0, 1.0], [7300.0, 1.0], [7600.0, 1.0], [7500.0, 1.0], [7700.0, 1.0], [8000.0, 1.0], [8200.0, 1.0], [8800.0, 1.0], [9000.0, 1.0], [9100.0, 1.0], [9700.0, 1.0], [9800.0, 2.0], [10100.0, 10.0], [10200.0, 3.0], [10500.0, 1.0], [11200.0, 1.0], [11000.0, 1.0], [11700.0, 1.0], [11800.0, 1.0], [12700.0, 1.0], [13000.0, 1.0], [14000.0, 1.0], [15300.0, 1.0], [15700.0, 1.0], [16200.0, 2.0], [16100.0, 1.0], [17300.0, 1.0], [16600.0, 1.0], [16400.0, 1.0], [18300.0, 1.0], [18000.0, 3.0], [18600.0, 1.0], [18800.0, 1.0], [19300.0, 1.0], [19100.0, 1.0], [20100.0, 1.0], [19800.0, 1.0], [19700.0, 1.0], [20700.0, 2.0], [21400.0, 1.0], [21100.0, 1.0], [21600.0, 1.0], [21900.0, 1.0], [22000.0, 1.0], [22700.0, 3.0], [22600.0, 2.0], [23100.0, 1.0], [23500.0, 2.0], [24000.0, 2.0], [25500.0, 1.0], [24600.0, 1.0], [25800.0, 1.0], [26700.0, 1.0], [29100.0, 1.0], [30300.0, 1.0], [32800.0, 2.0], [34200.0, 1.0], [36400.0, 1.0], [35400.0, 1.0], [37800.0, 1.0], [37000.0, 1.0], [38000.0, 1.0], [38200.0, 1.0], [39200.0, 1.0], [41200.0, 2.0], [42400.0, 1.0], [41000.0, 1.0], [43400.0, 1.0], [50400.0, 1.0], [49400.0, 1.0], [59800.0, 1.0], [60200.0, 16.0], [60600.0, 5.0], [60800.0, 5.0], [61000.0, 1.0], [61200.0, 2.0], [62000.0, 1.0], [61800.0, 3.0], [61600.0, 1.0], [62600.0, 1.0], [63800.0, 3.0], [63600.0, 1.0], [65600.0, 2.0], [68000.0, 2.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[600.0, 11.0], [700.0, 10.0], [800.0, 7.0], [900.0, 7.0], [1200.0, 1.0], [1300.0, 4.0], [1400.0, 1.0], [1500.0, 2.0], [1600.0, 1.0], [1700.0, 2.0], [1800.0, 1.0], [1900.0, 1.0], [3100.0, 1.0], [3300.0, 2.0], [3500.0, 1.0], [3700.0, 2.0], [3600.0, 1.0], [3800.0, 2.0], [3900.0, 2.0], [4000.0, 2.0], [4200.0, 1.0], [4400.0, 1.0], [4800.0, 2.0], [4700.0, 1.0], [5100.0, 2.0], [5200.0, 1.0], [5300.0, 1.0], [5500.0, 1.0], [5600.0, 1.0], [5800.0, 3.0], [6000.0, 1.0], [6600.0, 2.0], [6700.0, 1.0], [7200.0, 2.0], [7500.0, 1.0], [7700.0, 1.0], [8000.0, 1.0], [8400.0, 1.0], [8300.0, 1.0], [9100.0, 1.0], [9300.0, 2.0], [9800.0, 1.0], [10200.0, 5.0], [9900.0, 1.0], [10700.0, 2.0], [10300.0, 8.0], [10400.0, 1.0], [11600.0, 1.0], [11900.0, 1.0], [12700.0, 1.0], [12600.0, 1.0], [13100.0, 1.0], [13000.0, 1.0], [13400.0, 1.0], [14300.0, 1.0], [16500.0, 1.0], [17500.0, 1.0], [19500.0, 1.0], [21500.0, 1.0], [22200.0, 1.0], [29500.0, 1.0], [30600.0, 1.0], [39500.0, 1.0], [39400.0, 1.0], [41600.0, 1.0], [42700.0, 1.0], [44000.0, 1.0], [45200.0, 2.0], [45100.0, 2.0], [200.0, 1325.0], [53000.0, 1.0], [54900.0, 1.0], [61000.0, 1.0], [61100.0, 1.0], [60800.0, 1.0], [60900.0, 1.0], [61700.0, 1.0], [62000.0, 1.0], [63000.0, 1.0], [300.0, 124.0], [400.0, 120.0], [500.0, 16.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 125100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3155.0, "series": [{"data": [[0.0, 120.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 21.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 146.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3155.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.68547086E12, "maxY": 25.0, "series": [{"data": [[1.6854711E12, 8.666666666666666], [1.68547206E12, 10.466666666666667], [1.6854714E12, 15.068800000000001], [1.6854717E12, 25.0], [1.68547104E12, 5.021739130434782], [1.685472E12, 14.08108108108108], [1.68547086E12, 1.0], [1.68547182E12, 23.348484848484844], [1.68547116E12, 10.0], [1.68547212E12, 5.7058823529411775], [1.68547146E12, 18.292929292929298], [1.68547176E12, 25.0], [1.68547158E12, 20.08144796380091], [1.68547092E12, 3.874999999999999], [1.68547188E12, 20.20833333333333], [1.68547122E12, 10.029411764705882], [1.68547218E12, 4.728395061728396], [1.68547152E12, 20.0], [1.68547134E12, 15.0], [1.68547164E12, 23.096330275229345], [1.68547098E12, 5.0], [1.68547194E12, 17.073170731707318], [1.68547128E12, 14.117647058823529]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547218E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 191.0, "minX": 1.0, "maxY": 75187.0, "series": [{"data": [[2.0, 4006.0], [8.0, 26712.5], [9.0, 46897.4], [10.0, 41300.25641025641], [11.0, 60445.6], [3.0, 3397.0], [12.0, 75187.0], [13.0, 52889.66666666667], [14.0, 23346.4], [15.0, 6388.371024734984], [4.0, 4512.6], [16.0, 2870.6545454545453], [1.0, 494.5], [17.0, 2542.5106382978724], [18.0, 9362.42857142857], [19.0, 1492.280701754386], [5.0, 6463.63963963964], [20.0, 1928.0220125786163], [21.0, 9186.493150684932], [22.0, 2953.875], [23.0, 2682.929577464789], [24.0, 5545.299999999999], [25.0, 25067.500000000004], [7.0, 38414.5]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[18.000580720092923, 7069.0673635307785]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 4796.666666666666], [8.0, 26305.5], [9.0, 46507.8], [10.0, 39866.948717948726], [11.0, 54217.4], [3.0, 4520.0], [12.0, 60662.16666666667], [13.0, 51847.833333333336], [14.0, 22339.449999999997], [15.0, 5591.328621908128], [4.0, 5166.25], [16.0, 1396.3818181818183], [1.0, 191.0], [17.0, 1427.6170212765956], [18.0, 6767.678571428572], [19.0, 1192.7368421052631], [5.0, 5902.945454545454], [20.0, 1294.0298742138364], [21.0, 5702.904109589041], [22.0, 2009.953125], [23.0, 1908.8169014084506], [24.0, 4729.414285714286], [25.0, 21712.938775510203], [7.0, 34575.25]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[18.044263249854403, 5940.84682585906]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 382.25], [3.0, 356.6666666666667], [4.0, 361.0], [5.0, 343.41441441441424], [6.0, 416.0], [7.0, 6386.0], [8.0, 364.6666666666667], [9.0, 395.0], [10.0, 764.6111111111111], [11.0, 2005.1666666666667], [12.0, 844.0], [13.0, 313.6666666666667], [14.0, 2942.6521739130435], [15.0, 750.6232394366198], [1.0, 415.0], [16.0, 449.4814814814815], [17.0, 1478.7083333333333], [18.0, 722.7857142857144], [19.0, 814.8947368421053], [20.0, 671.6175548589337], [21.0, 2758.5921052631584], [22.0, 287.0], [23.0, 643.0694444444445], [24.0, 795.9117647058824], [25.0, 7351.851063829787]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[17.9686956521739, 1179.7965217391315]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6.95, "minX": 1.68547086E12, "maxY": 41531.63333333333, "series": [{"data": [[1.6854711E12, 658.8166666666667], [1.68547206E12, 430.6666666666667], [1.6854714E12, 4707.733333333334], [1.6854717E12, 686.2833333333333], [1.68547104E12, 1137.0333333333333], [1.685472E12, 561.05], [1.68547086E12, 36.28333333333333], [1.68547182E12, 782.4], [1.68547116E12, 870.5666666666667], [1.68547212E12, 876.2166666666667], [1.68547146E12, 5952.566666666667], [1.68547176E12, 809.7666666666667], [1.68547158E12, 6631.566666666667], [1.68547092E12, 805.5833333333334], [1.68547188E12, 642.0166666666667], [1.68547122E12, 543.0833333333334], [1.68547218E12, 1222.2], [1.68547152E12, 6371.283333333334], [1.68547134E12, 2204.35], [1.68547164E12, 6933.15], [1.68547098E12, 880.6], [1.68547194E12, 584.1833333333333], [1.68547128E12, 1897.0333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6854711E12, 1002.25], [1.68547206E12, 1593.75], [1.6854714E12, 29123.5], [1.6854717E12, 3306.9666666666667], [1.68547104E12, 2473.9166666666665], [1.685472E12, 1818.15], [1.68547086E12, 6.95], [1.68547182E12, 3732.0833333333335], [1.68547116E12, 2625.45], [1.68547212E12, 5188.283333333334], [1.68547146E12, 37606.03333333333], [1.68547176E12, 2095.7], [1.68547158E12, 41531.63333333333], [1.68547092E12, 973.5833333333334], [1.68547188E12, 2324.2833333333333], [1.68547122E12, 1448.9333333333334], [1.68547218E12, 7708.533333333334], [1.68547152E12, 40913.21666666667], [1.68547134E12, 7837.516666666666], [1.68547164E12, 40954.13333333333], [1.68547098E12, 1728.1166666666666], [1.68547194E12, 1936.1666666666667], [1.68547128E12, 5965.716666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547218E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 112.88505747126433, "minX": 1.68547086E12, "maxY": 80930.83333333333, "series": [{"data": [[1.6854711E12, 32700.444444444445], [1.68547206E12, 60502.909090909096], [1.6854714E12, 351.00478468899513], [1.6854717E12, 49355.78260869565], [1.68547104E12, 17711.13333333334], [1.685472E12, 80930.83333333333], [1.68547182E12, 73208.79166666666], [1.68547116E12, 33224.46666666665], [1.68547212E12, 13785.318181818182], [1.68547146E12, 329.6954887218043], [1.68547176E12, 51876.41666666667], [1.68547158E12, 491.9664429530203], [1.68547092E12, 14223.100000000002], [1.68547188E12, 74856.25], [1.68547122E12, 35825.0], [1.68547218E12, 444.81481481481484], [1.68547152E12, 496.3140794223828], [1.68547134E12, 12973.411764705877], [1.68547164E12, 347.7111913357399], [1.68547098E12, 20999.0], [1.68547194E12, 78690.0], [1.68547128E12, 18310.913043478264]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6854711E12, 31268.714285714286], [1.68547206E12, 53504.200000000004], [1.6854714E12, 133.56521739130443], [1.6854717E12, 42223.0], [1.68547104E12, 17328.8], [1.685472E12, 61934.61538461538], [1.68547182E12, 56280.739130434784], [1.68547116E12, 33217.117647058825], [1.68547212E12, 15036.999999999996], [1.68547146E12, 112.88505747126433], [1.68547176E12, 43826.57142857142], [1.68547158E12, 222.70344827586197], [1.68547092E12, 14319.777777777777], [1.68547188E12, 53697.5], [1.68547122E12, 35434.181818181816], [1.68547218E12, 148.05555555555557], [1.68547152E12, 178.41549295774632], [1.68547134E12, 14788.27586206897], [1.68547164E12, 122.73986486486487], [1.68547098E12, 19690.333333333336], [1.68547194E12, 58198.15384615385], [1.68547128E12, 19205.651162790695]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6854711E12, 384.45454545454544], [1.68547206E12, 1063.3333333333333], [1.6854714E12, 216.9186602870813], [1.6854717E12, 3476.071428571429], [1.68547104E12, 389.625], [1.685472E12, 10272.833333333334], [1.68547086E12, 440.0], [1.68547182E12, 17352.631578947367], [1.68547116E12, 377.4117647058824], [1.68547212E12, 1567.4], [1.68547146E12, 215.88679245283018], [1.68547176E12, 25849.849999999995], [1.68547158E12, 312.01013513513493], [1.68547092E12, 370.6153846153846], [1.68547188E12, 20426.57142857143], [1.68547122E12, 359.49999999999994], [1.68547218E12, 313.462962962963], [1.68547152E12, 274.21863799283153], [1.68547134E12, 356.0175438596491], [1.68547164E12, 237.89632107023422], [1.68547098E12, 387.33333333333337], [1.68547194E12, 17109.714285714286], [1.68547128E12, 334.4255319148936]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547218E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 112.81609195402295, "minX": 1.68547086E12, "maxY": 78653.58333333333, "series": [{"data": [[1.6854711E12, 32700.0], [1.68547206E12, 60502.545454545456], [1.6854714E12, 350.9234449760765], [1.6854717E12, 49355.65217391304], [1.68547104E12, 17710.933333333338], [1.685472E12, 78653.58333333333], [1.68547182E12, 70578.87499999999], [1.68547116E12, 33223.26666666667], [1.68547212E12, 13747.068181818184], [1.68547146E12, 329.56015037594], [1.68547176E12, 46882.75000000001], [1.68547158E12, 491.92953020134166], [1.68547092E12, 14221.6], [1.68547188E12, 73888.24999999999], [1.68547122E12, 35824.63636363637], [1.68547218E12, 444.77777777777777], [1.68547152E12, 496.2454873646209], [1.68547134E12, 12971.69117647059], [1.68547164E12, 347.62454873646203], [1.68547098E12, 20998.0], [1.68547194E12, 78595.14285714287], [1.68547128E12, 18304.89130434782]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6854711E12, 31268.14285714286], [1.68547206E12, 53504.200000000004], [1.6854714E12, 133.51690821256034], [1.6854717E12, 42223.0], [1.68547104E12, 17328.6], [1.685472E12, 61934.61538461538], [1.68547182E12, 56280.69565217392], [1.68547116E12, 33216.88235294119], [1.68547212E12, 15036.999999999996], [1.68547146E12, 112.81609195402295], [1.68547176E12, 43826.57142857142], [1.68547158E12, 222.68965517241375], [1.68547092E12, 14319.333333333334], [1.68547188E12, 53697.5], [1.68547122E12, 35434.09090909091], [1.68547218E12, 148.03703703703707], [1.68547152E12, 178.37323943661968], [1.68547134E12, 14788.189655172417], [1.68547164E12, 122.72297297297301], [1.68547098E12, 19689.833333333332], [1.68547194E12, 58198.15384615385], [1.68547128E12, 19205.534883720935]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6854711E12, 383.18181818181824], [1.68547206E12, 876.4444444444445], [1.6854714E12, 216.88995215311007], [1.6854717E12, 3307.571428571429], [1.68547104E12, 389.625], [1.685472E12, 6739.75], [1.68547086E12, 430.0], [1.68547182E12, 16537.42105263158], [1.68547116E12, 377.2352941176471], [1.68547212E12, 1567.3714285714286], [1.68547146E12, 215.81886792452838], [1.68547176E12, 19815.750000000004], [1.68547158E12, 311.98648648648697], [1.68547092E12, 370.4615384615385], [1.68547188E12, 20331.714285714286], [1.68547122E12, 359.4166666666667], [1.68547218E12, 313.44444444444446], [1.68547152E12, 274.18996415770624], [1.68547134E12, 355.84210526315775], [1.68547164E12, 237.82274247491634], [1.68547098E12, 387.0], [1.68547194E12, 15157.785714285716], [1.68547128E12, 326.4893617021277]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547218E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68547086E12, "maxY": 213.0909090909091, "series": [{"data": [[1.6854711E12, 190.44444444444446], [1.68547206E12, 166.0], [1.6854714E12, 105.43540669856453], [1.6854717E12, 102.95652173913044], [1.68547104E12, 192.33333333333334], [1.685472E12, 187.75], [1.68547182E12, 171.54166666666663], [1.68547116E12, 178.6], [1.68547212E12, 162.93181818181816], [1.68547146E12, 103.17669172932334], [1.68547176E12, 159.41666666666666], [1.68547158E12, 104.95302013422817], [1.68547092E12, 161.5], [1.68547188E12, 201.87500000000003], [1.68547122E12, 210.36363636363637], [1.68547218E12, 151.05555555555554], [1.68547152E12, 103.0072202166065], [1.68547134E12, 156.5294117647059], [1.68547164E12, 103.27436823104695], [1.68547098E12, 213.0909090909091], [1.68547194E12, 157.78571428571428], [1.68547128E12, 146.39130434782612]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6854711E12, 0.0], [1.68547206E12, 0.0], [1.6854714E12, 0.0], [1.6854717E12, 0.0], [1.68547104E12, 0.0], [1.685472E12, 21.076923076923077], [1.68547182E12, 5.130434782608695], [1.68547116E12, 0.0], [1.68547212E12, 0.0], [1.68547146E12, 0.0], [1.68547176E12, 10.214285714285714], [1.68547158E12, 0.0], [1.68547092E12, 0.0], [1.68547188E12, 15.055555555555555], [1.68547122E12, 0.0], [1.68547218E12, 0.0], [1.68547152E12, 0.0], [1.68547134E12, 0.0], [1.68547164E12, 0.0], [1.68547098E12, 0.0], [1.68547194E12, 7.923076923076923], [1.68547128E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6854711E12, 181.81818181818178], [1.68547206E12, 158.33333333333334], [1.6854714E12, 105.17224880382776], [1.6854717E12, 155.7142857142857], [1.68547104E12, 193.87499999999997], [1.685472E12, 169.00000000000003], [1.68547086E12, 207.0], [1.68547182E12, 188.10526315789477], [1.68547116E12, 199.23529411764707], [1.68547212E12, 164.11428571428576], [1.68547146E12, 103.17358490566032], [1.68547176E12, 153.3], [1.68547158E12, 104.96283783783784], [1.68547092E12, 177.15384615384616], [1.68547188E12, 154.42857142857144], [1.68547122E12, 169.5], [1.68547218E12, 151.05555555555557], [1.68547152E12, 103.010752688172], [1.68547134E12, 164.0877192982456], [1.68547164E12, 103.25752508361201], [1.68547098E12, 196.0], [1.68547194E12, 159.78571428571428], [1.68547128E12, 135.10638297872342]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547218E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 209.0, "minX": 1.68547086E12, "maxY": 59891.0, "series": [{"data": [[1.6854711E12, 37801.0], [1.68547206E12, 3166.0], [1.6854717E12, 11688.0], [1.68547104E12, 23188.0], [1.685472E12, 53042.0], [1.68547086E12, 440.0], [1.68547182E12, 41679.0], [1.68547116E12, 50997.0], [1.68547212E12, 12677.0], [1.68547176E12, 45260.0], [1.68547092E12, 22795.0], [1.68547188E12, 54988.0], [1.68547122E12, 42557.0], [1.68547134E12, 21167.0], [1.68547164E12, 1729.0], [1.68547098E12, 24073.0], [1.68547194E12, 29561.0], [1.68547128E12, 59891.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6854711E12, 36468.1], [1.68547206E12, 3166.0], [1.6854717E12, 11316.000000000002], [1.68547104E12, 20498.0], [1.685472E12, 45035.60000000003], [1.68547086E12, 440.0], [1.68547182E12, 35841.30000000002], [1.68547116E12, 48576.0], [1.68547212E12, 12677.0], [1.68547176E12, 45258.6], [1.68547092E12, 21886.199999999997], [1.68547188E12, 52796.40000000001], [1.68547122E12, 42519.6], [1.68547134E12, 643.7000000000004], [1.68547164E12, 1729.0], [1.68547098E12, 23410.0], [1.68547194E12, 27949.600000000006], [1.68547128E12, 3077.799999999991]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6854711E12, 37801.0], [1.68547206E12, 3166.0], [1.6854717E12, 11688.0], [1.68547104E12, 23188.0], [1.685472E12, 53042.0], [1.68547086E12, 440.0], [1.68547182E12, 41679.0], [1.68547116E12, 50997.0], [1.68547212E12, 12677.0], [1.68547176E12, 45260.0], [1.68547092E12, 22795.0], [1.68547188E12, 54988.0], [1.68547122E12, 42557.0], [1.68547134E12, 21167.0], [1.68547164E12, 1729.0], [1.68547098E12, 24073.0], [1.68547194E12, 29561.0], [1.68547128E12, 59891.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6854711E12, 37801.0], [1.68547206E12, 3166.0], [1.6854717E12, 11688.0], [1.68547104E12, 22171.6], [1.685472E12, 53042.0], [1.68547086E12, 440.0], [1.68547182E12, 41679.0], [1.68547116E12, 50997.0], [1.68547212E12, 12677.0], [1.68547176E12, 45260.0], [1.68547092E12, 22769.2], [1.68547188E12, 54988.0], [1.68547122E12, 42557.0], [1.68547134E12, 20848.25], [1.68547164E12, 1729.0], [1.68547098E12, 24061.0], [1.68547194E12, 29561.0], [1.68547128E12, 19807.799999999785]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6854711E12, 281.0], [1.68547206E12, 411.0], [1.6854717E12, 1334.0], [1.68547104E12, 303.0], [1.685472E12, 512.0], [1.68547086E12, 440.0], [1.68547182E12, 4403.0], [1.68547116E12, 337.0], [1.68547212E12, 12677.0], [1.68547176E12, 3374.0], [1.68547092E12, 299.0], [1.68547188E12, 3620.0], [1.68547122E12, 406.0], [1.68547134E12, 214.0], [1.68547164E12, 259.0], [1.68547098E12, 227.0], [1.68547194E12, 1536.0], [1.68547128E12, 209.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6854711E12, 407.5], [1.68547206E12, 613.0], [1.6854717E12, 3786.0], [1.68547104E12, 509.0], [1.685472E12, 6656.0], [1.68547086E12, 440.0], [1.68547182E12, 10344.5], [1.68547116E12, 36456.0], [1.68547212E12, 12677.0], [1.68547176E12, 15463.0], [1.68547092E12, 405.0], [1.68547188E12, 6041.0], [1.68547122E12, 39217.0], [1.68547134E12, 401.5], [1.68547164E12, 700.0], [1.68547098E12, 5160.0], [1.68547194E12, 5836.0], [1.68547128E12, 308.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547212E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 175.5, "minX": 1.0, "maxY": 24633.0, "series": [{"data": [[1.0, 5828.0], [2.0, 3597.0], [4.0, 411.0], [8.0, 402.0], [9.0, 278.0], [10.0, 10060.5], [5.0, 1315.0], [3.0, 1148.0], [6.0, 407.0], [25.0, 306.5], [7.0, 260.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 323.0], [8.0, 205.0], [9.0, 205.0], [10.0, 205.0], [11.0, 205.0], [3.0, 211.0], [12.0, 204.5], [13.0, 204.0], [14.0, 175.5], [15.0, 206.0], [1.0, 24633.0], [4.0, 207.0], [16.0, 205.0], [17.0, 205.0], [5.0, 207.0], [6.0, 205.0], [25.0, 2685.0], [7.0, 205.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 175.5, "minX": 1.0, "maxY": 24633.0, "series": [{"data": [[1.0, 5827.0], [2.0, 3378.0], [4.0, 410.5], [8.0, 401.5], [9.0, 277.5], [10.0, 10060.5], [5.0, 1315.0], [3.0, 1147.5], [6.0, 407.0], [25.0, 306.0], [7.0, 250.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 323.0], [8.0, 205.0], [9.0, 205.0], [10.0, 205.0], [11.0, 205.0], [3.0, 211.0], [12.0, 204.5], [13.0, 204.0], [14.0, 175.5], [15.0, 206.0], [1.0, 24633.0], [4.0, 207.0], [16.0, 204.5], [17.0, 205.0], [5.0, 207.0], [6.0, 205.0], [25.0, 2685.0], [7.0, 205.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68547086E12, "maxY": 10.25, "series": [{"data": [[1.6854711E12, 0.4166666666666667], [1.68547206E12, 0.31666666666666665], [1.6854714E12, 6.933333333333334], [1.6854717E12, 0.55], [1.68547104E12, 0.5], [1.685472E12, 0.3333333333333333], [1.68547086E12, 0.016666666666666666], [1.68547182E12, 0.65], [1.68547116E12, 0.5666666666666667], [1.68547212E12, 1.1], [1.68547146E12, 8.75], [1.68547176E12, 0.65], [1.68547158E12, 9.633333333333333], [1.68547092E12, 0.4166666666666667], [1.68547188E12, 0.5166666666666667], [1.68547122E12, 0.38333333333333336], [1.68547218E12, 1.7833333333333334], [1.68547152E12, 9.533333333333333], [1.68547134E12, 1.7333333333333334], [1.68547164E12, 10.25], [1.68547098E12, 0.4166666666666667], [1.68547194E12, 0.38333333333333336], [1.68547128E12, 1.5333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547218E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68547086E12, "maxY": 9.783333333333333, "series": [{"data": [[1.6854711E12, 0.3], [1.68547206E12, 0.15], [1.6854717E12, 0.18333333333333332], [1.68547104E12, 0.5166666666666667], [1.685472E12, 0.18333333333333332], [1.68547086E12, 0.016666666666666666], [1.68547182E12, 0.2], [1.68547116E12, 0.31666666666666665], [1.68547212E12, 0.016666666666666666], [1.68547176E12, 0.26666666666666666], [1.68547092E12, 0.36666666666666664], [1.68547188E12, 0.18333333333333332], [1.68547122E12, 0.18333333333333332], [1.68547134E12, 0.6], [1.68547164E12, 0.13333333333333333], [1.68547098E12, 0.4], [1.68547194E12, 0.18333333333333332], [1.68547128E12, 0.5833333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68547206E12, 0.05]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68547158E12, 9.766666666666667], [1.6854714E12, 6.933333333333334], [1.68547122E12, 0.2], [1.6854717E12, 0.13333333333333333], [1.68547218E12, 1.8], [1.68547152E12, 9.383333333333333], [1.68547134E12, 1.15], [1.68547116E12, 0.25], [1.68547164E12, 9.783333333333333], [1.68547212E12, 1.0666666666666667], [1.68547146E12, 8.766666666666667], [1.68547128E12, 0.7666666666666667]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68547206E12, 0.11666666666666667], [1.68547188E12, 0.35], [1.6854717E12, 0.2833333333333333], [1.685472E12, 0.23333333333333334], [1.68547134E12, 0.16666666666666666], [1.68547182E12, 0.5], [1.68547212E12, 0.16666666666666666], [1.68547194E12, 0.26666666666666666], [1.68547128E12, 0.15], [1.68547176E12, 0.26666666666666666]], "isOverall": false, "label": "504", "isController": false}, {"data": [[1.68547176E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547218E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68547086E12, "maxY": 4.966666666666667, "series": [{"data": [[1.6854711E12, 0.18333333333333332], [1.68547206E12, 0.15], [1.6854717E12, 0.18333333333333332], [1.68547104E12, 0.26666666666666666], [1.685472E12, 0.18333333333333332], [1.68547086E12, 0.016666666666666666], [1.68547182E12, 0.2], [1.68547116E12, 0.08333333333333333], [1.68547212E12, 0.016666666666666666], [1.68547176E12, 0.26666666666666666], [1.68547092E12, 0.21666666666666667], [1.68547188E12, 0.18333333333333332], [1.68547122E12, 0.016666666666666666], [1.68547134E12, 0.5666666666666667], [1.68547164E12, 0.13333333333333333], [1.68547098E12, 0.2], [1.68547194E12, 0.18333333333333332], [1.68547128E12, 0.5333333333333333]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.6854714E12, 3.4833333333333334], [1.6854717E12, 0.05], [1.685472E12, 0.016666666666666666], [1.68547182E12, 0.11666666666666667], [1.68547116E12, 0.2], [1.68547212E12, 0.5666666666666667], [1.68547146E12, 4.416666666666667], [1.68547176E12, 0.06666666666666667], [1.68547158E12, 4.933333333333334], [1.68547188E12, 0.05], [1.68547122E12, 0.18333333333333332], [1.68547218E12, 0.9], [1.68547152E12, 4.65], [1.68547134E12, 0.38333333333333336], [1.68547164E12, 4.85], [1.68547194E12, 0.05], [1.68547128E12, 0.25]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68547206E12, 0.16666666666666666], [1.6854714E12, 3.45], [1.6854717E12, 0.36666666666666664], [1.685472E12, 0.21666666666666667], [1.68547182E12, 0.38333333333333336], [1.68547116E12, 0.05], [1.68547212E12, 0.6666666666666666], [1.68547146E12, 4.35], [1.68547176E12, 0.23333333333333334], [1.68547158E12, 4.833333333333333], [1.68547188E12, 0.3], [1.68547122E12, 0.016666666666666666], [1.68547218E12, 0.9], [1.68547152E12, 4.733333333333333], [1.68547134E12, 0.9333333333333333], [1.68547164E12, 4.933333333333334], [1.68547194E12, 0.21666666666666667], [1.68547128E12, 0.6666666666666666]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.6854711E12, 0.15], [1.68547092E12, 0.16666666666666666], [1.68547122E12, 0.03333333333333333], [1.68547104E12, 0.25], [1.68547134E12, 0.016666666666666666], [1.68547116E12, 0.16666666666666666], [1.68547098E12, 0.18333333333333332], [1.68547128E12, 0.016666666666666666]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68547206E12, 0.18333333333333332], [1.6854714E12, 3.4833333333333334], [1.6854717E12, 0.38333333333333336], [1.685472E12, 0.2], [1.68547182E12, 0.4], [1.68547116E12, 0.08333333333333333], [1.68547212E12, 0.7333333333333333], [1.68547146E12, 4.433333333333334], [1.68547176E12, 0.2], [1.68547158E12, 4.966666666666667], [1.68547188E12, 0.26666666666666666], [1.68547122E12, 0.15], [1.68547218E12, 0.9], [1.68547152E12, 4.616666666666666], [1.68547134E12, 1.1166666666666667], [1.68547164E12, 4.616666666666666], [1.68547194E12, 0.23333333333333334], [1.68547128E12, 0.75]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.6854711E12, 0.11666666666666667], [1.68547092E12, 0.15], [1.68547122E12, 0.16666666666666666], [1.68547104E12, 0.25], [1.68547134E12, 0.03333333333333333], [1.68547116E12, 0.23333333333333334], [1.68547098E12, 0.2], [1.68547128E12, 0.05]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547218E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68547086E12, "maxY": 14.733333333333333, "series": [{"data": [[1.6854711E12, 0.45], [1.68547206E12, 0.15], [1.6854717E12, 0.18333333333333332], [1.68547104E12, 0.7666666666666667], [1.685472E12, 0.18333333333333332], [1.68547086E12, 0.016666666666666666], [1.68547182E12, 0.2], [1.68547116E12, 0.48333333333333334], [1.68547212E12, 0.016666666666666666], [1.68547176E12, 0.26666666666666666], [1.68547092E12, 0.5333333333333333], [1.68547188E12, 0.18333333333333332], [1.68547122E12, 0.21666666666666667], [1.68547134E12, 0.6166666666666667], [1.68547164E12, 0.13333333333333333], [1.68547098E12, 0.5833333333333334], [1.68547194E12, 0.18333333333333332], [1.68547128E12, 0.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68547206E12, 0.35], [1.6854714E12, 10.416666666666666], [1.6854717E12, 0.8], [1.685472E12, 0.43333333333333335], [1.68547182E12, 0.9], [1.68547116E12, 0.3333333333333333], [1.68547212E12, 1.9666666666666666], [1.68547146E12, 13.2], [1.68547176E12, 0.5], [1.68547158E12, 14.733333333333333], [1.68547188E12, 0.6166666666666667], [1.68547122E12, 0.35], [1.68547218E12, 2.7], [1.68547152E12, 14.0], [1.68547134E12, 2.433333333333333], [1.68547164E12, 14.4], [1.68547194E12, 0.5], [1.68547128E12, 1.6666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547218E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

