/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 101.0, "minX": 0.0, "maxY": 120584.0, "series": [{"data": [[0.0, 204.0], [0.1, 205.0], [0.2, 206.0], [0.3, 207.0], [0.4, 207.0], [0.5, 208.0], [0.6, 305.0], [0.7, 307.0], [0.8, 307.0], [0.9, 307.0], [1.0, 307.0], [1.1, 307.0], [1.2, 307.0], [1.3, 308.0], [1.4, 308.0], [1.5, 308.0], [1.6, 308.0], [1.7, 308.0], [1.8, 308.0], [1.9, 308.0], [2.0, 308.0], [2.1, 308.0], [2.2, 308.0], [2.3, 308.0], [2.4, 308.0], [2.5, 308.0], [2.6, 308.0], [2.7, 308.0], [2.8, 308.0], [2.9, 308.0], [3.0, 308.0], [3.1, 308.0], [3.2, 308.0], [3.3, 308.0], [3.4, 308.0], [3.5, 309.0], [3.6, 309.0], [3.7, 309.0], [3.8, 309.0], [3.9, 309.0], [4.0, 309.0], [4.1, 309.0], [4.2, 309.0], [4.3, 309.0], [4.4, 309.0], [4.5, 309.0], [4.6, 309.0], [4.7, 309.0], [4.8, 309.0], [4.9, 309.0], [5.0, 309.0], [5.1, 309.0], [5.2, 309.0], [5.3, 309.0], [5.4, 309.0], [5.5, 309.0], [5.6, 309.0], [5.7, 309.0], [5.8, 309.0], [5.9, 309.0], [6.0, 309.0], [6.1, 309.0], [6.2, 309.0], [6.3, 309.0], [6.4, 309.0], [6.5, 309.0], [6.6, 309.0], [6.7, 309.0], [6.8, 309.0], [6.9, 309.0], [7.0, 309.0], [7.1, 309.0], [7.2, 309.0], [7.3, 309.0], [7.4, 309.0], [7.5, 309.0], [7.6, 309.0], [7.7, 309.0], [7.8, 309.0], [7.9, 309.0], [8.0, 310.0], [8.1, 310.0], [8.2, 310.0], [8.3, 310.0], [8.4, 310.0], [8.5, 310.0], [8.6, 310.0], [8.7, 310.0], [8.8, 310.0], [8.9, 310.0], [9.0, 310.0], [9.1, 310.0], [9.2, 310.0], [9.3, 310.0], [9.4, 310.0], [9.5, 310.0], [9.6, 310.0], [9.7, 310.0], [9.8, 310.0], [9.9, 310.0], [10.0, 310.0], [10.1, 310.0], [10.2, 310.0], [10.3, 310.0], [10.4, 310.0], [10.5, 310.0], [10.6, 310.0], [10.7, 310.0], [10.8, 310.0], [10.9, 310.0], [11.0, 310.0], [11.1, 310.0], [11.2, 310.0], [11.3, 310.0], [11.4, 310.0], [11.5, 310.0], [11.6, 310.0], [11.7, 310.0], [11.8, 310.0], [11.9, 310.0], [12.0, 310.0], [12.1, 310.0], [12.2, 310.0], [12.3, 310.0], [12.4, 310.0], [12.5, 310.0], [12.6, 310.0], [12.7, 310.0], [12.8, 310.0], [12.9, 310.0], [13.0, 310.0], [13.1, 310.0], [13.2, 310.0], [13.3, 310.0], [13.4, 310.0], [13.5, 310.0], [13.6, 310.0], [13.7, 310.0], [13.8, 310.0], [13.9, 310.0], [14.0, 310.0], [14.1, 310.0], [14.2, 310.0], [14.3, 310.0], [14.4, 310.0], [14.5, 310.0], [14.6, 310.0], [14.7, 310.0], [14.8, 310.0], [14.9, 310.0], [15.0, 310.0], [15.1, 310.0], [15.2, 310.0], [15.3, 310.0], [15.4, 310.0], [15.5, 310.0], [15.6, 310.0], [15.7, 310.0], [15.8, 310.0], [15.9, 310.0], [16.0, 310.0], [16.1, 310.0], [16.2, 311.0], [16.3, 311.0], [16.4, 311.0], [16.5, 311.0], [16.6, 311.0], [16.7, 311.0], [16.8, 311.0], [16.9, 311.0], [17.0, 311.0], [17.1, 311.0], [17.2, 311.0], [17.3, 311.0], [17.4, 311.0], [17.5, 311.0], [17.6, 311.0], [17.7, 311.0], [17.8, 311.0], [17.9, 311.0], [18.0, 311.0], [18.1, 311.0], [18.2, 311.0], [18.3, 311.0], [18.4, 311.0], [18.5, 311.0], [18.6, 311.0], [18.7, 311.0], [18.8, 311.0], [18.9, 311.0], [19.0, 311.0], [19.1, 311.0], [19.2, 311.0], [19.3, 311.0], [19.4, 311.0], [19.5, 311.0], [19.6, 311.0], [19.7, 311.0], [19.8, 311.0], [19.9, 311.0], [20.0, 311.0], [20.1, 311.0], [20.2, 311.0], [20.3, 311.0], [20.4, 311.0], [20.5, 311.0], [20.6, 311.0], [20.7, 311.0], [20.8, 311.0], [20.9, 311.0], [21.0, 311.0], [21.1, 311.0], [21.2, 311.0], [21.3, 311.0], [21.4, 311.0], [21.5, 311.0], [21.6, 311.0], [21.7, 311.0], [21.8, 311.0], [21.9, 311.0], [22.0, 311.0], [22.1, 311.0], [22.2, 311.0], [22.3, 311.0], [22.4, 311.0], [22.5, 311.0], [22.6, 311.0], [22.7, 311.0], [22.8, 311.0], [22.9, 311.0], [23.0, 311.0], [23.1, 311.0], [23.2, 311.0], [23.3, 311.0], [23.4, 311.0], [23.5, 311.0], [23.6, 311.0], [23.7, 311.0], [23.8, 311.0], [23.9, 311.0], [24.0, 311.0], [24.1, 311.0], [24.2, 311.0], [24.3, 311.0], [24.4, 311.0], [24.5, 311.0], [24.6, 311.0], [24.7, 311.0], [24.8, 311.0], [24.9, 311.0], [25.0, 311.0], [25.1, 311.0], [25.2, 311.0], [25.3, 311.0], [25.4, 311.0], [25.5, 311.0], [25.6, 311.0], [25.7, 311.0], [25.8, 311.0], [25.9, 311.0], [26.0, 311.0], [26.1, 312.0], [26.2, 312.0], [26.3, 312.0], [26.4, 312.0], [26.5, 312.0], [26.6, 312.0], [26.7, 312.0], [26.8, 312.0], [26.9, 312.0], [27.0, 312.0], [27.1, 312.0], [27.2, 312.0], [27.3, 312.0], [27.4, 312.0], [27.5, 312.0], [27.6, 312.0], [27.7, 312.0], [27.8, 312.0], [27.9, 312.0], [28.0, 312.0], [28.1, 312.0], [28.2, 312.0], [28.3, 312.0], [28.4, 312.0], [28.5, 312.0], [28.6, 312.0], [28.7, 312.0], [28.8, 312.0], [28.9, 312.0], [29.0, 312.0], [29.1, 312.0], [29.2, 312.0], [29.3, 312.0], [29.4, 312.0], [29.5, 312.0], [29.6, 312.0], [29.7, 312.0], [29.8, 312.0], [29.9, 312.0], [30.0, 312.0], [30.1, 312.0], [30.2, 312.0], [30.3, 312.0], [30.4, 312.0], [30.5, 312.0], [30.6, 312.0], [30.7, 312.0], [30.8, 312.0], [30.9, 312.0], [31.0, 312.0], [31.1, 312.0], [31.2, 312.0], [31.3, 312.0], [31.4, 312.0], [31.5, 312.0], [31.6, 312.0], [31.7, 312.0], [31.8, 312.0], [31.9, 312.0], [32.0, 312.0], [32.1, 312.0], [32.2, 312.0], [32.3, 312.0], [32.4, 312.0], [32.5, 312.0], [32.6, 312.0], [32.7, 312.0], [32.8, 312.0], [32.9, 312.0], [33.0, 312.0], [33.1, 312.0], [33.2, 312.0], [33.3, 312.0], [33.4, 312.0], [33.5, 312.0], [33.6, 312.0], [33.7, 312.0], [33.8, 312.0], [33.9, 312.0], [34.0, 312.0], [34.1, 312.0], [34.2, 312.0], [34.3, 312.0], [34.4, 312.0], [34.5, 312.0], [34.6, 312.0], [34.7, 312.0], [34.8, 312.0], [34.9, 312.0], [35.0, 312.0], [35.1, 312.0], [35.2, 312.0], [35.3, 312.0], [35.4, 312.0], [35.5, 312.0], [35.6, 312.0], [35.7, 312.0], [35.8, 312.0], [35.9, 312.0], [36.0, 312.0], [36.1, 312.0], [36.2, 312.0], [36.3, 312.0], [36.4, 312.0], [36.5, 312.0], [36.6, 312.0], [36.7, 312.0], [36.8, 312.0], [36.9, 312.0], [37.0, 312.0], [37.1, 312.0], [37.2, 312.0], [37.3, 312.0], [37.4, 312.0], [37.5, 312.0], [37.6, 312.0], [37.7, 313.0], [37.8, 313.0], [37.9, 313.0], [38.0, 313.0], [38.1, 313.0], [38.2, 313.0], [38.3, 313.0], [38.4, 313.0], [38.5, 313.0], [38.6, 313.0], [38.7, 313.0], [38.8, 313.0], [38.9, 313.0], [39.0, 313.0], [39.1, 313.0], [39.2, 313.0], [39.3, 313.0], [39.4, 313.0], [39.5, 313.0], [39.6, 313.0], [39.7, 313.0], [39.8, 313.0], [39.9, 313.0], [40.0, 313.0], [40.1, 313.0], [40.2, 313.0], [40.3, 313.0], [40.4, 313.0], [40.5, 313.0], [40.6, 313.0], [40.7, 313.0], [40.8, 313.0], [40.9, 313.0], [41.0, 313.0], [41.1, 313.0], [41.2, 313.0], [41.3, 313.0], [41.4, 313.0], [41.5, 313.0], [41.6, 313.0], [41.7, 313.0], [41.8, 313.0], [41.9, 313.0], [42.0, 313.0], [42.1, 313.0], [42.2, 313.0], [42.3, 313.0], [42.4, 313.0], [42.5, 313.0], [42.6, 313.0], [42.7, 313.0], [42.8, 313.0], [42.9, 313.0], [43.0, 313.0], [43.1, 313.0], [43.2, 313.0], [43.3, 313.0], [43.4, 313.0], [43.5, 313.0], [43.6, 313.0], [43.7, 313.0], [43.8, 313.0], [43.9, 313.0], [44.0, 313.0], [44.1, 313.0], [44.2, 313.0], [44.3, 313.0], [44.4, 313.0], [44.5, 313.0], [44.6, 313.0], [44.7, 313.0], [44.8, 313.0], [44.9, 313.0], [45.0, 313.0], [45.1, 313.0], [45.2, 313.0], [45.3, 313.0], [45.4, 313.0], [45.5, 313.0], [45.6, 313.0], [45.7, 313.0], [45.8, 313.0], [45.9, 313.0], [46.0, 313.0], [46.1, 313.0], [46.2, 313.0], [46.3, 313.0], [46.4, 313.0], [46.5, 313.0], [46.6, 313.0], [46.7, 313.0], [46.8, 313.0], [46.9, 313.0], [47.0, 313.0], [47.1, 313.0], [47.2, 313.0], [47.3, 313.0], [47.4, 313.0], [47.5, 313.0], [47.6, 313.0], [47.7, 313.0], [47.8, 313.0], [47.9, 313.0], [48.0, 313.0], [48.1, 313.0], [48.2, 313.0], [48.3, 313.0], [48.4, 313.0], [48.5, 313.0], [48.6, 313.0], [48.7, 313.0], [48.8, 313.0], [48.9, 313.0], [49.0, 313.0], [49.1, 313.0], [49.2, 313.0], [49.3, 313.0], [49.4, 313.0], [49.5, 314.0], [49.6, 314.0], [49.7, 314.0], [49.8, 314.0], [49.9, 314.0], [50.0, 314.0], [50.1, 314.0], [50.2, 314.0], [50.3, 314.0], [50.4, 314.0], [50.5, 314.0], [50.6, 314.0], [50.7, 314.0], [50.8, 314.0], [50.9, 314.0], [51.0, 314.0], [51.1, 314.0], [51.2, 314.0], [51.3, 314.0], [51.4, 314.0], [51.5, 314.0], [51.6, 314.0], [51.7, 314.0], [51.8, 314.0], [51.9, 314.0], [52.0, 314.0], [52.1, 314.0], [52.2, 314.0], [52.3, 314.0], [52.4, 314.0], [52.5, 314.0], [52.6, 314.0], [52.7, 314.0], [52.8, 314.0], [52.9, 314.0], [53.0, 314.0], [53.1, 314.0], [53.2, 314.0], [53.3, 314.0], [53.4, 314.0], [53.5, 314.0], [53.6, 314.0], [53.7, 314.0], [53.8, 314.0], [53.9, 314.0], [54.0, 314.0], [54.1, 314.0], [54.2, 314.0], [54.3, 314.0], [54.4, 314.0], [54.5, 314.0], [54.6, 314.0], [54.7, 314.0], [54.8, 314.0], [54.9, 314.0], [55.0, 314.0], [55.1, 314.0], [55.2, 314.0], [55.3, 314.0], [55.4, 314.0], [55.5, 314.0], [55.6, 314.0], [55.7, 314.0], [55.8, 314.0], [55.9, 314.0], [56.0, 314.0], [56.1, 314.0], [56.2, 314.0], [56.3, 314.0], [56.4, 314.0], [56.5, 314.0], [56.6, 314.0], [56.7, 314.0], [56.8, 314.0], [56.9, 314.0], [57.0, 314.0], [57.1, 314.0], [57.2, 314.0], [57.3, 314.0], [57.4, 314.0], [57.5, 314.0], [57.6, 314.0], [57.7, 314.0], [57.8, 314.0], [57.9, 314.0], [58.0, 314.0], [58.1, 314.0], [58.2, 314.0], [58.3, 314.0], [58.4, 314.0], [58.5, 314.0], [58.6, 314.0], [58.7, 314.0], [58.8, 314.0], [58.9, 314.0], [59.0, 314.0], [59.1, 314.0], [59.2, 314.0], [59.3, 314.0], [59.4, 314.0], [59.5, 314.0], [59.6, 314.0], [59.7, 314.0], [59.8, 314.0], [59.9, 314.0], [60.0, 314.0], [60.1, 315.0], [60.2, 315.0], [60.3, 315.0], [60.4, 315.0], [60.5, 315.0], [60.6, 315.0], [60.7, 315.0], [60.8, 315.0], [60.9, 315.0], [61.0, 315.0], [61.1, 315.0], [61.2, 315.0], [61.3, 315.0], [61.4, 315.0], [61.5, 315.0], [61.6, 315.0], [61.7, 315.0], [61.8, 315.0], [61.9, 315.0], [62.0, 315.0], [62.1, 315.0], [62.2, 315.0], [62.3, 315.0], [62.4, 315.0], [62.5, 315.0], [62.6, 315.0], [62.7, 315.0], [62.8, 315.0], [62.9, 315.0], [63.0, 315.0], [63.1, 315.0], [63.2, 315.0], [63.3, 315.0], [63.4, 315.0], [63.5, 315.0], [63.6, 315.0], [63.7, 315.0], [63.8, 315.0], [63.9, 315.0], [64.0, 315.0], [64.1, 315.0], [64.2, 315.0], [64.3, 315.0], [64.4, 315.0], [64.5, 315.0], [64.6, 315.0], [64.7, 315.0], [64.8, 315.0], [64.9, 315.0], [65.0, 315.0], [65.1, 315.0], [65.2, 315.0], [65.3, 315.0], [65.4, 315.0], [65.5, 315.0], [65.6, 315.0], [65.7, 315.0], [65.8, 315.0], [65.9, 315.0], [66.0, 315.0], [66.1, 315.0], [66.2, 315.0], [66.3, 315.0], [66.4, 315.0], [66.5, 315.0], [66.6, 315.0], [66.7, 315.0], [66.8, 315.0], [66.9, 315.0], [67.0, 315.0], [67.1, 315.0], [67.2, 315.0], [67.3, 315.0], [67.4, 315.0], [67.5, 315.0], [67.6, 315.0], [67.7, 315.0], [67.8, 315.0], [67.9, 315.0], [68.0, 315.0], [68.1, 316.0], [68.2, 316.0], [68.3, 316.0], [68.4, 316.0], [68.5, 316.0], [68.6, 316.0], [68.7, 316.0], [68.8, 316.0], [68.9, 316.0], [69.0, 316.0], [69.1, 316.0], [69.2, 316.0], [69.3, 316.0], [69.4, 316.0], [69.5, 316.0], [69.6, 316.0], [69.7, 316.0], [69.8, 316.0], [69.9, 316.0], [70.0, 316.0], [70.1, 316.0], [70.2, 316.0], [70.3, 316.0], [70.4, 316.0], [70.5, 316.0], [70.6, 316.0], [70.7, 316.0], [70.8, 316.0], [70.9, 316.0], [71.0, 316.0], [71.1, 316.0], [71.2, 316.0], [71.3, 316.0], [71.4, 316.0], [71.5, 316.0], [71.6, 316.0], [71.7, 316.0], [71.8, 316.0], [71.9, 316.0], [72.0, 316.0], [72.1, 316.0], [72.2, 316.0], [72.3, 316.0], [72.4, 316.0], [72.5, 316.0], [72.6, 316.0], [72.7, 316.0], [72.8, 316.0], [72.9, 316.0], [73.0, 316.0], [73.1, 316.0], [73.2, 316.0], [73.3, 316.0], [73.4, 316.0], [73.5, 317.0], [73.6, 317.0], [73.7, 317.0], [73.8, 317.0], [73.9, 317.0], [74.0, 317.0], [74.1, 317.0], [74.2, 317.0], [74.3, 317.0], [74.4, 317.0], [74.5, 317.0], [74.6, 317.0], [74.7, 317.0], [74.8, 317.0], [74.9, 317.0], [75.0, 317.0], [75.1, 317.0], [75.2, 317.0], [75.3, 317.0], [75.4, 317.0], [75.5, 317.0], [75.6, 317.0], [75.7, 317.0], [75.8, 317.0], [75.9, 317.0], [76.0, 317.0], [76.1, 317.0], [76.2, 317.0], [76.3, 317.0], [76.4, 317.0], [76.5, 317.0], [76.6, 317.0], [76.7, 317.0], [76.8, 317.0], [76.9, 317.0], [77.0, 318.0], [77.1, 318.0], [77.2, 318.0], [77.3, 318.0], [77.4, 318.0], [77.5, 318.0], [77.6, 318.0], [77.7, 318.0], [77.8, 318.0], [77.9, 318.0], [78.0, 318.0], [78.1, 318.0], [78.2, 318.0], [78.3, 318.0], [78.4, 318.0], [78.5, 318.0], [78.6, 318.0], [78.7, 319.0], [78.8, 319.0], [78.9, 319.0], [79.0, 319.0], [79.1, 319.0], [79.2, 319.0], [79.3, 319.0], [79.4, 319.0], [79.5, 319.0], [79.6, 319.0], [79.7, 319.0], [79.8, 319.0], [79.9, 319.0], [80.0, 319.0], [80.1, 319.0], [80.2, 320.0], [80.3, 320.0], [80.4, 320.0], [80.5, 320.0], [80.6, 320.0], [80.7, 320.0], [80.8, 320.0], [80.9, 320.0], [81.0, 321.0], [81.1, 321.0], [81.2, 321.0], [81.3, 321.0], [81.4, 321.0], [81.5, 321.0], [81.6, 321.0], [81.7, 322.0], [81.8, 322.0], [81.9, 322.0], [82.0, 323.0], [82.1, 323.0], [82.2, 323.0], [82.3, 324.0], [82.4, 324.0], [82.5, 325.0], [82.6, 325.0], [82.7, 326.0], [82.8, 327.0], [82.9, 328.0], [83.0, 328.0], [83.1, 329.0], [83.2, 331.0], [83.3, 331.0], [83.4, 334.0], [83.5, 336.0], [83.6, 337.0], [83.7, 338.0], [83.8, 339.0], [83.9, 339.0], [84.0, 342.0], [84.1, 343.0], [84.2, 345.0], [84.3, 346.0], [84.4, 347.0], [84.5, 348.0], [84.6, 349.0], [84.7, 350.0], [84.8, 353.0], [84.9, 354.0], [85.0, 356.0], [85.1, 361.0], [85.2, 363.0], [85.3, 364.0], [85.4, 366.0], [85.5, 367.0], [85.6, 368.0], [85.7, 369.0], [85.8, 373.0], [85.9, 375.0], [86.0, 376.0], [86.1, 377.0], [86.2, 380.0], [86.3, 384.0], [86.4, 384.0], [86.5, 391.0], [86.6, 395.0], [86.7, 397.0], [86.8, 397.0], [86.9, 401.0], [87.0, 405.0], [87.1, 408.0], [87.2, 409.0], [87.3, 409.0], [87.4, 409.0], [87.5, 411.0], [87.6, 411.0], [87.7, 411.0], [87.8, 412.0], [87.9, 412.0], [88.0, 413.0], [88.1, 414.0], [88.2, 417.0], [88.3, 418.0], [88.4, 419.0], [88.5, 421.0], [88.6, 427.0], [88.7, 431.0], [88.8, 433.0], [88.9, 440.0], [89.0, 441.0], [89.1, 443.0], [89.2, 446.0], [89.3, 447.0], [89.4, 451.0], [89.5, 456.0], [89.6, 464.0], [89.7, 465.0], [89.8, 468.0], [89.9, 472.0], [90.0, 481.0], [90.1, 481.0], [90.2, 485.0], [90.3, 488.0], [90.4, 493.0], [90.5, 496.0], [90.6, 501.0], [90.7, 503.0], [90.8, 508.0], [90.9, 509.0], [91.0, 511.0], [91.1, 512.0], [91.2, 512.0], [91.3, 513.0], [91.4, 513.0], [91.5, 514.0], [91.6, 515.0], [91.7, 516.0], [91.8, 516.0], [91.9, 517.0], [92.0, 519.0], [92.1, 521.0], [92.2, 523.0], [92.3, 529.0], [92.4, 530.0], [92.5, 537.0], [92.6, 542.0], [92.7, 543.0], [92.8, 548.0], [92.9, 549.0], [93.0, 553.0], [93.1, 556.0], [93.2, 561.0], [93.3, 563.0], [93.4, 567.0], [93.5, 573.0], [93.6, 578.0], [93.7, 581.0], [93.8, 584.0], [93.9, 586.0], [94.0, 599.0], [94.1, 608.0], [94.2, 611.0], [94.3, 617.0], [94.4, 619.0], [94.5, 627.0], [94.6, 671.0], [94.7, 883.0], [94.8, 1931.0], [94.9, 7346.0], [95.0, 9249.0], [95.1, 12535.0], [95.2, 16310.0], [95.3, 18153.0], [95.4, 18992.0], [95.5, 20398.0], [95.6, 20666.0], [95.7, 21122.0], [95.8, 21625.0], [95.9, 21963.0], [96.0, 22663.0], [96.1, 22854.0], [96.2, 23108.0], [96.3, 23516.0], [96.4, 24417.0], [96.5, 24812.0], [96.6, 28751.0], [96.7, 30294.0], [96.8, 31098.0], [96.9, 31786.0], [97.0, 32365.0], [97.1, 33903.0], [97.2, 35057.0], [97.3, 35833.0], [97.4, 37724.0], [97.5, 38575.0], [97.6, 43816.0], [97.7, 44999.0], [97.8, 46459.0], [97.9, 48240.0], [98.0, 49431.0], [98.1, 50128.0], [98.2, 52420.0], [98.3, 54941.0], [98.4, 57959.0], [98.5, 60311.0], [98.6, 60342.0], [98.7, 60379.0], [98.8, 60403.0], [98.9, 60419.0], [99.0, 60420.0], [99.1, 60443.0], [99.2, 60481.0], [99.3, 60510.0], [99.4, 60520.0], [99.5, 60545.0], [99.6, 60576.0], [99.7, 60601.0], [99.8, 60625.0], [99.9, 60789.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 101.0], [0.1, 102.0], [0.2, 102.0], [0.3, 102.0], [0.4, 102.0], [0.5, 102.0], [0.6, 102.0], [0.7, 102.0], [0.8, 102.0], [0.9, 103.0], [1.0, 103.0], [1.1, 103.0], [1.2, 103.0], [1.3, 103.0], [1.4, 103.0], [1.5, 103.0], [1.6, 103.0], [1.7, 103.0], [1.8, 103.0], [1.9, 103.0], [2.0, 103.0], [2.1, 103.0], [2.2, 103.0], [2.3, 103.0], [2.4, 103.0], [2.5, 103.0], [2.6, 103.0], [2.7, 103.0], [2.8, 103.0], [2.9, 103.0], [3.0, 103.0], [3.1, 103.0], [3.2, 103.0], [3.3, 103.0], [3.4, 103.0], [3.5, 103.0], [3.6, 103.0], [3.7, 103.0], [3.8, 103.0], [3.9, 103.0], [4.0, 103.0], [4.1, 103.0], [4.2, 103.0], [4.3, 103.0], [4.4, 103.0], [4.5, 103.0], [4.6, 103.0], [4.7, 103.0], [4.8, 103.0], [4.9, 103.0], [5.0, 103.0], [5.1, 103.0], [5.2, 103.0], [5.3, 103.0], [5.4, 103.0], [5.5, 103.0], [5.6, 103.0], [5.7, 103.0], [5.8, 103.0], [5.9, 103.0], [6.0, 103.0], [6.1, 103.0], [6.2, 103.0], [6.3, 103.0], [6.4, 104.0], [6.5, 104.0], [6.6, 104.0], [6.7, 104.0], [6.8, 104.0], [6.9, 104.0], [7.0, 104.0], [7.1, 104.0], [7.2, 104.0], [7.3, 104.0], [7.4, 104.0], [7.5, 104.0], [7.6, 104.0], [7.7, 104.0], [7.8, 104.0], [7.9, 104.0], [8.0, 104.0], [8.1, 104.0], [8.2, 104.0], [8.3, 104.0], [8.4, 104.0], [8.5, 104.0], [8.6, 104.0], [8.7, 104.0], [8.8, 104.0], [8.9, 104.0], [9.0, 104.0], [9.1, 104.0], [9.2, 104.0], [9.3, 104.0], [9.4, 104.0], [9.5, 104.0], [9.6, 104.0], [9.7, 104.0], [9.8, 104.0], [9.9, 104.0], [10.0, 104.0], [10.1, 104.0], [10.2, 104.0], [10.3, 104.0], [10.4, 104.0], [10.5, 104.0], [10.6, 104.0], [10.7, 104.0], [10.8, 104.0], [10.9, 104.0], [11.0, 104.0], [11.1, 104.0], [11.2, 104.0], [11.3, 104.0], [11.4, 104.0], [11.5, 104.0], [11.6, 104.0], [11.7, 104.0], [11.8, 104.0], [11.9, 104.0], [12.0, 104.0], [12.1, 104.0], [12.2, 104.0], [12.3, 104.0], [12.4, 104.0], [12.5, 104.0], [12.6, 104.0], [12.7, 104.0], [12.8, 104.0], [12.9, 104.0], [13.0, 104.0], [13.1, 104.0], [13.2, 104.0], [13.3, 104.0], [13.4, 104.0], [13.5, 104.0], [13.6, 104.0], [13.7, 104.0], [13.8, 104.0], [13.9, 104.0], [14.0, 104.0], [14.1, 104.0], [14.2, 104.0], [14.3, 104.0], [14.4, 104.0], [14.5, 104.0], [14.6, 104.0], [14.7, 104.0], [14.8, 104.0], [14.9, 104.0], [15.0, 104.0], [15.1, 104.0], [15.2, 104.0], [15.3, 104.0], [15.4, 104.0], [15.5, 104.0], [15.6, 104.0], [15.7, 104.0], [15.8, 104.0], [15.9, 104.0], [16.0, 104.0], [16.1, 104.0], [16.2, 104.0], [16.3, 104.0], [16.4, 104.0], [16.5, 104.0], [16.6, 104.0], [16.7, 104.0], [16.8, 104.0], [16.9, 104.0], [17.0, 104.0], [17.1, 104.0], [17.2, 104.0], [17.3, 104.0], [17.4, 104.0], [17.5, 104.0], [17.6, 104.0], [17.7, 104.0], [17.8, 104.0], [17.9, 104.0], [18.0, 104.0], [18.1, 104.0], [18.2, 104.0], [18.3, 104.0], [18.4, 104.0], [18.5, 104.0], [18.6, 104.0], [18.7, 104.0], [18.8, 104.0], [18.9, 104.0], [19.0, 104.0], [19.1, 104.0], [19.2, 104.0], [19.3, 104.0], [19.4, 104.0], [19.5, 104.0], [19.6, 104.0], [19.7, 104.0], [19.8, 104.0], [19.9, 104.0], [20.0, 104.0], [20.1, 104.0], [20.2, 104.0], [20.3, 104.0], [20.4, 104.0], [20.5, 104.0], [20.6, 104.0], [20.7, 104.0], [20.8, 104.0], [20.9, 104.0], [21.0, 104.0], [21.1, 104.0], [21.2, 104.0], [21.3, 104.0], [21.4, 104.0], [21.5, 104.0], [21.6, 104.0], [21.7, 104.0], [21.8, 104.0], [21.9, 104.0], [22.0, 104.0], [22.1, 104.0], [22.2, 104.0], [22.3, 104.0], [22.4, 104.0], [22.5, 104.0], [22.6, 104.0], [22.7, 104.0], [22.8, 104.0], [22.9, 104.0], [23.0, 104.0], [23.1, 104.0], [23.2, 104.0], [23.3, 104.0], [23.4, 104.0], [23.5, 105.0], [23.6, 105.0], [23.7, 105.0], [23.8, 105.0], [23.9, 105.0], [24.0, 105.0], [24.1, 105.0], [24.2, 105.0], [24.3, 105.0], [24.4, 105.0], [24.5, 105.0], [24.6, 105.0], [24.7, 105.0], [24.8, 105.0], [24.9, 105.0], [25.0, 105.0], [25.1, 105.0], [25.2, 105.0], [25.3, 105.0], [25.4, 105.0], [25.5, 105.0], [25.6, 105.0], [25.7, 105.0], [25.8, 105.0], [25.9, 105.0], [26.0, 105.0], [26.1, 105.0], [26.2, 105.0], [26.3, 105.0], [26.4, 105.0], [26.5, 105.0], [26.6, 105.0], [26.7, 105.0], [26.8, 105.0], [26.9, 105.0], [27.0, 105.0], [27.1, 105.0], [27.2, 105.0], [27.3, 105.0], [27.4, 105.0], [27.5, 105.0], [27.6, 105.0], [27.7, 105.0], [27.8, 105.0], [27.9, 105.0], [28.0, 105.0], [28.1, 105.0], [28.2, 105.0], [28.3, 105.0], [28.4, 105.0], [28.5, 105.0], [28.6, 105.0], [28.7, 105.0], [28.8, 105.0], [28.9, 105.0], [29.0, 105.0], [29.1, 105.0], [29.2, 105.0], [29.3, 105.0], [29.4, 105.0], [29.5, 105.0], [29.6, 105.0], [29.7, 105.0], [29.8, 105.0], [29.9, 105.0], [30.0, 105.0], [30.1, 105.0], [30.2, 105.0], [30.3, 105.0], [30.4, 105.0], [30.5, 105.0], [30.6, 105.0], [30.7, 105.0], [30.8, 105.0], [30.9, 105.0], [31.0, 105.0], [31.1, 105.0], [31.2, 105.0], [31.3, 105.0], [31.4, 105.0], [31.5, 105.0], [31.6, 105.0], [31.7, 105.0], [31.8, 105.0], [31.9, 105.0], [32.0, 105.0], [32.1, 105.0], [32.2, 105.0], [32.3, 105.0], [32.4, 105.0], [32.5, 105.0], [32.6, 105.0], [32.7, 105.0], [32.8, 105.0], [32.9, 105.0], [33.0, 105.0], [33.1, 105.0], [33.2, 105.0], [33.3, 105.0], [33.4, 105.0], [33.5, 105.0], [33.6, 105.0], [33.7, 105.0], [33.8, 105.0], [33.9, 105.0], [34.0, 105.0], [34.1, 105.0], [34.2, 105.0], [34.3, 105.0], [34.4, 105.0], [34.5, 105.0], [34.6, 105.0], [34.7, 105.0], [34.8, 105.0], [34.9, 105.0], [35.0, 105.0], [35.1, 105.0], [35.2, 105.0], [35.3, 105.0], [35.4, 105.0], [35.5, 105.0], [35.6, 105.0], [35.7, 105.0], [35.8, 105.0], [35.9, 105.0], [36.0, 105.0], [36.1, 105.0], [36.2, 105.0], [36.3, 105.0], [36.4, 105.0], [36.5, 105.0], [36.6, 105.0], [36.7, 105.0], [36.8, 105.0], [36.9, 105.0], [37.0, 105.0], [37.1, 105.0], [37.2, 105.0], [37.3, 105.0], [37.4, 105.0], [37.5, 105.0], [37.6, 105.0], [37.7, 105.0], [37.8, 105.0], [37.9, 105.0], [38.0, 105.0], [38.1, 105.0], [38.2, 105.0], [38.3, 105.0], [38.4, 105.0], [38.5, 105.0], [38.6, 105.0], [38.7, 105.0], [38.8, 105.0], [38.9, 105.0], [39.0, 105.0], [39.1, 105.0], [39.2, 105.0], [39.3, 105.0], [39.4, 105.0], [39.5, 105.0], [39.6, 105.0], [39.7, 105.0], [39.8, 105.0], [39.9, 105.0], [40.0, 105.0], [40.1, 105.0], [40.2, 105.0], [40.3, 105.0], [40.4, 105.0], [40.5, 105.0], [40.6, 105.0], [40.7, 105.0], [40.8, 105.0], [40.9, 105.0], [41.0, 105.0], [41.1, 105.0], [41.2, 105.0], [41.3, 105.0], [41.4, 105.0], [41.5, 105.0], [41.6, 105.0], [41.7, 105.0], [41.8, 105.0], [41.9, 105.0], [42.0, 105.0], [42.1, 105.0], [42.2, 105.0], [42.3, 105.0], [42.4, 105.0], [42.5, 105.0], [42.6, 105.0], [42.7, 105.0], [42.8, 105.0], [42.9, 105.0], [43.0, 105.0], [43.1, 105.0], [43.2, 105.0], [43.3, 105.0], [43.4, 105.0], [43.5, 105.0], [43.6, 105.0], [43.7, 105.0], [43.8, 105.0], [43.9, 105.0], [44.0, 105.0], [44.1, 105.0], [44.2, 105.0], [44.3, 105.0], [44.4, 105.0], [44.5, 105.0], [44.6, 105.0], [44.7, 105.0], [44.8, 105.0], [44.9, 105.0], [45.0, 105.0], [45.1, 105.0], [45.2, 105.0], [45.3, 105.0], [45.4, 105.0], [45.5, 105.0], [45.6, 105.0], [45.7, 105.0], [45.8, 105.0], [45.9, 105.0], [46.0, 105.0], [46.1, 105.0], [46.2, 105.0], [46.3, 105.0], [46.4, 105.0], [46.5, 105.0], [46.6, 105.0], [46.7, 106.0], [46.8, 106.0], [46.9, 106.0], [47.0, 106.0], [47.1, 106.0], [47.2, 106.0], [47.3, 106.0], [47.4, 106.0], [47.5, 106.0], [47.6, 106.0], [47.7, 106.0], [47.8, 106.0], [47.9, 106.0], [48.0, 106.0], [48.1, 106.0], [48.2, 106.0], [48.3, 106.0], [48.4, 106.0], [48.5, 106.0], [48.6, 106.0], [48.7, 106.0], [48.8, 106.0], [48.9, 106.0], [49.0, 106.0], [49.1, 106.0], [49.2, 106.0], [49.3, 106.0], [49.4, 106.0], [49.5, 106.0], [49.6, 106.0], [49.7, 106.0], [49.8, 106.0], [49.9, 106.0], [50.0, 106.0], [50.1, 106.0], [50.2, 106.0], [50.3, 106.0], [50.4, 106.0], [50.5, 106.0], [50.6, 106.0], [50.7, 106.0], [50.8, 106.0], [50.9, 106.0], [51.0, 106.0], [51.1, 106.0], [51.2, 106.0], [51.3, 106.0], [51.4, 106.0], [51.5, 106.0], [51.6, 106.0], [51.7, 106.0], [51.8, 106.0], [51.9, 106.0], [52.0, 106.0], [52.1, 106.0], [52.2, 106.0], [52.3, 106.0], [52.4, 106.0], [52.5, 106.0], [52.6, 106.0], [52.7, 106.0], [52.8, 106.0], [52.9, 106.0], [53.0, 106.0], [53.1, 106.0], [53.2, 106.0], [53.3, 106.0], [53.4, 106.0], [53.5, 106.0], [53.6, 106.0], [53.7, 106.0], [53.8, 106.0], [53.9, 106.0], [54.0, 106.0], [54.1, 106.0], [54.2, 106.0], [54.3, 106.0], [54.4, 106.0], [54.5, 106.0], [54.6, 106.0], [54.7, 106.0], [54.8, 106.0], [54.9, 106.0], [55.0, 106.0], [55.1, 106.0], [55.2, 106.0], [55.3, 106.0], [55.4, 106.0], [55.5, 106.0], [55.6, 106.0], [55.7, 106.0], [55.8, 106.0], [55.9, 106.0], [56.0, 106.0], [56.1, 106.0], [56.2, 106.0], [56.3, 106.0], [56.4, 106.0], [56.5, 106.0], [56.6, 106.0], [56.7, 106.0], [56.8, 106.0], [56.9, 106.0], [57.0, 106.0], [57.1, 106.0], [57.2, 106.0], [57.3, 106.0], [57.4, 106.0], [57.5, 106.0], [57.6, 106.0], [57.7, 106.0], [57.8, 106.0], [57.9, 106.0], [58.0, 106.0], [58.1, 106.0], [58.2, 106.0], [58.3, 106.0], [58.4, 106.0], [58.5, 106.0], [58.6, 106.0], [58.7, 106.0], [58.8, 106.0], [58.9, 106.0], [59.0, 106.0], [59.1, 106.0], [59.2, 106.0], [59.3, 106.0], [59.4, 106.0], [59.5, 106.0], [59.6, 106.0], [59.7, 106.0], [59.8, 106.0], [59.9, 106.0], [60.0, 106.0], [60.1, 106.0], [60.2, 106.0], [60.3, 106.0], [60.4, 106.0], [60.5, 106.0], [60.6, 106.0], [60.7, 106.0], [60.8, 106.0], [60.9, 106.0], [61.0, 106.0], [61.1, 106.0], [61.2, 106.0], [61.3, 106.0], [61.4, 106.0], [61.5, 106.0], [61.6, 106.0], [61.7, 106.0], [61.8, 106.0], [61.9, 106.0], [62.0, 106.0], [62.1, 106.0], [62.2, 106.0], [62.3, 106.0], [62.4, 106.0], [62.5, 106.0], [62.6, 106.0], [62.7, 106.0], [62.8, 106.0], [62.9, 106.0], [63.0, 106.0], [63.1, 106.0], [63.2, 106.0], [63.3, 106.0], [63.4, 106.0], [63.5, 106.0], [63.6, 106.0], [63.7, 106.0], [63.8, 106.0], [63.9, 106.0], [64.0, 106.0], [64.1, 106.0], [64.2, 106.0], [64.3, 106.0], [64.4, 106.0], [64.5, 106.0], [64.6, 106.0], [64.7, 106.0], [64.8, 106.0], [64.9, 106.0], [65.0, 106.0], [65.1, 106.0], [65.2, 106.0], [65.3, 106.0], [65.4, 106.0], [65.5, 106.0], [65.6, 106.0], [65.7, 106.0], [65.8, 106.0], [65.9, 106.0], [66.0, 106.0], [66.1, 106.0], [66.2, 106.0], [66.3, 106.0], [66.4, 106.0], [66.5, 106.0], [66.6, 106.0], [66.7, 106.0], [66.8, 106.0], [66.9, 106.0], [67.0, 107.0], [67.1, 107.0], [67.2, 107.0], [67.3, 107.0], [67.4, 107.0], [67.5, 107.0], [67.6, 107.0], [67.7, 107.0], [67.8, 107.0], [67.9, 107.0], [68.0, 107.0], [68.1, 107.0], [68.2, 107.0], [68.3, 107.0], [68.4, 107.0], [68.5, 107.0], [68.6, 107.0], [68.7, 107.0], [68.8, 107.0], [68.9, 107.0], [69.0, 107.0], [69.1, 107.0], [69.2, 107.0], [69.3, 107.0], [69.4, 107.0], [69.5, 107.0], [69.6, 107.0], [69.7, 107.0], [69.8, 107.0], [69.9, 107.0], [70.0, 107.0], [70.1, 107.0], [70.2, 107.0], [70.3, 107.0], [70.4, 107.0], [70.5, 107.0], [70.6, 107.0], [70.7, 107.0], [70.8, 107.0], [70.9, 107.0], [71.0, 107.0], [71.1, 107.0], [71.2, 107.0], [71.3, 107.0], [71.4, 107.0], [71.5, 107.0], [71.6, 107.0], [71.7, 107.0], [71.8, 107.0], [71.9, 107.0], [72.0, 107.0], [72.1, 107.0], [72.2, 107.0], [72.3, 107.0], [72.4, 107.0], [72.5, 107.0], [72.6, 107.0], [72.7, 107.0], [72.8, 107.0], [72.9, 107.0], [73.0, 107.0], [73.1, 107.0], [73.2, 107.0], [73.3, 107.0], [73.4, 107.0], [73.5, 107.0], [73.6, 107.0], [73.7, 107.0], [73.8, 107.0], [73.9, 107.0], [74.0, 107.0], [74.1, 107.0], [74.2, 107.0], [74.3, 107.0], [74.4, 107.0], [74.5, 107.0], [74.6, 107.0], [74.7, 107.0], [74.8, 107.0], [74.9, 107.0], [75.0, 107.0], [75.1, 107.0], [75.2, 107.0], [75.3, 107.0], [75.4, 107.0], [75.5, 107.0], [75.6, 107.0], [75.7, 107.0], [75.8, 107.0], [75.9, 107.0], [76.0, 107.0], [76.1, 107.0], [76.2, 107.0], [76.3, 107.0], [76.4, 107.0], [76.5, 107.0], [76.6, 107.0], [76.7, 107.0], [76.8, 107.0], [76.9, 107.0], [77.0, 107.0], [77.1, 107.0], [77.2, 108.0], [77.3, 108.0], [77.4, 108.0], [77.5, 108.0], [77.6, 108.0], [77.7, 108.0], [77.8, 108.0], [77.9, 108.0], [78.0, 108.0], [78.1, 108.0], [78.2, 108.0], [78.3, 108.0], [78.4, 108.0], [78.5, 108.0], [78.6, 108.0], [78.7, 108.0], [78.8, 108.0], [78.9, 108.0], [79.0, 108.0], [79.1, 108.0], [79.2, 108.0], [79.3, 108.0], [79.4, 108.0], [79.5, 108.0], [79.6, 108.0], [79.7, 108.0], [79.8, 108.0], [79.9, 108.0], [80.0, 108.0], [80.1, 108.0], [80.2, 108.0], [80.3, 108.0], [80.4, 108.0], [80.5, 108.0], [80.6, 108.0], [80.7, 108.0], [80.8, 108.0], [80.9, 108.0], [81.0, 108.0], [81.1, 108.0], [81.2, 108.0], [81.3, 108.0], [81.4, 108.0], [81.5, 108.0], [81.6, 108.0], [81.7, 108.0], [81.8, 108.0], [81.9, 108.0], [82.0, 108.0], [82.1, 108.0], [82.2, 108.0], [82.3, 108.0], [82.4, 108.0], [82.5, 109.0], [82.6, 109.0], [82.7, 109.0], [82.8, 109.0], [82.9, 109.0], [83.0, 109.0], [83.1, 109.0], [83.2, 109.0], [83.3, 109.0], [83.4, 109.0], [83.5, 109.0], [83.6, 109.0], [83.7, 109.0], [83.8, 109.0], [83.9, 109.0], [84.0, 109.0], [84.1, 109.0], [84.2, 109.0], [84.3, 109.0], [84.4, 109.0], [84.5, 110.0], [84.6, 110.0], [84.7, 110.0], [84.8, 110.0], [84.9, 110.0], [85.0, 110.0], [85.1, 110.0], [85.2, 110.0], [85.3, 110.0], [85.4, 110.0], [85.5, 110.0], [85.6, 110.0], [85.7, 110.0], [85.8, 110.0], [85.9, 110.0], [86.0, 111.0], [86.1, 111.0], [86.2, 111.0], [86.3, 111.0], [86.4, 111.0], [86.5, 111.0], [86.6, 112.0], [86.7, 112.0], [86.8, 112.0], [86.9, 113.0], [87.0, 113.0], [87.1, 113.0], [87.2, 114.0], [87.3, 114.0], [87.4, 114.0], [87.5, 115.0], [87.6, 115.0], [87.7, 116.0], [87.8, 116.0], [87.9, 116.0], [88.0, 117.0], [88.1, 118.0], [88.2, 118.0], [88.3, 119.0], [88.4, 120.0], [88.5, 120.0], [88.6, 122.0], [88.7, 123.0], [88.8, 125.0], [88.9, 126.0], [89.0, 128.0], [89.1, 129.0], [89.2, 132.0], [89.3, 133.0], [89.4, 133.0], [89.5, 134.0], [89.6, 136.0], [89.7, 137.0], [89.8, 137.0], [89.9, 140.0], [90.0, 141.0], [90.1, 142.0], [90.2, 143.0], [90.3, 144.0], [90.4, 145.0], [90.5, 145.0], [90.6, 146.0], [90.7, 148.0], [90.8, 148.0], [90.9, 149.0], [91.0, 152.0], [91.1, 153.0], [91.2, 153.0], [91.3, 154.0], [91.4, 156.0], [91.5, 157.0], [91.6, 159.0], [91.7, 159.0], [91.8, 161.0], [91.9, 162.0], [92.0, 163.0], [92.1, 164.0], [92.2, 168.0], [92.3, 168.0], [92.4, 171.0], [92.5, 172.0], [92.6, 173.0], [92.7, 174.0], [92.8, 175.0], [92.9, 177.0], [93.0, 179.0], [93.1, 180.0], [93.2, 181.0], [93.3, 184.0], [93.4, 185.0], [93.5, 187.0], [93.6, 187.0], [93.7, 188.0], [93.8, 191.0], [93.9, 196.0], [94.0, 198.0], [94.1, 201.0], [94.2, 203.0], [94.3, 203.0], [94.4, 207.0], [94.5, 208.0], [94.6, 209.0], [94.7, 209.0], [94.8, 210.0], [94.9, 212.0], [95.0, 230.0], [95.1, 349.0], [95.2, 6939.0], [95.3, 7250.0], [95.4, 12113.0], [95.5, 14891.0], [95.6, 16367.0], [95.7, 18439.0], [95.8, 19583.0], [95.9, 20060.0], [96.0, 20818.0], [96.1, 21219.0], [96.2, 21460.0], [96.3, 22051.0], [96.4, 22484.0], [96.5, 22608.0], [96.6, 22966.0], [96.7, 23285.0], [96.8, 24373.0], [96.9, 25623.0], [97.0, 29301.0], [97.1, 30653.0], [97.2, 31015.0], [97.3, 31754.0], [97.4, 32026.0], [97.5, 33578.0], [97.6, 35241.0], [97.7, 36262.0], [97.8, 38015.0], [97.9, 41768.0], [98.0, 43827.0], [98.1, 45319.0], [98.2, 46310.0], [98.3, 48499.0], [98.4, 49224.0], [98.5, 50659.0], [98.6, 54504.0], [98.7, 57551.0], [98.8, 60106.0], [98.9, 60108.0], [99.0, 60117.0], [99.1, 60123.0], [99.2, 60141.0], [99.3, 60154.0], [99.4, 60171.0], [99.5, 60192.0], [99.6, 60201.0], [99.7, 60208.0], [99.8, 60217.0], [99.9, 60282.0], [100.0, 60411.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 203.0], [0.1, 204.0], [0.2, 204.0], [0.3, 204.0], [0.4, 204.0], [0.5, 204.0], [0.6, 204.0], [0.7, 204.0], [0.8, 204.0], [0.9, 204.0], [1.0, 204.0], [1.1, 204.0], [1.2, 204.0], [1.3, 204.0], [1.4, 204.0], [1.5, 204.0], [1.6, 204.0], [1.7, 204.0], [1.8, 204.0], [1.9, 204.0], [2.0, 204.0], [2.1, 204.0], [2.2, 204.0], [2.3, 204.0], [2.4, 204.0], [2.5, 204.0], [2.6, 204.0], [2.7, 204.0], [2.8, 204.0], [2.9, 204.0], [3.0, 204.0], [3.1, 204.0], [3.2, 205.0], [3.3, 205.0], [3.4, 205.0], [3.5, 205.0], [3.6, 205.0], [3.7, 205.0], [3.8, 205.0], [3.9, 205.0], [4.0, 205.0], [4.1, 205.0], [4.2, 205.0], [4.3, 205.0], [4.4, 205.0], [4.5, 205.0], [4.6, 205.0], [4.7, 205.0], [4.8, 205.0], [4.9, 205.0], [5.0, 205.0], [5.1, 205.0], [5.2, 205.0], [5.3, 205.0], [5.4, 205.0], [5.5, 205.0], [5.6, 205.0], [5.7, 205.0], [5.8, 205.0], [5.9, 205.0], [6.0, 205.0], [6.1, 205.0], [6.2, 205.0], [6.3, 205.0], [6.4, 205.0], [6.5, 205.0], [6.6, 205.0], [6.7, 205.0], [6.8, 205.0], [6.9, 205.0], [7.0, 205.0], [7.1, 205.0], [7.2, 205.0], [7.3, 205.0], [7.4, 205.0], [7.5, 205.0], [7.6, 205.0], [7.7, 205.0], [7.8, 205.0], [7.9, 205.0], [8.0, 205.0], [8.1, 205.0], [8.2, 205.0], [8.3, 205.0], [8.4, 205.0], [8.5, 205.0], [8.6, 205.0], [8.7, 205.0], [8.8, 205.0], [8.9, 205.0], [9.0, 205.0], [9.1, 205.0], [9.2, 205.0], [9.3, 205.0], [9.4, 205.0], [9.5, 205.0], [9.6, 205.0], [9.7, 205.0], [9.8, 205.0], [9.9, 205.0], [10.0, 205.0], [10.1, 205.0], [10.2, 205.0], [10.3, 205.0], [10.4, 205.0], [10.5, 205.0], [10.6, 205.0], [10.7, 205.0], [10.8, 205.0], [10.9, 205.0], [11.0, 205.0], [11.1, 205.0], [11.2, 205.0], [11.3, 205.0], [11.4, 205.0], [11.5, 205.0], [11.6, 205.0], [11.7, 205.0], [11.8, 205.0], [11.9, 205.0], [12.0, 205.0], [12.1, 205.0], [12.2, 205.0], [12.3, 205.0], [12.4, 205.0], [12.5, 205.0], [12.6, 205.0], [12.7, 205.0], [12.8, 205.0], [12.9, 205.0], [13.0, 205.0], [13.1, 205.0], [13.2, 205.0], [13.3, 205.0], [13.4, 205.0], [13.5, 205.0], [13.6, 205.0], [13.7, 205.0], [13.8, 205.0], [13.9, 205.0], [14.0, 205.0], [14.1, 205.0], [14.2, 205.0], [14.3, 205.0], [14.4, 205.0], [14.5, 205.0], [14.6, 205.0], [14.7, 206.0], [14.8, 206.0], [14.9, 206.0], [15.0, 206.0], [15.1, 206.0], [15.2, 206.0], [15.3, 206.0], [15.4, 206.0], [15.5, 206.0], [15.6, 206.0], [15.7, 206.0], [15.8, 206.0], [15.9, 206.0], [16.0, 206.0], [16.1, 206.0], [16.2, 206.0], [16.3, 206.0], [16.4, 206.0], [16.5, 206.0], [16.6, 206.0], [16.7, 206.0], [16.8, 206.0], [16.9, 206.0], [17.0, 206.0], [17.1, 206.0], [17.2, 206.0], [17.3, 206.0], [17.4, 206.0], [17.5, 206.0], [17.6, 206.0], [17.7, 206.0], [17.8, 206.0], [17.9, 206.0], [18.0, 206.0], [18.1, 206.0], [18.2, 206.0], [18.3, 206.0], [18.4, 206.0], [18.5, 206.0], [18.6, 206.0], [18.7, 206.0], [18.8, 206.0], [18.9, 206.0], [19.0, 206.0], [19.1, 206.0], [19.2, 206.0], [19.3, 206.0], [19.4, 206.0], [19.5, 206.0], [19.6, 206.0], [19.7, 206.0], [19.8, 206.0], [19.9, 206.0], [20.0, 206.0], [20.1, 206.0], [20.2, 206.0], [20.3, 206.0], [20.4, 206.0], [20.5, 206.0], [20.6, 206.0], [20.7, 206.0], [20.8, 206.0], [20.9, 206.0], [21.0, 206.0], [21.1, 206.0], [21.2, 206.0], [21.3, 206.0], [21.4, 206.0], [21.5, 206.0], [21.6, 206.0], [21.7, 206.0], [21.8, 206.0], [21.9, 206.0], [22.0, 206.0], [22.1, 206.0], [22.2, 206.0], [22.3, 206.0], [22.4, 206.0], [22.5, 206.0], [22.6, 206.0], [22.7, 206.0], [22.8, 206.0], [22.9, 206.0], [23.0, 206.0], [23.1, 206.0], [23.2, 206.0], [23.3, 206.0], [23.4, 206.0], [23.5, 206.0], [23.6, 206.0], [23.7, 206.0], [23.8, 206.0], [23.9, 206.0], [24.0, 206.0], [24.1, 206.0], [24.2, 206.0], [24.3, 206.0], [24.4, 206.0], [24.5, 206.0], [24.6, 206.0], [24.7, 206.0], [24.8, 206.0], [24.9, 206.0], [25.0, 206.0], [25.1, 206.0], [25.2, 206.0], [25.3, 206.0], [25.4, 206.0], [25.5, 206.0], [25.6, 206.0], [25.7, 206.0], [25.8, 206.0], [25.9, 206.0], [26.0, 206.0], [26.1, 206.0], [26.2, 206.0], [26.3, 206.0], [26.4, 206.0], [26.5, 206.0], [26.6, 206.0], [26.7, 206.0], [26.8, 206.0], [26.9, 206.0], [27.0, 206.0], [27.1, 206.0], [27.2, 206.0], [27.3, 206.0], [27.4, 206.0], [27.5, 206.0], [27.6, 206.0], [27.7, 206.0], [27.8, 206.0], [27.9, 206.0], [28.0, 206.0], [28.1, 206.0], [28.2, 206.0], [28.3, 206.0], [28.4, 206.0], [28.5, 206.0], [28.6, 206.0], [28.7, 206.0], [28.8, 206.0], [28.9, 206.0], [29.0, 206.0], [29.1, 206.0], [29.2, 206.0], [29.3, 206.0], [29.4, 206.0], [29.5, 206.0], [29.6, 206.0], [29.7, 206.0], [29.8, 206.0], [29.9, 206.0], [30.0, 206.0], [30.1, 206.0], [30.2, 206.0], [30.3, 206.0], [30.4, 206.0], [30.5, 206.0], [30.6, 206.0], [30.7, 206.0], [30.8, 206.0], [30.9, 207.0], [31.0, 207.0], [31.1, 207.0], [31.2, 207.0], [31.3, 207.0], [31.4, 207.0], [31.5, 207.0], [31.6, 207.0], [31.7, 207.0], [31.8, 207.0], [31.9, 207.0], [32.0, 207.0], [32.1, 207.0], [32.2, 207.0], [32.3, 207.0], [32.4, 207.0], [32.5, 207.0], [32.6, 207.0], [32.7, 207.0], [32.8, 207.0], [32.9, 207.0], [33.0, 207.0], [33.1, 207.0], [33.2, 207.0], [33.3, 207.0], [33.4, 207.0], [33.5, 207.0], [33.6, 207.0], [33.7, 207.0], [33.8, 207.0], [33.9, 207.0], [34.0, 207.0], [34.1, 207.0], [34.2, 207.0], [34.3, 207.0], [34.4, 207.0], [34.5, 207.0], [34.6, 207.0], [34.7, 207.0], [34.8, 207.0], [34.9, 207.0], [35.0, 207.0], [35.1, 207.0], [35.2, 207.0], [35.3, 207.0], [35.4, 207.0], [35.5, 207.0], [35.6, 207.0], [35.7, 207.0], [35.8, 207.0], [35.9, 207.0], [36.0, 207.0], [36.1, 207.0], [36.2, 207.0], [36.3, 207.0], [36.4, 207.0], [36.5, 207.0], [36.6, 207.0], [36.7, 207.0], [36.8, 207.0], [36.9, 207.0], [37.0, 207.0], [37.1, 207.0], [37.2, 207.0], [37.3, 207.0], [37.4, 207.0], [37.5, 207.0], [37.6, 207.0], [37.7, 207.0], [37.8, 207.0], [37.9, 207.0], [38.0, 207.0], [38.1, 207.0], [38.2, 207.0], [38.3, 207.0], [38.4, 207.0], [38.5, 207.0], [38.6, 207.0], [38.7, 207.0], [38.8, 207.0], [38.9, 207.0], [39.0, 207.0], [39.1, 207.0], [39.2, 207.0], [39.3, 207.0], [39.4, 207.0], [39.5, 207.0], [39.6, 207.0], [39.7, 207.0], [39.8, 207.0], [39.9, 207.0], [40.0, 207.0], [40.1, 207.0], [40.2, 207.0], [40.3, 207.0], [40.4, 207.0], [40.5, 207.0], [40.6, 207.0], [40.7, 207.0], [40.8, 207.0], [40.9, 207.0], [41.0, 207.0], [41.1, 207.0], [41.2, 207.0], [41.3, 207.0], [41.4, 207.0], [41.5, 207.0], [41.6, 207.0], [41.7, 207.0], [41.8, 207.0], [41.9, 207.0], [42.0, 207.0], [42.1, 207.0], [42.2, 207.0], [42.3, 207.0], [42.4, 207.0], [42.5, 207.0], [42.6, 207.0], [42.7, 207.0], [42.8, 207.0], [42.9, 207.0], [43.0, 207.0], [43.1, 207.0], [43.2, 207.0], [43.3, 207.0], [43.4, 207.0], [43.5, 207.0], [43.6, 207.0], [43.7, 207.0], [43.8, 207.0], [43.9, 207.0], [44.0, 207.0], [44.1, 207.0], [44.2, 207.0], [44.3, 207.0], [44.4, 207.0], [44.5, 207.0], [44.6, 207.0], [44.7, 207.0], [44.8, 207.0], [44.9, 207.0], [45.0, 207.0], [45.1, 207.0], [45.2, 207.0], [45.3, 207.0], [45.4, 207.0], [45.5, 207.0], [45.6, 207.0], [45.7, 207.0], [45.8, 207.0], [45.9, 207.0], [46.0, 207.0], [46.1, 207.0], [46.2, 207.0], [46.3, 207.0], [46.4, 207.0], [46.5, 207.0], [46.6, 207.0], [46.7, 207.0], [46.8, 207.0], [46.9, 207.0], [47.0, 207.0], [47.1, 207.0], [47.2, 207.0], [47.3, 207.0], [47.4, 207.0], [47.5, 207.0], [47.6, 207.0], [47.7, 207.0], [47.8, 208.0], [47.9, 208.0], [48.0, 208.0], [48.1, 208.0], [48.2, 208.0], [48.3, 208.0], [48.4, 208.0], [48.5, 208.0], [48.6, 208.0], [48.7, 208.0], [48.8, 208.0], [48.9, 208.0], [49.0, 208.0], [49.1, 208.0], [49.2, 208.0], [49.3, 208.0], [49.4, 208.0], [49.5, 208.0], [49.6, 208.0], [49.7, 208.0], [49.8, 208.0], [49.9, 208.0], [50.0, 208.0], [50.1, 208.0], [50.2, 208.0], [50.3, 208.0], [50.4, 208.0], [50.5, 208.0], [50.6, 208.0], [50.7, 208.0], [50.8, 208.0], [50.9, 208.0], [51.0, 208.0], [51.1, 208.0], [51.2, 208.0], [51.3, 208.0], [51.4, 208.0], [51.5, 208.0], [51.6, 208.0], [51.7, 208.0], [51.8, 208.0], [51.9, 208.0], [52.0, 208.0], [52.1, 208.0], [52.2, 208.0], [52.3, 208.0], [52.4, 208.0], [52.5, 208.0], [52.6, 208.0], [52.7, 208.0], [52.8, 208.0], [52.9, 208.0], [53.0, 208.0], [53.1, 208.0], [53.2, 208.0], [53.3, 208.0], [53.4, 208.0], [53.5, 208.0], [53.6, 208.0], [53.7, 208.0], [53.8, 208.0], [53.9, 208.0], [54.0, 208.0], [54.1, 208.0], [54.2, 208.0], [54.3, 208.0], [54.4, 208.0], [54.5, 208.0], [54.6, 208.0], [54.7, 208.0], [54.8, 208.0], [54.9, 208.0], [55.0, 208.0], [55.1, 208.0], [55.2, 208.0], [55.3, 208.0], [55.4, 208.0], [55.5, 208.0], [55.6, 208.0], [55.7, 208.0], [55.8, 208.0], [55.9, 208.0], [56.0, 208.0], [56.1, 208.0], [56.2, 208.0], [56.3, 208.0], [56.4, 208.0], [56.5, 208.0], [56.6, 208.0], [56.7, 208.0], [56.8, 208.0], [56.9, 208.0], [57.0, 208.0], [57.1, 208.0], [57.2, 208.0], [57.3, 208.0], [57.4, 208.0], [57.5, 208.0], [57.6, 208.0], [57.7, 208.0], [57.8, 208.0], [57.9, 208.0], [58.0, 208.0], [58.1, 208.0], [58.2, 208.0], [58.3, 208.0], [58.4, 208.0], [58.5, 208.0], [58.6, 208.0], [58.7, 208.0], [58.8, 208.0], [58.9, 208.0], [59.0, 208.0], [59.1, 208.0], [59.2, 208.0], [59.3, 208.0], [59.4, 208.0], [59.5, 208.0], [59.6, 208.0], [59.7, 208.0], [59.8, 208.0], [59.9, 208.0], [60.0, 208.0], [60.1, 208.0], [60.2, 208.0], [60.3, 208.0], [60.4, 208.0], [60.5, 208.0], [60.6, 208.0], [60.7, 208.0], [60.8, 208.0], [60.9, 208.0], [61.0, 208.0], [61.1, 208.0], [61.2, 208.0], [61.3, 208.0], [61.4, 208.0], [61.5, 208.0], [61.6, 208.0], [61.7, 208.0], [61.8, 208.0], [61.9, 208.0], [62.0, 208.0], [62.1, 209.0], [62.2, 209.0], [62.3, 209.0], [62.4, 209.0], [62.5, 209.0], [62.6, 209.0], [62.7, 209.0], [62.8, 209.0], [62.9, 209.0], [63.0, 209.0], [63.1, 209.0], [63.2, 209.0], [63.3, 209.0], [63.4, 209.0], [63.5, 209.0], [63.6, 209.0], [63.7, 209.0], [63.8, 209.0], [63.9, 209.0], [64.0, 209.0], [64.1, 209.0], [64.2, 209.0], [64.3, 209.0], [64.4, 209.0], [64.5, 209.0], [64.6, 209.0], [64.7, 209.0], [64.8, 209.0], [64.9, 209.0], [65.0, 209.0], [65.1, 209.0], [65.2, 209.0], [65.3, 209.0], [65.4, 209.0], [65.5, 209.0], [65.6, 209.0], [65.7, 209.0], [65.8, 209.0], [65.9, 209.0], [66.0, 209.0], [66.1, 209.0], [66.2, 209.0], [66.3, 209.0], [66.4, 209.0], [66.5, 209.0], [66.6, 209.0], [66.7, 209.0], [66.8, 209.0], [66.9, 209.0], [67.0, 209.0], [67.1, 209.0], [67.2, 209.0], [67.3, 209.0], [67.4, 209.0], [67.5, 209.0], [67.6, 209.0], [67.7, 209.0], [67.8, 209.0], [67.9, 209.0], [68.0, 209.0], [68.1, 209.0], [68.2, 209.0], [68.3, 209.0], [68.4, 209.0], [68.5, 209.0], [68.6, 209.0], [68.7, 209.0], [68.8, 209.0], [68.9, 209.0], [69.0, 209.0], [69.1, 209.0], [69.2, 209.0], [69.3, 209.0], [69.4, 209.0], [69.5, 209.0], [69.6, 209.0], [69.7, 209.0], [69.8, 209.0], [69.9, 209.0], [70.0, 209.0], [70.1, 209.0], [70.2, 209.0], [70.3, 209.0], [70.4, 209.0], [70.5, 209.0], [70.6, 209.0], [70.7, 209.0], [70.8, 209.0], [70.9, 209.0], [71.0, 209.0], [71.1, 209.0], [71.2, 209.0], [71.3, 209.0], [71.4, 209.0], [71.5, 209.0], [71.6, 209.0], [71.7, 209.0], [71.8, 209.0], [71.9, 209.0], [72.0, 209.0], [72.1, 209.0], [72.2, 209.0], [72.3, 209.0], [72.4, 209.0], [72.5, 209.0], [72.6, 209.0], [72.7, 209.0], [72.8, 209.0], [72.9, 209.0], [73.0, 209.0], [73.1, 210.0], [73.2, 210.0], [73.3, 210.0], [73.4, 210.0], [73.5, 210.0], [73.6, 210.0], [73.7, 210.0], [73.8, 210.0], [73.9, 210.0], [74.0, 210.0], [74.1, 210.0], [74.2, 210.0], [74.3, 210.0], [74.4, 210.0], [74.5, 210.0], [74.6, 210.0], [74.7, 210.0], [74.8, 210.0], [74.9, 210.0], [75.0, 210.0], [75.1, 210.0], [75.2, 210.0], [75.3, 210.0], [75.4, 210.0], [75.5, 210.0], [75.6, 210.0], [75.7, 210.0], [75.8, 210.0], [75.9, 210.0], [76.0, 210.0], [76.1, 210.0], [76.2, 210.0], [76.3, 210.0], [76.4, 210.0], [76.5, 210.0], [76.6, 210.0], [76.7, 210.0], [76.8, 210.0], [76.9, 210.0], [77.0, 210.0], [77.1, 210.0], [77.2, 210.0], [77.3, 210.0], [77.4, 210.0], [77.5, 210.0], [77.6, 210.0], [77.7, 210.0], [77.8, 210.0], [77.9, 210.0], [78.0, 210.0], [78.1, 210.0], [78.2, 210.0], [78.3, 210.0], [78.4, 210.0], [78.5, 210.0], [78.6, 210.0], [78.7, 210.0], [78.8, 210.0], [78.9, 210.0], [79.0, 210.0], [79.1, 210.0], [79.2, 210.0], [79.3, 210.0], [79.4, 210.0], [79.5, 210.0], [79.6, 210.0], [79.7, 210.0], [79.8, 210.0], [79.9, 211.0], [80.0, 211.0], [80.1, 211.0], [80.2, 211.0], [80.3, 211.0], [80.4, 211.0], [80.5, 211.0], [80.6, 211.0], [80.7, 211.0], [80.8, 211.0], [80.9, 211.0], [81.0, 211.0], [81.1, 211.0], [81.2, 211.0], [81.3, 211.0], [81.4, 211.0], [81.5, 211.0], [81.6, 211.0], [81.7, 211.0], [81.8, 211.0], [81.9, 211.0], [82.0, 211.0], [82.1, 211.0], [82.2, 212.0], [82.3, 212.0], [82.4, 212.0], [82.5, 212.0], [82.6, 212.0], [82.7, 212.0], [82.8, 212.0], [82.9, 212.0], [83.0, 212.0], [83.1, 212.0], [83.2, 212.0], [83.3, 212.0], [83.4, 212.0], [83.5, 213.0], [83.6, 213.0], [83.7, 213.0], [83.8, 213.0], [83.9, 213.0], [84.0, 213.0], [84.1, 213.0], [84.2, 213.0], [84.3, 214.0], [84.4, 214.0], [84.5, 214.0], [84.6, 214.0], [84.7, 214.0], [84.8, 214.0], [84.9, 215.0], [85.0, 215.0], [85.1, 215.0], [85.2, 215.0], [85.3, 216.0], [85.4, 216.0], [85.5, 217.0], [85.6, 217.0], [85.7, 217.0], [85.8, 219.0], [85.9, 220.0], [86.0, 221.0], [86.1, 222.0], [86.2, 223.0], [86.3, 224.0], [86.4, 225.0], [86.5, 225.0], [86.6, 226.0], [86.7, 228.0], [86.8, 230.0], [86.9, 232.0], [87.0, 234.0], [87.1, 235.0], [87.2, 236.0], [87.3, 240.0], [87.4, 242.0], [87.5, 242.0], [87.6, 249.0], [87.7, 251.0], [87.8, 254.0], [87.9, 258.0], [88.0, 260.0], [88.1, 262.0], [88.2, 267.0], [88.3, 272.0], [88.4, 277.0], [88.5, 286.0], [88.6, 287.0], [88.7, 292.0], [88.8, 294.0], [88.9, 297.0], [89.0, 299.0], [89.1, 300.0], [89.2, 303.0], [89.3, 303.0], [89.4, 304.0], [89.5, 304.0], [89.6, 305.0], [89.7, 305.0], [89.8, 305.0], [89.9, 305.0], [90.0, 306.0], [90.1, 306.0], [90.2, 306.0], [90.3, 306.0], [90.4, 306.0], [90.5, 306.0], [90.6, 306.0], [90.7, 306.0], [90.8, 307.0], [90.9, 307.0], [91.0, 308.0], [91.1, 308.0], [91.2, 309.0], [91.3, 310.0], [91.4, 316.0], [91.5, 320.0], [91.6, 322.0], [91.7, 323.0], [91.8, 324.0], [91.9, 325.0], [92.0, 331.0], [92.1, 335.0], [92.2, 336.0], [92.3, 338.0], [92.4, 340.0], [92.5, 342.0], [92.6, 345.0], [92.7, 347.0], [92.8, 349.0], [92.9, 355.0], [93.0, 356.0], [93.1, 359.0], [93.2, 363.0], [93.3, 368.0], [93.4, 372.0], [93.5, 375.0], [93.6, 387.0], [93.7, 390.0], [93.8, 394.0], [93.9, 396.0], [94.0, 399.0], [94.1, 401.0], [94.2, 402.0], [94.3, 403.0], [94.4, 404.0], [94.5, 404.0], [94.6, 404.0], [94.7, 405.0], [94.8, 405.0], [94.9, 405.0], [95.0, 406.0], [95.1, 406.0], [95.2, 406.0], [95.3, 407.0], [95.4, 407.0], [95.5, 407.0], [95.6, 407.0], [95.7, 407.0], [95.8, 407.0], [95.9, 407.0], [96.0, 408.0], [96.1, 408.0], [96.2, 408.0], [96.3, 408.0], [96.4, 408.0], [96.5, 408.0], [96.6, 408.0], [96.7, 408.0], [96.8, 408.0], [96.9, 408.0], [97.0, 408.0], [97.1, 408.0], [97.2, 408.0], [97.3, 409.0], [97.4, 409.0], [97.5, 409.0], [97.6, 409.0], [97.7, 409.0], [97.8, 409.0], [97.9, 409.0], [98.0, 409.0], [98.1, 410.0], [98.2, 410.0], [98.3, 410.0], [98.4, 410.0], [98.5, 410.0], [98.6, 410.0], [98.7, 411.0], [98.8, 414.0], [98.9, 414.0], [99.0, 416.0], [99.1, 422.0], [99.2, 495.0], [99.3, 507.0], [99.4, 513.0], [99.5, 818.0], [99.6, 49914.0], [99.7, 60210.0], [99.8, 60309.0], [99.9, 60401.0], [100.0, 60416.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 2826.0, "series": [{"data": [[34500.0, 1.0], [33300.0, 1.0], [33900.0, 2.0], [36500.0, 1.0], [35700.0, 1.0], [35500.0, 1.0], [37700.0, 1.0], [37300.0, 1.0], [38500.0, 2.0], [44700.0, 1.0], [44900.0, 1.0], [45700.0, 1.0], [46500.0, 2.0], [49100.0, 1.0], [48900.0, 1.0], [49500.0, 1.0], [50700.0, 1.0], [50100.0, 1.0], [200.0, 18.0], [54900.0, 2.0], [53300.0, 1.0], [57300.0, 1.0], [57900.0, 1.0], [60300.0, 9.0], [60500.0, 13.0], [60700.0, 2.0], [59500.0, 1.0], [300.0, 2610.0], [400.0, 113.0], [500.0, 105.0], [600.0, 20.0], [800.0, 1.0], [900.0, 1.0], [1200.0, 1.0], [1900.0, 1.0], [5700.0, 1.0], [7200.0, 1.0], [7300.0, 2.0], [7600.0, 1.0], [120500.0, 2.0], [9200.0, 1.0], [10300.0, 1.0], [12500.0, 1.0], [12300.0, 1.0], [15200.0, 1.0], [15100.0, 1.0], [16300.0, 1.0], [16600.0, 2.0], [18300.0, 1.0], [18100.0, 1.0], [18700.0, 1.0], [18900.0, 1.0], [19200.0, 1.0], [20300.0, 1.0], [19900.0, 1.0], [20400.0, 1.0], [21000.0, 2.0], [20500.0, 1.0], [21100.0, 1.0], [21200.0, 1.0], [20600.0, 1.0], [21700.0, 2.0], [21900.0, 1.0], [21600.0, 2.0], [22400.0, 1.0], [22000.0, 1.0], [22700.0, 2.0], [22600.0, 1.0], [23500.0, 3.0], [22900.0, 2.0], [22800.0, 1.0], [23300.0, 2.0], [23100.0, 1.0], [24400.0, 1.0], [23800.0, 1.0], [24700.0, 1.0], [24600.0, 1.0], [24800.0, 1.0], [25800.0, 1.0], [27300.0, 1.0], [28700.0, 1.0], [29700.0, 2.0], [30200.0, 1.0], [31000.0, 3.0], [31600.0, 1.0], [31200.0, 1.0], [31700.0, 1.0], [32300.0, 1.0], [32400.0, 1.0], [32100.0, 1.0], [32000.0, 1.0], [35800.0, 1.0], [35000.0, 1.0], [38400.0, 1.0], [43000.0, 1.0], [42000.0, 1.0], [44200.0, 1.0], [43800.0, 1.0], [45800.0, 1.0], [46400.0, 1.0], [48200.0, 1.0], [51000.0, 1.0], [49400.0, 1.0], [50000.0, 1.0], [52400.0, 1.0], [58400.0, 1.0], [57800.0, 1.0], [60400.0, 14.0], [60600.0, 5.0], [60800.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 2826.0], [33500.0, 2.0], [34700.0, 1.0], [35300.0, 1.0], [37300.0, 1.0], [38300.0, 1.0], [41700.0, 1.0], [44300.0, 1.0], [44500.0, 1.0], [43500.0, 1.0], [45300.0, 1.0], [46300.0, 2.0], [48700.0, 1.0], [50300.0, 1.0], [49700.0, 1.0], [52100.0, 1.0], [200.0, 31.0], [52900.0, 1.0], [54500.0, 2.0], [57500.0, 1.0], [60100.0, 25.0], [60300.0, 1.0], [300.0, 2.0], [5300.0, 1.0], [6900.0, 2.0], [7000.0, 1.0], [7200.0, 1.0], [8800.0, 1.0], [10000.0, 1.0], [12100.0, 2.0], [14800.0, 1.0], [14700.0, 1.0], [16000.0, 1.0], [16300.0, 2.0], [18400.0, 1.0], [17900.0, 1.0], [17800.0, 1.0], [18500.0, 1.0], [18700.0, 1.0], [20000.0, 2.0], [19900.0, 1.0], [19500.0, 1.0], [20200.0, 1.0], [21300.0, 2.0], [20800.0, 3.0], [20700.0, 1.0], [21400.0, 1.0], [21200.0, 1.0], [21500.0, 1.0], [22300.0, 1.0], [22400.0, 1.0], [22200.0, 1.0], [22500.0, 2.0], [22000.0, 1.0], [21600.0, 1.0], [23100.0, 1.0], [22600.0, 1.0], [23500.0, 1.0], [23000.0, 1.0], [22900.0, 2.0], [23200.0, 1.0], [22800.0, 1.0], [24000.0, 1.0], [24400.0, 2.0], [24300.0, 1.0], [25600.0, 1.0], [26900.0, 1.0], [28300.0, 1.0], [29300.0, 1.0], [29500.0, 1.0], [30700.0, 2.0], [30600.0, 1.0], [30000.0, 1.0], [31200.0, 1.0], [31700.0, 1.0], [31000.0, 1.0], [31300.0, 1.0], [31900.0, 1.0], [32000.0, 1.0], [31800.0, 1.0], [34200.0, 1.0], [33000.0, 1.0], [36200.0, 1.0], [35400.0, 1.0], [35200.0, 1.0], [38000.0, 1.0], [37000.0, 1.0], [38200.0, 1.0], [42600.0, 1.0], [43800.0, 1.0], [45400.0, 1.0], [46200.0, 1.0], [48000.0, 1.0], [48400.0, 1.0], [49200.0, 2.0], [50600.0, 1.0], [56800.0, 1.0], [58200.0, 1.0], [60200.0, 11.0], [60400.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[700.0, 1.0], [49900.0, 1.0], [200.0, 2697.0], [800.0, 1.0], [59300.0, 1.0], [57800.0, 1.0], [60200.0, 2.0], [60300.0, 4.0], [60400.0, 4.0], [1000.0, 1.0], [300.0, 150.0], [400.0, 157.0], [1800.0, 1.0], [500.0, 7.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 120500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5792.0, "series": [{"data": [[0.0, 147.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 88.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5792.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.68547344E12, "maxY": 25.0, "series": [{"data": [[1.68547416E12, 20.171257485029933], [1.68547386E12, 13.937984496124036], [1.68547356E12, 5.0], [1.68547452E12, 15.0], [1.68547422E12, 23.665760869565222], [1.68547344E12, 1.5], [1.6854744E12, 21.234736842105267], [1.6854741E12, 20.0], [1.6854738E12, 10.017857142857142], [1.68547476E12, 4.756944444444445], [1.6854735E12, 3.6250000000000004], [1.68547446E12, 19.21139101861993], [1.68547368E12, 8.694444444444441], [1.68547464E12, 9.970649895178195], [1.68547434E12, 25.0], [1.68547404E12, 19.22388059701493], [1.68547374E12, 10.0], [1.6854747E12, 5.418699186991867], [1.68547392E12, 15.0], [1.68547362E12, 5.0625], [1.68547458E12, 12.614545454545457], [1.68547428E12, 25.0], [1.68547398E12, 15.080645161290322]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547476E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 105.2857142857143, "minX": 1.0, "maxY": 14064.666666666668, "series": [{"data": [[2.0, 2205.5], [3.0, 8432.0], [4.0, 7150.142857142858], [5.0, 4362.524822695037], [6.0, 4386.333333333333], [7.0, 10853.75], [8.0, 9086.714285714286], [9.0, 4325.111111111111], [10.0, 4406.846153846156], [11.0, 6072.75], [12.0, 4876.315789473685], [13.0, 376.1], [14.0, 7305.785714285713], [15.0, 3994.15106382979], [16.0, 395.0], [1.0, 409.0], [17.0, 4672.5], [18.0, 356.8461538461538], [19.0, 9357.500000000002], [20.0, 3239.7915567282257], [21.0, 314.54545454545473], [22.0, 312.7368421052633], [23.0, 311.75342465753425], [24.0, 311.07058823529394], [25.0, 313.561571125265]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[19.080277502477713, 2407.3237528906525]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 2443.0], [8.0, 10311.5], [9.0, 4623.875], [10.0, 4170.322807017539], [11.0, 5818.25], [3.0, 8062.5], [12.0, 4864.166666666667], [13.0, 139.44444444444446], [14.0, 7586.307692307692], [15.0, 3755.558635394451], [4.0, 9499.6], [16.0, 114.75], [17.0, 5057.285714285714], [18.0, 120.66666666666667], [19.0, 9598.78947368421], [5.0, 4080.5714285714303], [20.0, 2013.5138705416116], [21.0, 106.0], [22.0, 106.09333333333335], [23.0, 105.84722222222223], [6.0, 4112.666666666667], [24.0, 105.2857142857143], [25.0, 105.6354941551541], [7.0, 14064.666666666668]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[19.124126455906847, 1940.42063227953]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 382.6666666666667], [3.0, 331.3333333333333], [4.0, 383.57142857142856], [5.0, 315.6524822695037], [6.0, 405.5], [7.0, 353.25], [8.0, 274.57142857142856], [9.0, 237.66666666666669], [10.0, 248.06993006993014], [11.0, 253.50000000000003], [12.0, 255.33333333333334], [13.0, 299.69999999999993], [14.0, 280.625], [15.0, 247.1194029850747], [1.0, 337.0], [16.0, 315.8], [17.0, 253.22222222222223], [18.0, 280.1818181818182], [19.0, 221.7222222222222], [20.0, 1222.646517739818], [21.0, 209.10447761194035], [22.0, 207.77027027027023], [23.0, 206.90789473684208], [24.0, 206.95], [25.0, 208.09004237288158]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[19.073315719947146, 480.91545574636723]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6.95, "minX": 1.68547344E12, "maxY": 54763.46666666667, "series": [{"data": [[1.68547416E12, 6270.933333333333], [1.68547386E12, 1453.75], [1.68547356E12, 1174.1333333333334], [1.68547452E12, 5058.55], [1.68547422E12, 8306.433333333332], [1.68547344E12, 36.28333333333333], [1.6854744E12, 7163.45], [1.6854741E12, 1097.65], [1.6854738E12, 1882.3], [1.68547476E12, 1086.4], [1.6854735E12, 658.8166666666667], [1.68547446E12, 6891.85], [1.68547368E12, 952.35], [1.68547464E12, 3598.7], [1.68547434E12, 8317.75], [1.68547404E12, 629.4166666666666], [1.68547374E12, 807.2166666666667], [1.6854747E12, 1855.9333333333334], [1.68547392E12, 2282.7166666666667], [1.68547362E12, 770.1166666666667], [1.68547458E12, 4141.9], [1.68547428E12, 8408.283333333333], [1.68547398E12, 1526.9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68547416E12, 40689.2], [1.68547386E12, 5287.866666666667], [1.68547356E12, 2039.55], [1.68547452E12, 33183.6], [1.68547422E12, 53903.78333333333], [1.68547344E12, 6.95], [1.6854744E12, 45959.51666666667], [1.6854741E12, 5958.716666666666], [1.6854738E12, 5420.283333333334], [1.68547476E12, 7125.4], [1.6854735E12, 955.0333333333333], [1.68547446E12, 45128.28333333333], [1.68547368E12, 1772.6166666666666], [1.68547464E12, 24326.866666666665], [1.68547434E12, 54763.46666666667], [1.68547404E12, 3194.866666666667], [1.68547374E12, 1447.7833333333333], [1.6854747E12, 11732.566666666668], [1.68547392E12, 9470.45], [1.68547362E12, 1246.6666666666667], [1.68547458E12, 26838.95], [1.68547428E12, 51994.3], [1.68547398E12, 5365.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547476E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 105.46849315068496, "minX": 1.68547344E12, "maxY": 42937.200000000004, "series": [{"data": [[1.68547416E12, 1817.3309608540924], [1.68547386E12, 11706.488372093023], [1.68547356E12, 20823.5625], [1.68547452E12, 325.2702702702703], [1.68547422E12, 312.54054054054063], [1.68547344E12, 7279.0], [1.6854744E12, 313.3059936908515], [1.6854741E12, 21293.05555555556], [1.6854738E12, 10525.457142857143], [1.68547476E12, 456.125], [1.6854735E12, 12575.833333333332], [1.68547446E12, 311.5723684210525], [1.68547368E12, 33519.399999999994], [1.68547464E12, 327.0188679245283], [1.68547434E12, 314.3188010899182], [1.68547404E12, 35480.84], [1.68547374E12, 42937.200000000004], [1.6854747E12, 407.2439024390242], [1.68547392E12, 9760.212121212122], [1.68547362E12, 21343.272727272728], [1.68547458E12, 325.5706521739131], [1.68547428E12, 313.6199460916443], [1.68547398E12, 20319.675000000007]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68547416E12, 1409.4404332129966], [1.68547386E12, 12471.243902439022], [1.68547356E12, 20458.499999999996], [1.68547452E12, 108.74439461883401], [1.68547422E12, 105.46849315068496], [1.6854744E12, 106.1012658227848], [1.6854741E12, 10927.153846153844], [1.6854738E12, 13869.63157894737], [1.68547476E12, 140.10416666666663], [1.6854735E12, 11484.42857142857], [1.68547446E12, 105.71475409836073], [1.68547368E12, 31230.636363636364], [1.68547464E12, 109.57861635220127], [1.68547434E12, 105.81793478260857], [1.68547404E12, 35151.48], [1.68547374E12, 40374.0], [1.6854747E12, 127.67073170731705], [1.68547392E12, 9150.323529411764], [1.68547362E12, 21867.0], [1.68547458E12, 109.45355191256829], [1.68547428E12, 105.59946236559146], [1.68547398E12, 19501.902439024394]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68547416E12, 212.10108303249103], [1.68547386E12, 354.8888888888888], [1.68547356E12, 349.25000000000006], [1.68547452E12, 216.44642857142856], [1.68547422E12, 207.04065040650408], [1.68547344E12, 265.0], [1.6854744E12, 208.57413249211348], [1.6854741E12, 15306.352941176472], [1.6854738E12, 346.1794871794872], [1.68547476E12, 334.0208333333334], [1.6854735E12, 342.72727272727275], [1.68547446E12, 207.57894736842115], [1.68547368E12, 378.8], [1.68547464E12, 219.12578616352206], [1.68547434E12, 208.53405994550414], [1.68547404E12, 353.6470588235294], [1.68547374E12, 347.1818181818182], [1.6854747E12, 279.1951219512196], [1.68547392E12, 323.7313432835821], [1.68547362E12, 394.8181818181818], [1.68547458E12, 217.63934426229517], [1.68547428E12, 207.99999999999991], [1.68547398E12, 344.093023255814]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547476E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 105.43561643835626, "minX": 1.68547344E12, "maxY": 42936.8, "series": [{"data": [[1.68547416E12, 1817.2704626334526], [1.68547386E12, 11706.255813953489], [1.68547356E12, 20823.1875], [1.68547452E12, 325.2207207207207], [1.68547422E12, 312.4837837837837], [1.68547344E12, 7261.0], [1.6854744E12, 313.2744479495271], [1.6854741E12, 21292.7037037037], [1.6854738E12, 10522.771428571428], [1.68547476E12, 456.0625], [1.6854735E12, 12574.833333333332], [1.68547446E12, 311.51644736842115], [1.68547368E12, 33518.799999999996], [1.68547464E12, 326.9937106918237], [1.68547434E12, 314.2343324250682], [1.68547404E12, 35480.560000000005], [1.68547374E12, 42936.8], [1.6854747E12, 407.20731707317094], [1.68547392E12, 9759.878787878786], [1.68547362E12, 21342.636363636364], [1.68547458E12, 325.53804347826105], [1.68547428E12, 313.5714285714285], [1.68547398E12, 20319.550000000007]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68547416E12, 1409.4043321299641], [1.68547386E12, 12471.121951219513], [1.68547356E12, 20458.375], [1.68547452E12, 108.71748878923768], [1.68547422E12, 105.43561643835626], [1.6854744E12, 106.06962025316453], [1.6854741E12, 10927.128205128207], [1.6854738E12, 13869.552631578952], [1.68547476E12, 140.08333333333331], [1.6854735E12, 11483.142857142857], [1.68547446E12, 105.6918032786885], [1.68547368E12, 31230.545454545456], [1.68547464E12, 109.55974842767294], [1.68547434E12, 105.77717391304355], [1.68547404E12, 35151.36000000001], [1.68547374E12, 40373.818181818184], [1.6854747E12, 127.65853658536582], [1.68547392E12, 9150.19117647059], [1.68547362E12, 21866.6], [1.68547458E12, 109.43715846994536], [1.68547428E12, 105.56989247311824], [1.68547398E12, 19501.82926829268]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68547416E12, 212.07581227436816], [1.68547386E12, 354.77777777777766], [1.68547356E12, 349.06250000000006], [1.68547452E12, 216.42410714285708], [1.68547422E12, 207.01897018970192], [1.68547344E12, 255.0], [1.6854744E12, 208.564668769716], [1.6854741E12, 15306.019607843138], [1.6854738E12, 345.92307692307696], [1.68547476E12, 333.9791666666667], [1.6854735E12, 342.09090909090907], [1.68547446E12, 207.546052631579], [1.68547368E12, 378.46666666666664], [1.68547464E12, 219.11949685534583], [1.68547434E12, 208.4959128065397], [1.68547404E12, 353.5882352941176], [1.68547374E12, 339.8181818181818], [1.6854747E12, 279.1707317073171], [1.68547392E12, 323.53731343283573], [1.68547362E12, 394.3636363636364], [1.68547458E12, 217.62295081967207], [1.68547428E12, 207.97843665768193], [1.68547398E12, 343.9767441860465]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547476E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68547344E12, "maxY": 196.36363636363637, "series": [{"data": [[1.68547416E12, 107.53024911032028], [1.68547386E12, 159.55813953488368], [1.68547356E12, 177.18750000000003], [1.68547452E12, 107.88738738738739], [1.68547422E12, 103.2540540540541], [1.68547344E12, 122.0], [1.6854744E12, 104.0283911671923], [1.6854741E12, 171.962962962963], [1.6854738E12, 179.2], [1.68547476E12, 164.06249999999997], [1.6854735E12, 148.33333333333331], [1.68547446E12, 103.1776315789474], [1.68547368E12, 179.7], [1.68547464E12, 110.04402515723271], [1.68547434E12, 103.65395095367845], [1.68547404E12, 144.83999999999997], [1.68547374E12, 181.46666666666664], [1.6854747E12, 135.34146341463418], [1.68547392E12, 147.71212121212122], [1.68547362E12, 190.0909090909091], [1.68547458E12, 107.53260869565213], [1.68547428E12, 103.35309973045824], [1.68547398E12, 150.2]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68547416E12, 1.9566787003610093], [1.68547386E12, 0.0], [1.68547356E12, 0.0], [1.68547452E12, 0.0], [1.68547422E12, 0.0], [1.6854744E12, 0.0], [1.6854741E12, 23.153846153846153], [1.6854738E12, 0.0], [1.68547476E12, 0.0], [1.6854735E12, 0.0], [1.68547446E12, 0.0], [1.68547368E12, 0.0], [1.68547464E12, 0.0], [1.68547434E12, 0.0], [1.68547404E12, 0.0], [1.68547374E12, 0.0], [1.6854747E12, 0.0], [1.68547392E12, 0.0], [1.68547362E12, 0.0], [1.68547458E12, 0.0], [1.68547428E12, 0.0], [1.68547398E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68547416E12, 105.57039711191331], [1.68547386E12, 164.8888888888889], [1.68547356E12, 169.3125], [1.68547452E12, 107.84821428571429], [1.68547422E12, 103.25203252032526], [1.68547344E12, 122.0], [1.6854744E12, 104.02839116719241], [1.6854741E12, 147.50980392156865], [1.6854738E12, 172.5641025641025], [1.68547476E12, 164.06249999999997], [1.6854735E12, 163.0], [1.68547446E12, 103.17763157894737], [1.68547368E12, 185.73333333333332], [1.68547464E12, 110.04402515723265], [1.68547434E12, 103.65395095367843], [1.68547404E12, 171.64705882352945], [1.68547374E12, 158.0], [1.6854747E12, 135.3414634146341], [1.68547392E12, 144.04477611940294], [1.68547362E12, 196.36363636363637], [1.68547458E12, 107.55737704918032], [1.68547428E12, 103.35309973045818], [1.68547398E12, 147.3488372093023]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547476E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 209.0, "minX": 1.68547344E12, "maxY": 59389.0, "series": [{"data": [[1.68547368E12, 44334.0], [1.68547386E12, 49224.0], [1.68547356E12, 24418.0], [1.68547404E12, 34751.0], [1.68547374E12, 54504.0], [1.68547344E12, 265.0], [1.68547392E12, 31868.0], [1.68547362E12, 24444.0], [1.6854741E12, 59389.0], [1.6854738E12, 50659.0], [1.6854735E12, 16323.0], [1.68547398E12, 46252.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68547368E12, 39267.9], [1.68547386E12, 48033.0], [1.68547356E12, 22946.0], [1.68547404E12, 34751.0], [1.68547374E12, 51232.799999999996], [1.68547344E12, 265.0], [1.68547392E12, 30012.7], [1.68547362E12, 23441.0], [1.6854741E12, 59389.0], [1.6854738E12, 43966.09999999999], [1.6854735E12, 16038.6], [1.68547398E12, 816.6000000000007]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68547368E12, 44334.0], [1.68547386E12, 49224.0], [1.68547356E12, 24418.0], [1.68547404E12, 34751.0], [1.68547374E12, 54504.0], [1.68547344E12, 265.0], [1.68547392E12, 31868.0], [1.68547362E12, 24444.0], [1.6854741E12, 59389.0], [1.6854738E12, 50659.0], [1.6854735E12, 16323.0], [1.68547398E12, 46252.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68547368E12, 44156.55], [1.68547386E12, 49224.0], [1.68547356E12, 24153.45], [1.68547404E12, 34751.0], [1.68547374E12, 54143.99999999999], [1.68547344E12, 265.0], [1.68547392E12, 31398.85], [1.68547362E12, 24354.199999999997], [1.6854741E12, 59389.0], [1.6854738E12, 50298.149999999994], [1.6854735E12, 16323.0], [1.68547398E12, 37206.19999999987]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68547368E12, 304.0], [1.68547386E12, 210.0], [1.68547356E12, 220.0], [1.68547404E12, 306.0], [1.68547374E12, 215.0], [1.68547344E12, 265.0], [1.68547392E12, 209.0], [1.68547362E12, 283.0], [1.6854741E12, 49914.0], [1.6854738E12, 210.0], [1.6854735E12, 218.0], [1.68547398E12, 225.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68547368E12, 410.5], [1.68547386E12, 409.0], [1.68547356E12, 3721.5], [1.68547404E12, 409.5], [1.68547374E12, 12389.5], [1.68547344E12, 265.0], [1.68547392E12, 401.5], [1.68547362E12, 495.0], [1.6854741E12, 57854.0], [1.6854738E12, 408.5], [1.6854735E12, 389.5], [1.68547398E12, 322.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6854741E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 1.0, "maxY": 57854.0, "series": [{"data": [[1.0, 407.0], [2.0, 408.0], [4.0, 409.0], [10.0, 9245.5], [5.0, 406.5], [22.0, 324.0], [3.0, 409.0], [6.0, 401.0], [12.0, 57854.0], [7.0, 9493.0], [14.0, 233.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 205.0], [8.0, 119.5], [9.0, 204.0], [10.0, 204.0], [11.0, 138.0], [3.0, 204.5], [12.0, 110.0], [13.0, 204.0], [14.0, 204.0], [15.0, 205.0], [4.0, 204.0], [1.0, 208.0], [16.0, 111.0], [17.0, 204.0], [18.0, 204.0], [19.0, 204.5], [5.0, 204.0], [20.0, 206.0], [21.0, 109.0], [22.0, 206.0], [6.0, 205.0], [25.0, 205.0], [27.0, 204.0], [7.0, 204.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 27.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 1.0, "maxY": 57852.0, "series": [{"data": [[1.0, 407.0], [2.0, 408.0], [4.0, 409.0], [10.0, 9245.5], [5.0, 405.5], [22.0, 324.0], [3.0, 409.0], [6.0, 401.0], [12.0, 57852.0], [7.0, 9493.0], [14.0, 233.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 205.0], [8.0, 119.5], [9.0, 204.0], [10.0, 204.0], [11.0, 138.0], [3.0, 204.5], [12.0, 110.0], [13.0, 204.0], [14.0, 204.0], [15.0, 205.0], [4.0, 204.0], [1.0, 208.0], [16.0, 111.0], [17.0, 204.0], [18.0, 204.0], [19.0, 204.5], [5.0, 204.0], [20.0, 206.0], [21.0, 109.0], [22.0, 206.0], [6.0, 205.0], [25.0, 205.0], [27.0, 204.0], [7.0, 204.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 27.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68547344E12, "maxY": 12.4, "series": [{"data": [[1.68547416E12, 9.15], [1.68547386E12, 1.4666666666666666], [1.68547356E12, 0.48333333333333334], [1.68547452E12, 7.45], [1.68547422E12, 12.233333333333333], [1.68547344E12, 0.03333333333333333], [1.6854744E12, 10.533333333333333], [1.6854741E12, 1.3], [1.6854738E12, 1.3], [1.68547476E12, 1.6], [1.6854735E12, 0.36666666666666664], [1.68547446E12, 10.133333333333333], [1.68547368E12, 0.48333333333333334], [1.68547464E12, 5.316666666666666], [1.68547434E12, 12.266666666666667], [1.68547404E12, 0.7666666666666667], [1.68547374E12, 0.38333333333333336], [1.6854747E12, 2.7], [1.68547392E12, 2.2666666666666666], [1.68547362E12, 0.4166666666666667], [1.68547458E12, 6.083333333333333], [1.68547428E12, 12.4], [1.68547398E12, 1.4166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547476E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68547344E12, "maxY": 12.383333333333333, "series": [{"data": [[1.68547368E12, 0.43333333333333335], [1.68547386E12, 0.31666666666666665], [1.68547356E12, 0.5333333333333333], [1.68547404E12, 0.1], [1.68547374E12, 0.36666666666666664], [1.68547344E12, 0.016666666666666666], [1.68547392E12, 0.5], [1.68547362E12, 0.35], [1.6854741E12, 0.05], [1.6854738E12, 0.6666666666666666], [1.6854735E12, 0.3], [1.68547398E12, 0.38333333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68547416E12, 9.133333333333333], [1.68547386E12, 1.0333333333333334], [1.68547452E12, 7.45], [1.68547422E12, 12.233333333333333], [1.6854744E12, 10.55], [1.6854741E12, 1.1666666666666667], [1.6854738E12, 0.6166666666666667], [1.68547476E12, 1.6], [1.68547446E12, 10.15], [1.68547464E12, 5.3], [1.68547434E12, 12.25], [1.68547404E12, 0.36666666666666664], [1.6854747E12, 2.7333333333333334], [1.68547392E12, 1.7333333333333334], [1.68547458E12, 6.1], [1.68547428E12, 12.383333333333333], [1.68547398E12, 0.9333333333333333]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68547416E12, 0.1], [1.68547386E12, 0.08333333333333333], [1.68547404E12, 0.23333333333333334], [1.68547392E12, 0.016666666666666666], [1.6854741E12, 0.2833333333333333], [1.68547398E12, 0.08333333333333333]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547476E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68547344E12, "maxY": 6.2, "series": [{"data": [[1.68547368E12, 0.25], [1.68547386E12, 0.21666666666666667], [1.68547356E12, 0.26666666666666666], [1.68547404E12, 0.08333333333333333], [1.68547374E12, 0.18333333333333332], [1.68547344E12, 0.016666666666666666], [1.68547392E12, 0.38333333333333336], [1.68547362E12, 0.18333333333333332], [1.6854741E12, 0.05], [1.6854738E12, 0.4166666666666667], [1.6854735E12, 0.18333333333333332], [1.68547398E12, 0.36666666666666664]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68547416E12, 4.616666666666666], [1.68547386E12, 0.5333333333333333], [1.68547452E12, 3.7333333333333334], [1.68547422E12, 6.15], [1.6854744E12, 5.283333333333333], [1.6854741E12, 0.8], [1.6854738E12, 0.23333333333333334], [1.68547476E12, 0.8], [1.68547446E12, 5.066666666666666], [1.68547464E12, 2.65], [1.68547434E12, 6.116666666666666], [1.68547404E12, 0.2], [1.6854747E12, 1.3666666666666667], [1.68547392E12, 0.7333333333333333], [1.68547458E12, 3.05], [1.68547428E12, 6.183333333333334], [1.68547398E12, 0.35]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68547416E12, 4.616666666666666], [1.68547386E12, 0.5833333333333334], [1.68547452E12, 3.716666666666667], [1.68547422E12, 6.083333333333333], [1.6854744E12, 5.266666666666667], [1.6854741E12, 0.65], [1.6854738E12, 0.38333333333333336], [1.68547476E12, 0.8], [1.68547446E12, 5.083333333333333], [1.68547464E12, 2.65], [1.68547434E12, 6.133333333333334], [1.68547404E12, 0.4], [1.6854747E12, 1.3666666666666667], [1.68547392E12, 1.0166666666666666], [1.68547458E12, 3.05], [1.68547428E12, 6.2], [1.68547398E12, 0.6666666666666666]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68547368E12, 0.16666666666666666], [1.68547356E12, 0.26666666666666666], [1.68547404E12, 0.016666666666666666], [1.68547374E12, 0.25], [1.68547344E12, 0.016666666666666666], [1.68547392E12, 0.05], [1.68547362E12, 0.18333333333333332], [1.6854738E12, 0.18333333333333332], [1.6854735E12, 0.1]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68547416E12, 4.683333333333334], [1.68547386E12, 0.7166666666666667], [1.68547452E12, 3.7], [1.68547422E12, 6.166666666666667], [1.6854744E12, 5.283333333333333], [1.6854741E12, 0.9], [1.6854738E12, 0.4], [1.68547476E12, 0.8], [1.68547446E12, 5.066666666666666], [1.68547464E12, 2.65], [1.68547434E12, 6.116666666666666], [1.68547404E12, 0.4], [1.6854747E12, 1.3666666666666667], [1.68547392E12, 1.05], [1.68547458E12, 3.066666666666667], [1.68547428E12, 6.183333333333334], [1.68547398E12, 0.6666666666666666]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68547368E12, 0.18333333333333332], [1.68547386E12, 0.1], [1.68547356E12, 0.26666666666666666], [1.68547404E12, 0.016666666666666666], [1.68547374E12, 0.18333333333333332], [1.68547392E12, 0.11666666666666667], [1.68547362E12, 0.16666666666666666], [1.6854738E12, 0.25], [1.6854735E12, 0.11666666666666667], [1.68547398E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547476E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68547344E12, "maxY": 18.566666666666666, "series": [{"data": [[1.68547368E12, 0.6], [1.68547386E12, 0.31666666666666665], [1.68547356E12, 0.8], [1.68547404E12, 0.11666666666666667], [1.68547374E12, 0.6166666666666667], [1.68547344E12, 0.03333333333333333], [1.68547392E12, 0.55], [1.68547362E12, 0.5333333333333333], [1.6854741E12, 0.05], [1.6854738E12, 0.85], [1.6854735E12, 0.4], [1.68547398E12, 0.38333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68547416E12, 13.916666666666666], [1.68547386E12, 1.8333333333333333], [1.68547452E12, 11.15], [1.68547422E12, 18.4], [1.6854744E12, 15.833333333333334], [1.6854741E12, 2.35], [1.6854738E12, 1.0166666666666666], [1.68547476E12, 2.4], [1.68547446E12, 15.216666666666667], [1.68547464E12, 7.95], [1.68547434E12, 18.366666666666667], [1.68547404E12, 1.0], [1.6854747E12, 4.1], [1.68547392E12, 2.8], [1.68547458E12, 9.166666666666666], [1.68547428E12, 18.566666666666666], [1.68547398E12, 1.6833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547476E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

