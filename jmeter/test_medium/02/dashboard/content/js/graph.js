/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 104.0, "minX": 0.0, "maxY": 63819.0, "series": [{"data": [[0.0, 209.0], [0.1, 210.0], [0.2, 211.0], [0.3, 211.0], [0.4, 212.0], [0.5, 212.0], [0.6, 213.0], [0.7, 213.0], [0.8, 214.0], [0.9, 214.0], [1.0, 216.0], [1.1, 227.0], [1.2, 314.0], [1.3, 314.0], [1.4, 315.0], [1.5, 315.0], [1.6, 315.0], [1.7, 315.0], [1.8, 315.0], [1.9, 315.0], [2.0, 315.0], [2.1, 315.0], [2.2, 316.0], [2.3, 316.0], [2.4, 316.0], [2.5, 316.0], [2.6, 316.0], [2.7, 316.0], [2.8, 316.0], [2.9, 316.0], [3.0, 316.0], [3.1, 316.0], [3.2, 316.0], [3.3, 316.0], [3.4, 316.0], [3.5, 316.0], [3.6, 317.0], [3.7, 317.0], [3.8, 317.0], [3.9, 317.0], [4.0, 317.0], [4.1, 317.0], [4.2, 317.0], [4.3, 317.0], [4.4, 317.0], [4.5, 317.0], [4.6, 317.0], [4.7, 317.0], [4.8, 317.0], [4.9, 317.0], [5.0, 317.0], [5.1, 317.0], [5.2, 317.0], [5.3, 317.0], [5.4, 317.0], [5.5, 317.0], [5.6, 317.0], [5.7, 317.0], [5.8, 317.0], [5.9, 317.0], [6.0, 317.0], [6.1, 317.0], [6.2, 318.0], [6.3, 318.0], [6.4, 318.0], [6.5, 318.0], [6.6, 318.0], [6.7, 318.0], [6.8, 318.0], [6.9, 318.0], [7.0, 318.0], [7.1, 318.0], [7.2, 318.0], [7.3, 318.0], [7.4, 318.0], [7.5, 318.0], [7.6, 318.0], [7.7, 318.0], [7.8, 318.0], [7.9, 318.0], [8.0, 318.0], [8.1, 318.0], [8.2, 318.0], [8.3, 318.0], [8.4, 318.0], [8.5, 318.0], [8.6, 318.0], [8.7, 318.0], [8.8, 318.0], [8.9, 318.0], [9.0, 318.0], [9.1, 318.0], [9.2, 318.0], [9.3, 318.0], [9.4, 318.0], [9.5, 318.0], [9.6, 318.0], [9.7, 318.0], [9.8, 318.0], [9.9, 318.0], [10.0, 318.0], [10.1, 318.0], [10.2, 318.0], [10.3, 318.0], [10.4, 318.0], [10.5, 318.0], [10.6, 318.0], [10.7, 318.0], [10.8, 318.0], [10.9, 318.0], [11.0, 318.0], [11.1, 318.0], [11.2, 318.0], [11.3, 319.0], [11.4, 319.0], [11.5, 319.0], [11.6, 319.0], [11.7, 319.0], [11.8, 319.0], [11.9, 319.0], [12.0, 319.0], [12.1, 319.0], [12.2, 319.0], [12.3, 319.0], [12.4, 319.0], [12.5, 319.0], [12.6, 319.0], [12.7, 319.0], [12.8, 319.0], [12.9, 319.0], [13.0, 319.0], [13.1, 319.0], [13.2, 319.0], [13.3, 319.0], [13.4, 319.0], [13.5, 319.0], [13.6, 319.0], [13.7, 319.0], [13.8, 319.0], [13.9, 319.0], [14.0, 319.0], [14.1, 319.0], [14.2, 319.0], [14.3, 319.0], [14.4, 319.0], [14.5, 319.0], [14.6, 319.0], [14.7, 319.0], [14.8, 319.0], [14.9, 319.0], [15.0, 319.0], [15.1, 319.0], [15.2, 319.0], [15.3, 319.0], [15.4, 319.0], [15.5, 319.0], [15.6, 319.0], [15.7, 319.0], [15.8, 319.0], [15.9, 319.0], [16.0, 319.0], [16.1, 319.0], [16.2, 319.0], [16.3, 319.0], [16.4, 319.0], [16.5, 319.0], [16.6, 319.0], [16.7, 319.0], [16.8, 319.0], [16.9, 319.0], [17.0, 319.0], [17.1, 319.0], [17.2, 319.0], [17.3, 319.0], [17.4, 319.0], [17.5, 319.0], [17.6, 319.0], [17.7, 319.0], [17.8, 319.0], [17.9, 319.0], [18.0, 319.0], [18.1, 319.0], [18.2, 319.0], [18.3, 319.0], [18.4, 319.0], [18.5, 319.0], [18.6, 320.0], [18.7, 320.0], [18.8, 320.0], [18.9, 320.0], [19.0, 320.0], [19.1, 320.0], [19.2, 320.0], [19.3, 320.0], [19.4, 320.0], [19.5, 320.0], [19.6, 320.0], [19.7, 320.0], [19.8, 320.0], [19.9, 320.0], [20.0, 320.0], [20.1, 320.0], [20.2, 320.0], [20.3, 320.0], [20.4, 320.0], [20.5, 320.0], [20.6, 320.0], [20.7, 320.0], [20.8, 320.0], [20.9, 320.0], [21.0, 320.0], [21.1, 320.0], [21.2, 320.0], [21.3, 320.0], [21.4, 320.0], [21.5, 320.0], [21.6, 320.0], [21.7, 320.0], [21.8, 320.0], [21.9, 320.0], [22.0, 320.0], [22.1, 320.0], [22.2, 320.0], [22.3, 320.0], [22.4, 320.0], [22.5, 320.0], [22.6, 320.0], [22.7, 320.0], [22.8, 320.0], [22.9, 320.0], [23.0, 320.0], [23.1, 320.0], [23.2, 320.0], [23.3, 320.0], [23.4, 320.0], [23.5, 320.0], [23.6, 320.0], [23.7, 320.0], [23.8, 320.0], [23.9, 320.0], [24.0, 320.0], [24.1, 320.0], [24.2, 320.0], [24.3, 320.0], [24.4, 320.0], [24.5, 320.0], [24.6, 320.0], [24.7, 320.0], [24.8, 320.0], [24.9, 320.0], [25.0, 320.0], [25.1, 320.0], [25.2, 320.0], [25.3, 320.0], [25.4, 320.0], [25.5, 320.0], [25.6, 320.0], [25.7, 320.0], [25.8, 320.0], [25.9, 320.0], [26.0, 320.0], [26.1, 320.0], [26.2, 320.0], [26.3, 320.0], [26.4, 320.0], [26.5, 320.0], [26.6, 320.0], [26.7, 321.0], [26.8, 321.0], [26.9, 321.0], [27.0, 321.0], [27.1, 321.0], [27.2, 321.0], [27.3, 321.0], [27.4, 321.0], [27.5, 321.0], [27.6, 321.0], [27.7, 321.0], [27.8, 321.0], [27.9, 321.0], [28.0, 321.0], [28.1, 321.0], [28.2, 321.0], [28.3, 321.0], [28.4, 321.0], [28.5, 321.0], [28.6, 321.0], [28.7, 321.0], [28.8, 321.0], [28.9, 321.0], [29.0, 321.0], [29.1, 321.0], [29.2, 321.0], [29.3, 321.0], [29.4, 321.0], [29.5, 321.0], [29.6, 321.0], [29.7, 321.0], [29.8, 321.0], [29.9, 321.0], [30.0, 321.0], [30.1, 321.0], [30.2, 321.0], [30.3, 321.0], [30.4, 321.0], [30.5, 321.0], [30.6, 321.0], [30.7, 321.0], [30.8, 321.0], [30.9, 321.0], [31.0, 321.0], [31.1, 321.0], [31.2, 321.0], [31.3, 321.0], [31.4, 321.0], [31.5, 321.0], [31.6, 321.0], [31.7, 321.0], [31.8, 321.0], [31.9, 321.0], [32.0, 321.0], [32.1, 321.0], [32.2, 321.0], [32.3, 321.0], [32.4, 321.0], [32.5, 321.0], [32.6, 321.0], [32.7, 321.0], [32.8, 321.0], [32.9, 321.0], [33.0, 321.0], [33.1, 321.0], [33.2, 321.0], [33.3, 321.0], [33.4, 321.0], [33.5, 321.0], [33.6, 321.0], [33.7, 321.0], [33.8, 321.0], [33.9, 321.0], [34.0, 321.0], [34.1, 321.0], [34.2, 321.0], [34.3, 321.0], [34.4, 321.0], [34.5, 321.0], [34.6, 321.0], [34.7, 321.0], [34.8, 321.0], [34.9, 321.0], [35.0, 321.0], [35.1, 321.0], [35.2, 321.0], [35.3, 321.0], [35.4, 321.0], [35.5, 321.0], [35.6, 321.0], [35.7, 321.0], [35.8, 321.0], [35.9, 321.0], [36.0, 321.0], [36.1, 321.0], [36.2, 321.0], [36.3, 321.0], [36.4, 321.0], [36.5, 321.0], [36.6, 322.0], [36.7, 322.0], [36.8, 322.0], [36.9, 322.0], [37.0, 322.0], [37.1, 322.0], [37.2, 322.0], [37.3, 322.0], [37.4, 322.0], [37.5, 322.0], [37.6, 322.0], [37.7, 322.0], [37.8, 322.0], [37.9, 322.0], [38.0, 322.0], [38.1, 322.0], [38.2, 322.0], [38.3, 322.0], [38.4, 322.0], [38.5, 322.0], [38.6, 322.0], [38.7, 322.0], [38.8, 322.0], [38.9, 322.0], [39.0, 322.0], [39.1, 322.0], [39.2, 322.0], [39.3, 322.0], [39.4, 322.0], [39.5, 322.0], [39.6, 322.0], [39.7, 322.0], [39.8, 322.0], [39.9, 322.0], [40.0, 322.0], [40.1, 322.0], [40.2, 322.0], [40.3, 322.0], [40.4, 322.0], [40.5, 322.0], [40.6, 322.0], [40.7, 322.0], [40.8, 322.0], [40.9, 322.0], [41.0, 322.0], [41.1, 322.0], [41.2, 322.0], [41.3, 322.0], [41.4, 322.0], [41.5, 322.0], [41.6, 322.0], [41.7, 322.0], [41.8, 322.0], [41.9, 322.0], [42.0, 322.0], [42.1, 322.0], [42.2, 322.0], [42.3, 322.0], [42.4, 322.0], [42.5, 322.0], [42.6, 322.0], [42.7, 322.0], [42.8, 322.0], [42.9, 322.0], [43.0, 322.0], [43.1, 322.0], [43.2, 322.0], [43.3, 322.0], [43.4, 322.0], [43.5, 322.0], [43.6, 322.0], [43.7, 322.0], [43.8, 322.0], [43.9, 322.0], [44.0, 322.0], [44.1, 322.0], [44.2, 322.0], [44.3, 322.0], [44.4, 322.0], [44.5, 322.0], [44.6, 322.0], [44.7, 323.0], [44.8, 323.0], [44.9, 323.0], [45.0, 323.0], [45.1, 323.0], [45.2, 323.0], [45.3, 323.0], [45.4, 323.0], [45.5, 323.0], [45.6, 323.0], [45.7, 323.0], [45.8, 323.0], [45.9, 323.0], [46.0, 323.0], [46.1, 323.0], [46.2, 323.0], [46.3, 323.0], [46.4, 323.0], [46.5, 323.0], [46.6, 323.0], [46.7, 323.0], [46.8, 323.0], [46.9, 323.0], [47.0, 323.0], [47.1, 323.0], [47.2, 323.0], [47.3, 323.0], [47.4, 323.0], [47.5, 323.0], [47.6, 323.0], [47.7, 323.0], [47.8, 323.0], [47.9, 323.0], [48.0, 323.0], [48.1, 323.0], [48.2, 323.0], [48.3, 323.0], [48.4, 323.0], [48.5, 323.0], [48.6, 323.0], [48.7, 323.0], [48.8, 323.0], [48.9, 323.0], [49.0, 323.0], [49.1, 323.0], [49.2, 323.0], [49.3, 323.0], [49.4, 323.0], [49.5, 323.0], [49.6, 323.0], [49.7, 323.0], [49.8, 323.0], [49.9, 323.0], [50.0, 323.0], [50.1, 323.0], [50.2, 323.0], [50.3, 323.0], [50.4, 323.0], [50.5, 323.0], [50.6, 323.0], [50.7, 323.0], [50.8, 323.0], [50.9, 323.0], [51.0, 323.0], [51.1, 323.0], [51.2, 323.0], [51.3, 323.0], [51.4, 323.0], [51.5, 323.0], [51.6, 323.0], [51.7, 323.0], [51.8, 323.0], [51.9, 323.0], [52.0, 323.0], [52.1, 323.0], [52.2, 323.0], [52.3, 323.0], [52.4, 323.0], [52.5, 323.0], [52.6, 324.0], [52.7, 324.0], [52.8, 324.0], [52.9, 324.0], [53.0, 324.0], [53.1, 324.0], [53.2, 324.0], [53.3, 324.0], [53.4, 324.0], [53.5, 324.0], [53.6, 324.0], [53.7, 324.0], [53.8, 324.0], [53.9, 324.0], [54.0, 324.0], [54.1, 324.0], [54.2, 324.0], [54.3, 324.0], [54.4, 324.0], [54.5, 324.0], [54.6, 324.0], [54.7, 324.0], [54.8, 324.0], [54.9, 324.0], [55.0, 324.0], [55.1, 324.0], [55.2, 324.0], [55.3, 324.0], [55.4, 324.0], [55.5, 324.0], [55.6, 324.0], [55.7, 324.0], [55.8, 324.0], [55.9, 324.0], [56.0, 324.0], [56.1, 324.0], [56.2, 324.0], [56.3, 324.0], [56.4, 324.0], [56.5, 324.0], [56.6, 324.0], [56.7, 324.0], [56.8, 324.0], [56.9, 324.0], [57.0, 324.0], [57.1, 324.0], [57.2, 324.0], [57.3, 324.0], [57.4, 324.0], [57.5, 324.0], [57.6, 324.0], [57.7, 324.0], [57.8, 324.0], [57.9, 324.0], [58.0, 324.0], [58.1, 324.0], [58.2, 324.0], [58.3, 324.0], [58.4, 324.0], [58.5, 324.0], [58.6, 325.0], [58.7, 325.0], [58.8, 325.0], [58.9, 325.0], [59.0, 325.0], [59.1, 325.0], [59.2, 325.0], [59.3, 325.0], [59.4, 325.0], [59.5, 325.0], [59.6, 325.0], [59.7, 325.0], [59.8, 325.0], [59.9, 325.0], [60.0, 325.0], [60.1, 325.0], [60.2, 325.0], [60.3, 325.0], [60.4, 325.0], [60.5, 325.0], [60.6, 325.0], [60.7, 325.0], [60.8, 325.0], [60.9, 325.0], [61.0, 325.0], [61.1, 325.0], [61.2, 325.0], [61.3, 325.0], [61.4, 325.0], [61.5, 325.0], [61.6, 325.0], [61.7, 325.0], [61.8, 325.0], [61.9, 325.0], [62.0, 325.0], [62.1, 325.0], [62.2, 325.0], [62.3, 325.0], [62.4, 325.0], [62.5, 325.0], [62.6, 325.0], [62.7, 325.0], [62.8, 325.0], [62.9, 325.0], [63.0, 325.0], [63.1, 325.0], [63.2, 325.0], [63.3, 325.0], [63.4, 325.0], [63.5, 325.0], [63.6, 325.0], [63.7, 325.0], [63.8, 325.0], [63.9, 325.0], [64.0, 326.0], [64.1, 326.0], [64.2, 326.0], [64.3, 326.0], [64.4, 326.0], [64.5, 326.0], [64.6, 326.0], [64.7, 326.0], [64.8, 326.0], [64.9, 326.0], [65.0, 326.0], [65.1, 326.0], [65.2, 326.0], [65.3, 326.0], [65.4, 326.0], [65.5, 326.0], [65.6, 326.0], [65.7, 326.0], [65.8, 326.0], [65.9, 326.0], [66.0, 326.0], [66.1, 326.0], [66.2, 326.0], [66.3, 326.0], [66.4, 326.0], [66.5, 326.0], [66.6, 326.0], [66.7, 326.0], [66.8, 326.0], [66.9, 326.0], [67.0, 326.0], [67.1, 326.0], [67.2, 326.0], [67.3, 326.0], [67.4, 326.0], [67.5, 326.0], [67.6, 326.0], [67.7, 326.0], [67.8, 326.0], [67.9, 326.0], [68.0, 326.0], [68.1, 326.0], [68.2, 327.0], [68.3, 327.0], [68.4, 327.0], [68.5, 327.0], [68.6, 327.0], [68.7, 327.0], [68.8, 327.0], [68.9, 327.0], [69.0, 327.0], [69.1, 327.0], [69.2, 327.0], [69.3, 327.0], [69.4, 327.0], [69.5, 327.0], [69.6, 327.0], [69.7, 327.0], [69.8, 327.0], [69.9, 327.0], [70.0, 327.0], [70.1, 327.0], [70.2, 327.0], [70.3, 327.0], [70.4, 327.0], [70.5, 327.0], [70.6, 327.0], [70.7, 327.0], [70.8, 327.0], [70.9, 327.0], [71.0, 327.0], [71.1, 327.0], [71.2, 327.0], [71.3, 327.0], [71.4, 327.0], [71.5, 328.0], [71.6, 328.0], [71.7, 328.0], [71.8, 328.0], [71.9, 328.0], [72.0, 328.0], [72.1, 328.0], [72.2, 328.0], [72.3, 328.0], [72.4, 328.0], [72.5, 328.0], [72.6, 328.0], [72.7, 328.0], [72.8, 328.0], [72.9, 328.0], [73.0, 328.0], [73.1, 328.0], [73.2, 328.0], [73.3, 329.0], [73.4, 329.0], [73.5, 329.0], [73.6, 329.0], [73.7, 329.0], [73.8, 329.0], [73.9, 329.0], [74.0, 329.0], [74.1, 329.0], [74.2, 329.0], [74.3, 329.0], [74.4, 329.0], [74.5, 330.0], [74.6, 330.0], [74.7, 330.0], [74.8, 330.0], [74.9, 330.0], [75.0, 330.0], [75.1, 330.0], [75.2, 330.0], [75.3, 330.0], [75.4, 330.0], [75.5, 330.0], [75.6, 330.0], [75.7, 330.0], [75.8, 330.0], [75.9, 330.0], [76.0, 330.0], [76.1, 331.0], [76.2, 331.0], [76.3, 331.0], [76.4, 331.0], [76.5, 331.0], [76.6, 331.0], [76.7, 331.0], [76.8, 331.0], [76.9, 331.0], [77.0, 332.0], [77.1, 332.0], [77.2, 332.0], [77.3, 332.0], [77.4, 333.0], [77.5, 333.0], [77.6, 333.0], [77.7, 333.0], [77.8, 334.0], [77.9, 334.0], [78.0, 335.0], [78.1, 335.0], [78.2, 335.0], [78.3, 336.0], [78.4, 336.0], [78.5, 336.0], [78.6, 337.0], [78.7, 339.0], [78.8, 339.0], [78.9, 340.0], [79.0, 340.0], [79.1, 341.0], [79.2, 341.0], [79.3, 342.0], [79.4, 342.0], [79.5, 343.0], [79.6, 343.0], [79.7, 348.0], [79.8, 350.0], [79.9, 353.0], [80.0, 360.0], [80.1, 369.0], [80.2, 370.0], [80.3, 380.0], [80.4, 384.0], [80.5, 386.0], [80.6, 389.0], [80.7, 392.0], [80.8, 404.0], [80.9, 410.0], [81.0, 411.0], [81.1, 413.0], [81.2, 413.0], [81.3, 414.0], [81.4, 414.0], [81.5, 417.0], [81.6, 418.0], [81.7, 419.0], [81.8, 423.0], [81.9, 426.0], [82.0, 426.0], [82.1, 427.0], [82.2, 431.0], [82.3, 433.0], [82.4, 435.0], [82.5, 441.0], [82.6, 443.0], [82.7, 453.0], [82.8, 455.0], [82.9, 460.0], [83.0, 462.0], [83.1, 478.0], [83.2, 487.0], [83.3, 492.0], [83.4, 501.0], [83.5, 504.0], [83.6, 508.0], [83.7, 516.0], [83.8, 517.0], [83.9, 522.0], [84.0, 522.0], [84.1, 523.0], [84.2, 532.0], [84.3, 532.0], [84.4, 536.0], [84.5, 537.0], [84.6, 539.0], [84.7, 541.0], [84.8, 544.0], [84.9, 545.0], [85.0, 546.0], [85.1, 550.0], [85.2, 552.0], [85.3, 555.0], [85.4, 559.0], [85.5, 561.0], [85.6, 561.0], [85.7, 565.0], [85.8, 570.0], [85.9, 580.0], [86.0, 583.0], [86.1, 587.0], [86.2, 593.0], [86.3, 599.0], [86.4, 603.0], [86.5, 604.0], [86.6, 614.0], [86.7, 615.0], [86.8, 618.0], [86.9, 619.0], [87.0, 620.0], [87.1, 621.0], [87.2, 621.0], [87.3, 622.0], [87.4, 626.0], [87.5, 627.0], [87.6, 677.0], [87.7, 679.0], [87.8, 694.0], [87.9, 710.0], [88.0, 722.0], [88.1, 1123.0], [88.2, 1547.0], [88.3, 4085.0], [88.4, 4499.0], [88.5, 5641.0], [88.6, 5725.0], [88.7, 5881.0], [88.8, 6389.0], [88.9, 6873.0], [89.0, 7660.0], [89.1, 7687.0], [89.2, 8251.0], [89.3, 8938.0], [89.4, 9586.0], [89.5, 9673.0], [89.6, 10172.0], [89.7, 10284.0], [89.8, 10748.0], [89.9, 11065.0], [90.0, 11745.0], [90.1, 12444.0], [90.2, 13186.0], [90.3, 13405.0], [90.4, 14301.0], [90.5, 15040.0], [90.6, 15512.0], [90.7, 15844.0], [90.8, 16368.0], [90.9, 16491.0], [91.0, 17509.0], [91.1, 17554.0], [91.2, 18286.0], [91.3, 18415.0], [91.4, 19610.0], [91.5, 19985.0], [91.6, 20385.0], [91.7, 20580.0], [91.8, 20767.0], [91.9, 20894.0], [92.0, 20995.0], [92.1, 21046.0], [92.2, 21105.0], [92.3, 21498.0], [92.4, 21575.0], [92.5, 21710.0], [92.6, 21862.0], [92.7, 21973.0], [92.8, 22135.0], [92.9, 22538.0], [93.0, 22538.0], [93.1, 22809.0], [93.2, 23286.0], [93.3, 23937.0], [93.4, 24294.0], [93.5, 26058.0], [93.6, 26099.0], [93.7, 26876.0], [93.8, 27014.0], [93.9, 27926.0], [94.0, 27949.0], [94.1, 28343.0], [94.2, 28394.0], [94.3, 28708.0], [94.4, 29218.0], [94.5, 29355.0], [94.6, 29782.0], [94.7, 30556.0], [94.8, 30607.0], [94.9, 31976.0], [95.0, 32251.0], [95.1, 32566.0], [95.2, 32680.0], [95.3, 33184.0], [95.4, 33673.0], [95.5, 34526.0], [95.6, 34854.0], [95.7, 35452.0], [95.8, 35473.0], [95.9, 37546.0], [96.0, 38426.0], [96.1, 39232.0], [96.2, 39350.0], [96.3, 39463.0], [96.4, 39541.0], [96.5, 39645.0], [96.6, 39697.0], [96.7, 41133.0], [96.8, 41341.0], [96.9, 43116.0], [97.0, 43444.0], [97.1, 44379.0], [97.2, 44559.0], [97.3, 45549.0], [97.4, 46684.0], [97.5, 48455.0], [97.6, 48492.0], [97.7, 50705.0], [97.8, 51926.0], [97.9, 52484.0], [98.0, 55847.0], [98.1, 55870.0], [98.2, 55983.0], [98.3, 56478.0], [98.4, 58099.0], [98.5, 59661.0], [98.6, 60363.0], [98.7, 60434.0], [98.8, 60443.0], [98.9, 60471.0], [99.0, 60529.0], [99.1, 60544.0], [99.2, 60552.0], [99.3, 60582.0], [99.4, 60585.0], [99.5, 60617.0], [99.6, 60641.0], [99.7, 60708.0], [99.8, 60724.0], [99.9, 61616.0], [100.0, 63819.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 104.0], [0.1, 104.0], [0.2, 104.0], [0.3, 105.0], [0.4, 105.0], [0.5, 105.0], [0.6, 105.0], [0.7, 105.0], [0.8, 105.0], [0.9, 105.0], [1.0, 105.0], [1.1, 105.0], [1.2, 105.0], [1.3, 105.0], [1.4, 105.0], [1.5, 105.0], [1.6, 105.0], [1.7, 105.0], [1.8, 105.0], [1.9, 105.0], [2.0, 105.0], [2.1, 105.0], [2.2, 105.0], [2.3, 105.0], [2.4, 105.0], [2.5, 105.0], [2.6, 105.0], [2.7, 105.0], [2.8, 106.0], [2.9, 106.0], [3.0, 106.0], [3.1, 106.0], [3.2, 106.0], [3.3, 106.0], [3.4, 106.0], [3.5, 106.0], [3.6, 106.0], [3.7, 106.0], [3.8, 106.0], [3.9, 106.0], [4.0, 106.0], [4.1, 106.0], [4.2, 106.0], [4.3, 106.0], [4.4, 106.0], [4.5, 106.0], [4.6, 106.0], [4.7, 106.0], [4.8, 106.0], [4.9, 106.0], [5.0, 106.0], [5.1, 106.0], [5.2, 106.0], [5.3, 106.0], [5.4, 106.0], [5.5, 106.0], [5.6, 106.0], [5.7, 106.0], [5.8, 106.0], [5.9, 106.0], [6.0, 106.0], [6.1, 106.0], [6.2, 106.0], [6.3, 106.0], [6.4, 106.0], [6.5, 106.0], [6.6, 106.0], [6.7, 106.0], [6.8, 106.0], [6.9, 106.0], [7.0, 106.0], [7.1, 106.0], [7.2, 106.0], [7.3, 106.0], [7.4, 106.0], [7.5, 106.0], [7.6, 106.0], [7.7, 106.0], [7.8, 106.0], [7.9, 106.0], [8.0, 106.0], [8.1, 106.0], [8.2, 106.0], [8.3, 106.0], [8.4, 106.0], [8.5, 106.0], [8.6, 106.0], [8.7, 106.0], [8.8, 106.0], [8.9, 106.0], [9.0, 106.0], [9.1, 106.0], [9.2, 106.0], [9.3, 106.0], [9.4, 106.0], [9.5, 106.0], [9.6, 106.0], [9.7, 106.0], [9.8, 106.0], [9.9, 106.0], [10.0, 106.0], [10.1, 106.0], [10.2, 106.0], [10.3, 106.0], [10.4, 106.0], [10.5, 106.0], [10.6, 106.0], [10.7, 106.0], [10.8, 106.0], [10.9, 107.0], [11.0, 107.0], [11.1, 107.0], [11.2, 107.0], [11.3, 107.0], [11.4, 107.0], [11.5, 107.0], [11.6, 107.0], [11.7, 107.0], [11.8, 107.0], [11.9, 107.0], [12.0, 107.0], [12.1, 107.0], [12.2, 107.0], [12.3, 107.0], [12.4, 107.0], [12.5, 107.0], [12.6, 107.0], [12.7, 107.0], [12.8, 107.0], [12.9, 107.0], [13.0, 107.0], [13.1, 107.0], [13.2, 107.0], [13.3, 107.0], [13.4, 107.0], [13.5, 107.0], [13.6, 107.0], [13.7, 107.0], [13.8, 107.0], [13.9, 107.0], [14.0, 107.0], [14.1, 107.0], [14.2, 107.0], [14.3, 107.0], [14.4, 107.0], [14.5, 107.0], [14.6, 107.0], [14.7, 107.0], [14.8, 107.0], [14.9, 107.0], [15.0, 107.0], [15.1, 107.0], [15.2, 107.0], [15.3, 107.0], [15.4, 107.0], [15.5, 107.0], [15.6, 107.0], [15.7, 107.0], [15.8, 107.0], [15.9, 107.0], [16.0, 107.0], [16.1, 107.0], [16.2, 107.0], [16.3, 107.0], [16.4, 107.0], [16.5, 107.0], [16.6, 107.0], [16.7, 107.0], [16.8, 107.0], [16.9, 107.0], [17.0, 107.0], [17.1, 107.0], [17.2, 107.0], [17.3, 107.0], [17.4, 107.0], [17.5, 107.0], [17.6, 107.0], [17.7, 107.0], [17.8, 107.0], [17.9, 107.0], [18.0, 107.0], [18.1, 107.0], [18.2, 107.0], [18.3, 107.0], [18.4, 107.0], [18.5, 107.0], [18.6, 107.0], [18.7, 107.0], [18.8, 107.0], [18.9, 107.0], [19.0, 107.0], [19.1, 107.0], [19.2, 107.0], [19.3, 107.0], [19.4, 107.0], [19.5, 107.0], [19.6, 107.0], [19.7, 107.0], [19.8, 107.0], [19.9, 107.0], [20.0, 107.0], [20.1, 107.0], [20.2, 107.0], [20.3, 107.0], [20.4, 107.0], [20.5, 107.0], [20.6, 107.0], [20.7, 107.0], [20.8, 107.0], [20.9, 107.0], [21.0, 107.0], [21.1, 107.0], [21.2, 107.0], [21.3, 107.0], [21.4, 107.0], [21.5, 107.0], [21.6, 107.0], [21.7, 107.0], [21.8, 107.0], [21.9, 107.0], [22.0, 107.0], [22.1, 107.0], [22.2, 107.0], [22.3, 107.0], [22.4, 107.0], [22.5, 107.0], [22.6, 107.0], [22.7, 107.0], [22.8, 107.0], [22.9, 107.0], [23.0, 107.0], [23.1, 107.0], [23.2, 107.0], [23.3, 107.0], [23.4, 107.0], [23.5, 107.0], [23.6, 107.0], [23.7, 107.0], [23.8, 107.0], [23.9, 107.0], [24.0, 107.0], [24.1, 107.0], [24.2, 107.0], [24.3, 107.0], [24.4, 107.0], [24.5, 107.0], [24.6, 108.0], [24.7, 108.0], [24.8, 108.0], [24.9, 108.0], [25.0, 108.0], [25.1, 108.0], [25.2, 108.0], [25.3, 108.0], [25.4, 108.0], [25.5, 108.0], [25.6, 108.0], [25.7, 108.0], [25.8, 108.0], [25.9, 108.0], [26.0, 108.0], [26.1, 108.0], [26.2, 108.0], [26.3, 108.0], [26.4, 108.0], [26.5, 108.0], [26.6, 108.0], [26.7, 108.0], [26.8, 108.0], [26.9, 108.0], [27.0, 108.0], [27.1, 108.0], [27.2, 108.0], [27.3, 108.0], [27.4, 108.0], [27.5, 108.0], [27.6, 108.0], [27.7, 108.0], [27.8, 108.0], [27.9, 108.0], [28.0, 108.0], [28.1, 108.0], [28.2, 108.0], [28.3, 108.0], [28.4, 108.0], [28.5, 108.0], [28.6, 108.0], [28.7, 108.0], [28.8, 108.0], [28.9, 108.0], [29.0, 108.0], [29.1, 108.0], [29.2, 108.0], [29.3, 108.0], [29.4, 108.0], [29.5, 108.0], [29.6, 108.0], [29.7, 108.0], [29.8, 108.0], [29.9, 108.0], [30.0, 108.0], [30.1, 108.0], [30.2, 108.0], [30.3, 108.0], [30.4, 108.0], [30.5, 108.0], [30.6, 108.0], [30.7, 108.0], [30.8, 108.0], [30.9, 108.0], [31.0, 108.0], [31.1, 108.0], [31.2, 108.0], [31.3, 108.0], [31.4, 108.0], [31.5, 108.0], [31.6, 108.0], [31.7, 108.0], [31.8, 108.0], [31.9, 108.0], [32.0, 108.0], [32.1, 108.0], [32.2, 108.0], [32.3, 108.0], [32.4, 108.0], [32.5, 108.0], [32.6, 108.0], [32.7, 108.0], [32.8, 108.0], [32.9, 108.0], [33.0, 108.0], [33.1, 108.0], [33.2, 108.0], [33.3, 108.0], [33.4, 108.0], [33.5, 108.0], [33.6, 108.0], [33.7, 108.0], [33.8, 108.0], [33.9, 108.0], [34.0, 108.0], [34.1, 108.0], [34.2, 108.0], [34.3, 108.0], [34.4, 108.0], [34.5, 108.0], [34.6, 108.0], [34.7, 108.0], [34.8, 108.0], [34.9, 108.0], [35.0, 108.0], [35.1, 108.0], [35.2, 108.0], [35.3, 108.0], [35.4, 108.0], [35.5, 108.0], [35.6, 108.0], [35.7, 108.0], [35.8, 108.0], [35.9, 108.0], [36.0, 108.0], [36.1, 108.0], [36.2, 108.0], [36.3, 108.0], [36.4, 108.0], [36.5, 108.0], [36.6, 108.0], [36.7, 108.0], [36.8, 108.0], [36.9, 108.0], [37.0, 108.0], [37.1, 108.0], [37.2, 108.0], [37.3, 108.0], [37.4, 108.0], [37.5, 108.0], [37.6, 108.0], [37.7, 108.0], [37.8, 108.0], [37.9, 108.0], [38.0, 108.0], [38.1, 108.0], [38.2, 108.0], [38.3, 108.0], [38.4, 108.0], [38.5, 108.0], [38.6, 108.0], [38.7, 108.0], [38.8, 108.0], [38.9, 108.0], [39.0, 108.0], [39.1, 108.0], [39.2, 108.0], [39.3, 108.0], [39.4, 108.0], [39.5, 108.0], [39.6, 108.0], [39.7, 108.0], [39.8, 108.0], [39.9, 108.0], [40.0, 108.0], [40.1, 108.0], [40.2, 108.0], [40.3, 108.0], [40.4, 109.0], [40.5, 109.0], [40.6, 109.0], [40.7, 109.0], [40.8, 109.0], [40.9, 109.0], [41.0, 109.0], [41.1, 109.0], [41.2, 109.0], [41.3, 109.0], [41.4, 109.0], [41.5, 109.0], [41.6, 109.0], [41.7, 109.0], [41.8, 109.0], [41.9, 109.0], [42.0, 109.0], [42.1, 109.0], [42.2, 109.0], [42.3, 109.0], [42.4, 109.0], [42.5, 109.0], [42.6, 109.0], [42.7, 109.0], [42.8, 109.0], [42.9, 109.0], [43.0, 109.0], [43.1, 109.0], [43.2, 109.0], [43.3, 109.0], [43.4, 109.0], [43.5, 109.0], [43.6, 109.0], [43.7, 109.0], [43.8, 109.0], [43.9, 109.0], [44.0, 109.0], [44.1, 109.0], [44.2, 109.0], [44.3, 109.0], [44.4, 109.0], [44.5, 109.0], [44.6, 109.0], [44.7, 109.0], [44.8, 109.0], [44.9, 109.0], [45.0, 109.0], [45.1, 109.0], [45.2, 109.0], [45.3, 109.0], [45.4, 109.0], [45.5, 109.0], [45.6, 109.0], [45.7, 109.0], [45.8, 109.0], [45.9, 109.0], [46.0, 109.0], [46.1, 109.0], [46.2, 109.0], [46.3, 109.0], [46.4, 109.0], [46.5, 109.0], [46.6, 109.0], [46.7, 109.0], [46.8, 109.0], [46.9, 109.0], [47.0, 109.0], [47.1, 109.0], [47.2, 109.0], [47.3, 109.0], [47.4, 109.0], [47.5, 109.0], [47.6, 109.0], [47.7, 109.0], [47.8, 109.0], [47.9, 109.0], [48.0, 109.0], [48.1, 109.0], [48.2, 109.0], [48.3, 109.0], [48.4, 109.0], [48.5, 109.0], [48.6, 109.0], [48.7, 109.0], [48.8, 109.0], [48.9, 109.0], [49.0, 109.0], [49.1, 109.0], [49.2, 109.0], [49.3, 109.0], [49.4, 109.0], [49.5, 109.0], [49.6, 109.0], [49.7, 109.0], [49.8, 109.0], [49.9, 109.0], [50.0, 109.0], [50.1, 109.0], [50.2, 109.0], [50.3, 109.0], [50.4, 109.0], [50.5, 109.0], [50.6, 109.0], [50.7, 109.0], [50.8, 109.0], [50.9, 109.0], [51.0, 109.0], [51.1, 109.0], [51.2, 109.0], [51.3, 109.0], [51.4, 109.0], [51.5, 109.0], [51.6, 109.0], [51.7, 109.0], [51.8, 109.0], [51.9, 109.0], [52.0, 109.0], [52.1, 109.0], [52.2, 109.0], [52.3, 109.0], [52.4, 109.0], [52.5, 109.0], [52.6, 109.0], [52.7, 109.0], [52.8, 109.0], [52.9, 109.0], [53.0, 109.0], [53.1, 109.0], [53.2, 109.0], [53.3, 110.0], [53.4, 110.0], [53.5, 110.0], [53.6, 110.0], [53.7, 110.0], [53.8, 110.0], [53.9, 110.0], [54.0, 110.0], [54.1, 110.0], [54.2, 110.0], [54.3, 110.0], [54.4, 110.0], [54.5, 110.0], [54.6, 110.0], [54.7, 110.0], [54.8, 110.0], [54.9, 110.0], [55.0, 110.0], [55.1, 110.0], [55.2, 110.0], [55.3, 110.0], [55.4, 110.0], [55.5, 110.0], [55.6, 110.0], [55.7, 110.0], [55.8, 110.0], [55.9, 110.0], [56.0, 110.0], [56.1, 110.0], [56.2, 110.0], [56.3, 110.0], [56.4, 110.0], [56.5, 110.0], [56.6, 110.0], [56.7, 110.0], [56.8, 110.0], [56.9, 110.0], [57.0, 110.0], [57.1, 110.0], [57.2, 110.0], [57.3, 110.0], [57.4, 110.0], [57.5, 110.0], [57.6, 110.0], [57.7, 110.0], [57.8, 110.0], [57.9, 110.0], [58.0, 110.0], [58.1, 110.0], [58.2, 110.0], [58.3, 110.0], [58.4, 110.0], [58.5, 110.0], [58.6, 110.0], [58.7, 110.0], [58.8, 110.0], [58.9, 110.0], [59.0, 110.0], [59.1, 110.0], [59.2, 110.0], [59.3, 110.0], [59.4, 110.0], [59.5, 110.0], [59.6, 110.0], [59.7, 110.0], [59.8, 110.0], [59.9, 110.0], [60.0, 110.0], [60.1, 110.0], [60.2, 110.0], [60.3, 110.0], [60.4, 110.0], [60.5, 110.0], [60.6, 110.0], [60.7, 110.0], [60.8, 110.0], [60.9, 110.0], [61.0, 110.0], [61.1, 110.0], [61.2, 110.0], [61.3, 110.0], [61.4, 110.0], [61.5, 110.0], [61.6, 110.0], [61.7, 110.0], [61.8, 110.0], [61.9, 110.0], [62.0, 110.0], [62.1, 110.0], [62.2, 110.0], [62.3, 110.0], [62.4, 110.0], [62.5, 110.0], [62.6, 110.0], [62.7, 110.0], [62.8, 110.0], [62.9, 110.0], [63.0, 110.0], [63.1, 110.0], [63.2, 110.0], [63.3, 110.0], [63.4, 110.0], [63.5, 110.0], [63.6, 110.0], [63.7, 110.0], [63.8, 111.0], [63.9, 111.0], [64.0, 111.0], [64.1, 111.0], [64.2, 111.0], [64.3, 111.0], [64.4, 111.0], [64.5, 111.0], [64.6, 111.0], [64.7, 111.0], [64.8, 111.0], [64.9, 111.0], [65.0, 111.0], [65.1, 111.0], [65.2, 111.0], [65.3, 111.0], [65.4, 111.0], [65.5, 111.0], [65.6, 111.0], [65.7, 111.0], [65.8, 111.0], [65.9, 111.0], [66.0, 111.0], [66.1, 111.0], [66.2, 111.0], [66.3, 111.0], [66.4, 111.0], [66.5, 111.0], [66.6, 111.0], [66.7, 111.0], [66.8, 111.0], [66.9, 111.0], [67.0, 111.0], [67.1, 111.0], [67.2, 111.0], [67.3, 111.0], [67.4, 111.0], [67.5, 111.0], [67.6, 111.0], [67.7, 111.0], [67.8, 111.0], [67.9, 111.0], [68.0, 111.0], [68.1, 111.0], [68.2, 111.0], [68.3, 111.0], [68.4, 111.0], [68.5, 111.0], [68.6, 111.0], [68.7, 111.0], [68.8, 111.0], [68.9, 111.0], [69.0, 111.0], [69.1, 111.0], [69.2, 111.0], [69.3, 111.0], [69.4, 112.0], [69.5, 112.0], [69.6, 112.0], [69.7, 112.0], [69.8, 112.0], [69.9, 112.0], [70.0, 112.0], [70.1, 112.0], [70.2, 112.0], [70.3, 112.0], [70.4, 112.0], [70.5, 112.0], [70.6, 112.0], [70.7, 112.0], [70.8, 112.0], [70.9, 112.0], [71.0, 112.0], [71.1, 112.0], [71.2, 112.0], [71.3, 112.0], [71.4, 112.0], [71.5, 112.0], [71.6, 112.0], [71.7, 112.0], [71.8, 112.0], [71.9, 112.0], [72.0, 112.0], [72.1, 112.0], [72.2, 112.0], [72.3, 112.0], [72.4, 112.0], [72.5, 112.0], [72.6, 112.0], [72.7, 112.0], [72.8, 112.0], [72.9, 112.0], [73.0, 112.0], [73.1, 112.0], [73.2, 112.0], [73.3, 112.0], [73.4, 112.0], [73.5, 112.0], [73.6, 112.0], [73.7, 112.0], [73.8, 112.0], [73.9, 112.0], [74.0, 112.0], [74.1, 112.0], [74.2, 113.0], [74.3, 113.0], [74.4, 113.0], [74.5, 113.0], [74.6, 113.0], [74.7, 113.0], [74.8, 113.0], [74.9, 113.0], [75.0, 113.0], [75.1, 113.0], [75.2, 113.0], [75.3, 113.0], [75.4, 113.0], [75.5, 113.0], [75.6, 113.0], [75.7, 113.0], [75.8, 113.0], [75.9, 113.0], [76.0, 113.0], [76.1, 113.0], [76.2, 113.0], [76.3, 113.0], [76.4, 114.0], [76.5, 114.0], [76.6, 114.0], [76.7, 114.0], [76.8, 114.0], [76.9, 114.0], [77.0, 114.0], [77.1, 114.0], [77.2, 114.0], [77.3, 114.0], [77.4, 114.0], [77.5, 114.0], [77.6, 114.0], [77.7, 114.0], [77.8, 114.0], [77.9, 114.0], [78.0, 114.0], [78.1, 114.0], [78.2, 114.0], [78.3, 115.0], [78.4, 115.0], [78.5, 115.0], [78.6, 115.0], [78.7, 115.0], [78.8, 115.0], [78.9, 115.0], [79.0, 115.0], [79.1, 115.0], [79.2, 115.0], [79.3, 115.0], [79.4, 116.0], [79.5, 116.0], [79.6, 116.0], [79.7, 116.0], [79.8, 116.0], [79.9, 116.0], [80.0, 116.0], [80.1, 116.0], [80.2, 116.0], [80.3, 116.0], [80.4, 117.0], [80.5, 117.0], [80.6, 117.0], [80.7, 117.0], [80.8, 118.0], [80.9, 118.0], [81.0, 118.0], [81.1, 118.0], [81.2, 119.0], [81.3, 119.0], [81.4, 120.0], [81.5, 121.0], [81.6, 121.0], [81.7, 121.0], [81.8, 123.0], [81.9, 124.0], [82.0, 125.0], [82.1, 127.0], [82.2, 127.0], [82.3, 128.0], [82.4, 129.0], [82.5, 129.0], [82.6, 130.0], [82.7, 130.0], [82.8, 132.0], [82.9, 132.0], [83.0, 136.0], [83.1, 137.0], [83.2, 138.0], [83.3, 139.0], [83.4, 139.0], [83.5, 143.0], [83.6, 144.0], [83.7, 146.0], [83.8, 146.0], [83.9, 147.0], [84.0, 148.0], [84.1, 152.0], [84.2, 152.0], [84.3, 155.0], [84.4, 155.0], [84.5, 157.0], [84.6, 162.0], [84.7, 165.0], [84.8, 165.0], [84.9, 168.0], [85.0, 169.0], [85.1, 170.0], [85.2, 171.0], [85.3, 172.0], [85.4, 173.0], [85.5, 175.0], [85.6, 175.0], [85.7, 179.0], [85.8, 181.0], [85.9, 181.0], [86.0, 182.0], [86.1, 184.0], [86.2, 185.0], [86.3, 188.0], [86.4, 190.0], [86.5, 195.0], [86.6, 195.0], [86.7, 196.0], [86.8, 197.0], [86.9, 198.0], [87.0, 199.0], [87.1, 204.0], [87.2, 204.0], [87.3, 208.0], [87.4, 210.0], [87.5, 214.0], [87.6, 215.0], [87.7, 222.0], [87.8, 242.0], [87.9, 308.0], [88.0, 803.0], [88.1, 1227.0], [88.2, 3775.0], [88.3, 4103.0], [88.4, 5133.0], [88.5, 5232.0], [88.6, 5513.0], [88.7, 5601.0], [88.8, 6637.0], [88.9, 6729.0], [89.0, 7340.0], [89.1, 7480.0], [89.2, 7841.0], [89.3, 9151.0], [89.4, 9749.0], [89.5, 9849.0], [89.6, 10071.0], [89.7, 10340.0], [89.8, 11238.0], [89.9, 11433.0], [90.0, 12121.0], [90.1, 12137.0], [90.2, 13134.0], [90.3, 13184.0], [90.4, 15091.0], [90.5, 15297.0], [90.6, 15794.0], [90.7, 15958.0], [90.8, 16813.0], [90.9, 17236.0], [91.0, 17686.0], [91.1, 17738.0], [91.2, 18426.0], [91.3, 19307.0], [91.4, 19952.0], [91.5, 20082.0], [91.6, 20276.0], [91.7, 20384.0], [91.8, 20485.0], [91.9, 20669.0], [92.0, 20691.0], [92.1, 20741.0], [92.2, 21092.0], [92.3, 21264.0], [92.4, 21386.0], [92.5, 21455.0], [92.6, 21570.0], [92.7, 21782.0], [92.8, 22133.0], [92.9, 22244.0], [93.0, 22289.0], [93.1, 22879.0], [93.2, 22954.0], [93.3, 23962.0], [93.4, 24884.0], [93.5, 25824.0], [93.6, 26316.0], [93.7, 26606.0], [93.8, 27152.0], [93.9, 27604.0], [94.0, 27781.0], [94.1, 28130.0], [94.2, 28208.0], [94.3, 28912.0], [94.4, 29051.0], [94.5, 29477.0], [94.6, 29721.0], [94.7, 30251.0], [94.8, 30405.0], [94.9, 31845.0], [95.0, 32018.0], [95.1, 32272.0], [95.2, 32511.0], [95.3, 33369.0], [95.4, 33515.0], [95.5, 34578.0], [95.6, 34927.0], [95.7, 35046.0], [95.8, 35968.0], [95.9, 37226.0], [96.0, 38307.0], [96.1, 38825.0], [96.2, 39053.0], [96.3, 39080.0], [96.4, 39157.0], [96.5, 39373.0], [96.6, 40485.0], [96.7, 40772.0], [96.8, 41211.0], [96.9, 42710.0], [97.0, 43274.0], [97.1, 43871.0], [97.2, 44648.0], [97.3, 45040.0], [97.4, 48048.0], [97.5, 48104.0], [97.6, 48186.0], [97.7, 50296.0], [97.8, 51712.0], [97.9, 52148.0], [98.0, 55637.0], [98.1, 55648.0], [98.2, 56051.0], [98.3, 56152.0], [98.4, 59268.0], [98.5, 59445.0], [98.6, 60120.0], [98.7, 60149.0], [98.8, 60152.0], [98.9, 60178.0], [99.0, 60190.0], [99.1, 60211.0], [99.2, 60229.0], [99.3, 60233.0], [99.4, 60258.0], [99.5, 60301.0], [99.6, 60335.0], [99.7, 60390.0], [99.8, 61265.0], [99.9, 61341.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 208.0], [0.1, 208.0], [0.2, 209.0], [0.3, 209.0], [0.4, 209.0], [0.5, 209.0], [0.6, 209.0], [0.7, 209.0], [0.8, 209.0], [0.9, 209.0], [1.0, 209.0], [1.1, 209.0], [1.2, 209.0], [1.3, 209.0], [1.4, 209.0], [1.5, 209.0], [1.6, 209.0], [1.7, 209.0], [1.8, 209.0], [1.9, 209.0], [2.0, 209.0], [2.1, 209.0], [2.2, 209.0], [2.3, 209.0], [2.4, 209.0], [2.5, 209.0], [2.6, 209.0], [2.7, 210.0], [2.8, 210.0], [2.9, 210.0], [3.0, 210.0], [3.1, 210.0], [3.2, 210.0], [3.3, 210.0], [3.4, 210.0], [3.5, 210.0], [3.6, 210.0], [3.7, 210.0], [3.8, 210.0], [3.9, 210.0], [4.0, 210.0], [4.1, 210.0], [4.2, 210.0], [4.3, 210.0], [4.4, 210.0], [4.5, 210.0], [4.6, 210.0], [4.7, 210.0], [4.8, 210.0], [4.9, 210.0], [5.0, 210.0], [5.1, 210.0], [5.2, 210.0], [5.3, 210.0], [5.4, 210.0], [5.5, 210.0], [5.6, 210.0], [5.7, 210.0], [5.8, 210.0], [5.9, 210.0], [6.0, 210.0], [6.1, 210.0], [6.2, 211.0], [6.3, 211.0], [6.4, 211.0], [6.5, 211.0], [6.6, 211.0], [6.7, 211.0], [6.8, 211.0], [6.9, 211.0], [7.0, 211.0], [7.1, 211.0], [7.2, 211.0], [7.3, 211.0], [7.4, 211.0], [7.5, 211.0], [7.6, 211.0], [7.7, 211.0], [7.8, 211.0], [7.9, 211.0], [8.0, 211.0], [8.1, 211.0], [8.2, 211.0], [8.3, 211.0], [8.4, 211.0], [8.5, 211.0], [8.6, 211.0], [8.7, 211.0], [8.8, 211.0], [8.9, 211.0], [9.0, 211.0], [9.1, 211.0], [9.2, 211.0], [9.3, 211.0], [9.4, 211.0], [9.5, 211.0], [9.6, 211.0], [9.7, 211.0], [9.8, 211.0], [9.9, 211.0], [10.0, 211.0], [10.1, 211.0], [10.2, 211.0], [10.3, 211.0], [10.4, 211.0], [10.5, 211.0], [10.6, 211.0], [10.7, 211.0], [10.8, 211.0], [10.9, 211.0], [11.0, 211.0], [11.1, 211.0], [11.2, 211.0], [11.3, 211.0], [11.4, 211.0], [11.5, 211.0], [11.6, 211.0], [11.7, 211.0], [11.8, 211.0], [11.9, 211.0], [12.0, 211.0], [12.1, 211.0], [12.2, 211.0], [12.3, 211.0], [12.4, 211.0], [12.5, 211.0], [12.6, 211.0], [12.7, 211.0], [12.8, 211.0], [12.9, 211.0], [13.0, 211.0], [13.1, 211.0], [13.2, 211.0], [13.3, 211.0], [13.4, 211.0], [13.5, 211.0], [13.6, 211.0], [13.7, 211.0], [13.8, 211.0], [13.9, 211.0], [14.0, 211.0], [14.1, 211.0], [14.2, 211.0], [14.3, 211.0], [14.4, 211.0], [14.5, 211.0], [14.6, 211.0], [14.7, 211.0], [14.8, 211.0], [14.9, 211.0], [15.0, 211.0], [15.1, 211.0], [15.2, 211.0], [15.3, 211.0], [15.4, 211.0], [15.5, 211.0], [15.6, 211.0], [15.7, 211.0], [15.8, 211.0], [15.9, 211.0], [16.0, 211.0], [16.1, 211.0], [16.2, 211.0], [16.3, 211.0], [16.4, 211.0], [16.5, 211.0], [16.6, 211.0], [16.7, 211.0], [16.8, 211.0], [16.9, 211.0], [17.0, 211.0], [17.1, 211.0], [17.2, 211.0], [17.3, 211.0], [17.4, 211.0], [17.5, 211.0], [17.6, 211.0], [17.7, 211.0], [17.8, 211.0], [17.9, 211.0], [18.0, 211.0], [18.1, 211.0], [18.2, 211.0], [18.3, 211.0], [18.4, 211.0], [18.5, 212.0], [18.6, 212.0], [18.7, 212.0], [18.8, 212.0], [18.9, 212.0], [19.0, 212.0], [19.1, 212.0], [19.2, 212.0], [19.3, 212.0], [19.4, 212.0], [19.5, 212.0], [19.6, 212.0], [19.7, 212.0], [19.8, 212.0], [19.9, 212.0], [20.0, 212.0], [20.1, 212.0], [20.2, 212.0], [20.3, 212.0], [20.4, 212.0], [20.5, 212.0], [20.6, 212.0], [20.7, 212.0], [20.8, 212.0], [20.9, 212.0], [21.0, 212.0], [21.1, 212.0], [21.2, 212.0], [21.3, 212.0], [21.4, 212.0], [21.5, 212.0], [21.6, 212.0], [21.7, 212.0], [21.8, 212.0], [21.9, 212.0], [22.0, 212.0], [22.1, 212.0], [22.2, 212.0], [22.3, 212.0], [22.4, 212.0], [22.5, 212.0], [22.6, 212.0], [22.7, 212.0], [22.8, 212.0], [22.9, 212.0], [23.0, 212.0], [23.1, 212.0], [23.2, 212.0], [23.3, 212.0], [23.4, 212.0], [23.5, 212.0], [23.6, 212.0], [23.7, 212.0], [23.8, 212.0], [23.9, 212.0], [24.0, 212.0], [24.1, 212.0], [24.2, 212.0], [24.3, 212.0], [24.4, 212.0], [24.5, 212.0], [24.6, 212.0], [24.7, 212.0], [24.8, 212.0], [24.9, 212.0], [25.0, 212.0], [25.1, 212.0], [25.2, 212.0], [25.3, 212.0], [25.4, 212.0], [25.5, 212.0], [25.6, 212.0], [25.7, 212.0], [25.8, 212.0], [25.9, 212.0], [26.0, 212.0], [26.1, 212.0], [26.2, 212.0], [26.3, 212.0], [26.4, 212.0], [26.5, 212.0], [26.6, 212.0], [26.7, 212.0], [26.8, 212.0], [26.9, 212.0], [27.0, 212.0], [27.1, 212.0], [27.2, 212.0], [27.3, 212.0], [27.4, 212.0], [27.5, 212.0], [27.6, 212.0], [27.7, 212.0], [27.8, 212.0], [27.9, 212.0], [28.0, 212.0], [28.1, 212.0], [28.2, 212.0], [28.3, 212.0], [28.4, 212.0], [28.5, 212.0], [28.6, 212.0], [28.7, 212.0], [28.8, 212.0], [28.9, 212.0], [29.0, 212.0], [29.1, 212.0], [29.2, 212.0], [29.3, 212.0], [29.4, 212.0], [29.5, 212.0], [29.6, 212.0], [29.7, 212.0], [29.8, 212.0], [29.9, 212.0], [30.0, 212.0], [30.1, 212.0], [30.2, 212.0], [30.3, 212.0], [30.4, 212.0], [30.5, 212.0], [30.6, 212.0], [30.7, 212.0], [30.8, 212.0], [30.9, 212.0], [31.0, 212.0], [31.1, 212.0], [31.2, 212.0], [31.3, 212.0], [31.4, 212.0], [31.5, 212.0], [31.6, 212.0], [31.7, 212.0], [31.8, 212.0], [31.9, 213.0], [32.0, 213.0], [32.1, 213.0], [32.2, 213.0], [32.3, 213.0], [32.4, 213.0], [32.5, 213.0], [32.6, 213.0], [32.7, 213.0], [32.8, 213.0], [32.9, 213.0], [33.0, 213.0], [33.1, 213.0], [33.2, 213.0], [33.3, 213.0], [33.4, 213.0], [33.5, 213.0], [33.6, 213.0], [33.7, 213.0], [33.8, 213.0], [33.9, 213.0], [34.0, 213.0], [34.1, 213.0], [34.2, 213.0], [34.3, 213.0], [34.4, 213.0], [34.5, 213.0], [34.6, 213.0], [34.7, 213.0], [34.8, 213.0], [34.9, 213.0], [35.0, 213.0], [35.1, 213.0], [35.2, 213.0], [35.3, 213.0], [35.4, 213.0], [35.5, 213.0], [35.6, 213.0], [35.7, 213.0], [35.8, 213.0], [35.9, 213.0], [36.0, 213.0], [36.1, 213.0], [36.2, 213.0], [36.3, 213.0], [36.4, 213.0], [36.5, 213.0], [36.6, 213.0], [36.7, 213.0], [36.8, 213.0], [36.9, 213.0], [37.0, 213.0], [37.1, 213.0], [37.2, 213.0], [37.3, 213.0], [37.4, 213.0], [37.5, 213.0], [37.6, 213.0], [37.7, 213.0], [37.8, 213.0], [37.9, 213.0], [38.0, 213.0], [38.1, 213.0], [38.2, 213.0], [38.3, 213.0], [38.4, 213.0], [38.5, 213.0], [38.6, 213.0], [38.7, 213.0], [38.8, 213.0], [38.9, 213.0], [39.0, 213.0], [39.1, 213.0], [39.2, 213.0], [39.3, 213.0], [39.4, 213.0], [39.5, 213.0], [39.6, 213.0], [39.7, 213.0], [39.8, 213.0], [39.9, 213.0], [40.0, 213.0], [40.1, 213.0], [40.2, 213.0], [40.3, 213.0], [40.4, 213.0], [40.5, 213.0], [40.6, 213.0], [40.7, 213.0], [40.8, 213.0], [40.9, 213.0], [41.0, 213.0], [41.1, 213.0], [41.2, 213.0], [41.3, 213.0], [41.4, 213.0], [41.5, 213.0], [41.6, 213.0], [41.7, 213.0], [41.8, 213.0], [41.9, 213.0], [42.0, 213.0], [42.1, 213.0], [42.2, 213.0], [42.3, 213.0], [42.4, 213.0], [42.5, 213.0], [42.6, 213.0], [42.7, 213.0], [42.8, 213.0], [42.9, 213.0], [43.0, 213.0], [43.1, 213.0], [43.2, 213.0], [43.3, 213.0], [43.4, 213.0], [43.5, 213.0], [43.6, 213.0], [43.7, 213.0], [43.8, 213.0], [43.9, 213.0], [44.0, 213.0], [44.1, 213.0], [44.2, 213.0], [44.3, 213.0], [44.4, 213.0], [44.5, 213.0], [44.6, 213.0], [44.7, 213.0], [44.8, 214.0], [44.9, 214.0], [45.0, 214.0], [45.1, 214.0], [45.2, 214.0], [45.3, 214.0], [45.4, 214.0], [45.5, 214.0], [45.6, 214.0], [45.7, 214.0], [45.8, 214.0], [45.9, 214.0], [46.0, 214.0], [46.1, 214.0], [46.2, 214.0], [46.3, 214.0], [46.4, 214.0], [46.5, 214.0], [46.6, 214.0], [46.7, 214.0], [46.8, 214.0], [46.9, 214.0], [47.0, 214.0], [47.1, 214.0], [47.2, 214.0], [47.3, 214.0], [47.4, 214.0], [47.5, 214.0], [47.6, 214.0], [47.7, 214.0], [47.8, 214.0], [47.9, 214.0], [48.0, 214.0], [48.1, 214.0], [48.2, 214.0], [48.3, 214.0], [48.4, 214.0], [48.5, 214.0], [48.6, 214.0], [48.7, 214.0], [48.8, 214.0], [48.9, 214.0], [49.0, 214.0], [49.1, 214.0], [49.2, 214.0], [49.3, 214.0], [49.4, 214.0], [49.5, 214.0], [49.6, 214.0], [49.7, 214.0], [49.8, 214.0], [49.9, 214.0], [50.0, 214.0], [50.1, 214.0], [50.2, 214.0], [50.3, 214.0], [50.4, 214.0], [50.5, 214.0], [50.6, 214.0], [50.7, 214.0], [50.8, 214.0], [50.9, 214.0], [51.0, 214.0], [51.1, 214.0], [51.2, 214.0], [51.3, 214.0], [51.4, 214.0], [51.5, 214.0], [51.6, 214.0], [51.7, 214.0], [51.8, 214.0], [51.9, 214.0], [52.0, 214.0], [52.1, 214.0], [52.2, 214.0], [52.3, 214.0], [52.4, 214.0], [52.5, 214.0], [52.6, 214.0], [52.7, 214.0], [52.8, 214.0], [52.9, 214.0], [53.0, 214.0], [53.1, 214.0], [53.2, 214.0], [53.3, 214.0], [53.4, 214.0], [53.5, 214.0], [53.6, 214.0], [53.7, 214.0], [53.8, 214.0], [53.9, 214.0], [54.0, 214.0], [54.1, 214.0], [54.2, 214.0], [54.3, 214.0], [54.4, 214.0], [54.5, 214.0], [54.6, 214.0], [54.7, 214.0], [54.8, 214.0], [54.9, 214.0], [55.0, 214.0], [55.1, 214.0], [55.2, 214.0], [55.3, 214.0], [55.4, 214.0], [55.5, 214.0], [55.6, 214.0], [55.7, 214.0], [55.8, 214.0], [55.9, 214.0], [56.0, 214.0], [56.1, 214.0], [56.2, 214.0], [56.3, 214.0], [56.4, 214.0], [56.5, 214.0], [56.6, 215.0], [56.7, 215.0], [56.8, 215.0], [56.9, 215.0], [57.0, 215.0], [57.1, 215.0], [57.2, 215.0], [57.3, 215.0], [57.4, 215.0], [57.5, 215.0], [57.6, 215.0], [57.7, 215.0], [57.8, 215.0], [57.9, 215.0], [58.0, 215.0], [58.1, 215.0], [58.2, 215.0], [58.3, 215.0], [58.4, 215.0], [58.5, 215.0], [58.6, 215.0], [58.7, 215.0], [58.8, 215.0], [58.9, 215.0], [59.0, 215.0], [59.1, 215.0], [59.2, 215.0], [59.3, 215.0], [59.4, 215.0], [59.5, 215.0], [59.6, 215.0], [59.7, 215.0], [59.8, 215.0], [59.9, 215.0], [60.0, 215.0], [60.1, 215.0], [60.2, 215.0], [60.3, 215.0], [60.4, 215.0], [60.5, 215.0], [60.6, 215.0], [60.7, 215.0], [60.8, 215.0], [60.9, 215.0], [61.0, 215.0], [61.1, 215.0], [61.2, 215.0], [61.3, 215.0], [61.4, 215.0], [61.5, 215.0], [61.6, 215.0], [61.7, 215.0], [61.8, 215.0], [61.9, 215.0], [62.0, 215.0], [62.1, 215.0], [62.2, 215.0], [62.3, 215.0], [62.4, 215.0], [62.5, 215.0], [62.6, 215.0], [62.7, 215.0], [62.8, 215.0], [62.9, 215.0], [63.0, 215.0], [63.1, 215.0], [63.2, 215.0], [63.3, 215.0], [63.4, 215.0], [63.5, 215.0], [63.6, 215.0], [63.7, 215.0], [63.8, 215.0], [63.9, 215.0], [64.0, 215.0], [64.1, 215.0], [64.2, 215.0], [64.3, 215.0], [64.4, 215.0], [64.5, 215.0], [64.6, 215.0], [64.7, 215.0], [64.8, 215.0], [64.9, 215.0], [65.0, 215.0], [65.1, 215.0], [65.2, 215.0], [65.3, 215.0], [65.4, 215.0], [65.5, 215.0], [65.6, 215.0], [65.7, 215.0], [65.8, 215.0], [65.9, 215.0], [66.0, 215.0], [66.1, 215.0], [66.2, 215.0], [66.3, 215.0], [66.4, 216.0], [66.5, 216.0], [66.6, 216.0], [66.7, 216.0], [66.8, 216.0], [66.9, 216.0], [67.0, 216.0], [67.1, 216.0], [67.2, 216.0], [67.3, 216.0], [67.4, 216.0], [67.5, 216.0], [67.6, 216.0], [67.7, 216.0], [67.8, 216.0], [67.9, 216.0], [68.0, 216.0], [68.1, 216.0], [68.2, 216.0], [68.3, 216.0], [68.4, 216.0], [68.5, 216.0], [68.6, 216.0], [68.7, 216.0], [68.8, 216.0], [68.9, 216.0], [69.0, 216.0], [69.1, 216.0], [69.2, 216.0], [69.3, 216.0], [69.4, 216.0], [69.5, 216.0], [69.6, 216.0], [69.7, 216.0], [69.8, 216.0], [69.9, 216.0], [70.0, 216.0], [70.1, 216.0], [70.2, 216.0], [70.3, 216.0], [70.4, 216.0], [70.5, 216.0], [70.6, 216.0], [70.7, 216.0], [70.8, 216.0], [70.9, 216.0], [71.0, 216.0], [71.1, 216.0], [71.2, 217.0], [71.3, 217.0], [71.4, 217.0], [71.5, 217.0], [71.6, 217.0], [71.7, 217.0], [71.8, 217.0], [71.9, 217.0], [72.0, 217.0], [72.1, 217.0], [72.2, 217.0], [72.3, 217.0], [72.4, 217.0], [72.5, 217.0], [72.6, 217.0], [72.7, 217.0], [72.8, 217.0], [72.9, 217.0], [73.0, 217.0], [73.1, 217.0], [73.2, 217.0], [73.3, 217.0], [73.4, 217.0], [73.5, 217.0], [73.6, 217.0], [73.7, 217.0], [73.8, 217.0], [73.9, 217.0], [74.0, 217.0], [74.1, 217.0], [74.2, 217.0], [74.3, 217.0], [74.4, 217.0], [74.5, 217.0], [74.6, 218.0], [74.7, 218.0], [74.8, 218.0], [74.9, 218.0], [75.0, 218.0], [75.1, 218.0], [75.2, 218.0], [75.3, 218.0], [75.4, 218.0], [75.5, 218.0], [75.6, 218.0], [75.7, 218.0], [75.8, 218.0], [75.9, 218.0], [76.0, 218.0], [76.1, 218.0], [76.2, 218.0], [76.3, 218.0], [76.4, 218.0], [76.5, 218.0], [76.6, 219.0], [76.7, 219.0], [76.8, 219.0], [76.9, 219.0], [77.0, 219.0], [77.1, 219.0], [77.2, 219.0], [77.3, 219.0], [77.4, 219.0], [77.5, 219.0], [77.6, 219.0], [77.7, 219.0], [77.8, 219.0], [77.9, 219.0], [78.0, 219.0], [78.1, 220.0], [78.2, 220.0], [78.3, 220.0], [78.4, 220.0], [78.5, 220.0], [78.6, 220.0], [78.7, 220.0], [78.8, 220.0], [78.9, 220.0], [79.0, 221.0], [79.1, 221.0], [79.2, 221.0], [79.3, 221.0], [79.4, 221.0], [79.5, 222.0], [79.6, 222.0], [79.7, 222.0], [79.8, 222.0], [79.9, 222.0], [80.0, 222.0], [80.1, 222.0], [80.2, 222.0], [80.3, 222.0], [80.4, 222.0], [80.5, 223.0], [80.6, 224.0], [80.7, 225.0], [80.8, 225.0], [80.9, 226.0], [81.0, 226.0], [81.1, 227.0], [81.2, 229.0], [81.3, 232.0], [81.4, 233.0], [81.5, 236.0], [81.6, 236.0], [81.7, 237.0], [81.8, 237.0], [81.9, 238.0], [82.0, 239.0], [82.1, 243.0], [82.2, 246.0], [82.3, 250.0], [82.4, 250.0], [82.5, 252.0], [82.6, 253.0], [82.7, 258.0], [82.8, 260.0], [82.9, 262.0], [83.0, 268.0], [83.1, 270.0], [83.2, 270.0], [83.3, 272.0], [83.4, 273.0], [83.5, 274.0], [83.6, 276.0], [83.7, 281.0], [83.8, 284.0], [83.9, 285.0], [84.0, 296.0], [84.1, 303.0], [84.2, 303.0], [84.3, 304.0], [84.4, 304.0], [84.5, 304.0], [84.6, 304.0], [84.7, 304.0], [84.8, 304.0], [84.9, 305.0], [85.0, 305.0], [85.1, 305.0], [85.2, 305.0], [85.3, 305.0], [85.4, 306.0], [85.5, 306.0], [85.6, 306.0], [85.7, 306.0], [85.8, 306.0], [85.9, 306.0], [86.0, 306.0], [86.1, 306.0], [86.2, 306.0], [86.3, 306.0], [86.4, 307.0], [86.5, 307.0], [86.6, 307.0], [86.7, 307.0], [86.8, 309.0], [86.9, 310.0], [87.0, 311.0], [87.1, 311.0], [87.2, 312.0], [87.3, 312.0], [87.4, 314.0], [87.5, 314.0], [87.6, 318.0], [87.7, 320.0], [87.8, 320.0], [87.9, 320.0], [88.0, 322.0], [88.1, 326.0], [88.2, 331.0], [88.3, 332.0], [88.4, 336.0], [88.5, 337.0], [88.6, 339.0], [88.7, 340.0], [88.8, 340.0], [88.9, 344.0], [89.0, 344.0], [89.1, 350.0], [89.2, 351.0], [89.3, 353.0], [89.4, 358.0], [89.5, 361.0], [89.6, 363.0], [89.7, 364.0], [89.8, 367.0], [89.9, 368.0], [90.0, 371.0], [90.1, 383.0], [90.2, 383.0], [90.3, 385.0], [90.4, 385.0], [90.5, 391.0], [90.6, 391.0], [90.7, 396.0], [90.8, 401.0], [90.9, 402.0], [91.0, 403.0], [91.1, 404.0], [91.2, 404.0], [91.3, 404.0], [91.4, 405.0], [91.5, 405.0], [91.6, 405.0], [91.7, 406.0], [91.8, 406.0], [91.9, 406.0], [92.0, 406.0], [92.1, 406.0], [92.2, 406.0], [92.3, 406.0], [92.4, 406.0], [92.5, 406.0], [92.6, 406.0], [92.7, 406.0], [92.8, 407.0], [92.9, 407.0], [93.0, 407.0], [93.1, 407.0], [93.2, 407.0], [93.3, 407.0], [93.4, 407.0], [93.5, 407.0], [93.6, 407.0], [93.7, 407.0], [93.8, 407.0], [93.9, 407.0], [94.0, 407.0], [94.1, 407.0], [94.2, 407.0], [94.3, 407.0], [94.4, 407.0], [94.5, 407.0], [94.6, 408.0], [94.7, 408.0], [94.8, 408.0], [94.9, 408.0], [95.0, 408.0], [95.1, 408.0], [95.2, 408.0], [95.3, 408.0], [95.4, 408.0], [95.5, 408.0], [95.6, 408.0], [95.7, 408.0], [95.8, 408.0], [95.9, 408.0], [96.0, 408.0], [96.1, 408.0], [96.2, 408.0], [96.3, 409.0], [96.4, 409.0], [96.5, 409.0], [96.6, 409.0], [96.7, 409.0], [96.8, 409.0], [96.9, 409.0], [97.0, 409.0], [97.1, 409.0], [97.2, 409.0], [97.3, 410.0], [97.4, 410.0], [97.5, 410.0], [97.6, 414.0], [97.7, 415.0], [97.8, 422.0], [97.9, 462.0], [98.0, 468.0], [98.1, 507.0], [98.2, 508.0], [98.3, 508.0], [98.4, 508.0], [98.5, 509.0], [98.6, 509.0], [98.7, 510.0], [98.8, 510.0], [98.9, 510.0], [99.0, 511.0], [99.1, 511.0], [99.2, 511.0], [99.3, 512.0], [99.4, 514.0], [99.5, 592.0], [99.6, 613.0], [99.7, 729.0], [99.8, 1097.0], [99.9, 2383.0], [100.0, 7065.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 1295.0, "series": [{"data": [[32900.0, 1.0], [33100.0, 1.0], [33900.0, 1.0], [34500.0, 1.0], [35300.0, 1.0], [36300.0, 1.0], [37500.0, 1.0], [38700.0, 1.0], [39300.0, 1.0], [39500.0, 1.0], [41500.0, 1.0], [41300.0, 1.0], [41100.0, 1.0], [43100.0, 1.0], [44300.0, 1.0], [44500.0, 1.0], [45500.0, 1.0], [48500.0, 1.0], [48300.0, 1.0], [50700.0, 1.0], [52100.0, 1.0], [51900.0, 1.0], [200.0, 17.0], [55900.0, 1.0], [60500.0, 7.0], [60300.0, 2.0], [60700.0, 2.0], [61500.0, 1.0], [300.0, 1200.0], [400.0, 39.0], [500.0, 45.0], [600.0, 23.0], [700.0, 3.0], [1100.0, 1.0], [1400.0, 1.0], [1500.0, 1.0], [4000.0, 1.0], [4400.0, 2.0], [5600.0, 2.0], [5700.0, 1.0], [5800.0, 1.0], [5900.0, 1.0], [6300.0, 1.0], [6800.0, 1.0], [7100.0, 1.0], [7600.0, 2.0], [7800.0, 1.0], [8200.0, 1.0], [8900.0, 1.0], [9300.0, 1.0], [9500.0, 1.0], [9600.0, 1.0], [10100.0, 2.0], [10200.0, 1.0], [10700.0, 1.0], [10300.0, 1.0], [11000.0, 1.0], [11700.0, 1.0], [11600.0, 1.0], [12500.0, 1.0], [12400.0, 1.0], [13100.0, 1.0], [13500.0, 1.0], [13400.0, 1.0], [14300.0, 1.0], [15000.0, 1.0], [15800.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [16000.0, 1.0], [16300.0, 1.0], [16400.0, 1.0], [17100.0, 1.0], [18200.0, 1.0], [17500.0, 2.0], [18000.0, 1.0], [18400.0, 1.0], [18800.0, 1.0], [19900.0, 1.0], [19600.0, 1.0], [20300.0, 2.0], [20700.0, 1.0], [21100.0, 1.0], [20900.0, 2.0], [21500.0, 2.0], [20500.0, 1.0], [21400.0, 1.0], [20800.0, 1.0], [20600.0, 1.0], [21000.0, 2.0], [21800.0, 1.0], [22500.0, 3.0], [21900.0, 1.0], [22100.0, 1.0], [21700.0, 2.0], [22000.0, 1.0], [23300.0, 1.0], [22800.0, 1.0], [23200.0, 1.0], [22600.0, 1.0], [23900.0, 1.0], [24200.0, 1.0], [25200.0, 1.0], [26000.0, 2.0], [26800.0, 1.0], [27500.0, 1.0], [26700.0, 1.0], [27000.0, 1.0], [28600.0, 1.0], [28300.0, 3.0], [27900.0, 2.0], [29300.0, 2.0], [28700.0, 1.0], [29200.0, 1.0], [30100.0, 1.0], [30600.0, 1.0], [30700.0, 1.0], [30500.0, 1.0], [29700.0, 1.0], [31900.0, 1.0], [32200.0, 1.0], [32400.0, 1.0], [32600.0, 1.0], [32500.0, 1.0], [33600.0, 1.0], [34800.0, 1.0], [35400.0, 2.0], [38400.0, 1.0], [39600.0, 3.0], [39400.0, 2.0], [39200.0, 1.0], [40800.0, 1.0], [43600.0, 1.0], [44800.0, 1.0], [43400.0, 1.0], [46600.0, 1.0], [48400.0, 2.0], [52400.0, 1.0], [56400.0, 1.0], [55800.0, 3.0], [56200.0, 1.0], [58000.0, 1.0], [60600.0, 4.0], [60400.0, 4.0], [59600.0, 1.0], [59400.0, 1.0], [61600.0, 1.0], [63800.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 1295.0], [33500.0, 1.0], [33300.0, 1.0], [34500.0, 1.0], [34100.0, 1.0], [34900.0, 2.0], [35900.0, 1.0], [38300.0, 1.0], [39300.0, 2.0], [40900.0, 1.0], [40700.0, 1.0], [39100.0, 1.0], [42700.0, 1.0], [43100.0, 1.0], [46300.0, 1.0], [48100.0, 3.0], [52100.0, 1.0], [200.0, 12.0], [51700.0, 1.0], [56100.0, 1.0], [55700.0, 1.0], [60100.0, 7.0], [59900.0, 1.0], [60300.0, 4.0], [61300.0, 1.0], [300.0, 2.0], [800.0, 1.0], [1200.0, 1.0], [2600.0, 1.0], [3700.0, 1.0], [4100.0, 2.0], [5100.0, 1.0], [5200.0, 2.0], [5500.0, 1.0], [5600.0, 1.0], [5900.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [7200.0, 1.0], [7400.0, 1.0], [7300.0, 1.0], [7600.0, 1.0], [7800.0, 1.0], [9100.0, 2.0], [9700.0, 1.0], [9800.0, 2.0], [10000.0, 1.0], [10600.0, 1.0], [10300.0, 1.0], [11200.0, 1.0], [11400.0, 1.0], [12100.0, 2.0], [11900.0, 1.0], [12700.0, 1.0], [13100.0, 2.0], [14700.0, 1.0], [15000.0, 1.0], [15200.0, 1.0], [15400.0, 1.0], [15700.0, 1.0], [16000.0, 1.0], [15900.0, 1.0], [17200.0, 2.0], [16800.0, 1.0], [17900.0, 1.0], [18400.0, 1.0], [17700.0, 1.0], [17600.0, 1.0], [19300.0, 1.0], [20300.0, 1.0], [20200.0, 2.0], [19500.0, 1.0], [20400.0, 1.0], [20000.0, 1.0], [19900.0, 1.0], [20600.0, 3.0], [21400.0, 2.0], [20500.0, 1.0], [21200.0, 1.0], [21500.0, 1.0], [21100.0, 1.0], [21000.0, 1.0], [20700.0, 1.0], [21300.0, 1.0], [22200.0, 3.0], [22400.0, 1.0], [22100.0, 1.0], [21700.0, 2.0], [22900.0, 1.0], [23500.0, 1.0], [22800.0, 1.0], [23900.0, 1.0], [24800.0, 1.0], [25800.0, 1.0], [26500.0, 1.0], [25600.0, 1.0], [26300.0, 1.0], [26600.0, 1.0], [27100.0, 1.0], [27500.0, 1.0], [27600.0, 1.0], [28200.0, 1.0], [27900.0, 1.0], [28100.0, 1.0], [28400.0, 1.0], [27700.0, 1.0], [29000.0, 1.0], [29100.0, 1.0], [28900.0, 1.0], [29400.0, 1.0], [29700.0, 1.0], [30200.0, 2.0], [30400.0, 1.0], [31500.0, 1.0], [31800.0, 1.0], [32500.0, 1.0], [32700.0, 1.0], [32000.0, 1.0], [32200.0, 1.0], [32100.0, 1.0], [35000.0, 1.0], [37200.0, 1.0], [38800.0, 1.0], [38000.0, 1.0], [39000.0, 4.0], [40400.0, 1.0], [41200.0, 1.0], [43200.0, 1.0], [44600.0, 1.0], [45000.0, 1.0], [43800.0, 1.0], [44200.0, 1.0], [48000.0, 1.0], [50200.0, 1.0], [51600.0, 1.0], [55600.0, 3.0], [56000.0, 1.0], [59200.0, 1.0], [57800.0, 1.0], [60200.0, 6.0], [61200.0, 1.0], [60400.0, 1.0], [59400.0, 1.0], [63400.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[2300.0, 1.0], [300.0, 101.0], [600.0, 2.0], [700.0, 1.0], [1400.0, 1.0], [400.0, 111.0], [200.0, 1271.0], [7000.0, 1.0], [500.0, 22.0], [1000.0, 1.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 63800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2703.0, "series": [{"data": [[0.0, 170.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 14.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 113.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2703.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.5000000000000004, "minX": 1.68520146E12, "maxY": 24.809082483781303, "series": [{"data": [[1.6852023E12, 19.909090909090917], [1.68520164E12, 6.299999999999999], [1.68520224E12, 24.809082483781303], [1.68520194E12, 15.0], [1.68520206E12, 19.922448979591852], [1.685202E12, 17.07500000000001], [1.6852017E12, 9.925], [1.68520212E12, 20.0], [1.68520182E12, 12.164285714285718], [1.68520176E12, 10.0], [1.68520146E12, 2.5000000000000004], [1.68520188E12, 14.704761904761904], [1.68520158E12, 5.0], [1.68520218E12, 21.254545454545436], [1.68520152E12, 4.7727272727272725]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6852023E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 108.11940298507463, "minX": 1.0, "maxY": 24487.58695652174, "series": [{"data": [[2.0, 3129.0], [8.0, 11268.75], [9.0, 3216.454545454545], [10.0, 24487.58695652174], [11.0, 9194.545454545452], [3.0, 3502.6], [12.0, 8405.666666666666], [13.0, 8169.039999999998], [14.0, 2105.5], [15.0, 19333.573333333334], [4.0, 5255.666666666667], [16.0, 11485.476190476189], [17.0, 12363.199999999997], [18.0, 14741.608695652176], [19.0, 470.75], [5.0, 18596.17241379311], [20.0, 2396.0135658914714], [21.0, 320.0645161290322], [22.0, 321.3382352941176], [23.0, 319.38235294117663], [24.0, 321.6341463414634], [6.0, 339.0], [25.0, 321.7007672634271], [7.0, 18753.4]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[20.145985401459885, 3977.7677504976687]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 2717.0], [8.0, 10969.75], [9.0, 3277.4000000000005], [10.0, 24115.71739130435], [11.0, 9804.5], [3.0, 4020.2500000000005], [12.0, 8651.642857142857], [13.0, 8182.95833333333], [14.0, 1930.3684210526314], [15.0, 19268.44594594595], [4.0, 5547.125], [16.0, 11759.749999999996], [17.0, 13471.0], [18.0, 14667.181818181818], [19.0, 153.85714285714286], [5.0, 18875.10714285714], [20.0, 2165.9495145631095], [21.0, 108.73770491803279], [22.0, 109.10447761194031], [23.0, 108.11940298507463], [24.0, 109.4567901234568], [6.0, 125.0], [25.0, 108.50256410256414], [7.0, 18461.4]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[20.20766129032263, 3776.1599462365643]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 281.0], [3.0, 364.0], [4.0, 380.3333333333333], [5.0, 360.56666666666666], [6.0, 341.5], [7.0, 376.4], [8.0, 369.5], [9.0, 277.90909090909093], [10.0, 366.6170212765957], [11.0, 271.0], [12.0, 342.00000000000006], [13.0, 306.11111111111114], [14.0, 298.7222222222222], [15.0, 317.8205128205127], [1.0, 411.5], [16.0, 322.8888888888889], [17.0, 1145.6363636363637], [18.0, 249.2608695652174], [19.0, 347.4], [20.0, 230.63300970873777], [21.0, 213.1147540983607], [22.0, 213.72058823529417], [23.0, 212.8550724637681], [24.0, 214.2592592592593], [25.0, 213.31202046035799]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[20.09126984126984, 249.51785714285717]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 329.0, "minX": 1.68520146E12, "maxY": 52372.6, "series": [{"data": [[1.6852023E12, 4175.85], [1.68520164E12, 989.45], [1.68520224E12, 8136.683333333333], [1.68520194E12, 1795.0833333333333], [1.68520206E12, 2087.483333333333], [1.685202E12, 1708.15], [1.6852017E12, 1026.55], [1.68520212E12, 6914.483333333334], [1.68520182E12, 1837.85], [1.68520176E12, 1175.7666666666667], [1.68520146E12, 329.0], [1.68520188E12, 1872.5], [1.68520158E12, 807.2166666666667], [1.68520218E12, 7469.0], [1.68520152E12, 1099.9333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6852023E12, 25628.1], [1.68520164E12, 2391.7166666666667], [1.68520224E12, 52372.6], [1.68520194E12, 5089.533333333334], [1.68520206E12, 10255.6], [1.685202E12, 6203.833333333333], [1.6852017E12, 1945.4166666666667], [1.68520212E12, 45428.933333333334], [1.68520182E12, 6384.916666666667], [1.68520176E12, 3543.55], [1.68520146E12, 728.55], [1.68520188E12, 5395.666666666667], [1.68520158E12, 1669.3833333333334], [1.68520218E12, 46926.166666666664], [1.68520152E12, 2437.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6852023E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 108.68523676880218, "minX": 1.68520146E12, "maxY": 37993.08333333334, "series": [{"data": [[1.6852023E12, 319.47513812154693], [1.68520164E12, 21103.846153846156], [1.68520224E12, 322.2583333333332], [1.68520194E12, 23333.918918918916], [1.68520206E12, 11957.978260869557], [1.685202E12, 25958.58536585366], [1.6852017E12, 37993.08333333334], [1.68520212E12, 322.94117647058846], [1.68520182E12, 10726.765957446809], [1.68520176E12, 21240.79310344827], [1.68520146E12, 7301.666666666667], [1.68520188E12, 7604.258064516128], [1.68520158E12, 19926.090909090908], [1.68520218E12, 323.10909090909087], [1.68520152E12, 18584.928571428572]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6852023E12, 111.97826086956526], [1.68520164E12, 19842.25], [1.68520224E12, 108.68523676880218], [1.68520194E12, 23006.621621621623], [1.68520206E12, 14048.17105263158], [1.685202E12, 27396.31578947368], [1.6852017E12, 37142.769230769234], [1.68520212E12, 109.4295081967214], [1.68520182E12, 10397.533333333335], [1.68520176E12, 23251.538461538465], [1.68520146E12, 7010.666666666667], [1.68520188E12, 6826.944444444445], [1.68520158E12, 19535.636363636364], [1.68520218E12, 109.23404255319156], [1.68520152E12, 18209.857142857145]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6852023E12, 222.29729729729715], [1.68520164E12, 360.6000000000001], [1.68520224E12, 213.49999999999997], [1.68520194E12, 302.7837837837838], [1.68520206E12, 342.63636363636374], [1.685202E12, 557.560975609756], [1.6852017E12, 382.3333333333333], [1.68520212E12, 213.7026143790851], [1.68520182E12, 332.5208333333333], [1.68520176E12, 378.88461538461536], [1.68520146E12, 350.3333333333333], [1.68520188E12, 353.8421052631578], [1.68520158E12, 374.2727272727273], [1.68520218E12, 213.84592145015117], [1.68520152E12, 377.6875]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6852023E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 108.63788300835654, "minX": 1.68520146E12, "maxY": 37991.083333333336, "series": [{"data": [[1.6852023E12, 319.43093922651923], [1.68520164E12, 21103.53846153846], [1.68520224E12, 322.18611111111125], [1.68520194E12, 23330.216216216213], [1.68520206E12, 11956.902173913038], [1.685202E12, 25957.73170731707], [1.6852017E12, 37991.083333333336], [1.68520212E12, 322.85294117647027], [1.68520182E12, 10726.531914893616], [1.68520176E12, 21240.44827586207], [1.68520146E12, 7298.0], [1.68520188E12, 7604.0967741935465], [1.68520158E12, 19925.909090909092], [1.68520218E12, 323.06363636363614], [1.68520152E12, 18584.57142857143]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6852023E12, 111.94565217391296], [1.68520164E12, 19842.083333333336], [1.68520224E12, 108.63788300835654], [1.68520194E12, 23003.621621621616], [1.68520206E12, 14048.105263157893], [1.685202E12, 27396.23684210527], [1.6852017E12, 37141.23076923076], [1.68520212E12, 109.37704918032786], [1.68520182E12, 10397.422222222223], [1.68520176E12, 23251.307692307695], [1.68520146E12, 7010.666666666667], [1.68520188E12, 6826.916666666667], [1.68520158E12, 19535.636363636364], [1.68520218E12, 109.21884498480249], [1.68520152E12, 18209.714285714286]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6852023E12, 222.2810810810811], [1.68520164E12, 360.3999999999999], [1.68520224E12, 213.47500000000008], [1.68520194E12, 301.7837837837838], [1.68520206E12, 341.4675324675326], [1.685202E12, 557.0243902439024], [1.6852017E12, 382.1333333333333], [1.68520212E12, 213.66339869281052], [1.68520182E12, 332.3958333333333], [1.68520176E12, 378.7692307692307], [1.68520146E12, 348.5], [1.68520188E12, 353.6842105263158], [1.68520158E12, 374.18181818181813], [1.68520218E12, 213.81570996978854], [1.68520152E12, 377.49999999999994]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6852023E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68520146E12, "maxY": 190.93103448275858, "series": [{"data": [[1.6852023E12, 108.55801104972373], [1.68520164E12, 166.76923076923075], [1.68520224E12, 105.70555555555556], [1.68520194E12, 161.56756756756755], [1.68520206E12, 165.53260869565221], [1.685202E12, 158.09756097560972], [1.6852017E12, 181.08333333333334], [1.68520212E12, 105.5915032679739], [1.68520182E12, 163.51063829787233], [1.68520176E12, 190.93103448275858], [1.68520146E12, 138.33333333333334], [1.68520188E12, 171.29032258064518], [1.68520158E12, 185.81818181818178], [1.68520218E12, 105.71818181818173], [1.68520152E12, 178.8571428571429]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.6852023E12, 0.0], [1.68520164E12, 0.0], [1.68520224E12, 0.0], [1.68520194E12, 0.0], [1.68520206E12, 0.0], [1.685202E12, 0.0], [1.6852017E12, 0.0], [1.68520212E12, 0.0], [1.68520182E12, 0.0], [1.68520176E12, 0.0], [1.68520146E12, 0.0], [1.68520188E12, 0.0], [1.68520158E12, 0.0], [1.68520218E12, 0.0], [1.68520152E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.6852023E12, 110.40540540540543], [1.68520164E12, 167.13333333333333], [1.68520224E12, 105.69999999999997], [1.68520194E12, 153.83783783783784], [1.68520206E12, 170.09090909090907], [1.685202E12, 155.90243902439022], [1.6852017E12, 186.4], [1.68520212E12, 105.59150326797386], [1.68520182E12, 157.22916666666669], [1.68520176E12, 189.96153846153848], [1.68520146E12, 170.83333333333331], [1.68520188E12, 175.76315789473688], [1.68520158E12, 178.8181818181818], [1.68520218E12, 105.72205438066473], [1.68520152E12, 180.25]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6852023E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 213.0, "minX": 1.68520146E12, "maxY": 52148.0, "series": [{"data": [[1.68520164E12, 25824.0], [1.68520182E12, 44252.0], [1.68520176E12, 52148.0], [1.68520146E12, 9151.0], [1.68520194E12, 40485.0], [1.68520188E12, 29477.0], [1.68520158E12, 23530.0], [1.68520206E12, 39157.0], [1.68520152E12, 22954.0], [1.685202E12, 7065.0], [1.6852017E12, 45040.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68520164E12, 23280.0], [1.68520182E12, 38249.4], [1.68520176E12, 48110.4], [1.68520146E12, 9151.0], [1.68520194E12, 22510.100000000028], [1.68520188E12, 27602.6], [1.68520158E12, 22323.4], [1.68520206E12, 39094.6], [1.68520152E12, 21435.9], [1.685202E12, 4261.000000000005], [1.6852017E12, 43411.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68520164E12, 25824.0], [1.68520182E12, 44252.0], [1.68520176E12, 52148.0], [1.68520146E12, 9151.0], [1.68520194E12, 40485.0], [1.68520188E12, 29477.0], [1.68520158E12, 23530.0], [1.68520206E12, 39157.0], [1.68520152E12, 22954.0], [1.685202E12, 7065.0], [1.6852017E12, 45040.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68520164E12, 25447.999999999996], [1.68520182E12, 43583.0], [1.68520176E12, 51348.79999999999], [1.68520146E12, 9151.0], [1.68520194E12, 39439.049999999996], [1.68520188E12, 28861.0], [1.68520158E12, 23361.249999999996], [1.68520206E12, 39157.0], [1.68520152E12, 22556.899999999998], [1.685202E12, 6306.199999999997], [1.6852017E12, 44863.6]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68520164E12, 234.0], [1.68520182E12, 243.0], [1.68520176E12, 304.0], [1.68520146E12, 222.0], [1.68520194E12, 214.0], [1.68520188E12, 219.0], [1.68520158E12, 296.0], [1.68520206E12, 243.0], [1.68520152E12, 304.0], [1.685202E12, 213.0], [1.6852017E12, 304.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68520164E12, 409.0], [1.68520182E12, 409.0], [1.68520176E12, 30200.0], [1.68520146E12, 415.0], [1.68520194E12, 310.5], [1.68520188E12, 408.0], [1.68520158E12, 5079.0], [1.68520206E12, 408.0], [1.68520152E12, 407.0], [1.685202E12, 344.0], [1.6852017E12, 457.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68520206E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 110.5, "minX": 1.0, "maxY": 22289.0, "series": [{"data": [[1.0, 408.5], [2.0, 408.0], [8.0, 411.0], [4.0, 408.0], [9.0, 407.0], [5.0, 17236.0], [22.0, 216.0], [3.0, 409.0], [6.0, 962.0], [7.0, 404.0], [29.0, 270.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 211.0], [8.0, 154.0], [9.0, 167.5], [10.0, 118.5], [11.0, 209.0], [3.0, 214.0], [12.0, 164.5], [13.0, 117.5], [14.0, 210.0], [15.0, 209.0], [4.0, 214.0], [1.0, 253.0], [16.0, 209.5], [17.0, 165.0], [19.0, 117.0], [5.0, 211.0], [20.0, 162.0], [21.0, 110.5], [22.0, 214.0], [23.0, 12137.0], [6.0, 212.0], [7.0, 210.0], [29.0, 22289.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 110.5, "minX": 1.0, "maxY": 22289.0, "series": [{"data": [[1.0, 408.0], [2.0, 408.0], [8.0, 411.0], [4.0, 407.5], [9.0, 406.5], [5.0, 17151.0], [22.0, 216.0], [3.0, 409.0], [6.0, 962.0], [7.0, 404.0], [29.0, 268.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 211.0], [8.0, 154.0], [9.0, 167.0], [10.0, 118.5], [11.0, 209.0], [3.0, 214.0], [12.0, 164.5], [13.0, 117.5], [14.0, 210.0], [15.0, 209.0], [4.0, 214.0], [1.0, 253.0], [16.0, 209.5], [17.0, 165.0], [19.0, 117.0], [5.0, 211.0], [20.0, 162.0], [21.0, 110.5], [22.0, 214.0], [23.0, 12137.0], [6.0, 212.0], [7.0, 210.0], [29.0, 22289.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.68520146E12, "maxY": 12.016666666666667, "series": [{"data": [[1.6852023E12, 6.1], [1.68520164E12, 0.48333333333333334], [1.68520224E12, 12.016666666666667], [1.68520194E12, 1.2333333333333334], [1.68520206E12, 2.3333333333333335], [1.685202E12, 1.3], [1.6852017E12, 0.5166666666666667], [1.68520212E12, 10.166666666666666], [1.68520182E12, 1.55], [1.68520176E12, 0.8], [1.68520146E12, 0.2], [1.68520188E12, 1.3833333333333333], [1.68520158E12, 0.45], [1.68520218E12, 11.016666666666667], [1.68520152E12, 0.45]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6852023E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68520146E12, "maxY": 11.983333333333333, "series": [{"data": [[1.68520164E12, 0.45], [1.68520182E12, 0.5166666666666667], [1.68520176E12, 0.38333333333333336], [1.68520146E12, 0.15], [1.68520194E12, 0.6333333333333333], [1.68520188E12, 0.6833333333333333], [1.68520158E12, 0.36666666666666664], [1.68520206E12, 0.25], [1.68520152E12, 0.5], [1.685202E12, 0.55], [1.6852017E12, 0.4666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68520206E12, 0.1], [1.685202E12, 0.06666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.6852023E12, 6.15], [1.68520212E12, 10.183333333333334], [1.68520182E12, 1.0333333333333334], [1.68520176E12, 0.48333333333333334], [1.68520224E12, 11.983333333333333], [1.68520194E12, 0.55], [1.68520188E12, 0.55], [1.68520206E12, 2.1], [1.68520218E12, 11.0], [1.685202E12, 0.5]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68520194E12, 0.05], [1.68520206E12, 0.1], [1.685202E12, 0.2]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6852023E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68520146E12, "maxY": 6.0, "series": [{"data": [[1.68520164E12, 0.25], [1.68520182E12, 0.2833333333333333], [1.68520176E12, 0.11666666666666667], [1.68520146E12, 0.1], [1.68520194E12, 0.4666666666666667], [1.68520188E12, 0.45], [1.68520158E12, 0.18333333333333332], [1.68520206E12, 0.21666666666666667], [1.68520152E12, 0.26666666666666666], [1.685202E12, 0.5166666666666667], [1.6852017E12, 0.25]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.6852023E12, 3.0833333333333335], [1.68520212E12, 5.1], [1.68520182E12, 0.5166666666666667], [1.68520176E12, 0.31666666666666665], [1.68520224E12, 6.0], [1.68520194E12, 0.15], [1.68520188E12, 0.18333333333333332], [1.68520206E12, 1.0666666666666667], [1.68520218E12, 5.516666666666667], [1.685202E12, 0.16666666666666666]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.6852023E12, 3.066666666666667], [1.68520212E12, 5.083333333333333], [1.68520182E12, 0.5166666666666667], [1.68520176E12, 0.16666666666666666], [1.68520224E12, 5.983333333333333], [1.68520194E12, 0.45], [1.68520188E12, 0.36666666666666664], [1.68520206E12, 1.2333333333333334], [1.68520218E12, 5.483333333333333], [1.685202E12, 0.6]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68520164E12, 0.21666666666666667], [1.68520182E12, 0.016666666666666666], [1.68520176E12, 0.2], [1.68520146E12, 0.05], [1.68520194E12, 0.1], [1.68520188E12, 0.13333333333333333], [1.68520158E12, 0.18333333333333332], [1.68520206E12, 0.03333333333333333], [1.68520152E12, 0.23333333333333334], [1.685202E12, 0.03333333333333333], [1.6852017E12, 0.2]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.6852023E12, 3.0166666666666666], [1.68520212E12, 5.1], [1.68520182E12, 0.7666666666666667], [1.68520176E12, 0.2833333333333333], [1.68520224E12, 6.0], [1.68520194E12, 0.5166666666666667], [1.68520188E12, 0.38333333333333336], [1.68520206E12, 1.5], [1.68520218E12, 5.5], [1.685202E12, 0.65]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68520164E12, 0.2], [1.68520182E12, 0.23333333333333334], [1.68520176E12, 0.26666666666666666], [1.68520146E12, 0.05], [1.68520194E12, 0.16666666666666666], [1.68520188E12, 0.23333333333333334], [1.68520158E12, 0.18333333333333332], [1.68520206E12, 0.03333333333333333], [1.68520152E12, 0.23333333333333334], [1.685202E12, 0.03333333333333333], [1.6852017E12, 0.21666666666666667]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6852023E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.68520146E12, "maxY": 17.983333333333334, "series": [{"data": [[1.68520164E12, 0.6666666666666666], [1.68520182E12, 0.5333333333333333], [1.68520176E12, 0.5833333333333334], [1.68520146E12, 0.2], [1.68520194E12, 0.7333333333333333], [1.68520188E12, 0.8166666666666667], [1.68520158E12, 0.55], [1.68520206E12, 0.2833333333333333], [1.68520152E12, 0.7333333333333333], [1.685202E12, 0.5833333333333334], [1.6852017E12, 0.6666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6852023E12, 9.166666666666666], [1.68520212E12, 15.283333333333333], [1.68520182E12, 1.8], [1.68520176E12, 0.7666666666666667], [1.68520224E12, 17.983333333333334], [1.68520194E12, 1.1166666666666667], [1.68520188E12, 0.9333333333333333], [1.68520206E12, 3.8], [1.68520218E12, 16.5], [1.685202E12, 1.4166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6852023E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

