/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 106.0, "minX": 0.0, "maxY": 62989.0, "series": [{"data": [[0.0, 319.0], [0.1, 319.0], [0.2, 319.0], [0.3, 319.0], [0.4, 321.0], [0.5, 321.0], [0.6, 321.0], [0.7, 322.0], [0.8, 322.0], [0.9, 322.0], [1.0, 323.0], [1.1, 323.0], [1.2, 323.0], [1.3, 326.0], [1.4, 326.0], [1.5, 326.0], [1.6, 327.0], [1.7, 327.0], [1.8, 327.0], [1.9, 327.0], [2.0, 338.0], [2.1, 338.0], [2.2, 338.0], [2.3, 341.0], [2.4, 341.0], [2.5, 341.0], [2.6, 348.0], [2.7, 348.0], [2.8, 348.0], [2.9, 357.0], [3.0, 357.0], [3.1, 357.0], [3.2, 370.0], [3.3, 370.0], [3.4, 370.0], [3.5, 370.0], [3.6, 380.0], [3.7, 380.0], [3.8, 380.0], [3.9, 397.0], [4.0, 397.0], [4.1, 397.0], [4.2, 408.0], [4.3, 408.0], [4.4, 408.0], [4.5, 415.0], [4.6, 415.0], [4.7, 415.0], [4.8, 415.0], [4.9, 415.0], [5.0, 415.0], [5.1, 441.0], [5.2, 441.0], [5.3, 441.0], [5.4, 441.0], [5.5, 453.0], [5.6, 453.0], [5.7, 453.0], [5.8, 455.0], [5.9, 455.0], [6.0, 455.0], [6.1, 458.0], [6.2, 458.0], [6.3, 458.0], [6.4, 482.0], [6.5, 482.0], [6.6, 482.0], [6.7, 488.0], [6.8, 488.0], [6.9, 488.0], [7.0, 488.0], [7.1, 499.0], [7.2, 499.0], [7.3, 499.0], [7.4, 511.0], [7.5, 511.0], [7.6, 511.0], [7.7, 515.0], [7.8, 515.0], [7.9, 515.0], [8.0, 516.0], [8.1, 516.0], [8.2, 516.0], [8.3, 516.0], [8.4, 516.0], [8.5, 516.0], [8.6, 517.0], [8.7, 517.0], [8.8, 517.0], [8.9, 517.0], [9.0, 517.0], [9.1, 517.0], [9.2, 517.0], [9.3, 517.0], [9.4, 517.0], [9.5, 517.0], [9.6, 536.0], [9.7, 536.0], [9.8, 536.0], [9.9, 536.0], [10.0, 536.0], [10.1, 536.0], [10.2, 542.0], [10.3, 542.0], [10.4, 542.0], [10.5, 542.0], [10.6, 543.0], [10.7, 543.0], [10.8, 543.0], [10.9, 549.0], [11.0, 549.0], [11.1, 549.0], [11.2, 551.0], [11.3, 551.0], [11.4, 551.0], [11.5, 553.0], [11.6, 553.0], [11.7, 553.0], [11.8, 554.0], [11.9, 554.0], [12.0, 554.0], [12.1, 554.0], [12.2, 557.0], [12.3, 557.0], [12.4, 557.0], [12.5, 559.0], [12.6, 559.0], [12.7, 559.0], [12.8, 560.0], [12.9, 560.0], [13.0, 560.0], [13.1, 560.0], [13.2, 560.0], [13.3, 560.0], [13.4, 564.0], [13.5, 564.0], [13.6, 564.0], [13.7, 574.0], [13.8, 574.0], [13.9, 574.0], [14.0, 574.0], [14.1, 576.0], [14.2, 576.0], [14.3, 576.0], [14.4, 581.0], [14.5, 581.0], [14.6, 581.0], [14.7, 581.0], [14.8, 581.0], [14.9, 581.0], [15.0, 587.0], [15.1, 587.0], [15.2, 587.0], [15.3, 588.0], [15.4, 588.0], [15.5, 588.0], [15.6, 588.0], [15.7, 591.0], [15.8, 591.0], [15.9, 591.0], [16.0, 591.0], [16.1, 591.0], [16.2, 591.0], [16.3, 598.0], [16.4, 598.0], [16.5, 598.0], [16.6, 615.0], [16.7, 615.0], [16.8, 615.0], [16.9, 622.0], [17.0, 622.0], [17.1, 622.0], [17.2, 622.0], [17.3, 622.0], [17.4, 622.0], [17.5, 622.0], [17.6, 5464.0], [17.7, 5464.0], [17.8, 5464.0], [17.9, 5526.0], [18.0, 5526.0], [18.1, 5526.0], [18.2, 6044.0], [18.3, 6044.0], [18.4, 6044.0], [18.5, 6924.0], [18.6, 6924.0], [18.7, 6924.0], [18.8, 7331.0], [18.9, 7331.0], [19.0, 7331.0], [19.1, 7331.0], [19.2, 7560.0], [19.3, 7560.0], [19.4, 7560.0], [19.5, 7563.0], [19.6, 7563.0], [19.7, 7563.0], [19.8, 7899.0], [19.9, 7899.0], [20.0, 7899.0], [20.1, 8870.0], [20.2, 8870.0], [20.3, 8870.0], [20.4, 8949.0], [20.5, 8949.0], [20.6, 8949.0], [20.7, 8949.0], [20.8, 9102.0], [20.9, 9102.0], [21.0, 9102.0], [21.1, 9158.0], [21.2, 9158.0], [21.3, 9158.0], [21.4, 9500.0], [21.5, 9500.0], [21.6, 9500.0], [21.7, 9534.0], [21.8, 9534.0], [21.9, 9534.0], [22.0, 10071.0], [22.1, 10071.0], [22.2, 10071.0], [22.3, 10133.0], [22.4, 10133.0], [22.5, 10133.0], [22.6, 10133.0], [22.7, 10414.0], [22.8, 10414.0], [22.9, 10414.0], [23.0, 10592.0], [23.1, 10592.0], [23.2, 10592.0], [23.3, 10674.0], [23.4, 10674.0], [23.5, 10674.0], [23.6, 10687.0], [23.7, 10687.0], [23.8, 10687.0], [23.9, 10871.0], [24.0, 10871.0], [24.1, 10871.0], [24.2, 10871.0], [24.3, 11052.0], [24.4, 11052.0], [24.5, 11052.0], [24.6, 11189.0], [24.7, 11189.0], [24.8, 11189.0], [24.9, 11352.0], [25.0, 11352.0], [25.1, 11352.0], [25.2, 11399.0], [25.3, 11399.0], [25.4, 11399.0], [25.5, 11486.0], [25.6, 11486.0], [25.7, 11486.0], [25.8, 11651.0], [25.9, 11651.0], [26.0, 11651.0], [26.1, 11651.0], [26.2, 11895.0], [26.3, 11895.0], [26.4, 11895.0], [26.5, 12031.0], [26.6, 12031.0], [26.7, 12031.0], [26.8, 12361.0], [26.9, 12361.0], [27.0, 12361.0], [27.1, 12879.0], [27.2, 12879.0], [27.3, 12879.0], [27.4, 13342.0], [27.5, 13342.0], [27.6, 13342.0], [27.7, 13342.0], [27.8, 13543.0], [27.9, 13543.0], [28.0, 13543.0], [28.1, 14191.0], [28.2, 14191.0], [28.3, 14191.0], [28.4, 14462.0], [28.5, 14462.0], [28.6, 14462.0], [28.7, 14658.0], [28.8, 14658.0], [28.9, 14658.0], [29.0, 14918.0], [29.1, 14918.0], [29.2, 14918.0], [29.3, 15694.0], [29.4, 15694.0], [29.5, 15694.0], [29.6, 15694.0], [29.7, 15797.0], [29.8, 15797.0], [29.9, 15797.0], [30.0, 15897.0], [30.1, 15897.0], [30.2, 15897.0], [30.3, 16023.0], [30.4, 16023.0], [30.5, 16023.0], [30.6, 16074.0], [30.7, 16074.0], [30.8, 16074.0], [30.9, 16176.0], [31.0, 16176.0], [31.1, 16176.0], [31.2, 16176.0], [31.3, 16224.0], [31.4, 16224.0], [31.5, 16224.0], [31.6, 16423.0], [31.7, 16423.0], [31.8, 16423.0], [31.9, 16585.0], [32.0, 16585.0], [32.1, 16585.0], [32.2, 16832.0], [32.3, 16832.0], [32.4, 16832.0], [32.5, 16978.0], [32.6, 16978.0], [32.7, 16978.0], [32.8, 16978.0], [32.9, 17004.0], [33.0, 17004.0], [33.1, 17004.0], [33.2, 17054.0], [33.3, 17054.0], [33.4, 17054.0], [33.5, 17230.0], [33.6, 17230.0], [33.7, 17230.0], [33.8, 17256.0], [33.9, 17256.0], [34.0, 17256.0], [34.1, 17790.0], [34.2, 17790.0], [34.3, 17790.0], [34.4, 17812.0], [34.5, 17812.0], [34.6, 17812.0], [34.7, 17812.0], [34.8, 18097.0], [34.9, 18097.0], [35.0, 18097.0], [35.1, 18962.0], [35.2, 18962.0], [35.3, 18962.0], [35.4, 19396.0], [35.5, 19396.0], [35.6, 19396.0], [35.7, 19426.0], [35.8, 19426.0], [35.9, 19426.0], [36.0, 19545.0], [36.1, 19545.0], [36.2, 19545.0], [36.3, 19545.0], [36.4, 19655.0], [36.5, 19655.0], [36.6, 19655.0], [36.7, 19684.0], [36.8, 19684.0], [36.9, 19684.0], [37.0, 20080.0], [37.1, 20080.0], [37.2, 20080.0], [37.3, 20276.0], [37.4, 20276.0], [37.5, 20276.0], [37.6, 20337.0], [37.7, 20337.0], [37.8, 20337.0], [37.9, 20393.0], [38.0, 20393.0], [38.1, 20393.0], [38.2, 20393.0], [38.3, 20514.0], [38.4, 20514.0], [38.5, 20514.0], [38.6, 20595.0], [38.7, 20595.0], [38.8, 20595.0], [38.9, 20719.0], [39.0, 20719.0], [39.1, 20719.0], [39.2, 20893.0], [39.3, 20893.0], [39.4, 20893.0], [39.5, 21238.0], [39.6, 21238.0], [39.7, 21238.0], [39.8, 21238.0], [39.9, 21287.0], [40.0, 21287.0], [40.1, 21287.0], [40.2, 21547.0], [40.3, 21547.0], [40.4, 21547.0], [40.5, 21714.0], [40.6, 21714.0], [40.7, 21714.0], [40.8, 21803.0], [40.9, 21803.0], [41.0, 21803.0], [41.1, 22133.0], [41.2, 22133.0], [41.3, 22133.0], [41.4, 22133.0], [41.5, 22694.0], [41.6, 22694.0], [41.7, 22694.0], [41.8, 22698.0], [41.9, 22698.0], [42.0, 22698.0], [42.1, 23660.0], [42.2, 23660.0], [42.3, 23660.0], [42.4, 23972.0], [42.5, 23972.0], [42.6, 23972.0], [42.7, 24091.0], [42.8, 24091.0], [42.9, 24091.0], [43.0, 24115.0], [43.1, 24115.0], [43.2, 24115.0], [43.3, 24115.0], [43.4, 24129.0], [43.5, 24129.0], [43.6, 24129.0], [43.7, 24548.0], [43.8, 24548.0], [43.9, 24548.0], [44.0, 26245.0], [44.1, 26245.0], [44.2, 26245.0], [44.3, 26551.0], [44.4, 26551.0], [44.5, 26551.0], [44.6, 26664.0], [44.7, 26664.0], [44.8, 26664.0], [44.9, 26664.0], [45.0, 26825.0], [45.1, 26825.0], [45.2, 26825.0], [45.3, 27333.0], [45.4, 27333.0], [45.5, 27333.0], [45.6, 27600.0], [45.7, 27600.0], [45.8, 27600.0], [45.9, 27607.0], [46.0, 27607.0], [46.1, 27607.0], [46.2, 27737.0], [46.3, 27737.0], [46.4, 27737.0], [46.5, 28129.0], [46.6, 28129.0], [46.7, 28129.0], [46.8, 28129.0], [46.9, 28567.0], [47.0, 28567.0], [47.1, 28567.0], [47.2, 30403.0], [47.3, 30403.0], [47.4, 30403.0], [47.5, 31086.0], [47.6, 31086.0], [47.7, 31086.0], [47.8, 31327.0], [47.9, 31327.0], [48.0, 31327.0], [48.1, 32483.0], [48.2, 32483.0], [48.3, 32483.0], [48.4, 32483.0], [48.5, 32529.0], [48.6, 32529.0], [48.7, 32529.0], [48.8, 32595.0], [48.9, 32595.0], [49.0, 32595.0], [49.1, 32789.0], [49.2, 32789.0], [49.3, 32789.0], [49.4, 33644.0], [49.5, 33644.0], [49.6, 33644.0], [49.7, 34146.0], [49.8, 34146.0], [49.9, 34146.0], [50.0, 34199.0], [50.1, 34199.0], [50.2, 34199.0], [50.3, 34199.0], [50.4, 34558.0], [50.5, 34558.0], [50.6, 34558.0], [50.7, 36076.0], [50.8, 36076.0], [50.9, 36076.0], [51.0, 36079.0], [51.1, 36079.0], [51.2, 36079.0], [51.3, 36829.0], [51.4, 36829.0], [51.5, 36829.0], [51.6, 36863.0], [51.7, 36863.0], [51.8, 36863.0], [51.9, 36863.0], [52.0, 37176.0], [52.1, 37176.0], [52.2, 37176.0], [52.3, 37336.0], [52.4, 37336.0], [52.5, 37336.0], [52.6, 37813.0], [52.7, 37813.0], [52.8, 37813.0], [52.9, 38482.0], [53.0, 38482.0], [53.1, 38482.0], [53.2, 38869.0], [53.3, 38869.0], [53.4, 38869.0], [53.5, 38869.0], [53.6, 39328.0], [53.7, 39328.0], [53.8, 39328.0], [53.9, 40777.0], [54.0, 40777.0], [54.1, 40777.0], [54.2, 41063.0], [54.3, 41063.0], [54.4, 41063.0], [54.5, 43304.0], [54.6, 43304.0], [54.7, 43304.0], [54.8, 44485.0], [54.9, 44485.0], [55.0, 44485.0], [55.1, 44647.0], [55.2, 44647.0], [55.3, 44647.0], [55.4, 44647.0], [55.5, 44773.0], [55.6, 44773.0], [55.7, 44773.0], [55.8, 44876.0], [55.9, 44876.0], [56.0, 44876.0], [56.1, 45219.0], [56.2, 45219.0], [56.3, 45219.0], [56.4, 49397.0], [56.5, 49397.0], [56.6, 49397.0], [56.7, 49505.0], [56.8, 49505.0], [56.9, 49505.0], [57.0, 49505.0], [57.1, 52388.0], [57.2, 52388.0], [57.3, 52388.0], [57.4, 55333.0], [57.5, 55333.0], [57.6, 55333.0], [57.7, 57158.0], [57.8, 57158.0], [57.9, 57158.0], [58.0, 60348.0], [58.1, 60348.0], [58.2, 60348.0], [58.3, 60420.0], [58.4, 60420.0], [58.5, 60420.0], [58.6, 60436.0], [58.7, 60436.0], [58.8, 60436.0], [58.9, 60436.0], [59.0, 60442.0], [59.1, 60442.0], [59.2, 60442.0], [59.3, 60461.0], [59.4, 60461.0], [59.5, 60461.0], [59.6, 60464.0], [59.7, 60464.0], [59.8, 60464.0], [59.9, 60503.0], [60.0, 60503.0], [60.1, 60503.0], [60.2, 60507.0], [60.3, 60507.0], [60.4, 60507.0], [60.5, 60507.0], [60.6, 60510.0], [60.7, 60510.0], [60.8, 60510.0], [60.9, 60512.0], [61.0, 60512.0], [61.1, 60512.0], [61.2, 60518.0], [61.3, 60518.0], [61.4, 60518.0], [61.5, 60521.0], [61.6, 60521.0], [61.7, 60521.0], [61.8, 60528.0], [61.9, 60528.0], [62.0, 60528.0], [62.1, 60528.0], [62.2, 60531.0], [62.3, 60531.0], [62.4, 60531.0], [62.5, 60532.0], [62.6, 60532.0], [62.7, 60532.0], [62.8, 60532.0], [62.9, 60532.0], [63.0, 60532.0], [63.1, 60534.0], [63.2, 60534.0], [63.3, 60534.0], [63.4, 60536.0], [63.5, 60536.0], [63.6, 60536.0], [63.7, 60541.0], [63.8, 60541.0], [63.9, 60541.0], [64.0, 60541.0], [64.1, 60548.0], [64.2, 60548.0], [64.3, 60548.0], [64.4, 60553.0], [64.5, 60553.0], [64.6, 60553.0], [64.7, 60557.0], [64.8, 60557.0], [64.9, 60557.0], [65.0, 60558.0], [65.1, 60558.0], [65.2, 60558.0], [65.3, 60558.0], [65.4, 60558.0], [65.5, 60558.0], [65.6, 60558.0], [65.7, 60558.0], [65.8, 60558.0], [65.9, 60558.0], [66.0, 60559.0], [66.1, 60559.0], [66.2, 60559.0], [66.3, 60560.0], [66.4, 60560.0], [66.5, 60560.0], [66.6, 60560.0], [66.7, 60560.0], [66.8, 60560.0], [66.9, 60564.0], [67.0, 60564.0], [67.1, 60564.0], [67.2, 60565.0], [67.3, 60565.0], [67.4, 60565.0], [67.5, 60565.0], [67.6, 60569.0], [67.7, 60569.0], [67.8, 60569.0], [67.9, 60571.0], [68.0, 60571.0], [68.1, 60571.0], [68.2, 60572.0], [68.3, 60572.0], [68.4, 60572.0], [68.5, 60574.0], [68.6, 60574.0], [68.7, 60574.0], [68.8, 60577.0], [68.9, 60577.0], [69.0, 60577.0], [69.1, 60577.0], [69.2, 60581.0], [69.3, 60581.0], [69.4, 60581.0], [69.5, 60583.0], [69.6, 60583.0], [69.7, 60583.0], [69.8, 60585.0], [69.9, 60585.0], [70.0, 60585.0], [70.1, 60585.0], [70.2, 60585.0], [70.3, 60585.0], [70.4, 60586.0], [70.5, 60586.0], [70.6, 60586.0], [70.7, 60586.0], [70.8, 60588.0], [70.9, 60588.0], [71.0, 60588.0], [71.1, 60588.0], [71.2, 60588.0], [71.3, 60588.0], [71.4, 60588.0], [71.5, 60588.0], [71.6, 60588.0], [71.7, 60589.0], [71.8, 60589.0], [71.9, 60589.0], [72.0, 60590.0], [72.1, 60590.0], [72.2, 60590.0], [72.3, 60596.0], [72.4, 60596.0], [72.5, 60596.0], [72.6, 60596.0], [72.7, 60598.0], [72.8, 60598.0], [72.9, 60598.0], [73.0, 60603.0], [73.1, 60603.0], [73.2, 60603.0], [73.3, 60605.0], [73.4, 60605.0], [73.5, 60605.0], [73.6, 60605.0], [73.7, 60605.0], [73.8, 60605.0], [73.9, 60611.0], [74.0, 60611.0], [74.1, 60611.0], [74.2, 60611.0], [74.3, 60612.0], [74.4, 60612.0], [74.5, 60612.0], [74.6, 60617.0], [74.7, 60617.0], [74.8, 60617.0], [74.9, 60620.0], [75.0, 60620.0], [75.1, 60620.0], [75.2, 60621.0], [75.3, 60621.0], [75.4, 60621.0], [75.5, 60624.0], [75.6, 60624.0], [75.7, 60624.0], [75.8, 60626.0], [75.9, 60626.0], [76.0, 60626.0], [76.1, 60626.0], [76.2, 60627.0], [76.3, 60627.0], [76.4, 60627.0], [76.5, 60630.0], [76.6, 60630.0], [76.7, 60630.0], [76.8, 60631.0], [76.9, 60631.0], [77.0, 60631.0], [77.1, 60632.0], [77.2, 60632.0], [77.3, 60632.0], [77.4, 60634.0], [77.5, 60634.0], [77.6, 60634.0], [77.7, 60634.0], [77.8, 60638.0], [77.9, 60638.0], [78.0, 60638.0], [78.1, 60640.0], [78.2, 60640.0], [78.3, 60640.0], [78.4, 60641.0], [78.5, 60641.0], [78.6, 60641.0], [78.7, 60641.0], [78.8, 60641.0], [78.9, 60641.0], [79.0, 60644.0], [79.1, 60644.0], [79.2, 60644.0], [79.3, 60645.0], [79.4, 60645.0], [79.5, 60645.0], [79.6, 60645.0], [79.7, 60646.0], [79.8, 60646.0], [79.9, 60646.0], [80.0, 60646.0], [80.1, 60646.0], [80.2, 60646.0], [80.3, 60646.0], [80.4, 60646.0], [80.5, 60646.0], [80.6, 60648.0], [80.7, 60648.0], [80.8, 60648.0], [80.9, 60651.0], [81.0, 60651.0], [81.1, 60651.0], [81.2, 60651.0], [81.3, 60652.0], [81.4, 60652.0], [81.5, 60652.0], [81.6, 60659.0], [81.7, 60659.0], [81.8, 60659.0], [81.9, 60659.0], [82.0, 60659.0], [82.1, 60659.0], [82.2, 60663.0], [82.3, 60663.0], [82.4, 60663.0], [82.5, 60664.0], [82.6, 60664.0], [82.7, 60664.0], [82.8, 60664.0], [82.9, 60667.0], [83.0, 60667.0], [83.1, 60667.0], [83.2, 60668.0], [83.3, 60668.0], [83.4, 60668.0], [83.5, 60674.0], [83.6, 60674.0], [83.7, 60674.0], [83.8, 60686.0], [83.9, 60686.0], [84.0, 60686.0], [84.1, 60687.0], [84.2, 60687.0], [84.3, 60687.0], [84.4, 60690.0], [84.5, 60690.0], [84.6, 60690.0], [84.7, 60690.0], [84.8, 60690.0], [84.9, 60690.0], [85.0, 60690.0], [85.1, 60696.0], [85.2, 60696.0], [85.3, 60696.0], [85.4, 60699.0], [85.5, 60699.0], [85.6, 60699.0], [85.7, 60701.0], [85.8, 60701.0], [85.9, 60701.0], [86.0, 60705.0], [86.1, 60705.0], [86.2, 60705.0], [86.3, 60705.0], [86.4, 60708.0], [86.5, 60708.0], [86.6, 60708.0], [86.7, 60713.0], [86.8, 60713.0], [86.9, 60713.0], [87.0, 60714.0], [87.1, 60714.0], [87.2, 60714.0], [87.3, 60715.0], [87.4, 60715.0], [87.5, 60715.0], [87.6, 60716.0], [87.7, 60716.0], [87.8, 60716.0], [87.9, 60717.0], [88.0, 60717.0], [88.1, 60717.0], [88.2, 60717.0], [88.3, 60720.0], [88.4, 60720.0], [88.5, 60720.0], [88.6, 60720.0], [88.7, 60720.0], [88.8, 60720.0], [88.9, 60722.0], [89.0, 60722.0], [89.1, 60722.0], [89.2, 60725.0], [89.3, 60725.0], [89.4, 60725.0], [89.5, 60725.0], [89.6, 60725.0], [89.7, 60725.0], [89.8, 60725.0], [89.9, 60726.0], [90.0, 60726.0], [90.1, 60726.0], [90.2, 60731.0], [90.3, 60731.0], [90.4, 60731.0], [90.5, 60747.0], [90.6, 60747.0], [90.7, 60747.0], [90.8, 60750.0], [90.9, 60750.0], [91.0, 60750.0], [91.1, 60758.0], [91.2, 60758.0], [91.3, 60758.0], [91.4, 60758.0], [91.5, 60760.0], [91.6, 60760.0], [91.7, 60760.0], [91.8, 60761.0], [91.9, 60761.0], [92.0, 60761.0], [92.1, 60764.0], [92.2, 60764.0], [92.3, 60764.0], [92.4, 60788.0], [92.5, 60788.0], [92.6, 60788.0], [92.7, 60801.0], [92.8, 60801.0], [92.9, 60801.0], [93.0, 60812.0], [93.1, 60812.0], [93.2, 60812.0], [93.3, 60812.0], [93.4, 60817.0], [93.5, 60817.0], [93.6, 60817.0], [93.7, 60824.0], [93.8, 60824.0], [93.9, 60824.0], [94.0, 60830.0], [94.1, 60830.0], [94.2, 60830.0], [94.3, 60844.0], [94.4, 60844.0], [94.5, 60844.0], [94.6, 60854.0], [94.7, 60854.0], [94.8, 60854.0], [94.9, 60854.0], [95.0, 60871.0], [95.1, 60871.0], [95.2, 60871.0], [95.3, 60878.0], [95.4, 60878.0], [95.5, 60878.0], [95.6, 60881.0], [95.7, 60881.0], [95.8, 60881.0], [95.9, 60888.0], [96.0, 60888.0], [96.1, 60888.0], [96.2, 60898.0], [96.3, 60898.0], [96.4, 60898.0], [96.5, 60915.0], [96.6, 60915.0], [96.7, 60915.0], [96.8, 60915.0], [96.9, 60918.0], [97.0, 60918.0], [97.1, 60918.0], [97.2, 60952.0], [97.3, 60952.0], [97.4, 60952.0], [97.5, 60971.0], [97.6, 60971.0], [97.7, 60971.0], [97.8, 60979.0], [97.9, 60979.0], [98.0, 60979.0], [98.1, 61099.0], [98.2, 61099.0], [98.3, 61099.0], [98.4, 61099.0], [98.5, 61238.0], [98.6, 61238.0], [98.7, 61238.0], [98.8, 61443.0], [98.9, 61443.0], [99.0, 61443.0], [99.1, 61692.0], [99.2, 61692.0], [99.3, 61692.0], [99.4, 61827.0], [99.5, 61827.0], [99.6, 61827.0], [99.7, 62989.0], [99.8, 62989.0], [99.9, 62989.0], [100.0, 62989.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 106.0], [0.1, 106.0], [0.2, 106.0], [0.3, 106.0], [0.4, 108.0], [0.5, 108.0], [0.6, 108.0], [0.7, 108.0], [0.8, 108.0], [0.9, 108.0], [1.0, 108.0], [1.1, 108.0], [1.2, 108.0], [1.3, 108.0], [1.4, 108.0], [1.5, 108.0], [1.6, 108.0], [1.7, 108.0], [1.8, 108.0], [1.9, 108.0], [2.0, 109.0], [2.1, 109.0], [2.2, 109.0], [2.3, 109.0], [2.4, 109.0], [2.5, 109.0], [2.6, 109.0], [2.7, 109.0], [2.8, 109.0], [2.9, 109.0], [3.0, 109.0], [3.1, 109.0], [3.2, 109.0], [3.3, 109.0], [3.4, 109.0], [3.5, 109.0], [3.6, 109.0], [3.7, 109.0], [3.8, 109.0], [3.9, 110.0], [4.0, 110.0], [4.1, 110.0], [4.2, 111.0], [4.3, 111.0], [4.4, 111.0], [4.5, 113.0], [4.6, 113.0], [4.7, 113.0], [4.8, 113.0], [4.9, 117.0], [5.0, 117.0], [5.1, 117.0], [5.2, 121.0], [5.3, 121.0], [5.4, 121.0], [5.5, 122.0], [5.6, 122.0], [5.7, 122.0], [5.8, 128.0], [5.9, 128.0], [6.0, 128.0], [6.1, 129.0], [6.2, 129.0], [6.3, 129.0], [6.4, 129.0], [6.5, 133.0], [6.6, 133.0], [6.7, 133.0], [6.8, 134.0], [6.9, 134.0], [7.0, 134.0], [7.1, 135.0], [7.2, 135.0], [7.3, 135.0], [7.4, 142.0], [7.5, 142.0], [7.6, 142.0], [7.7, 146.0], [7.8, 146.0], [7.9, 146.0], [8.0, 146.0], [8.1, 146.0], [8.2, 146.0], [8.3, 146.0], [8.4, 151.0], [8.5, 151.0], [8.6, 151.0], [8.7, 151.0], [8.8, 151.0], [8.9, 151.0], [9.0, 151.0], [9.1, 151.0], [9.2, 151.0], [9.3, 152.0], [9.4, 152.0], [9.5, 152.0], [9.6, 152.0], [9.7, 153.0], [9.8, 153.0], [9.9, 153.0], [10.0, 156.0], [10.1, 156.0], [10.2, 156.0], [10.3, 156.0], [10.4, 156.0], [10.5, 156.0], [10.6, 166.0], [10.7, 166.0], [10.8, 166.0], [10.9, 168.0], [11.0, 168.0], [11.1, 168.0], [11.2, 168.0], [11.3, 174.0], [11.4, 174.0], [11.5, 174.0], [11.6, 174.0], [11.7, 174.0], [11.8, 174.0], [11.9, 175.0], [12.0, 175.0], [12.1, 175.0], [12.2, 176.0], [12.3, 176.0], [12.4, 176.0], [12.5, 178.0], [12.6, 178.0], [12.7, 178.0], [12.8, 178.0], [12.9, 179.0], [13.0, 179.0], [13.1, 179.0], [13.2, 179.0], [13.3, 179.0], [13.4, 179.0], [13.5, 183.0], [13.6, 183.0], [13.7, 183.0], [13.8, 185.0], [13.9, 185.0], [14.0, 185.0], [14.1, 185.0], [14.2, 190.0], [14.3, 190.0], [14.4, 190.0], [14.5, 200.0], [14.6, 200.0], [14.7, 200.0], [14.8, 203.0], [14.9, 203.0], [15.0, 203.0], [15.1, 205.0], [15.2, 205.0], [15.3, 205.0], [15.4, 205.0], [15.5, 205.0], [15.6, 205.0], [15.7, 205.0], [15.8, 209.0], [15.9, 209.0], [16.0, 209.0], [16.1, 215.0], [16.2, 215.0], [16.3, 215.0], [16.4, 215.0], [16.5, 215.0], [16.6, 215.0], [16.7, 216.0], [16.8, 216.0], [16.9, 216.0], [17.0, 5106.0], [17.1, 5106.0], [17.2, 5106.0], [17.3, 5106.0], [17.4, 5136.0], [17.5, 5136.0], [17.6, 5136.0], [17.7, 5638.0], [17.8, 5638.0], [17.9, 5638.0], [18.0, 6413.0], [18.1, 6413.0], [18.2, 6413.0], [18.3, 6745.0], [18.4, 6745.0], [18.5, 6745.0], [18.6, 6924.0], [18.7, 6924.0], [18.8, 6924.0], [18.9, 6924.0], [19.0, 7163.0], [19.1, 7163.0], [19.2, 7163.0], [19.3, 7681.0], [19.4, 7681.0], [19.5, 7681.0], [19.6, 8475.0], [19.7, 8475.0], [19.8, 8475.0], [19.9, 8633.0], [20.0, 8633.0], [20.1, 8633.0], [20.2, 8749.0], [20.3, 8749.0], [20.4, 8749.0], [20.5, 8749.0], [20.6, 8936.0], [20.7, 8936.0], [20.8, 8936.0], [20.9, 9085.0], [21.0, 9085.0], [21.1, 9085.0], [21.2, 9154.0], [21.3, 9154.0], [21.4, 9154.0], [21.5, 9228.0], [21.6, 9228.0], [21.7, 9228.0], [21.8, 9670.0], [21.9, 9670.0], [22.0, 9670.0], [22.1, 9670.0], [22.2, 9805.0], [22.3, 9805.0], [22.4, 9805.0], [22.5, 10085.0], [22.6, 10085.0], [22.7, 10085.0], [22.8, 10164.0], [22.9, 10164.0], [23.0, 10164.0], [23.1, 10266.0], [23.2, 10266.0], [23.3, 10266.0], [23.4, 10463.0], [23.5, 10463.0], [23.6, 10463.0], [23.7, 10463.0], [23.8, 10646.0], [23.9, 10646.0], [24.0, 10646.0], [24.1, 10783.0], [24.2, 10783.0], [24.3, 10783.0], [24.4, 10942.0], [24.5, 10942.0], [24.6, 10942.0], [24.7, 10991.0], [24.8, 10991.0], [24.9, 10991.0], [25.0, 10991.0], [25.1, 11077.0], [25.2, 11077.0], [25.3, 11077.0], [25.4, 11247.0], [25.5, 11247.0], [25.6, 11247.0], [25.7, 11588.0], [25.8, 11588.0], [25.9, 11588.0], [26.0, 11702.0], [26.1, 11702.0], [26.2, 11702.0], [26.3, 12057.0], [26.4, 12057.0], [26.5, 12057.0], [26.6, 12057.0], [26.7, 12473.0], [26.8, 12473.0], [26.9, 12473.0], [27.0, 12933.0], [27.1, 12933.0], [27.2, 12933.0], [27.3, 13303.0], [27.4, 13303.0], [27.5, 13303.0], [27.6, 13783.0], [27.7, 13783.0], [27.8, 13783.0], [27.9, 14053.0], [28.0, 14053.0], [28.1, 14053.0], [28.2, 14053.0], [28.3, 14346.0], [28.4, 14346.0], [28.5, 14346.0], [28.6, 14510.0], [28.7, 14510.0], [28.8, 14510.0], [28.9, 15180.0], [29.0, 15180.0], [29.1, 15180.0], [29.2, 15291.0], [29.3, 15291.0], [29.4, 15291.0], [29.5, 15615.0], [29.6, 15615.0], [29.7, 15615.0], [29.8, 15615.0], [29.9, 15655.0], [30.0, 15655.0], [30.1, 15655.0], [30.2, 15713.0], [30.3, 15713.0], [30.4, 15713.0], [30.5, 15769.0], [30.6, 15769.0], [30.7, 15769.0], [30.8, 16011.0], [30.9, 16011.0], [31.0, 16011.0], [31.1, 16019.0], [31.2, 16019.0], [31.3, 16019.0], [31.4, 16019.0], [31.5, 16178.0], [31.6, 16178.0], [31.7, 16178.0], [31.8, 16425.0], [31.9, 16425.0], [32.0, 16425.0], [32.1, 16600.0], [32.2, 16600.0], [32.3, 16600.0], [32.4, 16675.0], [32.5, 16675.0], [32.6, 16675.0], [32.7, 16823.0], [32.8, 16823.0], [32.9, 16823.0], [33.0, 16823.0], [33.1, 16839.0], [33.2, 16839.0], [33.3, 16839.0], [33.4, 16948.0], [33.5, 16948.0], [33.6, 16948.0], [33.7, 17446.0], [33.8, 17446.0], [33.9, 17446.0], [34.0, 17482.0], [34.1, 17482.0], [34.2, 17482.0], [34.3, 17794.0], [34.4, 17794.0], [34.5, 17794.0], [34.6, 17794.0], [34.7, 18557.0], [34.8, 18557.0], [34.9, 18557.0], [35.0, 18992.0], [35.1, 18992.0], [35.2, 18992.0], [35.3, 19115.0], [35.4, 19115.0], [35.5, 19115.0], [35.6, 19242.0], [35.7, 19242.0], [35.8, 19242.0], [35.9, 19249.0], [36.0, 19249.0], [36.1, 19249.0], [36.2, 19249.0], [36.3, 19278.0], [36.4, 19278.0], [36.5, 19278.0], [36.6, 19674.0], [36.7, 19674.0], [36.8, 19674.0], [36.9, 19868.0], [37.0, 19868.0], [37.1, 19868.0], [37.2, 19931.0], [37.3, 19931.0], [37.4, 19931.0], [37.5, 19985.0], [37.6, 19985.0], [37.7, 19985.0], [37.8, 19985.0], [37.9, 20108.0], [38.0, 20108.0], [38.1, 20108.0], [38.2, 20189.0], [38.3, 20189.0], [38.4, 20189.0], [38.5, 20311.0], [38.6, 20311.0], [38.7, 20311.0], [38.8, 20489.0], [38.9, 20489.0], [39.0, 20489.0], [39.1, 20489.0], [39.2, 20831.0], [39.3, 20831.0], [39.4, 20831.0], [39.5, 21075.0], [39.6, 21075.0], [39.7, 21075.0], [39.8, 21143.0], [39.9, 21143.0], [40.0, 21143.0], [40.1, 21452.0], [40.2, 21452.0], [40.3, 21452.0], [40.4, 21500.0], [40.5, 21500.0], [40.6, 21500.0], [40.7, 21500.0], [40.8, 21729.0], [40.9, 21729.0], [41.0, 21729.0], [41.1, 22328.0], [41.2, 22328.0], [41.3, 22328.0], [41.4, 22331.0], [41.5, 22331.0], [41.6, 22331.0], [41.7, 23358.0], [41.8, 23358.0], [41.9, 23358.0], [42.0, 23648.0], [42.1, 23648.0], [42.2, 23648.0], [42.3, 23648.0], [42.4, 23710.0], [42.5, 23710.0], [42.6, 23710.0], [42.7, 23721.0], [42.8, 23721.0], [42.9, 23721.0], [43.0, 23726.0], [43.1, 23726.0], [43.2, 23726.0], [43.3, 24038.0], [43.4, 24038.0], [43.5, 24038.0], [43.6, 25838.0], [43.7, 25838.0], [43.8, 25838.0], [43.9, 25838.0], [44.0, 26147.0], [44.1, 26147.0], [44.2, 26147.0], [44.3, 26276.0], [44.4, 26276.0], [44.5, 26276.0], [44.6, 26417.0], [44.7, 26417.0], [44.8, 26417.0], [44.9, 26823.0], [45.0, 26823.0], [45.1, 26823.0], [45.2, 27210.0], [45.3, 27210.0], [45.4, 27210.0], [45.5, 27210.0], [45.6, 27214.0], [45.7, 27214.0], [45.8, 27214.0], [45.9, 27388.0], [46.0, 27388.0], [46.1, 27388.0], [46.2, 27721.0], [46.3, 27721.0], [46.4, 27721.0], [46.5, 28160.0], [46.6, 28160.0], [46.7, 28160.0], [46.8, 29970.0], [46.9, 29970.0], [47.0, 29970.0], [47.1, 29970.0], [47.2, 30851.0], [47.3, 30851.0], [47.4, 30851.0], [47.5, 30919.0], [47.6, 30919.0], [47.7, 30919.0], [47.8, 32132.0], [47.9, 32132.0], [48.0, 32132.0], [48.1, 32145.0], [48.2, 32145.0], [48.3, 32145.0], [48.4, 32290.0], [48.5, 32290.0], [48.6, 32290.0], [48.7, 32290.0], [48.8, 32484.0], [48.9, 32484.0], [49.0, 32484.0], [49.1, 33256.0], [49.2, 33256.0], [49.3, 33256.0], [49.4, 33728.0], [49.5, 33728.0], [49.6, 33728.0], [49.7, 33794.0], [49.8, 33794.0], [49.9, 33794.0], [50.0, 34294.0], [50.1, 34294.0], [50.2, 34294.0], [50.3, 34294.0], [50.4, 35672.0], [50.5, 35672.0], [50.6, 35672.0], [50.7, 35679.0], [50.8, 35679.0], [50.9, 35679.0], [51.0, 36454.0], [51.1, 36454.0], [51.2, 36454.0], [51.3, 36579.0], [51.4, 36579.0], [51.5, 36579.0], [51.6, 36579.0], [51.7, 36769.0], [51.8, 36769.0], [51.9, 36769.0], [52.0, 36925.0], [52.1, 36925.0], [52.2, 36925.0], [52.3, 37404.0], [52.4, 37404.0], [52.5, 37404.0], [52.6, 38177.0], [52.7, 38177.0], [52.8, 38177.0], [52.9, 38488.0], [53.0, 38488.0], [53.1, 38488.0], [53.2, 38488.0], [53.3, 38829.0], [53.4, 38829.0], [53.5, 38829.0], [53.6, 40370.0], [53.7, 40370.0], [53.8, 40370.0], [53.9, 40466.0], [54.0, 40466.0], [54.1, 40466.0], [54.2, 42926.0], [54.3, 42926.0], [54.4, 42926.0], [54.5, 43973.0], [54.6, 43973.0], [54.7, 43973.0], [54.8, 43973.0], [54.9, 44240.0], [55.0, 44240.0], [55.1, 44240.0], [55.2, 44365.0], [55.3, 44365.0], [55.4, 44365.0], [55.5, 44472.0], [55.6, 44472.0], [55.7, 44472.0], [55.8, 44984.0], [55.9, 44984.0], [56.0, 44984.0], [56.1, 48790.0], [56.2, 48790.0], [56.3, 48790.0], [56.4, 48790.0], [56.5, 49184.0], [56.6, 49184.0], [56.7, 49184.0], [56.8, 51877.0], [56.9, 51877.0], [57.0, 51877.0], [57.1, 54925.0], [57.2, 54925.0], [57.3, 54925.0], [57.4, 56750.0], [57.5, 56750.0], [57.6, 56750.0], [57.7, 60109.0], [57.8, 60109.0], [57.9, 60109.0], [58.0, 60109.0], [58.1, 60110.0], [58.2, 60110.0], [58.3, 60110.0], [58.4, 60110.0], [58.5, 60110.0], [58.6, 60110.0], [58.7, 60112.0], [58.8, 60112.0], [58.9, 60112.0], [59.0, 60116.0], [59.1, 60116.0], [59.2, 60116.0], [59.3, 60116.0], [59.4, 60116.0], [59.5, 60116.0], [59.6, 60116.0], [59.7, 60116.0], [59.8, 60116.0], [59.9, 60116.0], [60.0, 60117.0], [60.1, 60117.0], [60.2, 60117.0], [60.3, 60118.0], [60.4, 60118.0], [60.5, 60118.0], [60.6, 60119.0], [60.7, 60119.0], [60.8, 60119.0], [60.9, 60120.0], [61.0, 60120.0], [61.1, 60120.0], [61.2, 60120.0], [61.3, 60121.0], [61.4, 60121.0], [61.5, 60121.0], [61.6, 60122.0], [61.7, 60122.0], [61.8, 60122.0], [61.9, 60124.0], [62.0, 60124.0], [62.1, 60124.0], [62.2, 60128.0], [62.3, 60128.0], [62.4, 60128.0], [62.5, 60128.0], [62.6, 60128.0], [62.7, 60128.0], [62.8, 60128.0], [62.9, 60129.0], [63.0, 60129.0], [63.1, 60129.0], [63.2, 60129.0], [63.3, 60129.0], [63.4, 60129.0], [63.5, 60129.0], [63.6, 60129.0], [63.7, 60129.0], [63.8, 60130.0], [63.9, 60130.0], [64.0, 60130.0], [64.1, 60130.0], [64.2, 60131.0], [64.3, 60131.0], [64.4, 60131.0], [64.5, 60131.0], [64.6, 60131.0], [64.7, 60131.0], [64.8, 60132.0], [64.9, 60132.0], [65.0, 60132.0], [65.1, 60133.0], [65.2, 60133.0], [65.3, 60133.0], [65.4, 60133.0], [65.5, 60133.0], [65.6, 60133.0], [65.7, 60133.0], [65.8, 60137.0], [65.9, 60137.0], [66.0, 60137.0], [66.1, 60138.0], [66.2, 60138.0], [66.3, 60138.0], [66.4, 60139.0], [66.5, 60139.0], [66.6, 60139.0], [66.7, 60140.0], [66.8, 60140.0], [66.9, 60140.0], [67.0, 60140.0], [67.1, 60140.0], [67.2, 60140.0], [67.3, 60140.0], [67.4, 60141.0], [67.5, 60141.0], [67.6, 60141.0], [67.7, 60141.0], [67.8, 60141.0], [67.9, 60141.0], [68.0, 60142.0], [68.1, 60142.0], [68.2, 60142.0], [68.3, 60144.0], [68.4, 60144.0], [68.5, 60144.0], [68.6, 60144.0], [68.7, 60144.0], [68.8, 60144.0], [68.9, 60144.0], [69.0, 60145.0], [69.1, 60145.0], [69.2, 60145.0], [69.3, 60148.0], [69.4, 60148.0], [69.5, 60148.0], [69.6, 60151.0], [69.7, 60151.0], [69.8, 60151.0], [69.9, 60151.0], [70.0, 60151.0], [70.1, 60151.0], [70.2, 60152.0], [70.3, 60152.0], [70.4, 60152.0], [70.5, 60152.0], [70.6, 60152.0], [70.7, 60152.0], [70.8, 60152.0], [70.9, 60152.0], [71.0, 60152.0], [71.1, 60152.0], [71.2, 60152.0], [71.3, 60152.0], [71.4, 60152.0], [71.5, 60153.0], [71.6, 60153.0], [71.7, 60153.0], [71.8, 60155.0], [71.9, 60155.0], [72.0, 60155.0], [72.1, 60155.0], [72.2, 60155.0], [72.3, 60155.0], [72.4, 60155.0], [72.5, 60155.0], [72.6, 60155.0], [72.7, 60155.0], [72.8, 60155.0], [72.9, 60155.0], [73.0, 60155.0], [73.1, 60158.0], [73.2, 60158.0], [73.3, 60158.0], [73.4, 60158.0], [73.5, 60158.0], [73.6, 60158.0], [73.7, 60158.0], [73.8, 60166.0], [73.9, 60166.0], [74.0, 60166.0], [74.1, 60166.0], [74.2, 60166.0], [74.3, 60166.0], [74.4, 60167.0], [74.5, 60167.0], [74.6, 60167.0], [74.7, 60168.0], [74.8, 60168.0], [74.9, 60168.0], [75.0, 60168.0], [75.1, 60168.0], [75.2, 60168.0], [75.3, 60168.0], [75.4, 60171.0], [75.5, 60171.0], [75.6, 60171.0], [75.7, 60173.0], [75.8, 60173.0], [75.9, 60173.0], [76.0, 60174.0], [76.1, 60174.0], [76.2, 60174.0], [76.3, 60179.0], [76.4, 60179.0], [76.5, 60179.0], [76.6, 60179.0], [76.7, 60180.0], [76.8, 60180.0], [76.9, 60180.0], [77.0, 60185.0], [77.1, 60185.0], [77.2, 60185.0], [77.3, 60185.0], [77.4, 60185.0], [77.5, 60185.0], [77.6, 60186.0], [77.7, 60186.0], [77.8, 60186.0], [77.9, 60188.0], [78.0, 60188.0], [78.1, 60188.0], [78.2, 60188.0], [78.3, 60189.0], [78.4, 60189.0], [78.5, 60189.0], [78.6, 60189.0], [78.7, 60189.0], [78.8, 60189.0], [78.9, 60190.0], [79.0, 60190.0], [79.1, 60190.0], [79.2, 60190.0], [79.3, 60190.0], [79.4, 60190.0], [79.5, 60191.0], [79.6, 60191.0], [79.7, 60191.0], [79.8, 60191.0], [79.9, 60194.0], [80.0, 60194.0], [80.1, 60194.0], [80.2, 60196.0], [80.3, 60196.0], [80.4, 60196.0], [80.5, 60196.0], [80.6, 60196.0], [80.7, 60196.0], [80.8, 60198.0], [80.9, 60198.0], [81.0, 60198.0], [81.1, 60198.0], [81.2, 60198.0], [81.3, 60198.0], [81.4, 60198.0], [81.5, 60203.0], [81.6, 60203.0], [81.7, 60203.0], [81.8, 60203.0], [81.9, 60203.0], [82.0, 60203.0], [82.1, 60205.0], [82.2, 60205.0], [82.3, 60205.0], [82.4, 60205.0], [82.5, 60205.0], [82.6, 60205.0], [82.7, 60206.0], [82.8, 60206.0], [82.9, 60206.0], [83.0, 60206.0], [83.1, 60207.0], [83.2, 60207.0], [83.3, 60207.0], [83.4, 60209.0], [83.5, 60209.0], [83.6, 60209.0], [83.7, 60210.0], [83.8, 60210.0], [83.9, 60210.0], [84.0, 60213.0], [84.1, 60213.0], [84.2, 60213.0], [84.3, 60214.0], [84.4, 60214.0], [84.5, 60214.0], [84.6, 60214.0], [84.7, 60214.0], [84.8, 60214.0], [84.9, 60214.0], [85.0, 60214.0], [85.1, 60214.0], [85.2, 60214.0], [85.3, 60215.0], [85.4, 60215.0], [85.5, 60215.0], [85.6, 60216.0], [85.7, 60216.0], [85.8, 60216.0], [85.9, 60216.0], [86.0, 60216.0], [86.1, 60216.0], [86.2, 60216.0], [86.3, 60221.0], [86.4, 60221.0], [86.5, 60221.0], [86.6, 60224.0], [86.7, 60224.0], [86.8, 60224.0], [86.9, 60234.0], [87.0, 60234.0], [87.1, 60234.0], [87.2, 60237.0], [87.3, 60237.0], [87.4, 60237.0], [87.5, 60238.0], [87.6, 60238.0], [87.7, 60238.0], [87.8, 60238.0], [87.9, 60249.0], [88.0, 60249.0], [88.1, 60249.0], [88.2, 60250.0], [88.3, 60250.0], [88.4, 60250.0], [88.5, 60253.0], [88.6, 60253.0], [88.7, 60253.0], [88.8, 60257.0], [88.9, 60257.0], [89.0, 60257.0], [89.1, 60257.0], [89.2, 60264.0], [89.3, 60264.0], [89.4, 60264.0], [89.5, 60268.0], [89.6, 60268.0], [89.7, 60268.0], [89.8, 60274.0], [89.9, 60274.0], [90.0, 60274.0], [90.1, 60276.0], [90.2, 60276.0], [90.3, 60276.0], [90.4, 60281.0], [90.5, 60281.0], [90.6, 60281.0], [90.7, 60281.0], [90.8, 60289.0], [90.9, 60289.0], [91.0, 60289.0], [91.1, 60291.0], [91.2, 60291.0], [91.3, 60291.0], [91.4, 60297.0], [91.5, 60297.0], [91.6, 60297.0], [91.7, 60304.0], [91.8, 60304.0], [91.9, 60304.0], [92.0, 60307.0], [92.1, 60307.0], [92.2, 60307.0], [92.3, 60307.0], [92.4, 60310.0], [92.5, 60310.0], [92.6, 60310.0], [92.7, 60312.0], [92.8, 60312.0], [92.9, 60312.0], [93.0, 60318.0], [93.1, 60318.0], [93.2, 60318.0], [93.3, 60328.0], [93.4, 60328.0], [93.5, 60328.0], [93.6, 60329.0], [93.7, 60329.0], [93.8, 60329.0], [93.9, 60329.0], [94.0, 60334.0], [94.1, 60334.0], [94.2, 60334.0], [94.3, 60339.0], [94.4, 60339.0], [94.5, 60339.0], [94.6, 60342.0], [94.7, 60342.0], [94.8, 60342.0], [94.9, 60342.0], [95.0, 60342.0], [95.1, 60342.0], [95.2, 60349.0], [95.3, 60349.0], [95.4, 60349.0], [95.5, 60349.0], [95.6, 60353.0], [95.7, 60353.0], [95.8, 60353.0], [95.9, 60358.0], [96.0, 60358.0], [96.1, 60358.0], [96.2, 60362.0], [96.3, 60362.0], [96.4, 60362.0], [96.5, 60364.0], [96.6, 60364.0], [96.7, 60364.0], [96.8, 60368.0], [96.9, 60368.0], [97.0, 60368.0], [97.1, 60368.0], [97.2, 60379.0], [97.3, 60379.0], [97.4, 60379.0], [97.5, 60392.0], [97.6, 60392.0], [97.7, 60392.0], [97.8, 60399.0], [97.9, 60399.0], [98.0, 60399.0], [98.1, 60416.0], [98.2, 60416.0], [98.3, 60416.0], [98.4, 60419.0], [98.5, 60419.0], [98.6, 60419.0], [98.7, 60419.0], [98.8, 60421.0], [98.9, 60421.0], [99.0, 60421.0], [99.1, 60442.0], [99.2, 60442.0], [99.3, 60442.0], [99.4, 60446.0], [99.5, 60446.0], [99.6, 60446.0], [99.7, 61318.0], [99.8, 61318.0], [99.9, 61318.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 211.0], [0.1, 211.0], [0.2, 211.0], [0.3, 211.0], [0.4, 212.0], [0.5, 212.0], [0.6, 212.0], [0.7, 212.0], [0.8, 212.0], [0.9, 212.0], [1.0, 212.0], [1.1, 212.0], [1.2, 212.0], [1.3, 213.0], [1.4, 213.0], [1.5, 213.0], [1.6, 213.0], [1.7, 213.0], [1.8, 213.0], [1.9, 213.0], [2.0, 213.0], [2.1, 213.0], [2.2, 213.0], [2.3, 214.0], [2.4, 214.0], [2.5, 214.0], [2.6, 214.0], [2.7, 214.0], [2.8, 214.0], [2.9, 215.0], [3.0, 215.0], [3.1, 215.0], [3.2, 215.0], [3.3, 215.0], [3.4, 215.0], [3.5, 215.0], [3.6, 215.0], [3.7, 215.0], [3.8, 215.0], [3.9, 216.0], [4.0, 216.0], [4.1, 216.0], [4.2, 217.0], [4.3, 217.0], [4.4, 217.0], [4.5, 218.0], [4.6, 218.0], [4.7, 218.0], [4.8, 218.0], [4.9, 218.0], [5.0, 218.0], [5.1, 219.0], [5.2, 219.0], [5.3, 219.0], [5.4, 219.0], [5.5, 220.0], [5.6, 220.0], [5.7, 220.0], [5.8, 222.0], [5.9, 222.0], [6.0, 222.0], [6.1, 224.0], [6.2, 224.0], [6.3, 224.0], [6.4, 226.0], [6.5, 226.0], [6.6, 226.0], [6.7, 232.0], [6.8, 232.0], [6.9, 232.0], [7.0, 232.0], [7.1, 235.0], [7.2, 235.0], [7.3, 235.0], [7.4, 235.0], [7.5, 235.0], [7.6, 235.0], [7.7, 236.0], [7.8, 236.0], [7.9, 236.0], [8.0, 237.0], [8.1, 237.0], [8.2, 237.0], [8.3, 240.0], [8.4, 240.0], [8.5, 240.0], [8.6, 250.0], [8.7, 250.0], [8.8, 250.0], [8.9, 250.0], [9.0, 250.0], [9.1, 250.0], [9.2, 250.0], [9.3, 262.0], [9.4, 262.0], [9.5, 262.0], [9.6, 264.0], [9.7, 264.0], [9.8, 264.0], [9.9, 282.0], [10.0, 282.0], [10.1, 282.0], [10.2, 293.0], [10.3, 293.0], [10.4, 293.0], [10.5, 293.0], [10.6, 299.0], [10.7, 299.0], [10.8, 299.0], [10.9, 301.0], [11.0, 301.0], [11.1, 301.0], [11.2, 302.0], [11.3, 302.0], [11.4, 302.0], [11.5, 303.0], [11.6, 303.0], [11.7, 303.0], [11.8, 303.0], [11.9, 303.0], [12.0, 303.0], [12.1, 303.0], [12.2, 303.0], [12.3, 303.0], [12.4, 303.0], [12.5, 303.0], [12.6, 303.0], [12.7, 303.0], [12.8, 304.0], [12.9, 304.0], [13.0, 304.0], [13.1, 304.0], [13.2, 304.0], [13.3, 304.0], [13.4, 305.0], [13.5, 305.0], [13.6, 305.0], [13.7, 305.0], [13.8, 305.0], [13.9, 305.0], [14.0, 305.0], [14.1, 305.0], [14.2, 305.0], [14.3, 305.0], [14.4, 305.0], [14.5, 305.0], [14.6, 305.0], [14.7, 305.0], [14.8, 305.0], [14.9, 305.0], [15.0, 306.0], [15.1, 306.0], [15.2, 306.0], [15.3, 306.0], [15.4, 306.0], [15.5, 306.0], [15.6, 306.0], [15.7, 306.0], [15.8, 306.0], [15.9, 306.0], [16.0, 307.0], [16.1, 307.0], [16.2, 307.0], [16.3, 307.0], [16.4, 307.0], [16.5, 307.0], [16.6, 307.0], [16.7, 307.0], [16.8, 307.0], [16.9, 307.0], [17.0, 307.0], [17.1, 307.0], [17.2, 308.0], [17.3, 308.0], [17.4, 308.0], [17.5, 308.0], [17.6, 308.0], [17.7, 308.0], [17.8, 308.0], [17.9, 308.0], [18.0, 308.0], [18.1, 308.0], [18.2, 310.0], [18.3, 310.0], [18.4, 310.0], [18.5, 311.0], [18.6, 311.0], [18.7, 311.0], [18.8, 311.0], [18.9, 311.0], [19.0, 311.0], [19.1, 311.0], [19.2, 312.0], [19.3, 312.0], [19.4, 312.0], [19.5, 312.0], [19.6, 312.0], [19.7, 312.0], [19.8, 313.0], [19.9, 313.0], [20.0, 313.0], [20.1, 316.0], [20.2, 316.0], [20.3, 316.0], [20.4, 324.0], [20.5, 324.0], [20.6, 324.0], [20.7, 324.0], [20.8, 324.0], [20.9, 324.0], [21.0, 324.0], [21.1, 325.0], [21.2, 325.0], [21.3, 325.0], [21.4, 326.0], [21.5, 326.0], [21.6, 326.0], [21.7, 328.0], [21.8, 328.0], [21.9, 328.0], [22.0, 328.0], [22.1, 328.0], [22.2, 328.0], [22.3, 329.0], [22.4, 329.0], [22.5, 329.0], [22.6, 329.0], [22.7, 329.0], [22.8, 329.0], [22.9, 329.0], [23.0, 330.0], [23.1, 330.0], [23.2, 330.0], [23.3, 331.0], [23.4, 331.0], [23.5, 331.0], [23.6, 333.0], [23.7, 333.0], [23.8, 333.0], [23.9, 334.0], [24.0, 334.0], [24.1, 334.0], [24.2, 334.0], [24.3, 338.0], [24.4, 338.0], [24.5, 338.0], [24.6, 346.0], [24.7, 346.0], [24.8, 346.0], [24.9, 352.0], [25.0, 352.0], [25.1, 352.0], [25.2, 353.0], [25.3, 353.0], [25.4, 353.0], [25.5, 363.0], [25.6, 363.0], [25.7, 363.0], [25.8, 365.0], [25.9, 365.0], [26.0, 365.0], [26.1, 365.0], [26.2, 366.0], [26.3, 366.0], [26.4, 366.0], [26.5, 370.0], [26.6, 370.0], [26.7, 370.0], [26.8, 376.0], [26.9, 376.0], [27.0, 376.0], [27.1, 376.0], [27.2, 376.0], [27.3, 376.0], [27.4, 377.0], [27.5, 377.0], [27.6, 377.0], [27.7, 377.0], [27.8, 377.0], [27.9, 377.0], [28.0, 377.0], [28.1, 378.0], [28.2, 378.0], [28.3, 378.0], [28.4, 381.0], [28.5, 381.0], [28.6, 381.0], [28.7, 383.0], [28.8, 383.0], [28.9, 383.0], [29.0, 386.0], [29.1, 386.0], [29.2, 386.0], [29.3, 387.0], [29.4, 387.0], [29.5, 387.0], [29.6, 387.0], [29.7, 388.0], [29.8, 388.0], [29.9, 388.0], [30.0, 388.0], [30.1, 388.0], [30.2, 388.0], [30.3, 388.0], [30.4, 388.0], [30.5, 388.0], [30.6, 390.0], [30.7, 390.0], [30.8, 390.0], [30.9, 391.0], [31.0, 391.0], [31.1, 391.0], [31.2, 391.0], [31.3, 391.0], [31.4, 391.0], [31.5, 391.0], [31.6, 393.0], [31.7, 393.0], [31.8, 393.0], [31.9, 393.0], [32.0, 393.0], [32.1, 393.0], [32.2, 395.0], [32.3, 395.0], [32.4, 395.0], [32.5, 396.0], [32.6, 396.0], [32.7, 396.0], [32.8, 396.0], [32.9, 397.0], [33.0, 397.0], [33.1, 397.0], [33.2, 397.0], [33.3, 397.0], [33.4, 397.0], [33.5, 397.0], [33.6, 397.0], [33.7, 397.0], [33.8, 398.0], [33.9, 398.0], [34.0, 398.0], [34.1, 399.0], [34.2, 399.0], [34.3, 399.0], [34.4, 400.0], [34.5, 400.0], [34.6, 400.0], [34.7, 400.0], [34.8, 401.0], [34.9, 401.0], [35.0, 401.0], [35.1, 404.0], [35.2, 404.0], [35.3, 404.0], [35.4, 404.0], [35.5, 404.0], [35.6, 404.0], [35.7, 404.0], [35.8, 404.0], [35.9, 404.0], [36.0, 404.0], [36.1, 404.0], [36.2, 404.0], [36.3, 404.0], [36.4, 404.0], [36.5, 404.0], [36.6, 404.0], [36.7, 404.0], [36.8, 404.0], [36.9, 404.0], [37.0, 404.0], [37.1, 404.0], [37.2, 404.0], [37.3, 404.0], [37.4, 404.0], [37.5, 404.0], [37.6, 404.0], [37.7, 404.0], [37.8, 404.0], [37.9, 404.0], [38.0, 404.0], [38.1, 404.0], [38.2, 404.0], [38.3, 404.0], [38.4, 404.0], [38.5, 404.0], [38.6, 404.0], [38.7, 404.0], [38.8, 404.0], [38.9, 404.0], [39.0, 404.0], [39.1, 404.0], [39.2, 404.0], [39.3, 404.0], [39.4, 404.0], [39.5, 405.0], [39.6, 405.0], [39.7, 405.0], [39.8, 405.0], [39.9, 405.0], [40.0, 405.0], [40.1, 405.0], [40.2, 405.0], [40.3, 405.0], [40.4, 405.0], [40.5, 405.0], [40.6, 405.0], [40.7, 405.0], [40.8, 405.0], [40.9, 405.0], [41.0, 405.0], [41.1, 406.0], [41.2, 406.0], [41.3, 406.0], [41.4, 406.0], [41.5, 406.0], [41.6, 406.0], [41.7, 406.0], [41.8, 406.0], [41.9, 406.0], [42.0, 406.0], [42.1, 406.0], [42.2, 406.0], [42.3, 406.0], [42.4, 406.0], [42.5, 406.0], [42.6, 406.0], [42.7, 406.0], [42.8, 406.0], [42.9, 406.0], [43.0, 406.0], [43.1, 406.0], [43.2, 406.0], [43.3, 406.0], [43.4, 406.0], [43.5, 406.0], [43.6, 406.0], [43.7, 406.0], [43.8, 406.0], [43.9, 406.0], [44.0, 406.0], [44.1, 406.0], [44.2, 406.0], [44.3, 406.0], [44.4, 406.0], [44.5, 406.0], [44.6, 406.0], [44.7, 406.0], [44.8, 406.0], [44.9, 406.0], [45.0, 406.0], [45.1, 406.0], [45.2, 406.0], [45.3, 406.0], [45.4, 406.0], [45.5, 406.0], [45.6, 406.0], [45.7, 406.0], [45.8, 406.0], [45.9, 406.0], [46.0, 406.0], [46.1, 406.0], [46.2, 406.0], [46.3, 406.0], [46.4, 406.0], [46.5, 407.0], [46.6, 407.0], [46.7, 407.0], [46.8, 407.0], [46.9, 407.0], [47.0, 407.0], [47.1, 407.0], [47.2, 407.0], [47.3, 407.0], [47.4, 407.0], [47.5, 407.0], [47.6, 407.0], [47.7, 407.0], [47.8, 407.0], [47.9, 407.0], [48.0, 407.0], [48.1, 407.0], [48.2, 407.0], [48.3, 407.0], [48.4, 407.0], [48.5, 407.0], [48.6, 407.0], [48.7, 407.0], [48.8, 407.0], [48.9, 407.0], [49.0, 407.0], [49.1, 407.0], [49.2, 407.0], [49.3, 407.0], [49.4, 407.0], [49.5, 407.0], [49.6, 407.0], [49.7, 407.0], [49.8, 407.0], [49.9, 407.0], [50.0, 407.0], [50.1, 407.0], [50.2, 407.0], [50.3, 407.0], [50.4, 407.0], [50.5, 407.0], [50.6, 407.0], [50.7, 407.0], [50.8, 407.0], [50.9, 407.0], [51.0, 407.0], [51.1, 407.0], [51.2, 407.0], [51.3, 407.0], [51.4, 407.0], [51.5, 407.0], [51.6, 407.0], [51.7, 407.0], [51.8, 407.0], [51.9, 407.0], [52.0, 407.0], [52.1, 407.0], [52.2, 407.0], [52.3, 407.0], [52.4, 407.0], [52.5, 407.0], [52.6, 407.0], [52.7, 407.0], [52.8, 407.0], [52.9, 407.0], [53.0, 407.0], [53.1, 407.0], [53.2, 407.0], [53.3, 407.0], [53.4, 407.0], [53.5, 407.0], [53.6, 407.0], [53.7, 407.0], [53.8, 407.0], [53.9, 407.0], [54.0, 407.0], [54.1, 407.0], [54.2, 407.0], [54.3, 407.0], [54.4, 407.0], [54.5, 408.0], [54.6, 408.0], [54.7, 408.0], [54.8, 408.0], [54.9, 408.0], [55.0, 408.0], [55.1, 408.0], [55.2, 408.0], [55.3, 408.0], [55.4, 408.0], [55.5, 408.0], [55.6, 408.0], [55.7, 408.0], [55.8, 408.0], [55.9, 408.0], [56.0, 408.0], [56.1, 408.0], [56.2, 408.0], [56.3, 408.0], [56.4, 408.0], [56.5, 408.0], [56.6, 408.0], [56.7, 408.0], [56.8, 408.0], [56.9, 408.0], [57.0, 408.0], [57.1, 408.0], [57.2, 408.0], [57.3, 408.0], [57.4, 408.0], [57.5, 408.0], [57.6, 408.0], [57.7, 408.0], [57.8, 408.0], [57.9, 408.0], [58.0, 408.0], [58.1, 408.0], [58.2, 408.0], [58.3, 408.0], [58.4, 408.0], [58.5, 408.0], [58.6, 408.0], [58.7, 408.0], [58.8, 408.0], [58.9, 408.0], [59.0, 408.0], [59.1, 408.0], [59.2, 408.0], [59.3, 408.0], [59.4, 408.0], [59.5, 408.0], [59.6, 408.0], [59.7, 408.0], [59.8, 408.0], [59.9, 408.0], [60.0, 408.0], [60.1, 408.0], [60.2, 408.0], [60.3, 408.0], [60.4, 408.0], [60.5, 408.0], [60.6, 408.0], [60.7, 408.0], [60.8, 408.0], [60.9, 408.0], [61.0, 408.0], [61.1, 408.0], [61.2, 408.0], [61.3, 408.0], [61.4, 408.0], [61.5, 408.0], [61.6, 408.0], [61.7, 408.0], [61.8, 408.0], [61.9, 408.0], [62.0, 408.0], [62.1, 408.0], [62.2, 408.0], [62.3, 408.0], [62.4, 408.0], [62.5, 408.0], [62.6, 408.0], [62.7, 408.0], [62.8, 408.0], [62.9, 408.0], [63.0, 408.0], [63.1, 408.0], [63.2, 408.0], [63.3, 408.0], [63.4, 408.0], [63.5, 408.0], [63.6, 408.0], [63.7, 408.0], [63.8, 408.0], [63.9, 408.0], [64.0, 408.0], [64.1, 408.0], [64.2, 408.0], [64.3, 408.0], [64.4, 408.0], [64.5, 408.0], [64.6, 408.0], [64.7, 408.0], [64.8, 408.0], [64.9, 408.0], [65.0, 408.0], [65.1, 408.0], [65.2, 408.0], [65.3, 408.0], [65.4, 408.0], [65.5, 408.0], [65.6, 408.0], [65.7, 408.0], [65.8, 408.0], [65.9, 408.0], [66.0, 409.0], [66.1, 409.0], [66.2, 409.0], [66.3, 409.0], [66.4, 409.0], [66.5, 409.0], [66.6, 409.0], [66.7, 409.0], [66.8, 409.0], [66.9, 409.0], [67.0, 409.0], [67.1, 409.0], [67.2, 409.0], [67.3, 409.0], [67.4, 409.0], [67.5, 409.0], [67.6, 409.0], [67.7, 409.0], [67.8, 409.0], [67.9, 409.0], [68.0, 409.0], [68.1, 409.0], [68.2, 409.0], [68.3, 409.0], [68.4, 409.0], [68.5, 409.0], [68.6, 409.0], [68.7, 409.0], [68.8, 409.0], [68.9, 409.0], [69.0, 409.0], [69.1, 409.0], [69.2, 409.0], [69.3, 409.0], [69.4, 409.0], [69.5, 409.0], [69.6, 409.0], [69.7, 409.0], [69.8, 409.0], [69.9, 409.0], [70.0, 409.0], [70.1, 409.0], [70.2, 409.0], [70.3, 409.0], [70.4, 410.0], [70.5, 410.0], [70.6, 410.0], [70.7, 410.0], [70.8, 410.0], [70.9, 410.0], [71.0, 410.0], [71.1, 410.0], [71.2, 410.0], [71.3, 410.0], [71.4, 411.0], [71.5, 411.0], [71.6, 411.0], [71.7, 411.0], [71.8, 411.0], [71.9, 411.0], [72.0, 411.0], [72.1, 411.0], [72.2, 411.0], [72.3, 413.0], [72.4, 413.0], [72.5, 413.0], [72.6, 413.0], [72.7, 415.0], [72.8, 415.0], [72.9, 415.0], [73.0, 417.0], [73.1, 417.0], [73.2, 417.0], [73.3, 418.0], [73.4, 418.0], [73.5, 418.0], [73.6, 418.0], [73.7, 418.0], [73.8, 418.0], [73.9, 419.0], [74.0, 419.0], [74.1, 419.0], [74.2, 419.0], [74.3, 420.0], [74.4, 420.0], [74.5, 420.0], [74.6, 420.0], [74.7, 420.0], [74.8, 420.0], [74.9, 425.0], [75.0, 425.0], [75.1, 425.0], [75.2, 428.0], [75.3, 428.0], [75.4, 428.0], [75.5, 430.0], [75.6, 430.0], [75.7, 430.0], [75.8, 432.0], [75.9, 432.0], [76.0, 432.0], [76.1, 432.0], [76.2, 433.0], [76.3, 433.0], [76.4, 433.0], [76.5, 433.0], [76.6, 433.0], [76.7, 433.0], [76.8, 439.0], [76.9, 439.0], [77.0, 439.0], [77.1, 439.0], [77.2, 439.0], [77.3, 439.0], [77.4, 439.0], [77.5, 439.0], [77.6, 439.0], [77.7, 439.0], [77.8, 445.0], [77.9, 445.0], [78.0, 445.0], [78.1, 446.0], [78.2, 446.0], [78.3, 446.0], [78.4, 450.0], [78.5, 450.0], [78.6, 450.0], [78.7, 457.0], [78.8, 457.0], [78.9, 457.0], [79.0, 470.0], [79.1, 470.0], [79.2, 470.0], [79.3, 481.0], [79.4, 481.0], [79.5, 481.0], [79.6, 481.0], [79.7, 482.0], [79.8, 482.0], [79.9, 482.0], [80.0, 490.0], [80.1, 490.0], [80.2, 490.0], [80.3, 496.0], [80.4, 496.0], [80.5, 496.0], [80.6, 499.0], [80.7, 499.0], [80.8, 499.0], [80.9, 504.0], [81.0, 504.0], [81.1, 504.0], [81.2, 504.0], [81.3, 504.0], [81.4, 504.0], [81.5, 504.0], [81.6, 506.0], [81.7, 506.0], [81.8, 506.0], [81.9, 508.0], [82.0, 508.0], [82.1, 508.0], [82.2, 509.0], [82.3, 509.0], [82.4, 509.0], [82.5, 509.0], [82.6, 509.0], [82.7, 509.0], [82.8, 509.0], [82.9, 510.0], [83.0, 510.0], [83.1, 510.0], [83.2, 510.0], [83.3, 510.0], [83.4, 510.0], [83.5, 510.0], [83.6, 510.0], [83.7, 510.0], [83.8, 510.0], [83.9, 510.0], [84.0, 510.0], [84.1, 510.0], [84.2, 510.0], [84.3, 510.0], [84.4, 510.0], [84.5, 510.0], [84.6, 510.0], [84.7, 510.0], [84.8, 510.0], [84.9, 510.0], [85.0, 510.0], [85.1, 510.0], [85.2, 510.0], [85.3, 510.0], [85.4, 510.0], [85.5, 510.0], [85.6, 510.0], [85.7, 510.0], [85.8, 510.0], [85.9, 510.0], [86.0, 510.0], [86.1, 510.0], [86.2, 510.0], [86.3, 510.0], [86.4, 510.0], [86.5, 510.0], [86.6, 510.0], [86.7, 510.0], [86.8, 510.0], [86.9, 510.0], [87.0, 511.0], [87.1, 511.0], [87.2, 511.0], [87.3, 511.0], [87.4, 511.0], [87.5, 511.0], [87.6, 511.0], [87.7, 511.0], [87.8, 511.0], [87.9, 511.0], [88.0, 511.0], [88.1, 511.0], [88.2, 511.0], [88.3, 511.0], [88.4, 511.0], [88.5, 511.0], [88.6, 511.0], [88.7, 511.0], [88.8, 511.0], [88.9, 511.0], [89.0, 511.0], [89.1, 511.0], [89.2, 512.0], [89.3, 512.0], [89.4, 512.0], [89.5, 512.0], [89.6, 512.0], [89.7, 512.0], [89.8, 512.0], [89.9, 512.0], [90.0, 512.0], [90.1, 512.0], [90.2, 512.0], [90.3, 512.0], [90.4, 512.0], [90.5, 512.0], [90.6, 512.0], [90.7, 512.0], [90.8, 514.0], [90.9, 514.0], [91.0, 514.0], [91.1, 514.0], [91.2, 514.0], [91.3, 514.0], [91.4, 514.0], [91.5, 515.0], [91.6, 515.0], [91.7, 515.0], [91.8, 517.0], [91.9, 517.0], [92.0, 517.0], [92.1, 521.0], [92.2, 521.0], [92.3, 521.0], [92.4, 527.0], [92.5, 527.0], [92.6, 527.0], [92.7, 555.0], [92.8, 555.0], [92.9, 555.0], [93.0, 573.0], [93.1, 573.0], [93.2, 573.0], [93.3, 573.0], [93.4, 575.0], [93.5, 575.0], [93.6, 575.0], [93.7, 576.0], [93.8, 576.0], [93.9, 576.0], [94.0, 597.0], [94.1, 597.0], [94.2, 597.0], [94.3, 607.0], [94.4, 607.0], [94.5, 607.0], [94.6, 611.0], [94.7, 611.0], [94.8, 611.0], [94.9, 611.0], [95.0, 612.0], [95.1, 612.0], [95.2, 612.0], [95.3, 612.0], [95.4, 612.0], [95.5, 612.0], [95.6, 612.0], [95.7, 612.0], [95.8, 612.0], [95.9, 613.0], [96.0, 613.0], [96.1, 613.0], [96.2, 614.0], [96.3, 614.0], [96.4, 614.0], [96.5, 657.0], [96.6, 657.0], [96.7, 657.0], [96.8, 657.0], [96.9, 713.0], [97.0, 713.0], [97.1, 713.0], [97.2, 715.0], [97.3, 715.0], [97.4, 715.0], [97.5, 715.0], [97.6, 715.0], [97.7, 715.0], [97.8, 762.0], [97.9, 762.0], [98.0, 762.0], [98.1, 818.0], [98.2, 818.0], [98.3, 818.0], [98.4, 818.0], [98.5, 1024.0], [98.6, 1024.0], [98.7, 1024.0], [98.8, 1331.0], [98.9, 1331.0], [99.0, 1331.0], [99.1, 1458.0], [99.2, 1458.0], [99.3, 1458.0], [99.4, 1533.0], [99.5, 1533.0], [99.6, 1533.0], [99.7, 2867.0], [99.8, 2867.0], [99.9, 2867.0], [100.0, 2867.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 146.0, "series": [{"data": [[34500.0, 1.0], [34100.0, 2.0], [37100.0, 1.0], [37300.0, 1.0], [40700.0, 1.0], [39300.0, 1.0], [43300.0, 1.0], [44700.0, 1.0], [49300.0, 1.0], [49500.0, 1.0], [52300.0, 1.0], [55300.0, 1.0], [57100.0, 1.0], [60500.0, 41.0], [60300.0, 1.0], [60700.0, 22.0], [60900.0, 5.0], [62900.0, 1.0], [300.0, 13.0], [400.0, 10.0], [500.0, 29.0], [600.0, 3.0], [5500.0, 1.0], [5400.0, 1.0], [6000.0, 1.0], [6900.0, 1.0], [7300.0, 1.0], [7500.0, 2.0], [7800.0, 1.0], [8800.0, 1.0], [9100.0, 2.0], [8900.0, 1.0], [9500.0, 2.0], [10100.0, 1.0], [10000.0, 1.0], [10600.0, 2.0], [10500.0, 1.0], [10400.0, 1.0], [11100.0, 1.0], [11000.0, 1.0], [10800.0, 1.0], [11400.0, 1.0], [11600.0, 1.0], [11300.0, 2.0], [11800.0, 1.0], [12000.0, 1.0], [12300.0, 1.0], [12800.0, 1.0], [13300.0, 1.0], [13500.0, 1.0], [14100.0, 1.0], [14400.0, 1.0], [14600.0, 1.0], [14900.0, 1.0], [15800.0, 1.0], [15700.0, 1.0], [15600.0, 1.0], [16100.0, 1.0], [16200.0, 1.0], [16000.0, 2.0], [17000.0, 2.0], [16900.0, 1.0], [17200.0, 2.0], [16400.0, 1.0], [16500.0, 1.0], [16800.0, 1.0], [17800.0, 1.0], [18000.0, 1.0], [17700.0, 1.0], [19400.0, 1.0], [18900.0, 1.0], [19300.0, 1.0], [20300.0, 2.0], [19600.0, 2.0], [19500.0, 1.0], [20200.0, 1.0], [20000.0, 1.0], [20500.0, 2.0], [20800.0, 1.0], [21500.0, 1.0], [21200.0, 2.0], [20700.0, 1.0], [22100.0, 1.0], [21800.0, 1.0], [21700.0, 1.0], [22600.0, 2.0], [23600.0, 1.0], [24100.0, 2.0], [23900.0, 1.0], [24000.0, 1.0], [24500.0, 1.0], [26500.0, 1.0], [26600.0, 1.0], [26200.0, 1.0], [27600.0, 2.0], [26800.0, 1.0], [27300.0, 1.0], [28100.0, 1.0], [28500.0, 1.0], [27700.0, 1.0], [30400.0, 1.0], [31000.0, 1.0], [31300.0, 1.0], [32500.0, 2.0], [32400.0, 1.0], [32700.0, 1.0], [33600.0, 1.0], [36000.0, 2.0], [36800.0, 2.0], [38800.0, 1.0], [38400.0, 1.0], [37800.0, 1.0], [41000.0, 1.0], [44800.0, 1.0], [44600.0, 1.0], [44400.0, 1.0], [45200.0, 1.0], [60800.0, 12.0], [60600.0, 40.0], [60400.0, 5.0], [61400.0, 1.0], [61200.0, 1.0], [61000.0, 1.0], [61600.0, 1.0], [61800.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 45.0], [33700.0, 2.0], [36500.0, 1.0], [36700.0, 1.0], [38100.0, 1.0], [36900.0, 1.0], [40300.0, 1.0], [42900.0, 1.0], [43900.0, 1.0], [44300.0, 1.0], [44900.0, 1.0], [49100.0, 1.0], [48700.0, 1.0], [200.0, 8.0], [54900.0, 1.0], [56700.0, 1.0], [60100.0, 74.0], [60300.0, 20.0], [61300.0, 1.0], [5100.0, 2.0], [5600.0, 1.0], [6400.0, 1.0], [6900.0, 1.0], [6700.0, 1.0], [7100.0, 1.0], [7600.0, 1.0], [8400.0, 1.0], [8700.0, 1.0], [8600.0, 1.0], [8900.0, 1.0], [9200.0, 1.0], [9000.0, 1.0], [9100.0, 1.0], [9600.0, 1.0], [9800.0, 1.0], [10200.0, 1.0], [10000.0, 1.0], [10100.0, 1.0], [10700.0, 1.0], [10600.0, 1.0], [10400.0, 1.0], [11000.0, 1.0], [11200.0, 1.0], [10900.0, 2.0], [11500.0, 1.0], [11700.0, 1.0], [12000.0, 1.0], [12400.0, 1.0], [13300.0, 1.0], [12900.0, 1.0], [13700.0, 1.0], [14000.0, 1.0], [14300.0, 1.0], [14500.0, 1.0], [15200.0, 1.0], [15100.0, 1.0], [15600.0, 2.0], [15700.0, 2.0], [16000.0, 2.0], [16100.0, 1.0], [17400.0, 2.0], [16600.0, 2.0], [16900.0, 1.0], [16800.0, 2.0], [16400.0, 1.0], [17700.0, 1.0], [19100.0, 1.0], [18500.0, 1.0], [18900.0, 1.0], [19200.0, 3.0], [20100.0, 2.0], [19900.0, 2.0], [20400.0, 1.0], [19800.0, 1.0], [19600.0, 1.0], [20300.0, 1.0], [21500.0, 1.0], [21400.0, 1.0], [21100.0, 1.0], [21000.0, 1.0], [20800.0, 1.0], [21700.0, 1.0], [22300.0, 2.0], [23300.0, 1.0], [23700.0, 3.0], [23600.0, 1.0], [24000.0, 1.0], [26100.0, 1.0], [26200.0, 1.0], [25800.0, 1.0], [26400.0, 1.0], [27200.0, 2.0], [27300.0, 1.0], [26800.0, 1.0], [27700.0, 1.0], [28100.0, 1.0], [29900.0, 1.0], [30800.0, 1.0], [30900.0, 1.0], [32200.0, 1.0], [32100.0, 2.0], [32400.0, 1.0], [34200.0, 1.0], [33200.0, 1.0], [35600.0, 2.0], [36400.0, 1.0], [38400.0, 1.0], [37400.0, 1.0], [38800.0, 1.0], [40400.0, 1.0], [44400.0, 1.0], [44200.0, 1.0], [51800.0, 1.0], [60200.0, 32.0], [60400.0, 5.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 74.0], [600.0, 8.0], [1300.0, 1.0], [1400.0, 1.0], [700.0, 4.0], [2800.0, 1.0], [1500.0, 1.0], [400.0, 146.0], [200.0, 34.0], [800.0, 1.0], [500.0, 42.0], [1000.0, 1.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 62900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 58.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 248.0, "series": [{"data": [[0.0, 204.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 58.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 116.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 248.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.68528432E12, "maxY": 24.658536585365855, "series": [{"data": [[1.68528468E12, 10.053846153846154], [1.68528438E12, 3.7837837837837833], [1.68528432E12, 1.0], [1.68528528E12, 1.5], [1.68528498E12, 20.0], [1.68528444E12, 5.0], [1.6852851E12, 23.5483870967742], [1.68528504E12, 20.03571428571429], [1.68528474E12, 13.115384615384617], [1.68528516E12, 24.658536585365855], [1.68528486E12, 15.059701492537313], [1.6852848E12, 15.0], [1.6852845E12, 5.1395348837209305], [1.68528492E12, 18.82], [1.68528462E12, 10.0], [1.68528456E12, 8.1], [1.68528522E12, 11.549999999999997]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528528E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 264.0, "minX": 1.0, "maxY": 61099.0, "series": [{"data": [[2.0, 24598.0], [3.0, 25186.666666666668], [4.0, 22932.0], [5.0, 17627.333333333325], [6.0, 28131.833333333332], [7.0, 60558.0], [8.0, 31123.4], [9.0, 32446.0], [10.0, 13550.53086419753], [11.0, 15163.875], [12.0, 42587.666666666664], [13.0, 23227.8], [14.0, 23038.75], [15.0, 38559.477272727265], [16.0, 60544.0], [1.0, 61099.0], [17.0, 60758.5], [18.0, 53725.0], [19.0, 60606.5], [20.0, 60671.883720930244], [21.0, 60635.0], [22.0, 60807.25], [23.0, 59399.75], [24.0, 49568.375], [25.0, 55168.83333333333]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[14.031847133757958, 34861.722929936295]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 24155.666666666668], [3.0, 24783.666666666668], [4.0, 22549.5], [5.0, 17247.699999999997], [6.0, 27728.0], [7.0, 60151.0], [8.0, 30769.2], [9.0, 32004.333333333332], [10.0, 13205.20987654321], [11.0, 14769.0], [12.0, 42237.666666666664], [13.0, 22812.3], [14.0, 22680.5], [15.0, 38155.090909090904], [16.0, 60190.666666666664], [1.0, 60442.0], [17.0, 60250.5], [18.0, 53334.0], [19.0, 60211.0], [20.0, 60198.53488372093], [21.0, 60169.5], [22.0, 60245.75], [23.0, 58877.75], [24.0, 56031.85714285714], [25.0, 56459.41379310345]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[13.964743589743591, 34661.38782051281]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 407.0], [3.0, 374.0], [4.0, 334.0], [5.0, 375.5000000000001], [6.0, 363.16666666666663], [7.0, 264.0], [8.0, 384.4], [9.0, 432.3333333333333], [10.0, 340.5679012345679], [11.0, 402.875], [12.0, 389.0], [13.0, 331.0], [14.0, 643.5], [15.0, 399.2045454545454], [1.0, 397.0], [16.0, 400.0], [17.0, 402.5], [18.0, 426.25], [19.0, 430.8], [20.0, 507.24999999999994], [21.0, 475.25], [22.0, 456.5], [23.0, 510.75], [24.0, 607.0], [25.0, 566.3666666666667]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[14.035031847133755, 421.10828025477707]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6.95, "minX": 1.68528432E12, "maxY": 6351.166666666667, "series": [{"data": [[1.68528468E12, 1747.3166666666666], [1.68528438E12, 952.35], [1.68528432E12, 36.28333333333333], [1.68528528E12, 23.133333333333333], [1.68528498E12, 872.8666666666667], [1.68528444E12, 880.6], [1.6852851E12, 1054.2833333333333], [1.68528504E12, 933.8666666666667], [1.68528474E12, 1827.4666666666667], [1.68528516E12, 1240.2666666666667], [1.68528486E12, 1344.3166666666666], [1.6852848E12, 915.5833333333334], [1.6852845E12, 1063.65], [1.68528492E12, 862.8833333333333], [1.68528462E12, 1623.65], [1.68528456E12, 1025.7333333333333], [1.68528522E12, 200.53333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68528468E12, 6271.016666666666], [1.68528438E12, 1877.25], [1.68528432E12, 6.95], [1.68528528E12, 371.5833333333333], [1.68528498E12, 2879.6666666666665], [1.68528444E12, 2005.2666666666667], [1.6852851E12, 2369.5666666666666], [1.68528504E12, 2902.05], [1.68528474E12, 3333.4166666666665], [1.68528516E12, 4306.333333333333], [1.68528486E12, 3340.8], [1.6852848E12, 2694.133333333333], [1.6852845E12, 2021.7333333333333], [1.68528492E12, 2572.7166666666667], [1.68528462E12, 6351.166666666667], [1.68528456E12, 2136.0833333333335], [1.68528522E12, 2578.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528528E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 327.945945945946, "minX": 1.68528432E12, "maxY": 60724.24999999999, "series": [{"data": [[1.68528468E12, 11766.288888888887], [1.68528438E12, 10455.727272727274], [1.68528498E12, 60699.99999999999], [1.68528444E12, 18138.857142857145], [1.6852851E12, 60724.24999999999], [1.68528504E12, 60634.22222222222], [1.68528474E12, 17214.583333333332], [1.68528516E12, 51716.758620689645], [1.68528486E12, 38559.5], [1.6852848E12, 53360.73333333333], [1.6852845E12, 17221.142857142855], [1.68528492E12, 60649.0], [1.68528462E12, 12350.02857142857], [1.68528456E12, 27301.583333333332], [1.68528522E12, 52796.700000000004]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68528468E12, 10796.348837209302], [1.68528438E12, 10085.181818181818], [1.68528528E12, 60320.0], [1.68528498E12, 60195.26315789473], [1.68528444E12, 17728.166666666664], [1.6852851E12, 60194.36842105263], [1.68528504E12, 60204.66666666667], [1.68528474E12, 18101.08333333333], [1.68528516E12, 54910.555555555555], [1.68528486E12, 38170.13636363636], [1.6852848E12, 47842.58823529412], [1.6852845E12, 16055.785714285712], [1.68528492E12, 60229.73333333334], [1.68528462E12, 13170.162162162163], [1.68528456E12, 25278.083333333336], [1.68528522E12, 52288.5]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68528468E12, 349.8809523809523], [1.68528438E12, 371.46666666666664], [1.68528432E12, 397.0], [1.68528498E12, 425.99999999999994], [1.68528444E12, 373.24999999999994], [1.6852851E12, 636.6521739130434], [1.68528504E12, 519.4000000000001], [1.68528474E12, 392.6666666666667], [1.68528516E12, 487.1538461538462], [1.68528486E12, 416.82608695652175], [1.6852848E12, 405.41176470588243], [1.6852845E12, 367.8666666666666], [1.68528492E12, 507.6315789473683], [1.68528462E12, 327.945945945946], [1.68528456E12, 385.25000000000006]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528528E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 327.86486486486496, "minX": 1.68528432E12, "maxY": 60701.75, "series": [{"data": [[1.68528468E12, 11765.977777777776], [1.68528438E12, 10453.909090909092], [1.68528498E12, 60688.84210526316], [1.68528444E12, 18138.571428571428], [1.6852851E12, 60701.75], [1.68528504E12, 60632.0], [1.68528474E12, 17211.25], [1.68528516E12, 51704.20689655172], [1.68528486E12, 38558.86363636364], [1.6852848E12, 53360.666666666664], [1.6852845E12, 17220.714285714283], [1.68528492E12, 60645.81249999999], [1.68528462E12, 12349.657142857142], [1.68528456E12, 27301.333333333336], [1.68528522E12, 52785.9]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68528468E12, 10796.186046511622], [1.68528438E12, 10085.090909090908], [1.68528528E12, 60320.0], [1.68528498E12, 60195.15789473683], [1.68528444E12, 17728.000000000004], [1.6852851E12, 60194.26315789473], [1.68528504E12, 60204.6111111111], [1.68528474E12, 18100.874999999993], [1.68528516E12, 54910.555555555555], [1.68528486E12, 38170.13636363636], [1.6852848E12, 47842.58823529412], [1.6852845E12, 16055.714285714284], [1.68528492E12, 60229.6], [1.68528462E12, 13169.864864864861], [1.68528456E12, 25277.91666666667], [1.68528522E12, 52288.450000000004]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68528468E12, 349.71428571428567], [1.68528438E12, 371.20000000000005], [1.68528432E12, 381.0], [1.68528498E12, 423.8333333333333], [1.68528444E12, 373.0833333333333], [1.6852851E12, 621.0], [1.68528504E12, 497.0], [1.68528474E12, 390.1333333333333], [1.68528516E12, 478.7307692307693], [1.68528486E12, 414.47826086956525], [1.6852848E12, 404.88235294117646], [1.6852845E12, 367.66666666666674], [1.68528492E12, 496.5789473684211], [1.68528462E12, 327.86486486486496], [1.68528456E12, 385.18749999999994]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528528E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68528432E12, "maxY": 191.9375, "series": [{"data": [[1.68528468E12, 171.40000000000003], [1.68528438E12, 179.9090909090909], [1.68528498E12, 188.4736842105263], [1.68528444E12, 183.28571428571433], [1.6852851E12, 189.04999999999995], [1.68528504E12, 183.66666666666666], [1.68528474E12, 178.33333333333331], [1.68528516E12, 186.03448275862067], [1.68528486E12, 174.13636363636368], [1.6852848E12, 152.39999999999998], [1.6852845E12, 174.6428571428571], [1.68528492E12, 191.9375], [1.68528462E12, 168.25714285714287], [1.68528456E12, 181.83333333333331], [1.68528522E12, 178.1]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68528468E12, 0.0], [1.68528438E12, 0.0], [1.68528528E12, 0.0], [1.68528498E12, 0.0], [1.68528444E12, 0.0], [1.6852851E12, 0.0], [1.68528504E12, 0.0], [1.68528474E12, 0.0], [1.68528516E12, 0.0], [1.68528486E12, 0.0], [1.6852848E12, 0.0], [1.6852845E12, 0.0], [1.68528492E12, 0.0], [1.68528462E12, 0.0], [1.68528456E12, 0.0], [1.68528522E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68528468E12, 173.02380952380955], [1.68528438E12, 185.33333333333331], [1.68528432E12, 158.0], [1.68528498E12, 183.66666666666666], [1.68528444E12, 176.33333333333334], [1.6852851E12, 180.6086956521739], [1.68528504E12, 189.04999999999995], [1.68528474E12, 167.86666666666665], [1.68528516E12, 184.73076923076925], [1.68528486E12, 179.7391304347826], [1.6852848E12, 182.0], [1.6852845E12, 176.4666666666667], [1.68528492E12, 188.4736842105263], [1.68528462E12, 161.10810810810807], [1.68528456E12, 190.5625]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528528E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 215.0, "minX": 1.68528432E12, "maxY": 49184.0, "series": [{"data": [[1.68528468E12, 49184.0], [1.68528438E12, 15615.0], [1.68528432E12, 397.0], [1.68528498E12, 607.0], [1.68528444E12, 21729.0], [1.6852851E12, 2867.0], [1.68528504E12, 715.0], [1.68528474E12, 36769.0], [1.68528516E12, 715.0], [1.68528486E12, 15713.0], [1.6852848E12, 9670.0], [1.6852845E12, 21500.0], [1.68528492E12, 1458.0], [1.68528462E12, 44472.0], [1.68528456E12, 34294.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68528468E12, 43127.4], [1.68528438E12, 12102.500000000002], [1.68528432E12, 397.0], [1.68528498E12, 560.2], [1.68528444E12, 20339.0], [1.6852851E12, 1208.2000000000005], [1.68528504E12, 703.1000000000003], [1.68528474E12, 27734.300000000007], [1.68528516E12, 625.5], [1.68528486E12, 14281.200000000003], [1.6852848E12, 8348.2], [1.6852845E12, 19868.0], [1.68528492E12, 762.0], [1.68528462E12, 43763.6], [1.68528456E12, 30202.000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68528468E12, 49184.0], [1.68528438E12, 15615.0], [1.68528432E12, 397.0], [1.68528498E12, 607.0], [1.68528444E12, 21729.0], [1.6852851E12, 2867.0], [1.68528504E12, 715.0], [1.68528474E12, 36769.0], [1.68528516E12, 715.0], [1.68528486E12, 15713.0], [1.6852848E12, 9670.0], [1.6852845E12, 21500.0], [1.68528492E12, 1458.0], [1.68528462E12, 44472.0], [1.68528456E12, 34294.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68528468E12, 46663.99999999999], [1.68528438E12, 14805.799999999997], [1.68528432E12, 397.0], [1.68528498E12, 607.0], [1.68528444E12, 21419.0], [1.6852851E12, 2559.7999999999956], [1.68528504E12, 714.9], [1.68528474E12, 34826.899999999994], [1.68528516E12, 694.6999999999999], [1.68528486E12, 15672.4], [1.6852848E12, 9577.899999999998], [1.6852845E12, 20742.5], [1.68528492E12, 1458.0], [1.68528462E12, 44332.8], [1.68528456E12, 33392.2]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68528468E12, 219.0], [1.68528438E12, 240.0], [1.68528432E12, 397.0], [1.68528498E12, 313.0], [1.68528444E12, 222.0], [1.6852851E12, 376.0], [1.68528504E12, 308.0], [1.68528474E12, 215.0], [1.68528516E12, 305.0], [1.68528486E12, 307.0], [1.6852848E12, 306.0], [1.6852845E12, 262.0], [1.68528492E12, 377.0], [1.68528462E12, 215.0], [1.68528456E12, 264.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68528468E12, 408.0], [1.68528438E12, 409.5], [1.68528432E12, 397.0], [1.68528498E12, 406.0], [1.68528444E12, 4672.5], [1.6852851E12, 490.0], [1.68528504E12, 510.5], [1.68528474E12, 422.5], [1.68528516E12, 504.5], [1.68528486E12, 419.0], [1.6852848E12, 408.0], [1.6852845E12, 506.0], [1.68528492E12, 428.0], [1.68528462E12, 409.0], [1.68528456E12, 425.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528516E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 1.0, "maxY": 60155.0, "series": [{"data": [[1.0, 410.0], [2.0, 451.5], [4.0, 510.0], [8.0, 232.0], [5.0, 507.5], [3.0, 414.5], [6.0, 4746.5], [7.0, 14510.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 60122.5], [8.0, 109.0], [4.0, 250.0], [1.0, 60155.0], [5.0, 60131.0], [6.0, 167.0], [3.0, 60120.0], [7.0, 408.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 1.0, "maxY": 60155.0, "series": [{"data": [[1.0, 409.0], [2.0, 441.0], [4.0, 510.0], [8.0, 232.0], [5.0, 419.0], [3.0, 410.5], [6.0, 4746.0], [7.0, 14510.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 60122.5], [8.0, 109.0], [4.0, 250.0], [1.0, 60155.0], [5.0, 60131.0], [6.0, 167.0], [3.0, 60120.0], [7.0, 408.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68528432E12, "maxY": 1.4333333333333333, "series": [{"data": [[1.68528468E12, 1.4333333333333333], [1.68528438E12, 0.5166666666666667], [1.68528432E12, 0.016666666666666666], [1.68528498E12, 0.6166666666666667], [1.68528444E12, 0.4], [1.6852851E12, 0.75], [1.68528504E12, 0.6333333333333333], [1.68528474E12, 0.9833333333333333], [1.68528516E12, 0.85], [1.68528486E12, 0.7666666666666667], [1.6852848E12, 0.55], [1.6852845E12, 0.4666666666666667], [1.68528492E12, 0.6333333333333333], [1.68528462E12, 1.2333333333333334], [1.68528456E12, 0.55], [1.68528522E12, 0.03333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528522E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68528432E12, "maxY": 0.9, "series": [{"data": [[1.68528468E12, 0.5166666666666667], [1.68528438E12, 0.43333333333333335], [1.68528432E12, 0.016666666666666666], [1.68528498E12, 0.3], [1.68528444E12, 0.4], [1.6852851E12, 0.38333333333333336], [1.68528504E12, 0.3333333333333333], [1.68528474E12, 0.8], [1.68528516E12, 0.43333333333333335], [1.68528486E12, 0.55], [1.6852848E12, 0.35], [1.6852845E12, 0.48333333333333334], [1.68528492E12, 0.31666666666666665], [1.68528462E12, 0.5166666666666667], [1.68528456E12, 0.4666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68528516E12, 0.06666666666666667], [1.68528522E12, 0.13333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68528468E12, 0.9], [1.68528462E12, 0.7166666666666667], [1.68528474E12, 0.1]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68528516E12, 0.38333333333333336], [1.68528486E12, 0.2], [1.6852848E12, 0.21666666666666667], [1.68528528E12, 0.03333333333333333], [1.68528498E12, 0.31666666666666665], [1.68528492E12, 0.25], [1.6852851E12, 0.31666666666666665], [1.68528504E12, 0.3], [1.68528522E12, 0.2]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68528528E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68528432E12, "maxY": 0.7333333333333333, "series": [{"data": [[1.68528468E12, 0.2833333333333333], [1.68528438E12, 0.25], [1.68528432E12, 0.016666666666666666], [1.68528498E12, 0.3], [1.68528444E12, 0.2], [1.6852851E12, 0.38333333333333336], [1.68528504E12, 0.3333333333333333], [1.68528474E12, 0.43333333333333335], [1.68528516E12, 0.43333333333333335], [1.68528486E12, 0.38333333333333336], [1.6852848E12, 0.2833333333333333], [1.6852845E12, 0.25], [1.68528492E12, 0.31666666666666665], [1.68528462E12, 0.26666666666666666], [1.68528456E12, 0.26666666666666666]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68528468E12, 0.4166666666666667], [1.68528462E12, 0.35], [1.68528474E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68528468E12, 0.48333333333333334], [1.68528516E12, 0.45], [1.68528486E12, 0.2], [1.6852848E12, 0.21666666666666667], [1.68528528E12, 0.03333333333333333], [1.68528498E12, 0.31666666666666665], [1.68528492E12, 0.25], [1.68528462E12, 0.36666666666666664], [1.6852851E12, 0.31666666666666665], [1.68528504E12, 0.3], [1.68528474E12, 0.03333333333333333], [1.68528522E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68528468E12, 0.016666666666666666], [1.68528516E12, 0.03333333333333333], [1.68528438E12, 0.18333333333333332], [1.68528486E12, 0.16666666666666666], [1.6852848E12, 0.03333333333333333], [1.6852845E12, 0.23333333333333334], [1.68528444E12, 0.23333333333333334], [1.68528462E12, 0.18333333333333332], [1.68528456E12, 0.2], [1.68528474E12, 0.23333333333333334]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68528468E12, 0.7333333333333333], [1.68528516E12, 0.45], [1.68528486E12, 0.2], [1.6852848E12, 0.21666666666666667], [1.68528498E12, 0.31666666666666665], [1.68528492E12, 0.26666666666666666], [1.68528462E12, 0.4], [1.6852851E12, 0.3333333333333333], [1.68528504E12, 0.3], [1.68528474E12, 0.16666666666666666], [1.68528522E12, 0.3333333333333333]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68528468E12, 0.23333333333333334], [1.68528438E12, 0.18333333333333332], [1.68528486E12, 0.16666666666666666], [1.6852848E12, 0.06666666666666667], [1.6852845E12, 0.23333333333333334], [1.68528444E12, 0.2], [1.68528462E12, 0.25], [1.68528456E12, 0.2], [1.68528474E12, 0.36666666666666664]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528528E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68528432E12, "maxY": 1.6333333333333333, "series": [{"data": [[1.68528468E12, 0.5333333333333333], [1.68528438E12, 0.6166666666666667], [1.68528432E12, 0.016666666666666666], [1.68528498E12, 0.3], [1.68528444E12, 0.6333333333333333], [1.6852851E12, 0.38333333333333336], [1.68528504E12, 0.3333333333333333], [1.68528474E12, 1.0333333333333334], [1.68528516E12, 0.4666666666666667], [1.68528486E12, 0.7166666666666667], [1.6852848E12, 0.38333333333333336], [1.6852845E12, 0.7166666666666667], [1.68528492E12, 0.31666666666666665], [1.68528462E12, 0.7], [1.68528456E12, 0.6666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68528468E12, 1.6333333333333333], [1.68528516E12, 0.9], [1.68528486E12, 0.4], [1.6852848E12, 0.43333333333333335], [1.68528528E12, 0.03333333333333333], [1.68528498E12, 0.6333333333333333], [1.68528492E12, 0.5166666666666667], [1.68528462E12, 1.1166666666666667], [1.6852851E12, 0.65], [1.68528504E12, 0.6], [1.68528474E12, 0.26666666666666666], [1.68528522E12, 0.6666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68528528E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

