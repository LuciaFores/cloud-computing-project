/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 113.0, "minX": 0.0, "maxY": 60378.0, "series": [{"data": [[0.0, 239.0], [0.1, 239.0], [0.2, 242.0], [0.3, 242.0], [0.4, 243.0], [0.5, 243.0], [0.6, 251.0], [0.7, 251.0], [0.8, 339.0], [0.9, 339.0], [1.0, 340.0], [1.1, 340.0], [1.2, 340.0], [1.3, 340.0], [1.4, 341.0], [1.5, 341.0], [1.6, 341.0], [1.7, 341.0], [1.8, 342.0], [1.9, 342.0], [2.0, 342.0], [2.1, 342.0], [2.2, 342.0], [2.3, 342.0], [2.4, 342.0], [2.5, 342.0], [2.6, 342.0], [2.7, 342.0], [2.8, 342.0], [2.9, 343.0], [3.0, 343.0], [3.1, 343.0], [3.2, 343.0], [3.3, 343.0], [3.4, 343.0], [3.5, 343.0], [3.6, 343.0], [3.7, 344.0], [3.8, 344.0], [3.9, 344.0], [4.0, 344.0], [4.1, 344.0], [4.2, 344.0], [4.3, 345.0], [4.4, 345.0], [4.5, 345.0], [4.6, 345.0], [4.7, 345.0], [4.8, 345.0], [4.9, 345.0], [5.0, 345.0], [5.1, 345.0], [5.2, 345.0], [5.3, 345.0], [5.4, 345.0], [5.5, 345.0], [5.6, 346.0], [5.7, 346.0], [5.8, 346.0], [5.9, 346.0], [6.0, 346.0], [6.1, 346.0], [6.2, 347.0], [6.3, 347.0], [6.4, 348.0], [6.5, 348.0], [6.6, 348.0], [6.7, 348.0], [6.8, 349.0], [6.9, 349.0], [7.0, 349.0], [7.1, 349.0], [7.2, 350.0], [7.3, 350.0], [7.4, 351.0], [7.5, 351.0], [7.6, 352.0], [7.7, 352.0], [7.8, 352.0], [7.9, 352.0], [8.0, 352.0], [8.1, 353.0], [8.2, 353.0], [8.3, 353.0], [8.4, 353.0], [8.5, 354.0], [8.6, 354.0], [8.7, 354.0], [8.8, 354.0], [8.9, 355.0], [9.0, 355.0], [9.1, 356.0], [9.2, 356.0], [9.3, 356.0], [9.4, 356.0], [9.5, 356.0], [9.6, 356.0], [9.7, 356.0], [9.8, 356.0], [9.9, 357.0], [10.0, 357.0], [10.1, 358.0], [10.2, 358.0], [10.3, 358.0], [10.4, 358.0], [10.5, 358.0], [10.6, 358.0], [10.7, 358.0], [10.8, 359.0], [10.9, 359.0], [11.0, 359.0], [11.1, 359.0], [11.2, 359.0], [11.3, 359.0], [11.4, 360.0], [11.5, 360.0], [11.6, 360.0], [11.7, 360.0], [11.8, 360.0], [11.9, 360.0], [12.0, 360.0], [12.1, 360.0], [12.2, 360.0], [12.3, 360.0], [12.4, 360.0], [12.5, 360.0], [12.6, 360.0], [12.7, 361.0], [12.8, 361.0], [12.9, 361.0], [13.0, 361.0], [13.1, 361.0], [13.2, 361.0], [13.3, 361.0], [13.4, 361.0], [13.5, 362.0], [13.6, 362.0], [13.7, 362.0], [13.8, 362.0], [13.9, 363.0], [14.0, 363.0], [14.1, 363.0], [14.2, 363.0], [14.3, 364.0], [14.4, 364.0], [14.5, 364.0], [14.6, 364.0], [14.7, 364.0], [14.8, 364.0], [14.9, 365.0], [15.0, 365.0], [15.1, 365.0], [15.2, 365.0], [15.3, 365.0], [15.4, 365.0], [15.5, 365.0], [15.6, 365.0], [15.7, 365.0], [15.8, 366.0], [15.9, 366.0], [16.0, 367.0], [16.1, 367.0], [16.2, 369.0], [16.3, 369.0], [16.4, 370.0], [16.5, 370.0], [16.6, 372.0], [16.7, 372.0], [16.8, 373.0], [16.9, 373.0], [17.0, 376.0], [17.1, 376.0], [17.2, 378.0], [17.3, 378.0], [17.4, 379.0], [17.5, 379.0], [17.6, 380.0], [17.7, 380.0], [17.8, 380.0], [17.9, 381.0], [18.0, 381.0], [18.1, 382.0], [18.2, 382.0], [18.3, 382.0], [18.4, 382.0], [18.5, 383.0], [18.6, 383.0], [18.7, 385.0], [18.8, 385.0], [18.9, 385.0], [19.0, 385.0], [19.1, 387.0], [19.2, 387.0], [19.3, 394.0], [19.4, 394.0], [19.5, 396.0], [19.6, 396.0], [19.7, 397.0], [19.8, 397.0], [19.9, 401.0], [20.0, 401.0], [20.1, 404.0], [20.2, 407.0], [20.3, 407.0], [20.4, 408.0], [20.5, 408.0], [20.6, 416.0], [20.7, 416.0], [20.8, 423.0], [20.9, 423.0], [21.0, 445.0], [21.1, 445.0], [21.2, 459.0], [21.3, 459.0], [21.4, 469.0], [21.5, 469.0], [21.6, 471.0], [21.7, 471.0], [21.8, 517.0], [21.9, 517.0], [22.0, 526.0], [22.1, 526.0], [22.2, 553.0], [22.3, 553.0], [22.4, 557.0], [22.5, 557.0], [22.6, 561.0], [22.7, 568.0], [22.8, 568.0], [22.9, 582.0], [23.0, 582.0], [23.1, 594.0], [23.2, 594.0], [23.3, 594.0], [23.4, 594.0], [23.5, 642.0], [23.6, 642.0], [23.7, 659.0], [23.8, 659.0], [23.9, 735.0], [24.0, 735.0], [24.1, 746.0], [24.2, 746.0], [24.3, 836.0], [24.4, 836.0], [24.5, 940.0], [24.6, 940.0], [24.7, 1747.0], [24.8, 1747.0], [24.9, 4743.0], [25.0, 4743.0], [25.1, 5128.0], [25.2, 5283.0], [25.3, 5283.0], [25.4, 5317.0], [25.5, 5317.0], [25.6, 5320.0], [25.7, 5320.0], [25.8, 5343.0], [25.9, 5343.0], [26.0, 5390.0], [26.1, 5390.0], [26.2, 5448.0], [26.3, 5448.0], [26.4, 5546.0], [26.5, 5546.0], [26.6, 5574.0], [26.7, 5574.0], [26.8, 5931.0], [26.9, 5931.0], [27.0, 5964.0], [27.1, 5964.0], [27.2, 6272.0], [27.3, 6272.0], [27.4, 6290.0], [27.5, 6290.0], [27.6, 6301.0], [27.7, 6416.0], [27.8, 6416.0], [27.9, 6440.0], [28.0, 6440.0], [28.1, 6497.0], [28.2, 6497.0], [28.3, 6513.0], [28.4, 6513.0], [28.5, 6579.0], [28.6, 6579.0], [28.7, 6624.0], [28.8, 6624.0], [28.9, 6734.0], [29.0, 6734.0], [29.1, 6800.0], [29.2, 6800.0], [29.3, 6842.0], [29.4, 6842.0], [29.5, 6961.0], [29.6, 6961.0], [29.7, 7148.0], [29.8, 7148.0], [29.9, 7222.0], [30.0, 7222.0], [30.1, 7355.0], [30.2, 7396.0], [30.3, 7396.0], [30.4, 7510.0], [30.5, 7510.0], [30.6, 7855.0], [30.7, 7855.0], [30.8, 8195.0], [30.9, 8195.0], [31.0, 8371.0], [31.1, 8371.0], [31.2, 8672.0], [31.3, 8672.0], [31.4, 8822.0], [31.5, 8822.0], [31.6, 8952.0], [31.7, 8952.0], [31.8, 9005.0], [31.9, 9005.0], [32.0, 9039.0], [32.1, 9039.0], [32.2, 9056.0], [32.3, 9056.0], [32.4, 9125.0], [32.5, 9125.0], [32.6, 9149.0], [32.7, 9155.0], [32.8, 9155.0], [32.9, 9480.0], [33.0, 9480.0], [33.1, 9565.0], [33.2, 9565.0], [33.3, 9573.0], [33.4, 9573.0], [33.5, 9581.0], [33.6, 9581.0], [33.7, 9594.0], [33.8, 9594.0], [33.9, 9817.0], [34.0, 9817.0], [34.1, 9889.0], [34.2, 9889.0], [34.3, 9958.0], [34.4, 9958.0], [34.5, 10123.0], [34.6, 10123.0], [34.7, 10154.0], [34.8, 10154.0], [34.9, 10367.0], [35.0, 10367.0], [35.1, 10439.0], [35.2, 10532.0], [35.3, 10532.0], [35.4, 10844.0], [35.5, 10844.0], [35.6, 11118.0], [35.7, 11118.0], [35.8, 11338.0], [35.9, 11338.0], [36.0, 11507.0], [36.1, 11507.0], [36.2, 11756.0], [36.3, 11756.0], [36.4, 11814.0], [36.5, 11814.0], [36.6, 11963.0], [36.7, 11963.0], [36.8, 12001.0], [36.9, 12001.0], [37.0, 12159.0], [37.1, 12159.0], [37.2, 12255.0], [37.3, 12255.0], [37.4, 12290.0], [37.5, 12290.0], [37.6, 12380.0], [37.7, 12396.0], [37.8, 12396.0], [37.9, 12400.0], [38.0, 12400.0], [38.1, 12413.0], [38.2, 12413.0], [38.3, 12441.0], [38.4, 12441.0], [38.5, 12497.0], [38.6, 12497.0], [38.7, 12566.0], [38.8, 12566.0], [38.9, 12573.0], [39.0, 12573.0], [39.1, 12710.0], [39.2, 12710.0], [39.3, 12719.0], [39.4, 12719.0], [39.5, 12981.0], [39.6, 12981.0], [39.7, 12994.0], [39.8, 12994.0], [39.9, 13232.0], [40.0, 13232.0], [40.1, 13235.0], [40.2, 13561.0], [40.3, 13561.0], [40.4, 13619.0], [40.5, 13619.0], [40.6, 13785.0], [40.7, 13785.0], [40.8, 13790.0], [40.9, 13790.0], [41.0, 13854.0], [41.1, 13854.0], [41.2, 14025.0], [41.3, 14025.0], [41.4, 14264.0], [41.5, 14264.0], [41.6, 14298.0], [41.7, 14298.0], [41.8, 14446.0], [41.9, 14446.0], [42.0, 14565.0], [42.1, 14565.0], [42.2, 14902.0], [42.3, 14902.0], [42.4, 14954.0], [42.5, 14954.0], [42.6, 14990.0], [42.7, 14990.0], [42.8, 14990.0], [42.9, 15078.0], [43.0, 15078.0], [43.1, 15097.0], [43.2, 15097.0], [43.3, 15202.0], [43.4, 15202.0], [43.5, 15212.0], [43.6, 15212.0], [43.7, 15290.0], [43.8, 15290.0], [43.9, 15317.0], [44.0, 15317.0], [44.1, 15360.0], [44.2, 15360.0], [44.3, 15385.0], [44.4, 15385.0], [44.5, 15497.0], [44.6, 15497.0], [44.7, 15754.0], [44.8, 15754.0], [44.9, 15767.0], [45.0, 15767.0], [45.1, 15902.0], [45.2, 16073.0], [45.3, 16073.0], [45.4, 16105.0], [45.5, 16105.0], [45.6, 16126.0], [45.7, 16126.0], [45.8, 16127.0], [45.9, 16127.0], [46.0, 16141.0], [46.1, 16141.0], [46.2, 16171.0], [46.3, 16171.0], [46.4, 16217.0], [46.5, 16217.0], [46.6, 16408.0], [46.7, 16408.0], [46.8, 16579.0], [46.9, 16579.0], [47.0, 16651.0], [47.1, 16651.0], [47.2, 17166.0], [47.3, 17166.0], [47.4, 17282.0], [47.5, 17282.0], [47.6, 17284.0], [47.7, 17286.0], [47.8, 17286.0], [47.9, 17334.0], [48.0, 17334.0], [48.1, 17483.0], [48.2, 17483.0], [48.3, 17588.0], [48.4, 17588.0], [48.5, 17595.0], [48.6, 17595.0], [48.7, 17639.0], [48.8, 17639.0], [48.9, 17667.0], [49.0, 17667.0], [49.1, 17694.0], [49.2, 17694.0], [49.3, 17772.0], [49.4, 17772.0], [49.5, 17959.0], [49.6, 17959.0], [49.7, 18028.0], [49.8, 18028.0], [49.9, 18092.0], [50.0, 18092.0], [50.1, 18123.0], [50.2, 18247.0], [50.3, 18247.0], [50.4, 18258.0], [50.5, 18258.0], [50.6, 18381.0], [50.7, 18381.0], [50.8, 18386.0], [50.9, 18386.0], [51.0, 18473.0], [51.1, 18473.0], [51.2, 18478.0], [51.3, 18478.0], [51.4, 18479.0], [51.5, 18479.0], [51.6, 18624.0], [51.7, 18624.0], [51.8, 18645.0], [51.9, 18645.0], [52.0, 18652.0], [52.1, 18652.0], [52.2, 19056.0], [52.3, 19056.0], [52.4, 19147.0], [52.5, 19147.0], [52.6, 19182.0], [52.7, 19341.0], [52.8, 19341.0], [52.9, 19420.0], [53.0, 19420.0], [53.1, 19470.0], [53.2, 19470.0], [53.3, 19775.0], [53.4, 19775.0], [53.5, 19780.0], [53.6, 19780.0], [53.7, 19956.0], [53.8, 19956.0], [53.9, 19999.0], [54.0, 19999.0], [54.1, 20028.0], [54.2, 20028.0], [54.3, 20061.0], [54.4, 20061.0], [54.5, 20095.0], [54.6, 20095.0], [54.7, 20151.0], [54.8, 20151.0], [54.9, 20165.0], [55.0, 20165.0], [55.1, 20194.0], [55.2, 20203.0], [55.3, 20203.0], [55.4, 20271.0], [55.5, 20271.0], [55.6, 20280.0], [55.7, 20280.0], [55.8, 20524.0], [55.9, 20524.0], [56.0, 20561.0], [56.1, 20561.0], [56.2, 20562.0], [56.3, 20562.0], [56.4, 20589.0], [56.5, 20589.0], [56.6, 20935.0], [56.7, 20935.0], [56.8, 21062.0], [56.9, 21062.0], [57.0, 21087.0], [57.1, 21087.0], [57.2, 21111.0], [57.3, 21111.0], [57.4, 21250.0], [57.5, 21250.0], [57.6, 21319.0], [57.7, 21324.0], [57.8, 21324.0], [57.9, 21337.0], [58.0, 21337.0], [58.1, 21511.0], [58.2, 21511.0], [58.3, 21539.0], [58.4, 21539.0], [58.5, 21690.0], [58.6, 21690.0], [58.7, 21724.0], [58.8, 21724.0], [58.9, 21738.0], [59.0, 21738.0], [59.1, 21766.0], [59.2, 21766.0], [59.3, 21852.0], [59.4, 21852.0], [59.5, 21857.0], [59.6, 21857.0], [59.7, 22044.0], [59.8, 22044.0], [59.9, 22085.0], [60.0, 22085.0], [60.1, 22166.0], [60.2, 22371.0], [60.3, 22371.0], [60.4, 22392.0], [60.5, 22392.0], [60.6, 22535.0], [60.7, 22535.0], [60.8, 22540.0], [60.9, 22540.0], [61.0, 22662.0], [61.1, 22662.0], [61.2, 22684.0], [61.3, 22684.0], [61.4, 22742.0], [61.5, 22742.0], [61.6, 22817.0], [61.7, 22817.0], [61.8, 22829.0], [61.9, 22829.0], [62.0, 22868.0], [62.1, 22868.0], [62.2, 22887.0], [62.3, 22887.0], [62.4, 22942.0], [62.5, 22942.0], [62.6, 22949.0], [62.7, 23092.0], [62.8, 23092.0], [62.9, 23105.0], [63.0, 23105.0], [63.1, 23179.0], [63.2, 23179.0], [63.3, 23225.0], [63.4, 23225.0], [63.5, 23265.0], [63.6, 23265.0], [63.7, 23293.0], [63.8, 23293.0], [63.9, 23410.0], [64.0, 23410.0], [64.1, 23447.0], [64.2, 23447.0], [64.3, 23469.0], [64.4, 23469.0], [64.5, 23479.0], [64.6, 23479.0], [64.7, 23556.0], [64.8, 23556.0], [64.9, 23566.0], [65.0, 23566.0], [65.1, 23627.0], [65.2, 23658.0], [65.3, 23658.0], [65.4, 23902.0], [65.5, 23902.0], [65.6, 23965.0], [65.7, 23965.0], [65.8, 23967.0], [65.9, 23967.0], [66.0, 24006.0], [66.1, 24006.0], [66.2, 24030.0], [66.3, 24030.0], [66.4, 24141.0], [66.5, 24141.0], [66.6, 24162.0], [66.7, 24162.0], [66.8, 24411.0], [66.9, 24411.0], [67.0, 24412.0], [67.1, 24412.0], [67.2, 24509.0], [67.3, 24509.0], [67.4, 24511.0], [67.5, 24511.0], [67.6, 24536.0], [67.7, 24587.0], [67.8, 24587.0], [67.9, 24644.0], [68.0, 24644.0], [68.1, 24784.0], [68.2, 24784.0], [68.3, 25005.0], [68.4, 25005.0], [68.5, 25112.0], [68.6, 25112.0], [68.7, 25461.0], [68.8, 25461.0], [68.9, 25671.0], [69.0, 25671.0], [69.1, 25706.0], [69.2, 25706.0], [69.3, 25749.0], [69.4, 25749.0], [69.5, 25786.0], [69.6, 25786.0], [69.7, 25837.0], [69.8, 25837.0], [69.9, 25856.0], [70.0, 25856.0], [70.1, 26020.0], [70.2, 26060.0], [70.3, 26060.0], [70.4, 26150.0], [70.5, 26150.0], [70.6, 26204.0], [70.7, 26204.0], [70.8, 26222.0], [70.9, 26222.0], [71.0, 26274.0], [71.1, 26274.0], [71.2, 26371.0], [71.3, 26371.0], [71.4, 26385.0], [71.5, 26385.0], [71.6, 26428.0], [71.7, 26428.0], [71.8, 26480.0], [71.9, 26480.0], [72.0, 26645.0], [72.1, 26645.0], [72.2, 26671.0], [72.3, 26671.0], [72.4, 27069.0], [72.5, 27069.0], [72.6, 27098.0], [72.7, 27104.0], [72.8, 27104.0], [72.9, 27127.0], [73.0, 27127.0], [73.1, 27395.0], [73.2, 27395.0], [73.3, 27475.0], [73.4, 27475.0], [73.5, 27720.0], [73.6, 27720.0], [73.7, 27724.0], [73.8, 27724.0], [73.9, 27754.0], [74.0, 27754.0], [74.1, 28024.0], [74.2, 28024.0], [74.3, 28114.0], [74.4, 28114.0], [74.5, 28141.0], [74.6, 28141.0], [74.7, 28234.0], [74.8, 28234.0], [74.9, 28276.0], [75.0, 28276.0], [75.1, 28333.0], [75.2, 28398.0], [75.3, 28398.0], [75.4, 28530.0], [75.5, 28530.0], [75.6, 28635.0], [75.7, 28635.0], [75.8, 28771.0], [75.9, 28771.0], [76.0, 28896.0], [76.1, 28896.0], [76.2, 28993.0], [76.3, 28993.0], [76.4, 29160.0], [76.5, 29160.0], [76.6, 29168.0], [76.7, 29168.0], [76.8, 29200.0], [76.9, 29200.0], [77.0, 29270.0], [77.1, 29270.0], [77.2, 29287.0], [77.3, 29287.0], [77.4, 29498.0], [77.5, 29498.0], [77.6, 29808.0], [77.7, 29840.0], [77.8, 29840.0], [77.9, 29842.0], [78.0, 29842.0], [78.1, 30009.0], [78.2, 30009.0], [78.3, 30182.0], [78.4, 30182.0], [78.5, 30400.0], [78.6, 30400.0], [78.7, 30418.0], [78.8, 30418.0], [78.9, 30443.0], [79.0, 30443.0], [79.1, 30643.0], [79.2, 30643.0], [79.3, 30705.0], [79.4, 30705.0], [79.5, 30826.0], [79.6, 30826.0], [79.7, 30836.0], [79.8, 30836.0], [79.9, 30999.0], [80.0, 30999.0], [80.1, 31080.0], [80.2, 31496.0], [80.3, 31496.0], [80.4, 31541.0], [80.5, 31541.0], [80.6, 31569.0], [80.7, 31569.0], [80.8, 31887.0], [80.9, 31887.0], [81.0, 32023.0], [81.1, 32023.0], [81.2, 32144.0], [81.3, 32144.0], [81.4, 32376.0], [81.5, 32376.0], [81.6, 32610.0], [81.7, 32610.0], [81.8, 32729.0], [81.9, 32729.0], [82.0, 32777.0], [82.1, 32777.0], [82.2, 33090.0], [82.3, 33090.0], [82.4, 33275.0], [82.5, 33275.0], [82.6, 33510.0], [82.7, 34052.0], [82.8, 34052.0], [82.9, 34095.0], [83.0, 34095.0], [83.1, 34375.0], [83.2, 34375.0], [83.3, 34428.0], [83.4, 34428.0], [83.5, 34709.0], [83.6, 34709.0], [83.7, 34757.0], [83.8, 34757.0], [83.9, 34876.0], [84.0, 34876.0], [84.1, 35240.0], [84.2, 35240.0], [84.3, 35264.0], [84.4, 35264.0], [84.5, 35554.0], [84.6, 35554.0], [84.7, 35652.0], [84.8, 35652.0], [84.9, 35705.0], [85.0, 35705.0], [85.1, 35731.0], [85.2, 36360.0], [85.3, 36360.0], [85.4, 36824.0], [85.5, 36824.0], [85.6, 36827.0], [85.7, 36827.0], [85.8, 36843.0], [85.9, 36843.0], [86.0, 37644.0], [86.1, 37644.0], [86.2, 37835.0], [86.3, 37835.0], [86.4, 37871.0], [86.5, 37871.0], [86.6, 37882.0], [86.7, 37882.0], [86.8, 38233.0], [86.9, 38233.0], [87.0, 38303.0], [87.1, 38303.0], [87.2, 38339.0], [87.3, 38339.0], [87.4, 38591.0], [87.5, 38591.0], [87.6, 38612.0], [87.7, 38929.0], [87.8, 38929.0], [87.9, 39347.0], [88.0, 39347.0], [88.1, 39515.0], [88.2, 39515.0], [88.3, 39588.0], [88.4, 39588.0], [88.5, 39782.0], [88.6, 39782.0], [88.7, 40586.0], [88.8, 40586.0], [88.9, 40670.0], [89.0, 40670.0], [89.1, 40889.0], [89.2, 40889.0], [89.3, 41578.0], [89.4, 41578.0], [89.5, 41667.0], [89.6, 41667.0], [89.7, 41698.0], [89.8, 41698.0], [89.9, 41782.0], [90.0, 41782.0], [90.1, 42235.0], [90.2, 42530.0], [90.3, 42530.0], [90.4, 42611.0], [90.5, 42611.0], [90.6, 42735.0], [90.7, 42735.0], [90.8, 42754.0], [90.9, 42754.0], [91.0, 42842.0], [91.1, 42842.0], [91.2, 42972.0], [91.3, 42972.0], [91.4, 43022.0], [91.5, 43022.0], [91.6, 43458.0], [91.7, 43458.0], [91.8, 43881.0], [91.9, 43881.0], [92.0, 43938.0], [92.1, 43938.0], [92.2, 43977.0], [92.3, 43977.0], [92.4, 44020.0], [92.5, 44020.0], [92.6, 44037.0], [92.7, 44178.0], [92.8, 44178.0], [92.9, 45132.0], [93.0, 45132.0], [93.1, 45218.0], [93.2, 45218.0], [93.3, 45401.0], [93.4, 45401.0], [93.5, 45411.0], [93.6, 45411.0], [93.7, 45619.0], [93.8, 45619.0], [93.9, 45844.0], [94.0, 45844.0], [94.1, 46006.0], [94.2, 46006.0], [94.3, 46121.0], [94.4, 46121.0], [94.5, 46134.0], [94.6, 46134.0], [94.7, 46237.0], [94.8, 46237.0], [94.9, 46273.0], [95.0, 46273.0], [95.1, 46436.0], [95.2, 46969.0], [95.3, 46969.0], [95.4, 47889.0], [95.5, 47889.0], [95.6, 48418.0], [95.7, 48418.0], [95.8, 48608.0], [95.9, 48608.0], [96.0, 48702.0], [96.1, 48702.0], [96.2, 49365.0], [96.3, 49365.0], [96.4, 49377.0], [96.5, 49377.0], [96.6, 50287.0], [96.7, 50287.0], [96.8, 50755.0], [96.9, 50755.0], [97.0, 50844.0], [97.1, 50844.0], [97.2, 53050.0], [97.3, 53050.0], [97.4, 53130.0], [97.5, 53130.0], [97.6, 54431.0], [97.7, 54444.0], [97.8, 54444.0], [97.9, 54458.0], [98.0, 54458.0], [98.1, 55491.0], [98.2, 55491.0], [98.3, 55732.0], [98.4, 55732.0], [98.5, 55785.0], [98.6, 55785.0], [98.7, 55887.0], [98.8, 55887.0], [98.9, 56328.0], [99.0, 56328.0], [99.1, 57219.0], [99.2, 57219.0], [99.3, 58103.0], [99.4, 58103.0], [99.5, 59619.0], [99.6, 59619.0], [99.7, 60119.0], [99.8, 60119.0], [99.9, 60378.0], [100.0, 60378.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 113.0], [0.1, 113.0], [0.2, 113.0], [0.3, 113.0], [0.4, 113.0], [0.5, 113.0], [0.6, 114.0], [0.7, 114.0], [0.8, 114.0], [0.9, 114.0], [1.0, 114.0], [1.1, 114.0], [1.2, 114.0], [1.3, 114.0], [1.4, 114.0], [1.5, 114.0], [1.6, 114.0], [1.7, 114.0], [1.8, 115.0], [1.9, 115.0], [2.0, 115.0], [2.1, 115.0], [2.2, 115.0], [2.3, 115.0], [2.4, 115.0], [2.5, 115.0], [2.6, 115.0], [2.7, 115.0], [2.8, 115.0], [2.9, 115.0], [3.0, 115.0], [3.1, 115.0], [3.2, 115.0], [3.3, 115.0], [3.4, 115.0], [3.5, 115.0], [3.6, 115.0], [3.7, 115.0], [3.8, 115.0], [3.9, 116.0], [4.0, 116.0], [4.1, 116.0], [4.2, 116.0], [4.3, 116.0], [4.4, 116.0], [4.5, 116.0], [4.6, 116.0], [4.7, 116.0], [4.8, 116.0], [4.9, 116.0], [5.0, 116.0], [5.1, 117.0], [5.2, 117.0], [5.3, 117.0], [5.4, 117.0], [5.5, 117.0], [5.6, 117.0], [5.7, 117.0], [5.8, 117.0], [5.9, 117.0], [6.0, 117.0], [6.1, 117.0], [6.2, 117.0], [6.3, 117.0], [6.4, 117.0], [6.5, 117.0], [6.6, 117.0], [6.7, 117.0], [6.8, 118.0], [6.9, 118.0], [7.0, 118.0], [7.1, 118.0], [7.2, 118.0], [7.3, 118.0], [7.4, 118.0], [7.5, 118.0], [7.6, 118.0], [7.7, 118.0], [7.8, 118.0], [7.9, 118.0], [8.0, 118.0], [8.1, 118.0], [8.2, 118.0], [8.3, 118.0], [8.4, 118.0], [8.5, 118.0], [8.6, 118.0], [8.7, 118.0], [8.8, 118.0], [8.9, 118.0], [9.0, 118.0], [9.1, 118.0], [9.2, 118.0], [9.3, 118.0], [9.4, 119.0], [9.5, 119.0], [9.6, 119.0], [9.7, 119.0], [9.8, 119.0], [9.9, 119.0], [10.0, 119.0], [10.1, 119.0], [10.2, 119.0], [10.3, 119.0], [10.4, 119.0], [10.5, 119.0], [10.6, 119.0], [10.7, 119.0], [10.8, 119.0], [10.9, 119.0], [11.0, 119.0], [11.1, 119.0], [11.2, 119.0], [11.3, 119.0], [11.4, 119.0], [11.5, 120.0], [11.6, 120.0], [11.7, 120.0], [11.8, 120.0], [11.9, 120.0], [12.0, 120.0], [12.1, 120.0], [12.2, 120.0], [12.3, 120.0], [12.4, 120.0], [12.5, 120.0], [12.6, 120.0], [12.7, 120.0], [12.8, 120.0], [12.9, 120.0], [13.0, 120.0], [13.1, 120.0], [13.2, 120.0], [13.3, 120.0], [13.4, 120.0], [13.5, 120.0], [13.6, 120.0], [13.7, 120.0], [13.8, 120.0], [13.9, 120.0], [14.0, 120.0], [14.1, 120.0], [14.2, 120.0], [14.3, 120.0], [14.4, 120.0], [14.5, 120.0], [14.6, 121.0], [14.7, 121.0], [14.8, 121.0], [14.9, 121.0], [15.0, 121.0], [15.1, 121.0], [15.2, 121.0], [15.3, 121.0], [15.4, 121.0], [15.5, 121.0], [15.6, 121.0], [15.7, 121.0], [15.8, 121.0], [15.9, 121.0], [16.0, 121.0], [16.1, 121.0], [16.2, 121.0], [16.3, 121.0], [16.4, 121.0], [16.5, 121.0], [16.6, 121.0], [16.7, 121.0], [16.8, 121.0], [16.9, 122.0], [17.0, 122.0], [17.1, 122.0], [17.2, 122.0], [17.3, 122.0], [17.4, 122.0], [17.5, 122.0], [17.6, 122.0], [17.7, 122.0], [17.8, 122.0], [17.9, 122.0], [18.0, 122.0], [18.1, 122.0], [18.2, 122.0], [18.3, 122.0], [18.4, 122.0], [18.5, 122.0], [18.6, 122.0], [18.7, 123.0], [18.8, 123.0], [18.9, 123.0], [19.0, 123.0], [19.1, 123.0], [19.2, 123.0], [19.3, 123.0], [19.4, 123.0], [19.5, 123.0], [19.6, 123.0], [19.7, 123.0], [19.8, 124.0], [19.9, 124.0], [20.0, 124.0], [20.1, 124.0], [20.2, 124.0], [20.3, 124.0], [20.4, 124.0], [20.5, 124.0], [20.6, 124.0], [20.7, 124.0], [20.8, 124.0], [20.9, 124.0], [21.0, 125.0], [21.1, 125.0], [21.2, 125.0], [21.3, 125.0], [21.4, 126.0], [21.5, 126.0], [21.6, 126.0], [21.7, 126.0], [21.8, 127.0], [21.9, 128.0], [22.0, 128.0], [22.1, 137.0], [22.2, 137.0], [22.3, 138.0], [22.4, 138.0], [22.5, 186.0], [22.6, 186.0], [22.7, 194.0], [22.8, 194.0], [22.9, 219.0], [23.0, 219.0], [23.1, 231.0], [23.2, 231.0], [23.3, 326.0], [23.4, 326.0], [23.5, 328.0], [23.6, 328.0], [23.7, 353.0], [23.8, 353.0], [23.9, 414.0], [24.0, 414.0], [24.1, 491.0], [24.2, 491.0], [24.3, 4502.0], [24.4, 4502.0], [24.5, 4775.0], [24.6, 4775.0], [24.7, 4840.0], [24.8, 4840.0], [24.9, 5084.0], [25.0, 5088.0], [25.1, 5088.0], [25.2, 5115.0], [25.3, 5115.0], [25.4, 5136.0], [25.5, 5136.0], [25.6, 5159.0], [25.7, 5159.0], [25.8, 5192.0], [25.9, 5192.0], [26.0, 5308.0], [26.1, 5308.0], [26.2, 5329.0], [26.3, 5329.0], [26.4, 5692.0], [26.5, 5692.0], [26.6, 5715.0], [26.7, 5715.0], [26.8, 6041.0], [26.9, 6041.0], [27.0, 6061.0], [27.1, 6061.0], [27.2, 6065.0], [27.3, 6065.0], [27.4, 6182.0], [27.5, 6182.0], [27.6, 6258.0], [27.7, 6258.0], [27.8, 6268.0], [27.9, 6268.0], [28.0, 6344.0], [28.1, 6344.0], [28.2, 6351.0], [28.3, 6506.0], [28.4, 6506.0], [28.5, 6555.0], [28.6, 6555.0], [28.7, 6615.0], [28.8, 6615.0], [28.9, 6632.0], [29.0, 6632.0], [29.1, 6912.0], [29.2, 6912.0], [29.3, 6982.0], [29.4, 6982.0], [29.5, 7126.0], [29.6, 7126.0], [29.7, 7168.0], [29.8, 7168.0], [29.9, 7284.0], [30.0, 7284.0], [30.1, 7621.0], [30.2, 7621.0], [30.3, 7959.0], [30.4, 7959.0], [30.5, 8135.0], [30.6, 8135.0], [30.7, 8382.0], [30.8, 8382.0], [30.9, 8559.0], [31.0, 8559.0], [31.1, 8723.0], [31.2, 8723.0], [31.3, 8750.0], [31.4, 8767.0], [31.5, 8767.0], [31.6, 8830.0], [31.7, 8830.0], [31.8, 8862.0], [31.9, 8862.0], [32.0, 8890.0], [32.1, 8890.0], [32.2, 8914.0], [32.3, 8914.0], [32.4, 9233.0], [32.5, 9233.0], [32.6, 9312.0], [32.7, 9312.0], [32.8, 9331.0], [32.9, 9331.0], [33.0, 9343.0], [33.1, 9343.0], [33.2, 9362.0], [33.3, 9362.0], [33.4, 9580.0], [33.5, 9580.0], [33.6, 9621.0], [33.7, 9621.0], [33.8, 9711.0], [33.9, 9711.0], [34.0, 9861.0], [34.1, 9861.0], [34.2, 9869.0], [34.3, 9869.0], [34.4, 9914.0], [34.5, 10178.0], [34.6, 10178.0], [34.7, 10280.0], [34.8, 10280.0], [34.9, 10583.0], [35.0, 10583.0], [35.1, 10889.0], [35.2, 10889.0], [35.3, 11104.0], [35.4, 11104.0], [35.5, 11260.0], [35.6, 11260.0], [35.7, 11526.0], [35.8, 11526.0], [35.9, 11567.0], [36.0, 11567.0], [36.1, 11734.0], [36.2, 11734.0], [36.3, 11764.0], [36.4, 11764.0], [36.5, 11934.0], [36.6, 11934.0], [36.7, 12018.0], [36.8, 12018.0], [36.9, 12052.0], [37.0, 12052.0], [37.1, 12140.0], [37.2, 12140.0], [37.3, 12158.0], [37.4, 12158.0], [37.5, 12160.0], [37.6, 12189.0], [37.7, 12189.0], [37.8, 12212.0], [37.9, 12212.0], [38.0, 12271.0], [38.1, 12271.0], [38.2, 12284.0], [38.3, 12284.0], [38.4, 12316.0], [38.5, 12316.0], [38.6, 12456.0], [38.7, 12456.0], [38.8, 12482.0], [38.9, 12482.0], [39.0, 12752.0], [39.1, 12752.0], [39.2, 12752.0], [39.3, 12752.0], [39.4, 12987.0], [39.5, 12987.0], [39.6, 12994.0], [39.7, 12994.0], [39.8, 13333.0], [39.9, 13333.0], [40.0, 13381.0], [40.1, 13381.0], [40.2, 13557.0], [40.3, 13557.0], [40.4, 13562.0], [40.5, 13562.0], [40.6, 13624.0], [40.7, 13798.0], [40.8, 13798.0], [40.9, 14030.0], [41.0, 14030.0], [41.1, 14068.0], [41.2, 14068.0], [41.3, 14210.0], [41.4, 14210.0], [41.5, 14322.0], [41.6, 14322.0], [41.7, 14661.0], [41.8, 14661.0], [41.9, 14666.0], [42.0, 14666.0], [42.1, 14716.0], [42.2, 14716.0], [42.3, 14752.0], [42.4, 14752.0], [42.5, 14773.0], [42.6, 14773.0], [42.7, 14852.0], [42.8, 14852.0], [42.9, 14878.0], [43.0, 14878.0], [43.1, 14950.0], [43.2, 14950.0], [43.3, 14997.0], [43.4, 14997.0], [43.5, 15050.0], [43.6, 15050.0], [43.7, 15110.0], [43.8, 15117.0], [43.9, 15117.0], [44.0, 15199.0], [44.1, 15199.0], [44.2, 15404.0], [44.3, 15404.0], [44.4, 15528.0], [44.5, 15528.0], [44.6, 15567.0], [44.7, 15567.0], [44.8, 15766.0], [44.9, 15766.0], [45.0, 15861.0], [45.1, 15861.0], [45.2, 15875.0], [45.3, 15875.0], [45.4, 15877.0], [45.5, 15877.0], [45.6, 15891.0], [45.7, 15891.0], [45.8, 15894.0], [45.9, 15894.0], [46.0, 15978.0], [46.1, 15978.0], [46.2, 16153.0], [46.3, 16153.0], [46.4, 16338.0], [46.5, 16338.0], [46.6, 16420.0], [46.7, 16420.0], [46.8, 16840.0], [46.9, 16929.0], [47.0, 16929.0], [47.1, 17055.0], [47.2, 17055.0], [47.3, 17055.0], [47.4, 17055.0], [47.5, 17091.0], [47.6, 17091.0], [47.7, 17236.0], [47.8, 17236.0], [47.9, 17350.0], [48.0, 17350.0], [48.1, 17352.0], [48.2, 17352.0], [48.3, 17407.0], [48.4, 17407.0], [48.5, 17428.0], [48.6, 17428.0], [48.7, 17431.0], [48.8, 17431.0], [48.9, 17526.0], [49.0, 17526.0], [49.1, 17670.0], [49.2, 17670.0], [49.3, 17721.0], [49.4, 17721.0], [49.5, 17787.0], [49.6, 17787.0], [49.7, 17819.0], [49.8, 17819.0], [49.9, 18004.0], [50.0, 18023.0], [50.1, 18023.0], [50.2, 18141.0], [50.3, 18141.0], [50.4, 18154.0], [50.5, 18154.0], [50.6, 18236.0], [50.7, 18236.0], [50.8, 18237.0], [50.9, 18237.0], [51.0, 18239.0], [51.1, 18239.0], [51.2, 18379.0], [51.3, 18379.0], [51.4, 18408.0], [51.5, 18408.0], [51.6, 18413.0], [51.7, 18413.0], [51.8, 18623.0], [51.9, 18623.0], [52.0, 18919.0], [52.1, 18919.0], [52.2, 18948.0], [52.3, 18948.0], [52.4, 19077.0], [52.5, 19077.0], [52.6, 19179.0], [52.7, 19179.0], [52.8, 19220.0], [52.9, 19220.0], [53.0, 19318.0], [53.1, 19318.0], [53.2, 19537.0], [53.3, 19728.0], [53.4, 19728.0], [53.5, 19737.0], [53.6, 19737.0], [53.7, 19795.0], [53.8, 19795.0], [53.9, 19796.0], [54.0, 19796.0], [54.1, 19827.0], [54.2, 19827.0], [54.3, 19898.0], [54.4, 19898.0], [54.5, 19914.0], [54.6, 19914.0], [54.7, 19965.0], [54.8, 19965.0], [54.9, 19965.0], [55.0, 19965.0], [55.1, 20018.0], [55.2, 20018.0], [55.3, 20043.0], [55.4, 20043.0], [55.5, 20285.0], [55.6, 20285.0], [55.7, 20323.0], [55.8, 20323.0], [55.9, 20324.0], [56.0, 20324.0], [56.1, 20324.0], [56.2, 20324.0], [56.3, 20659.0], [56.4, 20705.0], [56.5, 20705.0], [56.6, 20756.0], [56.7, 20756.0], [56.8, 20851.0], [56.9, 20851.0], [57.0, 20996.0], [57.1, 20996.0], [57.2, 21037.0], [57.3, 21037.0], [57.4, 21079.0], [57.5, 21079.0], [57.6, 21085.0], [57.7, 21085.0], [57.8, 21281.0], [57.9, 21281.0], [58.0, 21290.0], [58.1, 21290.0], [58.2, 21382.0], [58.3, 21382.0], [58.4, 21454.0], [58.5, 21454.0], [58.6, 21511.0], [58.7, 21511.0], [58.8, 21533.0], [58.9, 21533.0], [59.0, 21622.0], [59.1, 21622.0], [59.2, 21624.0], [59.3, 21624.0], [59.4, 21813.0], [59.5, 21854.0], [59.6, 21854.0], [59.7, 21858.0], [59.8, 21858.0], [59.9, 22081.0], [60.0, 22081.0], [60.1, 22165.0], [60.2, 22165.0], [60.3, 22271.0], [60.4, 22271.0], [60.5, 22303.0], [60.6, 22303.0], [60.7, 22377.0], [60.8, 22377.0], [60.9, 22422.0], [61.0, 22422.0], [61.1, 22517.0], [61.2, 22517.0], [61.3, 22566.0], [61.4, 22566.0], [61.5, 22601.0], [61.6, 22601.0], [61.7, 22638.0], [61.8, 22638.0], [61.9, 22641.0], [62.0, 22641.0], [62.1, 22680.0], [62.2, 22680.0], [62.3, 22701.0], [62.4, 22701.0], [62.5, 22714.0], [62.6, 22876.0], [62.7, 22876.0], [62.8, 22939.0], [62.9, 22939.0], [63.0, 22966.0], [63.1, 22966.0], [63.2, 22986.0], [63.3, 22986.0], [63.4, 23025.0], [63.5, 23025.0], [63.6, 23059.0], [63.7, 23059.0], [63.8, 23157.0], [63.9, 23157.0], [64.0, 23229.0], [64.1, 23229.0], [64.2, 23253.0], [64.3, 23253.0], [64.4, 23314.0], [64.5, 23314.0], [64.6, 23323.0], [64.7, 23323.0], [64.8, 23389.0], [64.9, 23389.0], [65.0, 23391.0], [65.1, 23391.0], [65.2, 23661.0], [65.3, 23661.0], [65.4, 23712.0], [65.5, 23712.0], [65.6, 23740.0], [65.7, 23765.0], [65.8, 23765.0], [65.9, 23795.0], [66.0, 23795.0], [66.1, 23902.0], [66.2, 23902.0], [66.3, 23930.0], [66.4, 23930.0], [66.5, 24173.0], [66.6, 24173.0], [66.7, 24183.0], [66.8, 24183.0], [66.9, 24239.0], [67.0, 24239.0], [67.1, 24282.0], [67.2, 24282.0], [67.3, 24293.0], [67.4, 24293.0], [67.5, 24346.0], [67.6, 24346.0], [67.7, 24406.0], [67.8, 24406.0], [67.9, 24526.0], [68.0, 24526.0], [68.1, 24780.0], [68.2, 24780.0], [68.3, 24872.0], [68.4, 24872.0], [68.5, 25234.0], [68.6, 25234.0], [68.7, 25443.0], [68.8, 25467.0], [68.9, 25467.0], [69.0, 25490.0], [69.1, 25490.0], [69.2, 25517.0], [69.3, 25517.0], [69.4, 25598.0], [69.5, 25598.0], [69.6, 25617.0], [69.7, 25617.0], [69.8, 25789.0], [69.9, 25789.0], [70.0, 25834.0], [70.1, 25834.0], [70.2, 25913.0], [70.3, 25913.0], [70.4, 25957.0], [70.5, 25957.0], [70.6, 25982.0], [70.7, 25982.0], [70.8, 26035.0], [70.9, 26035.0], [71.0, 26132.0], [71.1, 26132.0], [71.2, 26133.0], [71.3, 26133.0], [71.4, 26184.0], [71.5, 26184.0], [71.6, 26228.0], [71.7, 26228.0], [71.8, 26403.0], [71.9, 26408.0], [72.0, 26408.0], [72.1, 26831.0], [72.2, 26831.0], [72.3, 26838.0], [72.4, 26838.0], [72.5, 26838.0], [72.6, 26838.0], [72.7, 26856.0], [72.8, 26856.0], [72.9, 27165.0], [73.0, 27165.0], [73.1, 27232.0], [73.2, 27232.0], [73.3, 27425.0], [73.4, 27425.0], [73.5, 27482.0], [73.6, 27482.0], [73.7, 27524.0], [73.8, 27524.0], [73.9, 27713.0], [74.0, 27713.0], [74.1, 27833.0], [74.2, 27833.0], [74.3, 27903.0], [74.4, 27903.0], [74.5, 27996.0], [74.6, 27996.0], [74.7, 28039.0], [74.8, 28039.0], [74.9, 28106.0], [75.0, 28165.0], [75.1, 28165.0], [75.2, 28286.0], [75.3, 28286.0], [75.4, 28401.0], [75.5, 28401.0], [75.6, 28533.0], [75.7, 28533.0], [75.8, 28659.0], [75.9, 28659.0], [76.0, 28744.0], [76.1, 28744.0], [76.2, 28888.0], [76.3, 28888.0], [76.4, 28898.0], [76.5, 28898.0], [76.6, 28964.0], [76.7, 28964.0], [76.8, 29015.0], [76.9, 29015.0], [77.0, 29059.0], [77.1, 29059.0], [77.2, 29261.0], [77.3, 29261.0], [77.4, 29508.0], [77.5, 29508.0], [77.6, 29604.0], [77.7, 29604.0], [77.8, 29613.0], [77.9, 29613.0], [78.0, 29779.0], [78.1, 29779.0], [78.2, 29942.0], [78.3, 30171.0], [78.4, 30171.0], [78.5, 30192.0], [78.6, 30192.0], [78.7, 30206.0], [78.8, 30206.0], [78.9, 30352.0], [79.0, 30352.0], [79.1, 30478.0], [79.2, 30478.0], [79.3, 30548.0], [79.4, 30548.0], [79.5, 30589.0], [79.6, 30589.0], [79.7, 30768.0], [79.8, 30768.0], [79.9, 30856.0], [80.0, 30856.0], [80.1, 31239.0], [80.2, 31239.0], [80.3, 31307.0], [80.4, 31307.0], [80.5, 31324.0], [80.6, 31324.0], [80.7, 31624.0], [80.8, 31624.0], [80.9, 31775.0], [81.0, 31775.0], [81.1, 31907.0], [81.2, 31907.0], [81.3, 32040.0], [81.4, 32385.0], [81.5, 32385.0], [81.6, 32495.0], [81.7, 32495.0], [81.8, 32525.0], [81.9, 32525.0], [82.0, 32852.0], [82.1, 32852.0], [82.2, 33001.0], [82.3, 33001.0], [82.4, 33204.0], [82.5, 33204.0], [82.6, 33813.0], [82.7, 33813.0], [82.8, 33819.0], [82.9, 33819.0], [83.0, 34144.0], [83.1, 34144.0], [83.2, 34186.0], [83.3, 34186.0], [83.4, 34451.0], [83.5, 34451.0], [83.6, 34526.0], [83.7, 34526.0], [83.8, 34627.0], [83.9, 34627.0], [84.0, 34993.0], [84.1, 34993.0], [84.2, 35025.0], [84.3, 35025.0], [84.4, 35310.0], [84.5, 35403.0], [84.6, 35403.0], [84.7, 35479.0], [84.8, 35479.0], [84.9, 35494.0], [85.0, 35494.0], [85.1, 36099.0], [85.2, 36099.0], [85.3, 36569.0], [85.4, 36569.0], [85.5, 36591.0], [85.6, 36591.0], [85.7, 36606.0], [85.8, 36606.0], [85.9, 37421.0], [86.0, 37421.0], [86.1, 37575.0], [86.2, 37575.0], [86.3, 37626.0], [86.4, 37626.0], [86.5, 37657.0], [86.6, 37657.0], [86.7, 37994.0], [86.8, 37994.0], [86.9, 38062.0], [87.0, 38062.0], [87.1, 38075.0], [87.2, 38075.0], [87.3, 38346.0], [87.4, 38346.0], [87.5, 38378.0], [87.6, 38663.0], [87.7, 38663.0], [87.8, 39121.0], [87.9, 39121.0], [88.0, 39283.0], [88.1, 39283.0], [88.2, 39350.0], [88.3, 39350.0], [88.4, 39504.0], [88.5, 39504.0], [88.6, 40326.0], [88.7, 40326.0], [88.8, 40439.0], [88.9, 40439.0], [89.0, 40653.0], [89.1, 40653.0], [89.2, 41338.0], [89.3, 41338.0], [89.4, 41379.0], [89.5, 41379.0], [89.6, 41468.0], [89.7, 41468.0], [89.8, 41545.0], [89.9, 41545.0], [90.0, 41989.0], [90.1, 41989.0], [90.2, 42291.0], [90.3, 42291.0], [90.4, 42363.0], [90.5, 42363.0], [90.6, 42477.0], [90.7, 42523.0], [90.8, 42523.0], [90.9, 42612.0], [91.0, 42612.0], [91.1, 42743.0], [91.2, 42743.0], [91.3, 42772.0], [91.4, 42772.0], [91.5, 43154.0], [91.6, 43154.0], [91.7, 43646.0], [91.8, 43646.0], [91.9, 43696.0], [92.0, 43696.0], [92.1, 43754.0], [92.2, 43754.0], [92.3, 43768.0], [92.4, 43768.0], [92.5, 43799.0], [92.6, 43799.0], [92.7, 43941.0], [92.8, 43941.0], [92.9, 44902.0], [93.0, 44902.0], [93.1, 44969.0], [93.2, 44969.0], [93.3, 45121.0], [93.4, 45121.0], [93.5, 45125.0], [93.6, 45125.0], [93.7, 45368.0], [93.8, 45609.0], [93.9, 45609.0], [94.0, 45739.0], [94.1, 45739.0], [94.2, 45830.0], [94.3, 45830.0], [94.4, 45872.0], [94.5, 45872.0], [94.6, 45948.0], [94.7, 45948.0], [94.8, 45998.0], [94.9, 45998.0], [95.0, 46094.0], [95.1, 46094.0], [95.2, 46743.0], [95.3, 46743.0], [95.4, 47580.0], [95.5, 47580.0], [95.6, 48141.0], [95.7, 48141.0], [95.8, 48322.0], [95.9, 48322.0], [96.0, 48410.0], [96.1, 48410.0], [96.2, 49116.0], [96.3, 49116.0], [96.4, 49118.0], [96.5, 49118.0], [96.6, 49138.0], [96.7, 49138.0], [96.8, 50060.0], [96.9, 50607.0], [97.0, 50607.0], [97.1, 52814.0], [97.2, 52814.0], [97.3, 52903.0], [97.4, 52903.0], [97.5, 54109.0], [97.6, 54109.0], [97.7, 54172.0], [97.8, 54172.0], [97.9, 54216.0], [98.0, 54216.0], [98.1, 54230.0], [98.2, 54230.0], [98.3, 55449.0], [98.4, 55449.0], [98.5, 55558.0], [98.6, 55558.0], [98.7, 55655.0], [98.8, 55655.0], [98.9, 56077.0], [99.0, 56077.0], [99.1, 56983.0], [99.2, 56983.0], [99.3, 57864.0], [99.4, 57864.0], [99.5, 59382.0], [99.6, 59382.0], [99.7, 59869.0], [99.8, 59869.0], [99.9, 60142.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 223.0], [0.1, 223.0], [0.2, 223.0], [0.3, 223.0], [0.4, 224.0], [0.5, 224.0], [0.6, 224.0], [0.7, 224.0], [0.8, 224.0], [0.9, 224.0], [1.0, 225.0], [1.1, 225.0], [1.2, 225.0], [1.3, 225.0], [1.4, 225.0], [1.5, 225.0], [1.6, 225.0], [1.7, 225.0], [1.8, 225.0], [1.9, 225.0], [2.0, 225.0], [2.1, 225.0], [2.2, 225.0], [2.3, 225.0], [2.4, 225.0], [2.5, 225.0], [2.6, 225.0], [2.7, 225.0], [2.8, 225.0], [2.9, 225.0], [3.0, 225.0], [3.1, 225.0], [3.2, 225.0], [3.3, 225.0], [3.4, 225.0], [3.5, 226.0], [3.6, 226.0], [3.7, 226.0], [3.8, 226.0], [3.9, 226.0], [4.0, 226.0], [4.1, 226.0], [4.2, 226.0], [4.3, 226.0], [4.4, 226.0], [4.5, 226.0], [4.6, 226.0], [4.7, 226.0], [4.8, 226.0], [4.9, 226.0], [5.0, 226.0], [5.1, 226.0], [5.2, 226.0], [5.3, 226.0], [5.4, 226.0], [5.5, 226.0], [5.6, 226.0], [5.7, 226.0], [5.8, 226.0], [5.9, 226.0], [6.0, 226.0], [6.1, 226.0], [6.2, 226.0], [6.3, 226.0], [6.4, 226.0], [6.5, 226.0], [6.6, 227.0], [6.7, 227.0], [6.8, 227.0], [6.9, 227.0], [7.0, 227.0], [7.1, 227.0], [7.2, 227.0], [7.3, 227.0], [7.4, 227.0], [7.5, 227.0], [7.6, 227.0], [7.7, 227.0], [7.8, 227.0], [7.9, 227.0], [8.0, 227.0], [8.1, 227.0], [8.2, 227.0], [8.3, 227.0], [8.4, 227.0], [8.5, 227.0], [8.6, 227.0], [8.7, 227.0], [8.8, 227.0], [8.9, 227.0], [9.0, 227.0], [9.1, 227.0], [9.2, 227.0], [9.3, 227.0], [9.4, 227.0], [9.5, 227.0], [9.6, 227.0], [9.7, 227.0], [9.8, 227.0], [9.9, 228.0], [10.0, 228.0], [10.1, 228.0], [10.2, 228.0], [10.3, 228.0], [10.4, 228.0], [10.5, 228.0], [10.6, 228.0], [10.7, 228.0], [10.8, 228.0], [10.9, 228.0], [11.0, 228.0], [11.1, 228.0], [11.2, 228.0], [11.3, 228.0], [11.4, 228.0], [11.5, 228.0], [11.6, 228.0], [11.7, 228.0], [11.8, 228.0], [11.9, 228.0], [12.0, 228.0], [12.1, 228.0], [12.2, 228.0], [12.3, 228.0], [12.4, 228.0], [12.5, 228.0], [12.6, 228.0], [12.7, 228.0], [12.8, 228.0], [12.9, 228.0], [13.0, 228.0], [13.1, 228.0], [13.2, 228.0], [13.3, 228.0], [13.4, 228.0], [13.5, 228.0], [13.6, 228.0], [13.7, 228.0], [13.8, 228.0], [13.9, 228.0], [14.0, 228.0], [14.1, 229.0], [14.2, 229.0], [14.3, 229.0], [14.4, 229.0], [14.5, 229.0], [14.6, 229.0], [14.7, 229.0], [14.8, 229.0], [14.9, 229.0], [15.0, 229.0], [15.1, 229.0], [15.2, 229.0], [15.3, 229.0], [15.4, 229.0], [15.5, 229.0], [15.6, 229.0], [15.7, 229.0], [15.8, 229.0], [15.9, 229.0], [16.0, 229.0], [16.1, 229.0], [16.2, 229.0], [16.3, 229.0], [16.4, 229.0], [16.5, 229.0], [16.6, 229.0], [16.7, 229.0], [16.8, 229.0], [16.9, 229.0], [17.0, 229.0], [17.1, 229.0], [17.2, 229.0], [17.3, 229.0], [17.4, 229.0], [17.5, 230.0], [17.6, 230.0], [17.7, 230.0], [17.8, 230.0], [17.9, 230.0], [18.0, 230.0], [18.1, 230.0], [18.2, 230.0], [18.3, 230.0], [18.4, 230.0], [18.5, 230.0], [18.6, 230.0], [18.7, 230.0], [18.8, 230.0], [18.9, 230.0], [19.0, 230.0], [19.1, 230.0], [19.2, 230.0], [19.3, 230.0], [19.4, 230.0], [19.5, 230.0], [19.6, 230.0], [19.7, 230.0], [19.8, 230.0], [19.9, 230.0], [20.0, 230.0], [20.1, 230.0], [20.2, 230.0], [20.3, 230.0], [20.4, 230.0], [20.5, 230.0], [20.6, 230.0], [20.7, 230.0], [20.8, 231.0], [20.9, 231.0], [21.0, 231.0], [21.1, 231.0], [21.2, 231.0], [21.3, 231.0], [21.4, 231.0], [21.5, 231.0], [21.6, 231.0], [21.7, 231.0], [21.8, 231.0], [21.9, 231.0], [22.0, 231.0], [22.1, 231.0], [22.2, 231.0], [22.3, 231.0], [22.4, 231.0], [22.5, 231.0], [22.6, 231.0], [22.7, 231.0], [22.8, 231.0], [22.9, 231.0], [23.0, 231.0], [23.1, 231.0], [23.2, 231.0], [23.3, 232.0], [23.4, 232.0], [23.5, 232.0], [23.6, 232.0], [23.7, 232.0], [23.8, 232.0], [23.9, 232.0], [24.0, 232.0], [24.1, 232.0], [24.2, 232.0], [24.3, 232.0], [24.4, 232.0], [24.5, 232.0], [24.6, 232.0], [24.7, 232.0], [24.8, 232.0], [24.9, 232.0], [25.0, 233.0], [25.1, 233.0], [25.2, 233.0], [25.3, 233.0], [25.4, 233.0], [25.5, 233.0], [25.6, 233.0], [25.7, 233.0], [25.8, 233.0], [25.9, 233.0], [26.0, 233.0], [26.1, 233.0], [26.2, 233.0], [26.3, 233.0], [26.4, 234.0], [26.5, 234.0], [26.6, 234.0], [26.7, 234.0], [26.8, 234.0], [26.9, 234.0], [27.0, 234.0], [27.1, 234.0], [27.2, 234.0], [27.3, 234.0], [27.4, 234.0], [27.5, 234.0], [27.6, 234.0], [27.7, 234.0], [27.8, 234.0], [27.9, 234.0], [28.0, 234.0], [28.1, 234.0], [28.2, 234.0], [28.3, 234.0], [28.4, 234.0], [28.5, 234.0], [28.6, 234.0], [28.7, 234.0], [28.8, 234.0], [28.9, 235.0], [29.0, 235.0], [29.1, 235.0], [29.2, 235.0], [29.3, 235.0], [29.4, 235.0], [29.5, 235.0], [29.6, 235.0], [29.7, 235.0], [29.8, 235.0], [29.9, 235.0], [30.0, 235.0], [30.1, 235.0], [30.2, 235.0], [30.3, 235.0], [30.4, 235.0], [30.5, 235.0], [30.6, 235.0], [30.7, 235.0], [30.8, 236.0], [30.9, 236.0], [31.0, 236.0], [31.1, 236.0], [31.2, 236.0], [31.3, 236.0], [31.4, 236.0], [31.5, 236.0], [31.6, 236.0], [31.7, 236.0], [31.8, 236.0], [31.9, 236.0], [32.0, 236.0], [32.1, 236.0], [32.2, 236.0], [32.3, 236.0], [32.4, 236.0], [32.5, 236.0], [32.6, 236.0], [32.7, 236.0], [32.8, 236.0], [32.9, 236.0], [33.0, 236.0], [33.1, 236.0], [33.2, 236.0], [33.3, 236.0], [33.4, 236.0], [33.5, 236.0], [33.6, 236.0], [33.7, 236.0], [33.8, 236.0], [33.9, 236.0], [34.0, 236.0], [34.1, 236.0], [34.2, 236.0], [34.3, 236.0], [34.4, 236.0], [34.5, 236.0], [34.6, 236.0], [34.7, 237.0], [34.8, 237.0], [34.9, 237.0], [35.0, 237.0], [35.1, 237.0], [35.2, 237.0], [35.3, 237.0], [35.4, 237.0], [35.5, 237.0], [35.6, 237.0], [35.7, 237.0], [35.8, 237.0], [35.9, 237.0], [36.0, 237.0], [36.1, 237.0], [36.2, 237.0], [36.3, 237.0], [36.4, 237.0], [36.5, 237.0], [36.6, 237.0], [36.7, 237.0], [36.8, 237.0], [36.9, 237.0], [37.0, 237.0], [37.1, 237.0], [37.2, 237.0], [37.3, 237.0], [37.4, 237.0], [37.5, 237.0], [37.6, 237.0], [37.7, 237.0], [37.8, 237.0], [37.9, 237.0], [38.0, 237.0], [38.1, 237.0], [38.2, 237.0], [38.3, 237.0], [38.4, 237.0], [38.5, 237.0], [38.6, 237.0], [38.7, 237.0], [38.8, 237.0], [38.9, 237.0], [39.0, 237.0], [39.1, 237.0], [39.2, 237.0], [39.3, 237.0], [39.4, 237.0], [39.5, 237.0], [39.6, 237.0], [39.7, 237.0], [39.8, 237.0], [39.9, 237.0], [40.0, 237.0], [40.1, 237.0], [40.2, 238.0], [40.3, 238.0], [40.4, 238.0], [40.5, 238.0], [40.6, 238.0], [40.7, 238.0], [40.8, 238.0], [40.9, 238.0], [41.0, 238.0], [41.1, 238.0], [41.2, 238.0], [41.3, 238.0], [41.4, 238.0], [41.5, 238.0], [41.6, 238.0], [41.7, 238.0], [41.8, 238.0], [41.9, 238.0], [42.0, 238.0], [42.1, 238.0], [42.2, 238.0], [42.3, 238.0], [42.4, 238.0], [42.5, 238.0], [42.6, 238.0], [42.7, 238.0], [42.8, 238.0], [42.9, 238.0], [43.0, 238.0], [43.1, 238.0], [43.2, 238.0], [43.3, 238.0], [43.4, 238.0], [43.5, 238.0], [43.6, 238.0], [43.7, 238.0], [43.8, 238.0], [43.9, 238.0], [44.0, 238.0], [44.1, 238.0], [44.2, 238.0], [44.3, 238.0], [44.4, 238.0], [44.5, 238.0], [44.6, 238.0], [44.7, 238.0], [44.8, 238.0], [44.9, 238.0], [45.0, 238.0], [45.1, 238.0], [45.2, 238.0], [45.3, 238.0], [45.4, 238.0], [45.5, 238.0], [45.6, 238.0], [45.7, 238.0], [45.8, 238.0], [45.9, 238.0], [46.0, 238.0], [46.1, 238.0], [46.2, 238.0], [46.3, 238.0], [46.4, 238.0], [46.5, 238.0], [46.6, 238.0], [46.7, 238.0], [46.8, 239.0], [46.9, 239.0], [47.0, 239.0], [47.1, 239.0], [47.2, 239.0], [47.3, 239.0], [47.4, 239.0], [47.5, 239.0], [47.6, 239.0], [47.7, 239.0], [47.8, 239.0], [47.9, 239.0], [48.0, 239.0], [48.1, 239.0], [48.2, 239.0], [48.3, 239.0], [48.4, 239.0], [48.5, 239.0], [48.6, 239.0], [48.7, 239.0], [48.8, 239.0], [48.9, 239.0], [49.0, 239.0], [49.1, 239.0], [49.2, 239.0], [49.3, 239.0], [49.4, 239.0], [49.5, 239.0], [49.6, 239.0], [49.7, 239.0], [49.8, 239.0], [49.9, 239.0], [50.0, 239.0], [50.1, 239.0], [50.2, 239.0], [50.3, 239.0], [50.4, 239.0], [50.5, 239.0], [50.6, 239.0], [50.7, 239.0], [50.8, 239.0], [50.9, 239.0], [51.0, 239.0], [51.1, 239.0], [51.2, 239.0], [51.3, 239.0], [51.4, 239.0], [51.5, 239.0], [51.6, 240.0], [51.7, 240.0], [51.8, 240.0], [51.9, 240.0], [52.0, 240.0], [52.1, 240.0], [52.2, 240.0], [52.3, 240.0], [52.4, 240.0], [52.5, 240.0], [52.6, 240.0], [52.7, 240.0], [52.8, 240.0], [52.9, 240.0], [53.0, 240.0], [53.1, 240.0], [53.2, 240.0], [53.3, 240.0], [53.4, 240.0], [53.5, 240.0], [53.6, 240.0], [53.7, 240.0], [53.8, 240.0], [53.9, 240.0], [54.0, 240.0], [54.1, 240.0], [54.2, 240.0], [54.3, 240.0], [54.4, 240.0], [54.5, 241.0], [54.6, 241.0], [54.7, 241.0], [54.8, 241.0], [54.9, 241.0], [55.0, 241.0], [55.1, 241.0], [55.2, 241.0], [55.3, 241.0], [55.4, 241.0], [55.5, 241.0], [55.6, 241.0], [55.7, 241.0], [55.8, 241.0], [55.9, 241.0], [56.0, 241.0], [56.1, 241.0], [56.2, 241.0], [56.3, 241.0], [56.4, 241.0], [56.5, 241.0], [56.6, 241.0], [56.7, 241.0], [56.8, 241.0], [56.9, 241.0], [57.0, 242.0], [57.1, 242.0], [57.2, 242.0], [57.3, 242.0], [57.4, 242.0], [57.5, 242.0], [57.6, 242.0], [57.7, 242.0], [57.8, 242.0], [57.9, 242.0], [58.0, 242.0], [58.1, 242.0], [58.2, 242.0], [58.3, 242.0], [58.4, 242.0], [58.5, 242.0], [58.6, 242.0], [58.7, 243.0], [58.8, 243.0], [58.9, 243.0], [59.0, 243.0], [59.1, 243.0], [59.2, 243.0], [59.3, 243.0], [59.4, 243.0], [59.5, 243.0], [59.6, 243.0], [59.7, 243.0], [59.8, 243.0], [59.9, 243.0], [60.0, 243.0], [60.1, 243.0], [60.2, 243.0], [60.3, 243.0], [60.4, 243.0], [60.5, 243.0], [60.6, 243.0], [60.7, 243.0], [60.8, 244.0], [60.9, 244.0], [61.0, 244.0], [61.1, 244.0], [61.2, 244.0], [61.3, 244.0], [61.4, 244.0], [61.5, 244.0], [61.6, 244.0], [61.7, 244.0], [61.8, 245.0], [61.9, 245.0], [62.0, 245.0], [62.1, 245.0], [62.2, 245.0], [62.3, 245.0], [62.4, 245.0], [62.5, 245.0], [62.6, 245.0], [62.7, 245.0], [62.8, 245.0], [62.9, 245.0], [63.0, 245.0], [63.1, 245.0], [63.2, 245.0], [63.3, 245.0], [63.4, 245.0], [63.5, 245.0], [63.6, 245.0], [63.7, 245.0], [63.8, 245.0], [63.9, 245.0], [64.0, 245.0], [64.1, 246.0], [64.2, 246.0], [64.3, 246.0], [64.4, 246.0], [64.5, 246.0], [64.6, 246.0], [64.7, 246.0], [64.8, 246.0], [64.9, 247.0], [65.0, 247.0], [65.1, 247.0], [65.2, 247.0], [65.3, 247.0], [65.4, 247.0], [65.5, 247.0], [65.6, 247.0], [65.7, 247.0], [65.8, 247.0], [65.9, 247.0], [66.0, 247.0], [66.1, 247.0], [66.2, 248.0], [66.3, 248.0], [66.4, 248.0], [66.5, 248.0], [66.6, 248.0], [66.7, 248.0], [66.8, 249.0], [66.9, 249.0], [67.0, 249.0], [67.1, 249.0], [67.2, 249.0], [67.3, 249.0], [67.4, 249.0], [67.5, 249.0], [67.6, 249.0], [67.7, 249.0], [67.8, 249.0], [67.9, 249.0], [68.0, 249.0], [68.1, 249.0], [68.2, 249.0], [68.3, 250.0], [68.4, 250.0], [68.5, 250.0], [68.6, 250.0], [68.7, 250.0], [68.8, 250.0], [68.9, 250.0], [69.0, 250.0], [69.1, 250.0], [69.2, 250.0], [69.3, 250.0], [69.4, 250.0], [69.5, 251.0], [69.6, 251.0], [69.7, 251.0], [69.8, 251.0], [69.9, 251.0], [70.0, 251.0], [70.1, 251.0], [70.2, 251.0], [70.3, 251.0], [70.4, 252.0], [70.5, 252.0], [70.6, 252.0], [70.7, 252.0], [70.8, 252.0], [70.9, 252.0], [71.0, 252.0], [71.1, 252.0], [71.2, 252.0], [71.3, 252.0], [71.4, 252.0], [71.5, 252.0], [71.6, 252.0], [71.7, 252.0], [71.8, 253.0], [71.9, 253.0], [72.0, 253.0], [72.1, 253.0], [72.2, 253.0], [72.3, 253.0], [72.4, 253.0], [72.5, 253.0], [72.6, 254.0], [72.7, 254.0], [72.8, 254.0], [72.9, 254.0], [73.0, 254.0], [73.1, 254.0], [73.2, 254.0], [73.3, 255.0], [73.4, 255.0], [73.5, 255.0], [73.6, 255.0], [73.7, 255.0], [73.8, 255.0], [73.9, 255.0], [74.0, 255.0], [74.1, 255.0], [74.2, 255.0], [74.3, 255.0], [74.4, 255.0], [74.5, 256.0], [74.6, 256.0], [74.7, 256.0], [74.8, 256.0], [74.9, 257.0], [75.0, 257.0], [75.1, 257.0], [75.2, 258.0], [75.3, 258.0], [75.4, 258.0], [75.5, 258.0], [75.6, 258.0], [75.7, 258.0], [75.8, 258.0], [75.9, 258.0], [76.0, 259.0], [76.1, 259.0], [76.2, 259.0], [76.3, 259.0], [76.4, 259.0], [76.5, 259.0], [76.6, 259.0], [76.7, 259.0], [76.8, 259.0], [76.9, 259.0], [77.0, 260.0], [77.1, 260.0], [77.2, 260.0], [77.3, 260.0], [77.4, 261.0], [77.5, 261.0], [77.6, 261.0], [77.7, 261.0], [77.8, 261.0], [77.9, 261.0], [78.0, 261.0], [78.1, 262.0], [78.2, 262.0], [78.3, 262.0], [78.4, 262.0], [78.5, 262.0], [78.6, 262.0], [78.7, 262.0], [78.8, 262.0], [78.9, 262.0], [79.0, 262.0], [79.1, 262.0], [79.2, 262.0], [79.3, 262.0], [79.4, 262.0], [79.5, 262.0], [79.6, 262.0], [79.7, 263.0], [79.8, 263.0], [79.9, 263.0], [80.0, 263.0], [80.1, 263.0], [80.2, 263.0], [80.3, 263.0], [80.4, 263.0], [80.5, 263.0], [80.6, 264.0], [80.7, 264.0], [80.8, 264.0], [80.9, 264.0], [81.0, 264.0], [81.1, 264.0], [81.2, 265.0], [81.3, 265.0], [81.4, 266.0], [81.5, 266.0], [81.6, 266.0], [81.7, 266.0], [81.8, 266.0], [81.9, 266.0], [82.0, 267.0], [82.1, 267.0], [82.2, 267.0], [82.3, 267.0], [82.4, 267.0], [82.5, 267.0], [82.6, 268.0], [82.7, 269.0], [82.8, 269.0], [82.9, 269.0], [83.0, 269.0], [83.1, 270.0], [83.2, 270.0], [83.3, 270.0], [83.4, 270.0], [83.5, 270.0], [83.6, 270.0], [83.7, 272.0], [83.8, 272.0], [83.9, 272.0], [84.0, 272.0], [84.1, 272.0], [84.2, 272.0], [84.3, 273.0], [84.4, 273.0], [84.5, 273.0], [84.6, 273.0], [84.7, 273.0], [84.8, 273.0], [84.9, 274.0], [85.0, 274.0], [85.1, 275.0], [85.2, 276.0], [85.3, 276.0], [85.4, 277.0], [85.5, 277.0], [85.6, 277.0], [85.7, 277.0], [85.8, 278.0], [85.9, 278.0], [86.0, 279.0], [86.1, 279.0], [86.2, 280.0], [86.3, 280.0], [86.4, 280.0], [86.5, 280.0], [86.6, 280.0], [86.7, 280.0], [86.8, 281.0], [86.9, 281.0], [87.0, 283.0], [87.1, 283.0], [87.2, 283.0], [87.3, 283.0], [87.4, 285.0], [87.5, 285.0], [87.6, 286.0], [87.7, 286.0], [87.8, 286.0], [87.9, 287.0], [88.0, 287.0], [88.1, 287.0], [88.2, 287.0], [88.3, 288.0], [88.4, 288.0], [88.5, 288.0], [88.6, 288.0], [88.7, 289.0], [88.8, 289.0], [88.9, 289.0], [89.0, 289.0], [89.1, 289.0], [89.2, 289.0], [89.3, 290.0], [89.4, 290.0], [89.5, 290.0], [89.6, 290.0], [89.7, 291.0], [89.8, 291.0], [89.9, 291.0], [90.0, 291.0], [90.1, 291.0], [90.2, 292.0], [90.3, 292.0], [90.4, 293.0], [90.5, 293.0], [90.6, 298.0], [90.7, 298.0], [90.8, 299.0], [90.9, 299.0], [91.0, 299.0], [91.1, 299.0], [91.2, 300.0], [91.3, 300.0], [91.4, 300.0], [91.5, 300.0], [91.6, 300.0], [91.7, 300.0], [91.8, 304.0], [91.9, 304.0], [92.0, 305.0], [92.1, 305.0], [92.2, 306.0], [92.3, 306.0], [92.4, 306.0], [92.5, 306.0], [92.6, 306.0], [92.7, 307.0], [92.8, 307.0], [92.9, 308.0], [93.0, 308.0], [93.1, 308.0], [93.2, 308.0], [93.3, 309.0], [93.4, 309.0], [93.5, 311.0], [93.6, 311.0], [93.7, 320.0], [93.8, 320.0], [93.9, 325.0], [94.0, 325.0], [94.1, 329.0], [94.2, 329.0], [94.3, 329.0], [94.4, 329.0], [94.5, 331.0], [94.6, 331.0], [94.7, 334.0], [94.8, 334.0], [94.9, 335.0], [95.0, 335.0], [95.1, 336.0], [95.2, 342.0], [95.3, 342.0], [95.4, 350.0], [95.5, 350.0], [95.6, 398.0], [95.7, 398.0], [95.8, 408.0], [95.9, 408.0], [96.0, 408.0], [96.1, 408.0], [96.2, 412.0], [96.3, 412.0], [96.4, 422.0], [96.5, 422.0], [96.6, 433.0], [96.7, 433.0], [96.8, 438.0], [96.9, 438.0], [97.0, 442.0], [97.1, 442.0], [97.2, 449.0], [97.3, 449.0], [97.4, 452.0], [97.5, 452.0], [97.6, 453.0], [97.7, 462.0], [97.8, 462.0], [97.9, 481.0], [98.0, 481.0], [98.1, 506.0], [98.2, 506.0], [98.3, 508.0], [98.4, 508.0], [98.5, 522.0], [98.6, 522.0], [98.7, 614.0], [98.8, 614.0], [98.9, 715.0], [99.0, 715.0], [99.1, 819.0], [99.2, 819.0], [99.3, 1257.0], [99.4, 1257.0], [99.5, 1382.0], [99.6, 1382.0], [99.7, 1630.0], [99.8, 1630.0], [99.9, 1637.0], [100.0, 1637.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 474.0, "series": [{"data": [[35700.0, 2.0], [38900.0, 1.0], [38500.0, 1.0], [40500.0, 1.0], [39700.0, 1.0], [39300.0, 1.0], [42500.0, 1.0], [41700.0, 1.0], [42900.0, 1.0], [44100.0, 1.0], [46100.0, 2.0], [46900.0, 1.0], [49300.0, 2.0], [200.0, 4.0], [55700.0, 2.0], [58100.0, 1.0], [60100.0, 1.0], [300.0, 99.0], [400.0, 10.0], [500.0, 9.0], [600.0, 2.0], [700.0, 2.0], [800.0, 1.0], [900.0, 1.0], [1700.0, 1.0], [4700.0, 1.0], [5100.0, 1.0], [5200.0, 1.0], [5300.0, 4.0], [5500.0, 2.0], [5400.0, 1.0], [5900.0, 2.0], [6200.0, 2.0], [6300.0, 1.0], [6500.0, 2.0], [6600.0, 1.0], [6400.0, 3.0], [6900.0, 1.0], [6800.0, 2.0], [6700.0, 1.0], [7100.0, 1.0], [7300.0, 2.0], [7200.0, 1.0], [7500.0, 1.0], [7800.0, 1.0], [8100.0, 1.0], [8600.0, 1.0], [8300.0, 1.0], [8900.0, 1.0], [8800.0, 1.0], [9100.0, 3.0], [9000.0, 3.0], [9500.0, 4.0], [9400.0, 1.0], [9900.0, 1.0], [9800.0, 2.0], [10100.0, 2.0], [10500.0, 1.0], [10400.0, 1.0], [10300.0, 1.0], [11100.0, 1.0], [10800.0, 1.0], [11500.0, 1.0], [11300.0, 1.0], [11700.0, 1.0], [12200.0, 2.0], [12100.0, 1.0], [12000.0, 1.0], [11900.0, 1.0], [11800.0, 1.0], [12700.0, 2.0], [12400.0, 4.0], [12500.0, 2.0], [12300.0, 2.0], [13200.0, 2.0], [12900.0, 2.0], [13800.0, 1.0], [13700.0, 2.0], [13500.0, 1.0], [13600.0, 1.0], [14000.0, 1.0], [14200.0, 2.0], [14400.0, 1.0], [14500.0, 1.0], [15200.0, 3.0], [15300.0, 3.0], [14900.0, 4.0], [15000.0, 2.0], [15700.0, 2.0], [15400.0, 1.0], [16100.0, 5.0], [16000.0, 1.0], [15900.0, 1.0], [16200.0, 1.0], [16400.0, 1.0], [17200.0, 3.0], [16600.0, 1.0], [17400.0, 1.0], [18000.0, 2.0], [18200.0, 2.0], [17600.0, 3.0], [18400.0, 3.0], [19000.0, 1.0], [18600.0, 3.0], [19400.0, 2.0], [20000.0, 3.0], [20200.0, 3.0], [21000.0, 2.0], [21200.0, 1.0], [21600.0, 1.0], [22000.0, 2.0], [21800.0, 2.0], [22800.0, 4.0], [23200.0, 3.0], [23400.0, 4.0], [22600.0, 2.0], [23000.0, 1.0], [24000.0, 2.0], [23600.0, 2.0], [24400.0, 2.0], [25000.0, 1.0], [24600.0, 1.0], [25400.0, 1.0], [26000.0, 2.0], [26200.0, 3.0], [26600.0, 2.0], [25800.0, 2.0], [26400.0, 2.0], [25600.0, 1.0], [27000.0, 2.0], [27400.0, 1.0], [28200.0, 2.0], [28600.0, 1.0], [28000.0, 1.0], [29200.0, 3.0], [29400.0, 1.0], [28800.0, 1.0], [30600.0, 1.0], [29800.0, 3.0], [30400.0, 3.0], [30000.0, 1.0], [30800.0, 2.0], [31400.0, 1.0], [31000.0, 1.0], [32600.0, 1.0], [32000.0, 1.0], [31800.0, 1.0], [33200.0, 1.0], [34000.0, 2.0], [34800.0, 1.0], [34400.0, 1.0], [36800.0, 3.0], [35600.0, 1.0], [35200.0, 2.0], [37600.0, 1.0], [40800.0, 1.0], [42800.0, 1.0], [41600.0, 2.0], [44000.0, 2.0], [45600.0, 1.0], [46000.0, 1.0], [46400.0, 1.0], [45200.0, 1.0], [48400.0, 1.0], [50800.0, 1.0], [54400.0, 3.0], [57200.0, 1.0], [59600.0, 1.0], [34300.0, 1.0], [34700.0, 2.0], [33500.0, 1.0], [35500.0, 1.0], [36300.0, 1.0], [38300.0, 2.0], [39500.0, 2.0], [42700.0, 2.0], [41500.0, 1.0], [43900.0, 2.0], [45100.0, 1.0], [48700.0, 1.0], [50700.0, 1.0], [53100.0, 1.0], [56300.0, 1.0], [60300.0, 1.0], [16500.0, 1.0], [17300.0, 1.0], [17100.0, 1.0], [18100.0, 1.0], [17500.0, 2.0], [18300.0, 2.0], [17700.0, 1.0], [17900.0, 1.0], [19100.0, 2.0], [19300.0, 1.0], [19700.0, 2.0], [20100.0, 3.0], [19900.0, 2.0], [21100.0, 1.0], [21300.0, 3.0], [20500.0, 4.0], [20900.0, 1.0], [21500.0, 2.0], [22300.0, 2.0], [21700.0, 3.0], [22500.0, 2.0], [22100.0, 1.0], [23100.0, 2.0], [22900.0, 2.0], [23500.0, 2.0], [22700.0, 1.0], [24100.0, 2.0], [24500.0, 4.0], [23900.0, 3.0], [24700.0, 1.0], [25100.0, 1.0], [26300.0, 2.0], [26100.0, 1.0], [25700.0, 3.0], [27100.0, 2.0], [27300.0, 1.0], [28100.0, 2.0], [28300.0, 2.0], [27700.0, 3.0], [28500.0, 1.0], [29100.0, 2.0], [28700.0, 1.0], [28900.0, 1.0], [30700.0, 1.0], [30100.0, 1.0], [30900.0, 1.0], [31500.0, 2.0], [32300.0, 1.0], [32100.0, 1.0], [32700.0, 2.0], [33000.0, 1.0], [38200.0, 1.0], [37800.0, 3.0], [38600.0, 1.0], [40600.0, 1.0], [42600.0, 1.0], [42200.0, 1.0], [43000.0, 1.0], [43800.0, 1.0], [43400.0, 1.0], [45400.0, 2.0], [46200.0, 2.0], [45800.0, 1.0], [48600.0, 1.0], [47800.0, 1.0], [50200.0, 1.0], [53000.0, 1.0], [55800.0, 1.0], [55400.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 118.0], [34100.0, 2.0], [34500.0, 1.0], [35300.0, 1.0], [34900.0, 1.0], [36500.0, 2.0], [39300.0, 1.0], [41300.0, 2.0], [42500.0, 1.0], [43700.0, 3.0], [44900.0, 2.0], [45300.0, 1.0], [45700.0, 1.0], [48100.0, 1.0], [200.0, 2.0], [52900.0, 1.0], [54100.0, 2.0], [56900.0, 1.0], [59300.0, 1.0], [60100.0, 1.0], [300.0, 3.0], [400.0, 2.0], [4500.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [5000.0, 2.0], [5100.0, 4.0], [5300.0, 2.0], [5600.0, 1.0], [5700.0, 1.0], [6000.0, 3.0], [6100.0, 1.0], [6200.0, 2.0], [6300.0, 2.0], [6600.0, 2.0], [6500.0, 2.0], [6900.0, 2.0], [7100.0, 2.0], [7200.0, 1.0], [7600.0, 1.0], [7900.0, 1.0], [8100.0, 1.0], [8700.0, 3.0], [8500.0, 1.0], [8300.0, 1.0], [9200.0, 1.0], [8800.0, 3.0], [8900.0, 1.0], [9300.0, 4.0], [9700.0, 1.0], [9500.0, 1.0], [9600.0, 1.0], [10200.0, 1.0], [9900.0, 1.0], [9800.0, 2.0], [10100.0, 1.0], [10500.0, 1.0], [11200.0, 1.0], [10800.0, 1.0], [11100.0, 1.0], [11500.0, 2.0], [11700.0, 2.0], [12000.0, 2.0], [12100.0, 4.0], [11900.0, 1.0], [12200.0, 3.0], [12400.0, 2.0], [12300.0, 1.0], [12700.0, 2.0], [12900.0, 2.0], [13300.0, 2.0], [13600.0, 1.0], [13700.0, 1.0], [13500.0, 2.0], [14200.0, 1.0], [14000.0, 2.0], [14300.0, 1.0], [14700.0, 3.0], [14600.0, 2.0], [14800.0, 2.0], [15000.0, 1.0], [15100.0, 3.0], [14900.0, 2.0], [15800.0, 5.0], [15700.0, 1.0], [15400.0, 1.0], [15500.0, 2.0], [16300.0, 1.0], [16100.0, 1.0], [15900.0, 1.0], [17000.0, 3.0], [16800.0, 1.0], [16400.0, 1.0], [17400.0, 3.0], [17200.0, 1.0], [17800.0, 1.0], [17600.0, 1.0], [18400.0, 2.0], [18000.0, 2.0], [18200.0, 3.0], [18600.0, 1.0], [19200.0, 1.0], [19000.0, 1.0], [20200.0, 1.0], [20000.0, 2.0], [19800.0, 2.0], [20800.0, 1.0], [20600.0, 1.0], [21000.0, 3.0], [21400.0, 1.0], [21200.0, 2.0], [22000.0, 1.0], [21800.0, 3.0], [21600.0, 2.0], [22200.0, 1.0], [22400.0, 1.0], [23000.0, 2.0], [23200.0, 2.0], [22600.0, 4.0], [22800.0, 1.0], [24200.0, 3.0], [24400.0, 1.0], [23600.0, 1.0], [24800.0, 1.0], [25400.0, 3.0], [25200.0, 1.0], [25800.0, 1.0], [26400.0, 2.0], [26200.0, 1.0], [25600.0, 1.0], [26000.0, 1.0], [26800.0, 4.0], [27400.0, 2.0], [27200.0, 1.0], [27800.0, 1.0], [28000.0, 1.0], [28400.0, 1.0], [28600.0, 1.0], [28200.0, 1.0], [28800.0, 2.0], [29600.0, 2.0], [29200.0, 1.0], [29000.0, 2.0], [30400.0, 1.0], [30200.0, 1.0], [31200.0, 1.0], [30800.0, 1.0], [31600.0, 1.0], [32000.0, 1.0], [32400.0, 1.0], [34400.0, 1.0], [33200.0, 1.0], [32800.0, 1.0], [36000.0, 1.0], [38000.0, 2.0], [37600.0, 2.0], [40400.0, 1.0], [39200.0, 1.0], [42400.0, 1.0], [43600.0, 2.0], [45600.0, 1.0], [46000.0, 1.0], [48400.0, 1.0], [50000.0, 1.0], [52800.0, 1.0], [55600.0, 1.0], [56000.0, 1.0], [37900.0, 1.0], [38300.0, 2.0], [37500.0, 1.0], [40300.0, 1.0], [39500.0, 1.0], [39100.0, 1.0], [42300.0, 1.0], [41500.0, 1.0], [41900.0, 1.0], [42700.0, 2.0], [43100.0, 1.0], [43900.0, 1.0], [45100.0, 2.0], [45900.0, 2.0], [46700.0, 1.0], [48300.0, 1.0], [47500.0, 1.0], [49100.0, 3.0], [55500.0, 1.0], [17300.0, 2.0], [16900.0, 1.0], [17700.0, 2.0], [18100.0, 2.0], [17500.0, 1.0], [18300.0, 1.0], [19300.0, 1.0], [19100.0, 1.0], [18900.0, 2.0], [19700.0, 4.0], [20300.0, 3.0], [19900.0, 3.0], [19500.0, 1.0], [21300.0, 1.0], [20700.0, 2.0], [21500.0, 2.0], [20900.0, 1.0], [22500.0, 2.0], [22300.0, 2.0], [22100.0, 1.0], [22900.0, 3.0], [22700.0, 2.0], [23300.0, 4.0], [23100.0, 1.0], [23900.0, 2.0], [24500.0, 1.0], [23700.0, 4.0], [24100.0, 2.0], [24300.0, 1.0], [25500.0, 2.0], [24700.0, 1.0], [26100.0, 3.0], [25700.0, 1.0], [25900.0, 3.0], [27100.0, 1.0], [27500.0, 1.0], [27900.0, 2.0], [28100.0, 2.0], [28500.0, 1.0], [27700.0, 1.0], [28900.0, 1.0], [29500.0, 1.0], [28700.0, 1.0], [30300.0, 1.0], [30700.0, 1.0], [30500.0, 2.0], [30100.0, 2.0], [29700.0, 1.0], [29900.0, 1.0], [31300.0, 2.0], [31700.0, 1.0], [32300.0, 1.0], [31900.0, 1.0], [32500.0, 1.0], [33000.0, 1.0], [33800.0, 2.0], [34600.0, 1.0], [36600.0, 1.0], [35400.0, 3.0], [35000.0, 1.0], [38600.0, 1.0], [37400.0, 1.0], [40600.0, 1.0], [42200.0, 1.0], [42600.0, 1.0], [41400.0, 1.0], [45800.0, 2.0], [50600.0, 1.0], [54200.0, 2.0], [55400.0, 1.0], [57800.0, 1.0], [59800.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 24.0], [600.0, 1.0], [1200.0, 1.0], [1300.0, 1.0], [700.0, 1.0], [200.0, 474.0], [400.0, 12.0], [800.0, 1.0], [1600.0, 2.0], [500.0, 3.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 422.0, "series": [{"data": [[0.0, 422.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 390.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 219.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.68518172E12, "maxY": 23.783216783216783, "series": [{"data": [[1.68518226E12, 15.237623762376234], [1.68518256E12, 23.783216783216783], [1.68518262E12, 8.744186046511627], [1.68518196E12, 8.333333333333332], [1.68518202E12, 10.0], [1.68518232E12, 19.000000000000007], [1.68518238E12, 20.0], [1.68518172E12, 1.5], [1.68518178E12, 3.8181818181818183], [1.68518208E12, 10.492753623188408], [1.68518214E12, 14.149999999999999], [1.68518244E12, 20.10240963855422], [1.6851825E12, 23.533678756476686], [1.68518184E12, 5.0], [1.6851819E12, 5.0625], [1.6851822E12, 15.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68518262E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 237.0, "minX": 1.0, "maxY": 38267.59999999999, "series": [{"data": [[2.0, 5667.0], [3.0, 6734.0], [4.0, 11670.0], [5.0, 20545.6], [6.0, 17927.5], [7.0, 24030.0], [8.0, 29407.166666666668], [9.0, 12920.0], [10.0, 38267.59999999999], [11.0, 2982.875], [12.0, 8163.5], [13.0, 7885.666666666667], [14.0, 6606.5], [15.0, 20472.824742268043], [16.0, 14978.6], [1.0, 5448.0], [17.0, 24283.57142857143], [18.0, 17084.000000000004], [19.0, 19888.666666666668], [20.0, 14770.70394736842], [21.0, 16496.866666666665], [22.0, 21622.66666666667], [23.0, 21591.071428571428], [24.0, 18723.466666666664], [25.0, 22503.53333333334]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[17.007692307692313, 18790.615384615394]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 5399.75], [3.0, 6506.0], [4.0, 14287.75], [5.0, 20267.266666666663], [6.0, 17673.5], [7.0, 23795.0], [8.0, 29139.166666666664], [9.0, 16883.666666666668], [10.0, 38002.942857142865], [11.0, 2730.0625], [12.0, 7880.333333333334], [13.0, 8961.0], [14.0, 6363.833333333334], [15.0, 20170.79381443299], [16.0, 14725.5], [1.0, 5192.0], [17.0, 24042.85714285714], [18.0, 16830.083333333332], [19.0, 19639.5], [20.0, 14519.276315789475], [21.0, 16260.999999999996], [22.0, 21366.66666666667], [23.0, 21344.785714285714], [24.0, 18474.533333333333], [25.0, 22629.42372881356]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[17.04069767441861, 18669.174418604653]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 241.25], [3.0, 240.0], [4.0, 248.0], [5.0, 283.1333333333334], [6.0, 248.0], [7.0, 300.0], [8.0, 251.33333333333331], [9.0, 239.25], [10.0, 255.71428571428578], [11.0, 258.2666666666667], [12.0, 288.5], [13.0, 251.4], [14.0, 237.0], [15.0, 299.7938144329896], [1.0, 329.0], [16.0, 249.33333333333334], [17.0, 251.625], [18.0, 248.74999999999997], [19.0, 244.33333333333334], [20.0, 251.3815789473685], [21.0, 326.125], [22.0, 251.66666666666669], [23.0, 244.14285714285714], [24.0, 266.20000000000005], [25.0, 247.33898305084742]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[17.00192307692308, 265.048076923077]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6.866666666666666, "minX": 1.68518172E12, "maxY": 10814.233333333334, "series": [{"data": [[1.68518226E12, 2381.4], [1.68518256E12, 3232.133333333333], [1.68518262E12, 995.9833333333333], [1.68518196E12, 805.5833333333334], [1.68518202E12, 1467.6666666666667], [1.68518232E12, 3474.5666666666666], [1.68518238E12, 3821.5333333333333], [1.68518172E12, 36.28333333333333], [1.68518178E12, 878.9666666666667], [1.68518208E12, 1293.0166666666667], [1.68518214E12, 1899.1], [1.68518244E12, 3553.4333333333334], [1.6851825E12, 4915.05], [1.68518184E12, 1100.75], [1.6851819E12, 770.1166666666667], [1.6851822E12, 1815.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68518226E12, 4986.75], [1.68518256E12, 6349.933333333333], [1.68518262E12, 2906.4666666666667], [1.68518196E12, 1417.9166666666667], [1.68518202E12, 3338.35], [1.68518232E12, 7646.1], [1.68518238E12, 10814.233333333334], [1.68518172E12, 6.866666666666666], [1.68518178E12, 1660.3166666666666], [1.68518208E12, 3360.0333333333333], [1.68518214E12, 7415.316666666667], [1.68518244E12, 7688.1], [1.6851825E12, 9419.55], [1.68518184E12, 2400.133333333333], [1.6851819E12, 1557.8666666666666], [1.6851822E12, 6238.233333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68518262E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 243.28571428571428, "minX": 1.68518172E12, "maxY": 38681.94999999999, "series": [{"data": [[1.68518226E12, 22187.852941176472], [1.68518256E12, 21977.65454545454], [1.68518262E12, 15269.750000000007], [1.68518196E12, 29468.625], [1.68518202E12, 37840.66666666667], [1.68518232E12, 15043.94339622642], [1.68518238E12, 12780.070422535213], [1.68518172E12, 6961.0], [1.68518178E12, 13066.0], [1.68518208E12, 19907.875000000007], [1.68518214E12, 14039.108695652174], [1.68518244E12, 17991.93103448276], [1.6851825E12, 21148.949152542376], [1.68518184E12, 19827.133333333335], [1.6851819E12, 21488.545454545456], [1.6851822E12, 19366.28205128205]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68518226E12, 20541.424242424247], [1.68518256E12, 22429.812499999996], [1.68518262E12, 19294.9], [1.68518196E12, 26991.666666666668], [1.68518202E12, 38681.94999999999], [1.68518232E12, 16024.377358490563], [1.68518238E12, 12126.959459459456], [1.68518178E12, 12203.2], [1.68518208E12, 22129.59090909091], [1.68518214E12, 14041.6], [1.68518244E12, 18065.90384615385], [1.6851825E12, 20311.123076923075], [1.68518184E12, 19509.066666666662], [1.6851819E12, 22444.2], [1.6851822E12, 17804.100000000002]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68518226E12, 247.32352941176467], [1.68518256E12, 279.37500000000006], [1.68518262E12, 243.28571428571428], [1.68518196E12, 250.8461538461538], [1.68518202E12, 265.0], [1.68518232E12, 246.15789473684214], [1.68518238E12, 244.85915492957744], [1.68518172E12, 329.0], [1.68518178E12, 252.2857142857143], [1.68518208E12, 253.17391304347825], [1.68518214E12, 347.1836734693878], [1.68518244E12, 264.0], [1.6851825E12, 250.37681159420293], [1.68518184E12, 306.6666666666667], [1.6851819E12, 254.0], [1.6851822E12, 260.27500000000003]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68518262E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 242.85714285714286, "minX": 1.68518172E12, "maxY": 38681.4, "series": [{"data": [[1.68518226E12, 22187.14705882354], [1.68518256E12, 21976.799999999996], [1.68518262E12, 15269.25], [1.68518196E12, 29466.625000000004], [1.68518202E12, 37839.66666666667], [1.68518232E12, 15043.547169811322], [1.68518238E12, 12779.788732394365], [1.68518172E12, 6956.0], [1.68518178E12, 13065.444444444445], [1.68518208E12, 19906.416666666664], [1.68518214E12, 14038.826086956527], [1.68518244E12, 17991.310344827587], [1.6851825E12, 21148.18644067797], [1.68518184E12, 19826.266666666663], [1.6851819E12, 21488.090909090908], [1.6851822E12, 19363.358974358973]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68518226E12, 20541.272727272728], [1.68518256E12, 22429.395833333325], [1.68518262E12, 19294.550000000007], [1.68518196E12, 26991.222222222223], [1.68518202E12, 38681.4], [1.68518232E12, 16024.226415094341], [1.68518238E12, 12126.918918918916], [1.68518178E12, 12203.0], [1.68518208E12, 22129.36363636364], [1.68518214E12, 14041.422222222222], [1.68518244E12, 18065.673076923078], [1.6851825E12, 20310.815384615387], [1.68518184E12, 19508.866666666665], [1.6851819E12, 22444.0], [1.6851822E12, 17803.924999999996]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68518226E12, 247.08823529411765], [1.68518256E12, 278.925], [1.68518262E12, 242.85714285714286], [1.68518196E12, 250.53846153846152], [1.68518202E12, 263.4], [1.68518232E12, 245.92982456140348], [1.68518238E12, 244.64788732394368], [1.68518172E12, 324.0], [1.68518178E12, 251.50000000000003], [1.68518208E12, 252.95652173913044], [1.68518214E12, 347.0408163265306], [1.68518244E12, 263.50000000000006], [1.6851825E12, 249.98550724637684], [1.68518184E12, 306.53333333333336], [1.6851819E12, 252.72727272727275], [1.6851822E12, 257.32500000000005]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68518262E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68518172E12, "maxY": 193.0, "series": [{"data": [[1.68518226E12, 119.47058823529413], [1.68518256E12, 123.47272727272727], [1.68518262E12, 117.62500000000001], [1.68518196E12, 136.37499999999997], [1.68518202E12, 121.0952380952381], [1.68518232E12, 117.88679245283018], [1.68518238E12, 115.74647887323944], [1.68518172E12, 193.0], [1.68518178E12, 117.55555555555556], [1.68518208E12, 116.29166666666669], [1.68518214E12, 146.3695652173913], [1.68518244E12, 126.01724137931035], [1.6851825E12, 115.33898305084746], [1.68518184E12, 172.86666666666667], [1.6851819E12, 119.54545454545456], [1.6851822E12, 179.5897435897436]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68518226E12, 0.0], [1.68518256E12, 0.0], [1.68518262E12, 0.0], [1.68518196E12, 0.0], [1.68518202E12, 0.0], [1.68518232E12, 0.0], [1.68518238E12, 0.0], [1.68518178E12, 0.0], [1.68518208E12, 0.0], [1.68518214E12, 0.0], [1.68518244E12, 0.0], [1.6851825E12, 0.0], [1.68518184E12, 0.0], [1.6851819E12, 0.0], [1.6851822E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68518226E12, 120.38235294117646], [1.68518256E12, 125.70000000000002], [1.68518262E12, 115.85714285714286], [1.68518196E12, 118.61538461538461], [1.68518202E12, 120.2], [1.68518232E12, 117.66666666666663], [1.68518238E12, 116.49295774647891], [1.68518172E12, 193.0], [1.68518178E12, 117.07142857142858], [1.68518208E12, 116.13043478260869], [1.68518214E12, 192.4081632653061], [1.68518244E12, 125.10714285714285], [1.6851825E12, 116.07246376811595], [1.68518184E12, 172.8], [1.6851819E12, 132.99999999999997], [1.6851822E12, 119.47500000000001]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68518262E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 226.0, "minX": 1.68518172E12, "maxY": 59869.0, "series": [{"data": [[1.68518226E12, 32385.0], [1.68518256E12, 50060.0], [1.68518262E12, 39283.0], [1.68518196E12, 36606.0], [1.68518202E12, 45368.0], [1.68518232E12, 37994.0], [1.68518238E12, 45872.0], [1.68518172E12, 329.0], [1.68518178E12, 17091.0], [1.68518208E12, 48410.0], [1.68518214E12, 56077.0], [1.68518244E12, 46743.0], [1.6851825E12, 36099.0], [1.68518184E12, 22566.0], [1.6851819E12, 24293.0], [1.6851822E12, 59869.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68518226E12, 29288.5], [1.68518256E12, 35588.00000000001], [1.68518262E12, 34565.399999999994], [1.68518196E12, 33573.6], [1.68518202E12, 43587.6], [1.68518232E12, 31245.8], [1.68518238E12, 39243.59999999999], [1.68518172E12, 329.0], [1.68518178E12, 16245.5], [1.68518208E12, 48028.8], [1.68518214E12, 55003.6], [1.68518244E12, 30656.800000000003], [1.6851825E12, 27001.5], [1.68518184E12, 21806.8], [1.6851819E12, 23767.4], [1.6851822E12, 57247.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68518226E12, 32385.0], [1.68518256E12, 50060.0], [1.68518262E12, 39283.0], [1.68518196E12, 36606.0], [1.68518202E12, 45368.0], [1.68518232E12, 37994.0], [1.68518238E12, 45872.0], [1.68518172E12, 329.0], [1.68518178E12, 17091.0], [1.68518208E12, 48410.0], [1.68518214E12, 56077.0], [1.68518244E12, 46743.0], [1.6851825E12, 34962.55000000002], [1.68518184E12, 22566.0], [1.6851819E12, 24293.0], [1.6851822E12, 59869.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68518226E12, 31185.0], [1.68518256E12, 40018.25], [1.68518262E12, 38599.799999999996], [1.68518196E12, 36187.95], [1.68518202E12, 44845.299999999996], [1.68518232E12, 32511.5], [1.68518238E12, 43400.149999999994], [1.68518172E12, 329.0], [1.68518178E12, 16902.75], [1.68518208E12, 48357.2], [1.68518214E12, 55781.6], [1.68518244E12, 37909.35], [1.6851825E12, 29171.25], [1.68518184E12, 22299.25], [1.6851819E12, 24253.899999999998], [1.6851822E12, 59455.05]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68518226E12, 227.0], [1.68518256E12, 226.0], [1.68518262E12, 228.0], [1.68518196E12, 231.0], [1.68518202E12, 230.0], [1.68518232E12, 226.0], [1.68518238E12, 226.0], [1.68518172E12, 329.0], [1.68518178E12, 231.0], [1.68518208E12, 226.0], [1.68518214E12, 230.0], [1.68518244E12, 226.0], [1.6851825E12, 226.0], [1.68518184E12, 228.0], [1.6851819E12, 228.0], [1.6851822E12, 228.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68518226E12, 378.5], [1.68518256E12, 8840.5], [1.68518262E12, 12284.0], [1.68518196E12, 263.0], [1.68518202E12, 9166.0], [1.68518232E12, 282.5], [1.68518238E12, 302.0], [1.68518172E12, 329.0], [1.68518178E12, 281.5], [1.68518208E12, 283.0], [1.68518214E12, 342.0], [1.68518244E12, 366.0], [1.6851825E12, 308.5], [1.68518184E12, 8441.0], [1.6851819E12, 281.0], [1.6851822E12, 304.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68518262E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 120.0, "minX": 1.0, "maxY": 45125.0, "series": [{"data": [[2.0, 290.0], [8.0, 457.5], [9.0, 24648.0], [10.0, 299.0], [11.0, 9891.5], [3.0, 314.5], [12.0, 20188.5], [14.0, 24734.0], [15.0, 45125.0], [1.0, 286.5], [4.0, 306.0], [5.0, 5086.0], [6.0, 10889.0], [7.0, 278.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 122.0], [2.0, 127.0], [1.0, 122.5], [8.0, 120.0], [9.0, 230.0], [5.0, 173.0], [10.0, 228.0], [3.0, 121.0], [6.0, 227.0], [7.0, 120.5], [14.0, 231.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 120.0, "minX": 1.0, "maxY": 45125.0, "series": [{"data": [[2.0, 290.0], [8.0, 457.5], [9.0, 24648.0], [10.0, 299.0], [11.0, 9891.5], [3.0, 313.0], [12.0, 20188.0], [14.0, 24734.0], [15.0, 45125.0], [1.0, 285.0], [4.0, 305.0], [5.0, 5086.0], [6.0, 10889.0], [7.0, 277.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 122.0], [2.0, 127.0], [1.0, 122.5], [8.0, 120.0], [9.0, 230.0], [5.0, 173.0], [10.0, 228.0], [3.0, 121.0], [6.0, 227.0], [7.0, 120.0], [14.0, 231.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68518172E12, "maxY": 2.466666666666667, "series": [{"data": [[1.68518226E12, 1.1333333333333333], [1.68518256E12, 1.5166666666666666], [1.68518262E12, 0.18333333333333332], [1.68518196E12, 0.4166666666666667], [1.68518202E12, 0.55], [1.68518232E12, 1.8666666666666667], [1.68518238E12, 2.466666666666667], [1.68518172E12, 0.03333333333333333], [1.68518178E12, 0.4666666666666667], [1.68518208E12, 0.8333333333333334], [1.68518214E12, 1.6], [1.68518244E12, 1.85], [1.6851825E12, 2.1], [1.68518184E12, 0.45], [1.6851819E12, 0.4166666666666667], [1.6851822E12, 1.3833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68518262E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68518172E12, "maxY": 2.2333333333333334, "series": [{"data": [[1.68518226E12, 1.0666666666666667], [1.68518256E12, 1.4666666666666666], [1.68518262E12, 0.45], [1.68518196E12, 0.36666666666666664], [1.68518202E12, 0.6666666666666666], [1.68518232E12, 1.4666666666666666], [1.68518238E12, 1.4333333333333333], [1.68518172E12, 0.016666666666666666], [1.68518178E12, 0.4], [1.68518208E12, 0.5166666666666667], [1.68518214E12, 0.55], [1.68518244E12, 1.5333333333333334], [1.6851825E12, 2.2333333333333334], [1.68518184E12, 0.5], [1.6851819E12, 0.35], [1.6851822E12, 0.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68518226E12, 0.05], [1.68518208E12, 0.23333333333333334], [1.68518214E12, 1.0166666666666666], [1.68518244E12, 0.26666666666666666], [1.68518232E12, 0.36666666666666664], [1.68518238E12, 0.9833333333333333], [1.6851822E12, 0.7166666666666667]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.6851822E12, 0.016666666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68518262E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68518172E12, "maxY": 1.15, "series": [{"data": [[1.68518226E12, 0.55], [1.68518256E12, 0.6666666666666666], [1.68518262E12, 0.11666666666666667], [1.68518196E12, 0.21666666666666667], [1.68518202E12, 0.3333333333333333], [1.68518232E12, 0.8], [1.68518238E12, 0.75], [1.68518172E12, 0.016666666666666666], [1.68518178E12, 0.23333333333333334], [1.68518208E12, 0.31666666666666665], [1.68518214E12, 0.31666666666666665], [1.68518244E12, 0.8333333333333334], [1.6851825E12, 1.15], [1.68518184E12, 0.25], [1.6851819E12, 0.18333333333333332], [1.6851822E12, 0.38333333333333336]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68518226E12, 0.016666666666666666], [1.68518208E12, 0.06666666666666667], [1.68518214E12, 0.5], [1.68518244E12, 0.1], [1.68518232E12, 0.15], [1.68518238E12, 0.43333333333333335], [1.6851822E12, 0.2833333333333333]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68518226E12, 0.03333333333333333], [1.68518208E12, 0.16666666666666666], [1.68518214E12, 0.5166666666666667], [1.68518244E12, 0.16666666666666666], [1.68518232E12, 0.21666666666666667], [1.68518238E12, 0.55], [1.6851822E12, 0.45]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68518226E12, 0.4666666666666667], [1.68518256E12, 0.9166666666666666], [1.68518262E12, 0.26666666666666666], [1.68518196E12, 0.13333333333333333], [1.68518202E12, 0.35], [1.68518232E12, 0.6166666666666667], [1.68518238E12, 0.43333333333333335], [1.68518172E12, 0.016666666666666666], [1.68518178E12, 0.15], [1.68518208E12, 0.18333333333333332], [1.68518214E12, 0.15], [1.68518244E12, 0.6166666666666667], [1.6851825E12, 0.9833333333333333], [1.68518184E12, 0.25], [1.6851819E12, 0.18333333333333332], [1.6851822E12, 0.08333333333333333]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68518226E12, 0.1], [1.68518208E12, 0.21666666666666667], [1.68518214E12, 0.6166666666666667], [1.68518244E12, 0.35], [1.68518232E12, 0.26666666666666666], [1.68518238E12, 0.75], [1.6851822E12, 0.5666666666666667]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68518226E12, 0.5166666666666667], [1.68518256E12, 0.8], [1.68518262E12, 0.3333333333333333], [1.68518196E12, 0.15], [1.68518202E12, 0.3333333333333333], [1.68518232E12, 0.6666666666666666], [1.68518238E12, 0.6833333333333333], [1.68518178E12, 0.16666666666666666], [1.68518208E12, 0.2], [1.68518214E12, 0.23333333333333334], [1.68518244E12, 0.7], [1.6851825E12, 1.0833333333333333], [1.68518184E12, 0.25], [1.6851819E12, 0.16666666666666666], [1.6851822E12, 0.21666666666666667]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68518262E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68518172E12, "maxY": 3.216666666666667, "series": [{"data": [[1.68518226E12, 1.5333333333333334], [1.68518256E12, 2.3833333333333333], [1.68518262E12, 0.7166666666666667], [1.68518196E12, 0.5], [1.68518202E12, 1.0166666666666666], [1.68518232E12, 2.0833333333333335], [1.68518238E12, 1.8666666666666667], [1.68518172E12, 0.03333333333333333], [1.68518178E12, 0.55], [1.68518208E12, 0.7], [1.68518214E12, 0.7], [1.68518244E12, 2.15], [1.6851825E12, 3.216666666666667], [1.68518184E12, 0.75], [1.6851819E12, 0.5333333333333333], [1.6851822E12, 0.6833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68518226E12, 0.15], [1.68518208E12, 0.45], [1.68518214E12, 1.6333333333333333], [1.68518244E12, 0.6166666666666667], [1.68518232E12, 0.6333333333333333], [1.68518238E12, 1.7333333333333334], [1.6851822E12, 1.3]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68518262E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

