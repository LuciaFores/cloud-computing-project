/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 114.0, "minX": 0.0, "maxY": 60597.0, "series": [{"data": [[0.0, 240.0], [0.1, 240.0], [0.2, 244.0], [0.3, 244.0], [0.4, 253.0], [0.5, 253.0], [0.6, 342.0], [0.7, 342.0], [0.8, 343.0], [0.9, 343.0], [1.0, 343.0], [1.1, 343.0], [1.2, 344.0], [1.3, 344.0], [1.4, 344.0], [1.5, 344.0], [1.6, 344.0], [1.7, 344.0], [1.8, 344.0], [1.9, 344.0], [2.0, 344.0], [2.1, 344.0], [2.2, 344.0], [2.3, 344.0], [2.4, 347.0], [2.5, 347.0], [2.6, 347.0], [2.7, 347.0], [2.8, 347.0], [2.9, 348.0], [3.0, 348.0], [3.1, 348.0], [3.2, 348.0], [3.3, 348.0], [3.4, 348.0], [3.5, 349.0], [3.6, 349.0], [3.7, 349.0], [3.8, 349.0], [3.9, 349.0], [4.0, 349.0], [4.1, 349.0], [4.2, 349.0], [4.3, 350.0], [4.4, 350.0], [4.5, 350.0], [4.6, 350.0], [4.7, 351.0], [4.8, 351.0], [4.9, 351.0], [5.0, 351.0], [5.1, 353.0], [5.2, 353.0], [5.3, 353.0], [5.4, 356.0], [5.5, 356.0], [5.6, 357.0], [5.7, 357.0], [5.8, 357.0], [5.9, 357.0], [6.0, 358.0], [6.1, 358.0], [6.2, 358.0], [6.3, 358.0], [6.4, 358.0], [6.5, 358.0], [6.6, 359.0], [6.7, 359.0], [6.8, 359.0], [6.9, 359.0], [7.0, 360.0], [7.1, 360.0], [7.2, 360.0], [7.3, 360.0], [7.4, 360.0], [7.5, 360.0], [7.6, 361.0], [7.7, 361.0], [7.8, 361.0], [7.9, 361.0], [8.0, 361.0], [8.1, 361.0], [8.2, 361.0], [8.3, 362.0], [8.4, 362.0], [8.5, 362.0], [8.6, 362.0], [8.7, 362.0], [8.8, 362.0], [8.9, 363.0], [9.0, 363.0], [9.1, 363.0], [9.2, 363.0], [9.3, 364.0], [9.4, 364.0], [9.5, 365.0], [9.6, 365.0], [9.7, 365.0], [9.8, 365.0], [9.9, 365.0], [10.0, 365.0], [10.1, 365.0], [10.2, 365.0], [10.3, 366.0], [10.4, 366.0], [10.5, 366.0], [10.6, 366.0], [10.7, 366.0], [10.8, 366.0], [10.9, 366.0], [11.0, 367.0], [11.1, 367.0], [11.2, 370.0], [11.3, 370.0], [11.4, 370.0], [11.5, 370.0], [11.6, 370.0], [11.7, 370.0], [11.8, 371.0], [11.9, 371.0], [12.0, 375.0], [12.1, 375.0], [12.2, 379.0], [12.3, 379.0], [12.4, 384.0], [12.5, 384.0], [12.6, 388.0], [12.7, 388.0], [12.8, 420.0], [12.9, 420.0], [13.0, 422.0], [13.1, 422.0], [13.2, 430.0], [13.3, 432.0], [13.4, 432.0], [13.5, 440.0], [13.6, 440.0], [13.7, 487.0], [13.8, 487.0], [13.9, 1021.0], [14.0, 1021.0], [14.1, 1385.0], [14.2, 1385.0], [14.3, 1884.0], [14.4, 1884.0], [14.5, 2205.0], [14.6, 2205.0], [14.7, 2799.0], [14.8, 2799.0], [14.9, 2916.0], [15.0, 2916.0], [15.1, 2952.0], [15.2, 2952.0], [15.3, 3023.0], [15.4, 3023.0], [15.5, 3589.0], [15.6, 3589.0], [15.7, 3957.0], [15.8, 4649.0], [15.9, 4649.0], [16.0, 4666.0], [16.1, 4666.0], [16.2, 4948.0], [16.3, 4948.0], [16.4, 4971.0], [16.5, 4971.0], [16.6, 5188.0], [16.7, 5188.0], [16.8, 5192.0], [16.9, 5192.0], [17.0, 5202.0], [17.1, 5202.0], [17.2, 5308.0], [17.3, 5308.0], [17.4, 5319.0], [17.5, 5319.0], [17.6, 5329.0], [17.7, 5329.0], [17.8, 5343.0], [17.9, 5343.0], [18.0, 5344.0], [18.1, 5344.0], [18.2, 5354.0], [18.3, 5354.0], [18.4, 5368.0], [18.5, 5373.0], [18.6, 5373.0], [18.7, 5379.0], [18.8, 5379.0], [18.9, 5386.0], [19.0, 5386.0], [19.1, 5388.0], [19.2, 5388.0], [19.3, 5416.0], [19.4, 5416.0], [19.5, 5421.0], [19.6, 5421.0], [19.7, 5423.0], [19.8, 5423.0], [19.9, 5424.0], [20.0, 5424.0], [20.1, 5470.0], [20.2, 5470.0], [20.3, 5498.0], [20.4, 5498.0], [20.5, 5510.0], [20.6, 5510.0], [20.7, 5541.0], [20.8, 5541.0], [20.9, 5635.0], [21.0, 5635.0], [21.1, 5646.0], [21.2, 5677.0], [21.3, 5677.0], [21.4, 5710.0], [21.5, 5710.0], [21.6, 5722.0], [21.7, 5722.0], [21.8, 5808.0], [21.9, 5808.0], [22.0, 5858.0], [22.1, 5858.0], [22.2, 5864.0], [22.3, 5864.0], [22.4, 5908.0], [22.5, 5908.0], [22.6, 5924.0], [22.7, 5924.0], [22.8, 5953.0], [22.9, 5953.0], [23.0, 5986.0], [23.1, 5986.0], [23.2, 6085.0], [23.3, 6085.0], [23.4, 6092.0], [23.5, 6092.0], [23.6, 6120.0], [23.7, 6125.0], [23.8, 6125.0], [23.9, 6159.0], [24.0, 6159.0], [24.1, 6204.0], [24.2, 6204.0], [24.3, 6208.0], [24.4, 6208.0], [24.5, 6383.0], [24.6, 6383.0], [24.7, 6404.0], [24.8, 6404.0], [24.9, 6410.0], [25.0, 6410.0], [25.1, 6473.0], [25.2, 6473.0], [25.3, 6572.0], [25.4, 6572.0], [25.5, 6594.0], [25.6, 6594.0], [25.7, 6609.0], [25.8, 6609.0], [25.9, 6675.0], [26.0, 6675.0], [26.1, 6777.0], [26.2, 6777.0], [26.3, 6781.0], [26.4, 6908.0], [26.5, 6908.0], [26.6, 6945.0], [26.7, 6945.0], [26.8, 7007.0], [26.9, 7007.0], [27.0, 7025.0], [27.1, 7025.0], [27.2, 7067.0], [27.3, 7067.0], [27.4, 7075.0], [27.5, 7075.0], [27.6, 7082.0], [27.7, 7082.0], [27.8, 7215.0], [27.9, 7215.0], [28.0, 7382.0], [28.1, 7382.0], [28.2, 7517.0], [28.3, 7517.0], [28.4, 7561.0], [28.5, 7561.0], [28.6, 7642.0], [28.7, 7642.0], [28.8, 7761.0], [28.9, 7761.0], [29.0, 7978.0], [29.1, 8003.0], [29.2, 8003.0], [29.3, 8147.0], [29.4, 8147.0], [29.5, 8332.0], [29.6, 8332.0], [29.7, 8363.0], [29.8, 8363.0], [29.9, 8395.0], [30.0, 8395.0], [30.1, 8402.0], [30.2, 8402.0], [30.3, 8428.0], [30.4, 8428.0], [30.5, 8525.0], [30.6, 8525.0], [30.7, 8595.0], [30.8, 8595.0], [30.9, 8612.0], [31.0, 8612.0], [31.1, 8683.0], [31.2, 8683.0], [31.3, 8808.0], [31.4, 8808.0], [31.5, 8882.0], [31.6, 8887.0], [31.7, 8887.0], [31.8, 8918.0], [31.9, 8918.0], [32.0, 8933.0], [32.1, 8933.0], [32.2, 8976.0], [32.3, 8976.0], [32.4, 9057.0], [32.5, 9057.0], [32.6, 9091.0], [32.7, 9091.0], [32.8, 9157.0], [32.9, 9157.0], [33.0, 9276.0], [33.1, 9276.0], [33.2, 9346.0], [33.3, 9346.0], [33.4, 9357.0], [33.5, 9357.0], [33.6, 9406.0], [33.7, 9406.0], [33.8, 9447.0], [33.9, 9447.0], [34.0, 9500.0], [34.1, 9500.0], [34.2, 9513.0], [34.3, 9526.0], [34.4, 9526.0], [34.5, 9679.0], [34.6, 9679.0], [34.7, 9734.0], [34.8, 9734.0], [34.9, 9759.0], [35.0, 9759.0], [35.1, 9767.0], [35.2, 9767.0], [35.3, 9847.0], [35.4, 9847.0], [35.5, 9965.0], [35.6, 9965.0], [35.7, 9976.0], [35.8, 9976.0], [35.9, 9998.0], [36.0, 9998.0], [36.1, 10116.0], [36.2, 10116.0], [36.3, 10148.0], [36.4, 10148.0], [36.5, 10150.0], [36.6, 10150.0], [36.7, 10417.0], [36.8, 10417.0], [36.9, 10512.0], [37.0, 10551.0], [37.1, 10551.0], [37.2, 10567.0], [37.3, 10567.0], [37.4, 10748.0], [37.5, 10748.0], [37.6, 10761.0], [37.7, 10761.0], [37.8, 10878.0], [37.9, 10878.0], [38.0, 11044.0], [38.1, 11044.0], [38.2, 11114.0], [38.3, 11114.0], [38.4, 11117.0], [38.5, 11117.0], [38.6, 11124.0], [38.7, 11124.0], [38.8, 11215.0], [38.9, 11215.0], [39.0, 11403.0], [39.1, 11403.0], [39.2, 11420.0], [39.3, 11420.0], [39.4, 11521.0], [39.5, 11610.0], [39.6, 11610.0], [39.7, 11665.0], [39.8, 11665.0], [39.9, 11697.0], [40.0, 11697.0], [40.1, 11763.0], [40.2, 11763.0], [40.3, 12016.0], [40.4, 12016.0], [40.5, 12076.0], [40.6, 12076.0], [40.7, 12138.0], [40.8, 12138.0], [40.9, 12242.0], [41.0, 12242.0], [41.1, 12285.0], [41.2, 12285.0], [41.3, 12400.0], [41.4, 12400.0], [41.5, 12415.0], [41.6, 12415.0], [41.7, 12491.0], [41.8, 12491.0], [41.9, 12529.0], [42.0, 12529.0], [42.1, 12532.0], [42.2, 12759.0], [42.3, 12759.0], [42.4, 12768.0], [42.5, 12768.0], [42.6, 12867.0], [42.7, 12867.0], [42.8, 12897.0], [42.9, 12897.0], [43.0, 12930.0], [43.1, 12930.0], [43.2, 12995.0], [43.3, 12995.0], [43.4, 13026.0], [43.5, 13026.0], [43.6, 13057.0], [43.7, 13057.0], [43.8, 13274.0], [43.9, 13274.0], [44.0, 13287.0], [44.1, 13287.0], [44.2, 13312.0], [44.3, 13312.0], [44.4, 13339.0], [44.5, 13339.0], [44.6, 13357.0], [44.7, 13357.0], [44.8, 13426.0], [44.9, 13667.0], [45.0, 13667.0], [45.1, 13716.0], [45.2, 13716.0], [45.3, 13782.0], [45.4, 13782.0], [45.5, 13796.0], [45.6, 13796.0], [45.7, 13874.0], [45.8, 13874.0], [45.9, 13875.0], [46.0, 13875.0], [46.1, 13922.0], [46.2, 13922.0], [46.3, 13932.0], [46.4, 13932.0], [46.5, 13960.0], [46.6, 13960.0], [46.7, 14080.0], [46.8, 14080.0], [46.9, 14183.0], [47.0, 14183.0], [47.1, 14284.0], [47.2, 14284.0], [47.3, 14414.0], [47.4, 14462.0], [47.5, 14462.0], [47.6, 14505.0], [47.7, 14505.0], [47.8, 14625.0], [47.9, 14625.0], [48.0, 14696.0], [48.1, 14696.0], [48.2, 14956.0], [48.3, 14956.0], [48.4, 15047.0], [48.5, 15047.0], [48.6, 15089.0], [48.7, 15089.0], [48.8, 15225.0], [48.9, 15225.0], [49.0, 15410.0], [49.1, 15410.0], [49.2, 15420.0], [49.3, 15420.0], [49.4, 15457.0], [49.5, 15457.0], [49.6, 15551.0], [49.7, 15551.0], [49.8, 15567.0], [49.9, 15567.0], [50.0, 15594.0], [50.1, 15595.0], [50.2, 15595.0], [50.3, 15639.0], [50.4, 15639.0], [50.5, 16060.0], [50.6, 16060.0], [50.7, 16095.0], [50.8, 16095.0], [50.9, 16182.0], [51.0, 16182.0], [51.1, 16389.0], [51.2, 16389.0], [51.3, 16439.0], [51.4, 16439.0], [51.5, 16804.0], [51.6, 16804.0], [51.7, 16832.0], [51.8, 16832.0], [51.9, 16898.0], [52.0, 16898.0], [52.1, 16902.0], [52.2, 16902.0], [52.3, 17009.0], [52.4, 17009.0], [52.5, 17027.0], [52.6, 17027.0], [52.7, 17080.0], [52.8, 17080.0], [52.9, 17080.0], [53.0, 17180.0], [53.1, 17180.0], [53.2, 17208.0], [53.3, 17208.0], [53.4, 17262.0], [53.5, 17262.0], [53.6, 17300.0], [53.7, 17300.0], [53.8, 17300.0], [53.9, 17300.0], [54.0, 17305.0], [54.1, 17305.0], [54.2, 17428.0], [54.3, 17428.0], [54.4, 17487.0], [54.5, 17487.0], [54.6, 17507.0], [54.7, 17507.0], [54.8, 17698.0], [54.9, 17698.0], [55.0, 17701.0], [55.1, 17701.0], [55.2, 17761.0], [55.3, 18018.0], [55.4, 18018.0], [55.5, 18029.0], [55.6, 18029.0], [55.7, 18102.0], [55.8, 18102.0], [55.9, 18140.0], [56.0, 18140.0], [56.1, 18257.0], [56.2, 18257.0], [56.3, 18502.0], [56.4, 18502.0], [56.5, 18525.0], [56.6, 18525.0], [56.7, 18601.0], [56.8, 18601.0], [56.9, 18909.0], [57.0, 18909.0], [57.1, 18961.0], [57.2, 18961.0], [57.3, 19072.0], [57.4, 19072.0], [57.5, 19087.0], [57.6, 19087.0], [57.7, 19095.0], [57.8, 19095.0], [57.9, 19202.0], [58.0, 19209.0], [58.1, 19209.0], [58.2, 19281.0], [58.3, 19281.0], [58.4, 19383.0], [58.5, 19383.0], [58.6, 19475.0], [58.7, 19475.0], [58.8, 19478.0], [58.9, 19478.0], [59.0, 19485.0], [59.1, 19485.0], [59.2, 19500.0], [59.3, 19500.0], [59.4, 19614.0], [59.5, 19614.0], [59.6, 19658.0], [59.7, 19658.0], [59.8, 19774.0], [59.9, 19774.0], [60.0, 19825.0], [60.1, 19825.0], [60.2, 19843.0], [60.3, 19843.0], [60.4, 19943.0], [60.5, 19943.0], [60.6, 19967.0], [60.7, 20052.0], [60.8, 20052.0], [60.9, 20090.0], [61.0, 20090.0], [61.1, 20107.0], [61.2, 20107.0], [61.3, 20134.0], [61.4, 20134.0], [61.5, 20232.0], [61.6, 20232.0], [61.7, 20452.0], [61.8, 20452.0], [61.9, 20480.0], [62.0, 20480.0], [62.1, 20641.0], [62.2, 20641.0], [62.3, 20714.0], [62.4, 20714.0], [62.5, 20787.0], [62.6, 20787.0], [62.7, 20803.0], [62.8, 20803.0], [62.9, 21165.0], [63.0, 21165.0], [63.1, 21202.0], [63.2, 21219.0], [63.3, 21219.0], [63.4, 21319.0], [63.5, 21319.0], [63.6, 21383.0], [63.7, 21383.0], [63.8, 21524.0], [63.9, 21524.0], [64.0, 21611.0], [64.1, 21611.0], [64.2, 21789.0], [64.3, 21789.0], [64.4, 21798.0], [64.5, 21798.0], [64.6, 22084.0], [64.7, 22084.0], [64.8, 22084.0], [64.9, 22084.0], [65.0, 22158.0], [65.1, 22158.0], [65.2, 22180.0], [65.3, 22180.0], [65.4, 22262.0], [65.5, 22262.0], [65.6, 22297.0], [65.7, 22297.0], [65.8, 22428.0], [65.9, 22437.0], [66.0, 22437.0], [66.1, 22513.0], [66.2, 22513.0], [66.3, 22660.0], [66.4, 22660.0], [66.5, 22866.0], [66.6, 22866.0], [66.7, 22942.0], [66.8, 22942.0], [66.9, 22949.0], [67.0, 22949.0], [67.1, 23345.0], [67.2, 23345.0], [67.3, 23364.0], [67.4, 23364.0], [67.5, 23392.0], [67.6, 23392.0], [67.7, 23538.0], [67.8, 23538.0], [67.9, 23626.0], [68.0, 23626.0], [68.1, 23631.0], [68.2, 23631.0], [68.3, 23643.0], [68.4, 23643.0], [68.5, 23648.0], [68.6, 23756.0], [68.7, 23756.0], [68.8, 23801.0], [68.9, 23801.0], [69.0, 23833.0], [69.1, 23833.0], [69.2, 23884.0], [69.3, 23884.0], [69.4, 23942.0], [69.5, 23942.0], [69.6, 24000.0], [69.7, 24000.0], [69.8, 24103.0], [69.9, 24103.0], [70.0, 24270.0], [70.1, 24270.0], [70.2, 24405.0], [70.3, 24405.0], [70.4, 24543.0], [70.5, 24543.0], [70.6, 24576.0], [70.7, 24576.0], [70.8, 24736.0], [70.9, 24736.0], [71.0, 24779.0], [71.1, 24851.0], [71.2, 24851.0], [71.3, 24853.0], [71.4, 24853.0], [71.5, 24926.0], [71.6, 24926.0], [71.7, 25099.0], [71.8, 25099.0], [71.9, 25216.0], [72.0, 25216.0], [72.1, 25380.0], [72.2, 25380.0], [72.3, 25566.0], [72.4, 25566.0], [72.5, 26014.0], [72.6, 26014.0], [72.7, 26216.0], [72.8, 26216.0], [72.9, 26270.0], [73.0, 26270.0], [73.1, 26302.0], [73.2, 26302.0], [73.3, 26427.0], [73.4, 26427.0], [73.5, 26486.0], [73.6, 26486.0], [73.7, 26583.0], [73.8, 26590.0], [73.9, 26590.0], [74.0, 26596.0], [74.1, 26596.0], [74.2, 26597.0], [74.3, 26597.0], [74.4, 26710.0], [74.5, 26710.0], [74.6, 26742.0], [74.7, 26742.0], [74.8, 26760.0], [74.9, 26760.0], [75.0, 26776.0], [75.1, 26776.0], [75.2, 26791.0], [75.3, 26791.0], [75.4, 26805.0], [75.5, 26805.0], [75.6, 26840.0], [75.7, 26840.0], [75.8, 27109.0], [75.9, 27109.0], [76.0, 27229.0], [76.1, 27229.0], [76.2, 27244.0], [76.3, 27244.0], [76.4, 27366.0], [76.5, 27429.0], [76.6, 27429.0], [76.7, 27547.0], [76.8, 27547.0], [76.9, 27614.0], [77.0, 27614.0], [77.1, 27714.0], [77.2, 27714.0], [77.3, 28089.0], [77.4, 28089.0], [77.5, 28258.0], [77.6, 28258.0], [77.7, 28378.0], [77.8, 28378.0], [77.9, 28420.0], [78.0, 28420.0], [78.1, 28484.0], [78.2, 28484.0], [78.3, 28595.0], [78.4, 28595.0], [78.5, 28682.0], [78.6, 28682.0], [78.7, 28723.0], [78.8, 28723.0], [78.9, 28996.0], [79.0, 29054.0], [79.1, 29054.0], [79.2, 29135.0], [79.3, 29135.0], [79.4, 29240.0], [79.5, 29240.0], [79.6, 29341.0], [79.7, 29341.0], [79.8, 29587.0], [79.9, 29587.0], [80.0, 29714.0], [80.1, 29714.0], [80.2, 29820.0], [80.3, 29820.0], [80.4, 29942.0], [80.5, 29942.0], [80.6, 30252.0], [80.7, 30252.0], [80.8, 30732.0], [80.9, 30732.0], [81.0, 31104.0], [81.1, 31104.0], [81.2, 31756.0], [81.3, 31756.0], [81.4, 31763.0], [81.5, 31763.0], [81.6, 32384.0], [81.7, 32495.0], [81.8, 32495.0], [81.9, 32871.0], [82.0, 32871.0], [82.1, 32885.0], [82.2, 32885.0], [82.3, 33014.0], [82.4, 33014.0], [82.5, 33295.0], [82.6, 33295.0], [82.7, 33350.0], [82.8, 33350.0], [82.9, 33506.0], [83.0, 33506.0], [83.1, 33545.0], [83.2, 33545.0], [83.3, 34232.0], [83.4, 34232.0], [83.5, 34444.0], [83.6, 34444.0], [83.7, 34834.0], [83.8, 34834.0], [83.9, 34835.0], [84.0, 34835.0], [84.1, 35068.0], [84.2, 35068.0], [84.3, 35185.0], [84.4, 35791.0], [84.5, 35791.0], [84.6, 35965.0], [84.7, 35965.0], [84.8, 36148.0], [84.9, 36148.0], [85.0, 36166.0], [85.1, 36166.0], [85.2, 36233.0], [85.3, 36233.0], [85.4, 36237.0], [85.5, 36237.0], [85.6, 36816.0], [85.7, 36816.0], [85.8, 37220.0], [85.9, 37220.0], [86.0, 37259.0], [86.1, 37259.0], [86.2, 37514.0], [86.3, 37514.0], [86.4, 37837.0], [86.5, 37837.0], [86.6, 37888.0], [86.7, 37888.0], [86.8, 38326.0], [86.9, 38464.0], [87.0, 38464.0], [87.1, 38572.0], [87.2, 38572.0], [87.3, 38657.0], [87.4, 38657.0], [87.5, 39020.0], [87.6, 39020.0], [87.7, 39787.0], [87.8, 39787.0], [87.9, 40100.0], [88.0, 40100.0], [88.1, 41065.0], [88.2, 41065.0], [88.3, 41606.0], [88.4, 41606.0], [88.5, 42180.0], [88.6, 42180.0], [88.7, 43781.0], [88.8, 43781.0], [88.9, 44169.0], [89.0, 44169.0], [89.1, 44573.0], [89.2, 44573.0], [89.3, 44784.0], [89.4, 44784.0], [89.5, 44785.0], [89.6, 45877.0], [89.7, 45877.0], [89.8, 46061.0], [89.9, 46061.0], [90.0, 47369.0], [90.1, 47369.0], [90.2, 47633.0], [90.3, 47633.0], [90.4, 47682.0], [90.5, 47682.0], [90.6, 47945.0], [90.7, 47945.0], [90.8, 48525.0], [90.9, 48525.0], [91.0, 48878.0], [91.1, 48878.0], [91.2, 49322.0], [91.3, 49322.0], [91.4, 49539.0], [91.5, 49539.0], [91.6, 49598.0], [91.7, 49598.0], [91.8, 49701.0], [91.9, 49701.0], [92.0, 50561.0], [92.1, 50561.0], [92.2, 50938.0], [92.3, 51842.0], [92.4, 51842.0], [92.5, 52192.0], [92.6, 52192.0], [92.7, 52228.0], [92.8, 52228.0], [92.9, 53325.0], [93.0, 53325.0], [93.1, 53809.0], [93.2, 53809.0], [93.3, 54238.0], [93.4, 54238.0], [93.5, 54575.0], [93.6, 54575.0], [93.7, 54646.0], [93.8, 54646.0], [93.9, 54835.0], [94.0, 54835.0], [94.1, 55426.0], [94.2, 55426.0], [94.3, 55857.0], [94.4, 55857.0], [94.5, 56418.0], [94.6, 56418.0], [94.7, 56586.0], [94.8, 56903.0], [94.9, 56903.0], [95.0, 56988.0], [95.1, 56988.0], [95.2, 57076.0], [95.3, 57076.0], [95.4, 57892.0], [95.5, 57892.0], [95.6, 58244.0], [95.7, 58244.0], [95.8, 58347.0], [95.9, 58347.0], [96.0, 58665.0], [96.1, 58665.0], [96.2, 59218.0], [96.3, 59218.0], [96.4, 59379.0], [96.5, 59379.0], [96.6, 59413.0], [96.7, 59413.0], [96.8, 60014.0], [96.9, 60014.0], [97.0, 60351.0], [97.1, 60351.0], [97.2, 60359.0], [97.3, 60359.0], [97.4, 60365.0], [97.5, 60366.0], [97.6, 60366.0], [97.7, 60371.0], [97.8, 60371.0], [97.9, 60376.0], [98.0, 60376.0], [98.1, 60384.0], [98.2, 60384.0], [98.3, 60397.0], [98.4, 60397.0], [98.5, 60400.0], [98.6, 60400.0], [98.7, 60414.0], [98.8, 60414.0], [98.9, 60442.0], [99.0, 60442.0], [99.1, 60453.0], [99.2, 60453.0], [99.3, 60459.0], [99.4, 60459.0], [99.5, 60466.0], [99.6, 60466.0], [99.7, 60512.0], [99.8, 60512.0], [99.9, 60597.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 114.0], [0.1, 114.0], [0.2, 116.0], [0.3, 116.0], [0.4, 116.0], [0.5, 116.0], [0.6, 116.0], [0.7, 116.0], [0.8, 116.0], [0.9, 116.0], [1.0, 116.0], [1.1, 116.0], [1.2, 116.0], [1.3, 116.0], [1.4, 117.0], [1.5, 117.0], [1.6, 117.0], [1.7, 117.0], [1.8, 117.0], [1.9, 117.0], [2.0, 117.0], [2.1, 117.0], [2.2, 118.0], [2.3, 118.0], [2.4, 118.0], [2.5, 118.0], [2.6, 118.0], [2.7, 118.0], [2.8, 119.0], [2.9, 119.0], [3.0, 120.0], [3.1, 120.0], [3.2, 120.0], [3.3, 120.0], [3.4, 120.0], [3.5, 120.0], [3.6, 120.0], [3.7, 120.0], [3.8, 120.0], [3.9, 120.0], [4.0, 120.0], [4.1, 121.0], [4.2, 121.0], [4.3, 121.0], [4.4, 121.0], [4.5, 121.0], [4.6, 121.0], [4.7, 121.0], [4.8, 121.0], [4.9, 121.0], [5.0, 121.0], [5.1, 121.0], [5.2, 121.0], [5.3, 121.0], [5.4, 121.0], [5.5, 121.0], [5.6, 121.0], [5.7, 121.0], [5.8, 121.0], [5.9, 121.0], [6.0, 121.0], [6.1, 121.0], [6.2, 121.0], [6.3, 122.0], [6.4, 122.0], [6.5, 122.0], [6.6, 122.0], [6.7, 122.0], [6.8, 122.0], [6.9, 122.0], [7.0, 122.0], [7.1, 122.0], [7.2, 122.0], [7.3, 122.0], [7.4, 122.0], [7.5, 122.0], [7.6, 123.0], [7.7, 123.0], [7.8, 123.0], [7.9, 123.0], [8.0, 123.0], [8.1, 123.0], [8.2, 123.0], [8.3, 123.0], [8.4, 123.0], [8.5, 123.0], [8.6, 123.0], [8.7, 123.0], [8.8, 123.0], [8.9, 123.0], [9.0, 123.0], [9.1, 123.0], [9.2, 123.0], [9.3, 123.0], [9.4, 124.0], [9.5, 124.0], [9.6, 124.0], [9.7, 124.0], [9.8, 124.0], [9.9, 125.0], [10.0, 125.0], [10.1, 125.0], [10.2, 125.0], [10.3, 125.0], [10.4, 125.0], [10.5, 125.0], [10.6, 125.0], [10.7, 125.0], [10.8, 125.0], [10.9, 125.0], [11.0, 125.0], [11.1, 125.0], [11.2, 125.0], [11.3, 125.0], [11.4, 125.0], [11.5, 125.0], [11.6, 125.0], [11.7, 126.0], [11.8, 126.0], [11.9, 126.0], [12.0, 126.0], [12.1, 126.0], [12.2, 126.0], [12.3, 126.0], [12.4, 126.0], [12.5, 127.0], [12.6, 127.0], [12.7, 127.0], [12.8, 128.0], [12.9, 128.0], [13.0, 129.0], [13.1, 129.0], [13.2, 130.0], [13.3, 130.0], [13.4, 781.0], [13.5, 781.0], [13.6, 1134.0], [13.7, 1134.0], [13.8, 1640.0], [13.9, 1640.0], [14.0, 1955.0], [14.1, 1955.0], [14.2, 2552.0], [14.3, 2552.0], [14.4, 2651.0], [14.5, 2651.0], [14.6, 2664.0], [14.7, 2664.0], [14.8, 2772.0], [14.9, 2772.0], [15.0, 3358.0], [15.1, 3358.0], [15.2, 3647.0], [15.3, 3647.0], [15.4, 4419.0], [15.5, 4419.0], [15.6, 4434.0], [15.7, 4720.0], [15.8, 4720.0], [15.9, 4734.0], [16.0, 4734.0], [16.1, 4928.0], [16.2, 4928.0], [16.3, 4959.0], [16.4, 4959.0], [16.5, 4968.0], [16.6, 4968.0], [16.7, 5069.0], [16.8, 5069.0], [16.9, 5092.0], [17.0, 5092.0], [17.1, 5102.0], [17.2, 5102.0], [17.3, 5105.0], [17.4, 5105.0], [17.5, 5113.0], [17.6, 5113.0], [17.7, 5117.0], [17.8, 5117.0], [17.9, 5129.0], [18.0, 5129.0], [18.1, 5132.0], [18.2, 5132.0], [18.3, 5134.0], [18.4, 5134.0], [18.5, 5146.0], [18.6, 5146.0], [18.7, 5150.0], [18.8, 5154.0], [18.9, 5154.0], [19.0, 5157.0], [19.1, 5157.0], [19.2, 5171.0], [19.3, 5171.0], [19.4, 5185.0], [19.5, 5185.0], [19.6, 5205.0], [19.7, 5205.0], [19.8, 5237.0], [19.9, 5237.0], [20.0, 5253.0], [20.1, 5253.0], [20.2, 5291.0], [20.3, 5291.0], [20.4, 5379.0], [20.5, 5379.0], [20.6, 5402.0], [20.7, 5402.0], [20.8, 5449.0], [20.9, 5449.0], [21.0, 5472.0], [21.1, 5472.0], [21.2, 5486.0], [21.3, 5486.0], [21.4, 5569.0], [21.5, 5569.0], [21.6, 5605.0], [21.7, 5605.0], [21.8, 5624.0], [21.9, 5666.0], [22.0, 5666.0], [22.1, 5694.0], [22.2, 5694.0], [22.3, 5696.0], [22.4, 5696.0], [22.5, 5749.0], [22.6, 5749.0], [22.7, 5844.0], [22.8, 5844.0], [22.9, 5858.0], [23.0, 5858.0], [23.1, 5874.0], [23.2, 5874.0], [23.3, 5893.0], [23.4, 5893.0], [23.5, 5911.0], [23.6, 5911.0], [23.7, 5964.0], [23.8, 5964.0], [23.9, 5968.0], [24.0, 5968.0], [24.1, 6141.0], [24.2, 6141.0], [24.3, 6163.0], [24.4, 6163.0], [24.5, 6169.0], [24.6, 6169.0], [24.7, 6242.0], [24.8, 6242.0], [24.9, 6331.0], [25.0, 6357.0], [25.1, 6357.0], [25.2, 6379.0], [25.3, 6379.0], [25.4, 6437.0], [25.5, 6437.0], [25.6, 6547.0], [25.7, 6547.0], [25.8, 6550.0], [25.9, 6550.0], [26.0, 6680.0], [26.1, 6680.0], [26.2, 6684.0], [26.3, 6684.0], [26.4, 6692.0], [26.5, 6692.0], [26.6, 6788.0], [26.7, 6788.0], [26.8, 6831.0], [26.9, 6831.0], [27.0, 6848.0], [27.1, 6848.0], [27.2, 6852.0], [27.3, 6852.0], [27.4, 6969.0], [27.5, 6969.0], [27.6, 7150.0], [27.7, 7150.0], [27.8, 7286.0], [27.9, 7286.0], [28.0, 7328.0], [28.1, 7328.0], [28.2, 7402.0], [28.3, 7510.0], [28.4, 7510.0], [28.5, 7747.0], [28.6, 7747.0], [28.7, 7765.0], [28.8, 7765.0], [28.9, 7917.0], [29.0, 7917.0], [29.1, 8089.0], [29.2, 8089.0], [29.3, 8120.0], [29.4, 8120.0], [29.5, 8123.0], [29.6, 8123.0], [29.7, 8163.0], [29.8, 8163.0], [29.9, 8188.0], [30.0, 8188.0], [30.1, 8294.0], [30.2, 8294.0], [30.3, 8359.0], [30.4, 8359.0], [30.5, 8381.0], [30.6, 8381.0], [30.7, 8439.0], [30.8, 8439.0], [30.9, 8562.0], [31.0, 8562.0], [31.1, 8644.0], [31.2, 8644.0], [31.3, 8659.0], [31.4, 8683.0], [31.5, 8683.0], [31.6, 8699.0], [31.7, 8699.0], [31.8, 8737.0], [31.9, 8737.0], [32.0, 8759.0], [32.1, 8759.0], [32.2, 8851.0], [32.3, 8851.0], [32.4, 8928.0], [32.5, 8928.0], [32.6, 9014.0], [32.7, 9014.0], [32.8, 9106.0], [32.9, 9106.0], [33.0, 9119.0], [33.1, 9119.0], [33.2, 9176.0], [33.3, 9176.0], [33.4, 9209.0], [33.5, 9209.0], [33.6, 9261.0], [33.7, 9261.0], [33.8, 9277.0], [33.9, 9277.0], [34.0, 9293.0], [34.1, 9293.0], [34.2, 9439.0], [34.3, 9439.0], [34.4, 9495.0], [34.5, 9530.0], [34.6, 9530.0], [34.7, 9538.0], [34.8, 9538.0], [34.9, 9616.0], [35.0, 9616.0], [35.1, 9715.0], [35.2, 9715.0], [35.3, 9744.0], [35.4, 9744.0], [35.5, 9756.0], [35.6, 9756.0], [35.7, 9878.0], [35.8, 9878.0], [35.9, 9895.0], [36.0, 9895.0], [36.1, 9922.0], [36.2, 9922.0], [36.3, 10189.0], [36.4, 10189.0], [36.5, 10265.0], [36.6, 10265.0], [36.7, 10268.0], [36.8, 10268.0], [36.9, 10317.0], [37.0, 10317.0], [37.1, 10516.0], [37.2, 10516.0], [37.3, 10536.0], [37.4, 10536.0], [37.5, 10648.0], [37.6, 10794.0], [37.7, 10794.0], [37.8, 10875.0], [37.9, 10875.0], [38.0, 10879.0], [38.1, 10879.0], [38.2, 10888.0], [38.3, 10888.0], [38.4, 10975.0], [38.5, 10975.0], [38.6, 11152.0], [38.7, 11152.0], [38.8, 11187.0], [38.9, 11187.0], [39.0, 11267.0], [39.1, 11267.0], [39.2, 11370.0], [39.3, 11370.0], [39.4, 11435.0], [39.5, 11435.0], [39.6, 11455.0], [39.7, 11455.0], [39.8, 11527.0], [39.9, 11527.0], [40.0, 11758.0], [40.1, 11758.0], [40.2, 11839.0], [40.3, 11839.0], [40.4, 11891.0], [40.5, 11891.0], [40.6, 12002.0], [40.7, 12058.0], [40.8, 12058.0], [40.9, 12123.0], [41.0, 12123.0], [41.1, 12174.0], [41.2, 12174.0], [41.3, 12263.0], [41.4, 12263.0], [41.5, 12289.0], [41.6, 12289.0], [41.7, 12292.0], [41.8, 12292.0], [41.9, 12372.0], [42.0, 12372.0], [42.1, 12527.0], [42.2, 12527.0], [42.3, 12618.0], [42.4, 12618.0], [42.5, 12668.0], [42.6, 12668.0], [42.7, 12694.0], [42.8, 12694.0], [42.9, 12753.0], [43.0, 12753.0], [43.1, 12800.0], [43.2, 12800.0], [43.3, 12809.0], [43.4, 12809.0], [43.5, 13034.0], [43.6, 13034.0], [43.7, 13052.0], [43.8, 13059.0], [43.9, 13059.0], [44.0, 13083.0], [44.1, 13083.0], [44.2, 13112.0], [44.3, 13112.0], [44.4, 13198.0], [44.5, 13198.0], [44.6, 13436.0], [44.7, 13436.0], [44.8, 13473.0], [44.9, 13473.0], [45.0, 13522.0], [45.1, 13522.0], [45.2, 13568.0], [45.3, 13568.0], [45.4, 13582.0], [45.5, 13582.0], [45.6, 13635.0], [45.7, 13635.0], [45.8, 13667.0], [45.9, 13667.0], [46.0, 13679.0], [46.1, 13679.0], [46.2, 13729.0], [46.3, 13729.0], [46.4, 13817.0], [46.5, 13817.0], [46.6, 13952.0], [46.7, 13952.0], [46.8, 14042.0], [46.9, 14132.0], [47.0, 14132.0], [47.1, 14228.0], [47.2, 14228.0], [47.3, 14277.0], [47.4, 14277.0], [47.5, 14395.0], [47.6, 14395.0], [47.7, 14423.0], [47.8, 14423.0], [47.9, 14727.0], [48.0, 14727.0], [48.1, 14801.0], [48.2, 14801.0], [48.3, 14809.0], [48.4, 14809.0], [48.5, 14981.0], [48.6, 14981.0], [48.7, 15098.0], [48.8, 15098.0], [48.9, 15158.0], [49.0, 15158.0], [49.1, 15227.0], [49.2, 15227.0], [49.3, 15316.0], [49.4, 15316.0], [49.5, 15335.0], [49.6, 15335.0], [49.7, 15354.0], [49.8, 15354.0], [49.9, 15369.0], [50.0, 15411.0], [50.1, 15411.0], [50.2, 15827.0], [50.3, 15827.0], [50.4, 15859.0], [50.5, 15859.0], [50.6, 15953.0], [50.7, 15953.0], [50.8, 16144.0], [50.9, 16144.0], [51.0, 16208.0], [51.1, 16208.0], [51.2, 16564.0], [51.3, 16564.0], [51.4, 16593.0], [51.5, 16593.0], [51.6, 16645.0], [51.7, 16645.0], [51.8, 16666.0], [51.9, 16666.0], [52.0, 16778.0], [52.1, 16778.0], [52.2, 16795.0], [52.3, 16795.0], [52.4, 16842.0], [52.5, 16842.0], [52.6, 16851.0], [52.7, 16851.0], [52.8, 16940.0], [52.9, 16940.0], [53.0, 16975.0], [53.1, 16975.0], [53.2, 16985.0], [53.3, 17041.0], [53.4, 17041.0], [53.5, 17063.0], [53.6, 17063.0], [53.7, 17070.0], [53.8, 17070.0], [53.9, 17202.0], [54.0, 17202.0], [54.1, 17249.0], [54.2, 17249.0], [54.3, 17257.0], [54.4, 17257.0], [54.5, 17440.0], [54.6, 17440.0], [54.7, 17460.0], [54.8, 17460.0], [54.9, 17513.0], [55.0, 17513.0], [55.1, 17787.0], [55.2, 17787.0], [55.3, 17798.0], [55.4, 17798.0], [55.5, 17798.0], [55.6, 17798.0], [55.7, 17911.0], [55.8, 17911.0], [55.9, 18014.0], [56.0, 18014.0], [56.1, 18267.0], [56.2, 18267.0], [56.3, 18275.0], [56.4, 18375.0], [56.5, 18375.0], [56.6, 18668.0], [56.7, 18668.0], [56.8, 18728.0], [56.9, 18728.0], [57.0, 18814.0], [57.1, 18814.0], [57.2, 18839.0], [57.3, 18839.0], [57.4, 18853.0], [57.5, 18853.0], [57.6, 18970.0], [57.7, 18970.0], [57.8, 18972.0], [57.9, 18972.0], [58.0, 19049.0], [58.1, 19049.0], [58.2, 19142.0], [58.3, 19142.0], [58.4, 19204.0], [58.5, 19204.0], [58.6, 19211.0], [58.7, 19211.0], [58.8, 19213.0], [58.9, 19213.0], [59.0, 19265.0], [59.1, 19265.0], [59.2, 19297.0], [59.3, 19297.0], [59.4, 19418.0], [59.5, 19528.0], [59.6, 19528.0], [59.7, 19576.0], [59.8, 19576.0], [59.9, 19604.0], [60.0, 19604.0], [60.1, 19703.0], [60.2, 19703.0], [60.3, 19738.0], [60.4, 19738.0], [60.5, 19813.0], [60.6, 19813.0], [60.7, 19860.0], [60.8, 19860.0], [60.9, 19864.0], [61.0, 19864.0], [61.1, 19906.0], [61.2, 19906.0], [61.3, 19990.0], [61.4, 19990.0], [61.5, 20197.0], [61.6, 20197.0], [61.7, 20253.0], [61.8, 20253.0], [61.9, 20404.0], [62.0, 20404.0], [62.1, 20484.0], [62.2, 20484.0], [62.3, 20545.0], [62.4, 20545.0], [62.5, 20551.0], [62.6, 20925.0], [62.7, 20925.0], [62.8, 20969.0], [62.9, 20969.0], [63.0, 20979.0], [63.1, 20979.0], [63.2, 21093.0], [63.3, 21093.0], [63.4, 21105.0], [63.5, 21105.0], [63.6, 21284.0], [63.7, 21284.0], [63.8, 21371.0], [63.9, 21371.0], [64.0, 21549.0], [64.1, 21549.0], [64.2, 21556.0], [64.3, 21556.0], [64.4, 21831.0], [64.5, 21831.0], [64.6, 21848.0], [64.7, 21848.0], [64.8, 21919.0], [64.9, 21919.0], [65.0, 21941.0], [65.1, 21941.0], [65.2, 21961.0], [65.3, 21961.0], [65.4, 22057.0], [65.5, 22057.0], [65.6, 22195.0], [65.7, 22202.0], [65.8, 22202.0], [65.9, 22226.0], [66.0, 22226.0], [66.1, 22429.0], [66.2, 22429.0], [66.3, 22638.0], [66.4, 22638.0], [66.5, 22672.0], [66.6, 22672.0], [66.7, 22693.0], [66.8, 22693.0], [66.9, 23106.0], [67.0, 23106.0], [67.1, 23121.0], [67.2, 23121.0], [67.3, 23157.0], [67.4, 23157.0], [67.5, 23299.0], [67.6, 23299.0], [67.7, 23385.0], [67.8, 23385.0], [67.9, 23397.0], [68.0, 23397.0], [68.1, 23401.0], [68.2, 23401.0], [68.3, 23410.0], [68.4, 23410.0], [68.5, 23523.0], [68.6, 23523.0], [68.7, 23572.0], [68.8, 23598.0], [68.9, 23598.0], [69.0, 23637.0], [69.1, 23637.0], [69.2, 23683.0], [69.3, 23683.0], [69.4, 23740.0], [69.5, 23740.0], [69.6, 23876.0], [69.7, 23876.0], [69.8, 24028.0], [69.9, 24028.0], [70.0, 24169.0], [70.1, 24169.0], [70.2, 24293.0], [70.3, 24293.0], [70.4, 24340.0], [70.5, 24340.0], [70.6, 24506.0], [70.7, 24506.0], [70.8, 24550.0], [70.9, 24550.0], [71.0, 24567.0], [71.1, 24567.0], [71.2, 24605.0], [71.3, 24605.0], [71.4, 24674.0], [71.5, 24674.0], [71.6, 24861.0], [71.7, 24861.0], [71.8, 24988.0], [71.9, 25151.0], [72.0, 25151.0], [72.1, 25337.0], [72.2, 25337.0], [72.3, 25485.0], [72.4, 25485.0], [72.5, 25775.0], [72.6, 25775.0], [72.7, 25973.0], [72.8, 25973.0], [72.9, 26027.0], [73.0, 26027.0], [73.1, 26066.0], [73.2, 26066.0], [73.3, 26185.0], [73.4, 26185.0], [73.5, 26238.0], [73.6, 26238.0], [73.7, 26272.0], [73.8, 26272.0], [73.9, 26307.0], [74.0, 26307.0], [74.1, 26351.0], [74.2, 26351.0], [74.3, 26356.0], [74.4, 26356.0], [74.5, 26465.0], [74.6, 26465.0], [74.7, 26506.0], [74.8, 26506.0], [74.9, 26534.0], [75.0, 26550.0], [75.1, 26550.0], [75.2, 26569.0], [75.3, 26569.0], [75.4, 26584.0], [75.5, 26584.0], [75.6, 26854.0], [75.7, 26854.0], [75.8, 26971.0], [75.9, 26971.0], [76.0, 27003.0], [76.1, 27003.0], [76.2, 27126.0], [76.3, 27126.0], [76.4, 27204.0], [76.5, 27204.0], [76.6, 27320.0], [76.7, 27320.0], [76.8, 27382.0], [76.9, 27382.0], [77.0, 27486.0], [77.1, 27486.0], [77.2, 27859.0], [77.3, 27859.0], [77.4, 28021.0], [77.5, 28021.0], [77.6, 28140.0], [77.7, 28140.0], [77.8, 28149.0], [77.9, 28149.0], [78.0, 28255.0], [78.1, 28255.0], [78.2, 28357.0], [78.3, 28452.0], [78.4, 28452.0], [78.5, 28484.0], [78.6, 28484.0], [78.7, 28726.0], [78.8, 28726.0], [78.9, 28808.0], [79.0, 28808.0], [79.1, 28906.0], [79.2, 28906.0], [79.3, 29011.0], [79.4, 29011.0], [79.5, 29115.0], [79.6, 29115.0], [79.7, 29345.0], [79.8, 29345.0], [79.9, 29474.0], [80.0, 29474.0], [80.1, 29592.0], [80.2, 29592.0], [80.3, 29711.0], [80.4, 29711.0], [80.5, 30004.0], [80.6, 30004.0], [80.7, 30505.0], [80.8, 30505.0], [80.9, 30876.0], [81.0, 30876.0], [81.1, 31516.0], [81.2, 31516.0], [81.3, 31534.0], [81.4, 32155.0], [81.5, 32155.0], [81.6, 32214.0], [81.7, 32214.0], [81.8, 32619.0], [81.9, 32619.0], [82.0, 32647.0], [82.1, 32647.0], [82.2, 32786.0], [82.3, 32786.0], [82.4, 33020.0], [82.5, 33020.0], [82.6, 33122.0], [82.7, 33122.0], [82.8, 33270.0], [82.9, 33270.0], [83.0, 33297.0], [83.1, 33297.0], [83.2, 33993.0], [83.3, 33993.0], [83.4, 34180.0], [83.5, 34180.0], [83.6, 34594.0], [83.7, 34594.0], [83.8, 34607.0], [83.9, 34607.0], [84.0, 34831.0], [84.1, 34831.0], [84.2, 34901.0], [84.3, 34901.0], [84.4, 35564.0], [84.5, 35734.0], [84.6, 35734.0], [84.7, 35903.0], [84.8, 35903.0], [84.9, 35933.0], [85.0, 35933.0], [85.1, 35997.0], [85.2, 35997.0], [85.3, 35998.0], [85.4, 35998.0], [85.5, 36495.0], [85.6, 36495.0], [85.7, 36978.0], [85.8, 36978.0], [85.9, 37017.0], [86.0, 37017.0], [86.1, 37277.0], [86.2, 37277.0], [86.3, 37568.0], [86.4, 37568.0], [86.5, 37640.0], [86.6, 37640.0], [86.7, 38043.0], [86.8, 38043.0], [86.9, 38218.0], [87.0, 38218.0], [87.1, 38341.0], [87.2, 38341.0], [87.3, 38414.0], [87.4, 38414.0], [87.5, 38778.0], [87.6, 39548.0], [87.7, 39548.0], [87.8, 39855.0], [87.9, 39855.0], [88.0, 40836.0], [88.1, 40836.0], [88.2, 41330.0], [88.3, 41330.0], [88.4, 41949.0], [88.5, 41949.0], [88.6, 43529.0], [88.7, 43529.0], [88.8, 43938.0], [88.9, 43938.0], [89.0, 44333.0], [89.1, 44333.0], [89.2, 44541.0], [89.3, 44541.0], [89.4, 44554.0], [89.5, 44554.0], [89.6, 45645.0], [89.7, 45645.0], [89.8, 45798.0], [89.9, 45798.0], [90.0, 47127.0], [90.1, 47127.0], [90.2, 47403.0], [90.3, 47403.0], [90.4, 47436.0], [90.5, 47436.0], [90.6, 47684.0], [90.7, 48299.0], [90.8, 48299.0], [90.9, 48647.0], [91.0, 48647.0], [91.1, 49083.0], [91.2, 49083.0], [91.3, 49294.0], [91.4, 49294.0], [91.5, 49359.0], [91.6, 49359.0], [91.7, 49452.0], [91.8, 49452.0], [91.9, 50292.0], [92.0, 50292.0], [92.1, 50698.0], [92.2, 50698.0], [92.3, 51582.0], [92.4, 51582.0], [92.5, 51959.0], [92.6, 51959.0], [92.7, 51987.0], [92.8, 51987.0], [92.9, 52943.0], [93.0, 52943.0], [93.1, 53569.0], [93.2, 53569.0], [93.3, 54010.0], [93.4, 54010.0], [93.5, 54319.0], [93.6, 54319.0], [93.7, 54332.0], [93.8, 54558.0], [93.9, 54558.0], [94.0, 55051.0], [94.1, 55051.0], [94.2, 55627.0], [94.3, 55627.0], [94.4, 56168.0], [94.5, 56168.0], [94.6, 56345.0], [94.7, 56345.0], [94.8, 56658.0], [94.9, 56658.0], [95.0, 56694.0], [95.1, 56694.0], [95.2, 56831.0], [95.3, 56831.0], [95.4, 57651.0], [95.5, 57651.0], [95.6, 57988.0], [95.7, 57988.0], [95.8, 58115.0], [95.9, 58115.0], [96.0, 58425.0], [96.1, 58425.0], [96.2, 58965.0], [96.3, 58965.0], [96.4, 59120.0], [96.5, 59120.0], [96.6, 59135.0], [96.7, 59135.0], [96.8, 59781.0], [96.9, 60121.0], [97.0, 60121.0], [97.1, 60121.0], [97.2, 60121.0], [97.3, 60123.0], [97.4, 60123.0], [97.5, 60125.0], [97.6, 60125.0], [97.7, 60125.0], [97.8, 60125.0], [97.9, 60126.0], [98.0, 60126.0], [98.1, 60126.0], [98.2, 60126.0], [98.3, 60134.0], [98.4, 60134.0], [98.5, 60146.0], [98.6, 60146.0], [98.7, 60154.0], [98.8, 60154.0], [98.9, 60155.0], [99.0, 60155.0], [99.1, 60160.0], [99.2, 60160.0], [99.3, 60209.0], [99.4, 60209.0], [99.5, 60214.0], [99.6, 60214.0], [99.7, 60272.0], [99.8, 60272.0], [99.9, 60294.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 225.0], [0.1, 225.0], [0.2, 225.0], [0.3, 225.0], [0.4, 225.0], [0.5, 225.0], [0.6, 225.0], [0.7, 225.0], [0.8, 226.0], [0.9, 226.0], [1.0, 226.0], [1.1, 226.0], [1.2, 226.0], [1.3, 226.0], [1.4, 226.0], [1.5, 226.0], [1.6, 226.0], [1.7, 226.0], [1.8, 226.0], [1.9, 226.0], [2.0, 226.0], [2.1, 226.0], [2.2, 226.0], [2.3, 226.0], [2.4, 226.0], [2.5, 226.0], [2.6, 226.0], [2.7, 226.0], [2.8, 226.0], [2.9, 227.0], [3.0, 227.0], [3.1, 227.0], [3.2, 227.0], [3.3, 227.0], [3.4, 227.0], [3.5, 227.0], [3.6, 227.0], [3.7, 227.0], [3.8, 227.0], [3.9, 227.0], [4.0, 227.0], [4.1, 227.0], [4.2, 227.0], [4.3, 227.0], [4.4, 227.0], [4.5, 227.0], [4.6, 227.0], [4.7, 227.0], [4.8, 227.0], [4.9, 227.0], [5.0, 227.0], [5.1, 227.0], [5.2, 227.0], [5.3, 227.0], [5.4, 227.0], [5.5, 227.0], [5.6, 227.0], [5.7, 227.0], [5.8, 227.0], [5.9, 227.0], [6.0, 227.0], [6.1, 227.0], [6.2, 227.0], [6.3, 227.0], [6.4, 227.0], [6.5, 227.0], [6.6, 227.0], [6.7, 227.0], [6.8, 227.0], [6.9, 227.0], [7.0, 228.0], [7.1, 228.0], [7.2, 228.0], [7.3, 228.0], [7.4, 228.0], [7.5, 228.0], [7.6, 228.0], [7.7, 228.0], [7.8, 228.0], [7.9, 228.0], [8.0, 228.0], [8.1, 228.0], [8.2, 228.0], [8.3, 228.0], [8.4, 228.0], [8.5, 228.0], [8.6, 228.0], [8.7, 228.0], [8.8, 228.0], [8.9, 228.0], [9.0, 228.0], [9.1, 228.0], [9.2, 228.0], [9.3, 228.0], [9.4, 228.0], [9.5, 228.0], [9.6, 228.0], [9.7, 228.0], [9.8, 228.0], [9.9, 228.0], [10.0, 228.0], [10.1, 228.0], [10.2, 228.0], [10.3, 228.0], [10.4, 228.0], [10.5, 228.0], [10.6, 228.0], [10.7, 228.0], [10.8, 228.0], [10.9, 228.0], [11.0, 228.0], [11.1, 228.0], [11.2, 228.0], [11.3, 228.0], [11.4, 228.0], [11.5, 228.0], [11.6, 229.0], [11.7, 229.0], [11.8, 229.0], [11.9, 229.0], [12.0, 229.0], [12.1, 229.0], [12.2, 229.0], [12.3, 229.0], [12.4, 229.0], [12.5, 229.0], [12.6, 229.0], [12.7, 229.0], [12.8, 229.0], [12.9, 229.0], [13.0, 229.0], [13.1, 229.0], [13.2, 229.0], [13.3, 229.0], [13.4, 229.0], [13.5, 229.0], [13.6, 229.0], [13.7, 229.0], [13.8, 229.0], [13.9, 229.0], [14.0, 229.0], [14.1, 229.0], [14.2, 229.0], [14.3, 229.0], [14.4, 229.0], [14.5, 229.0], [14.6, 229.0], [14.7, 229.0], [14.8, 229.0], [14.9, 229.0], [15.0, 229.0], [15.1, 229.0], [15.2, 229.0], [15.3, 229.0], [15.4, 229.0], [15.5, 229.0], [15.6, 229.0], [15.7, 229.0], [15.8, 229.0], [15.9, 229.0], [16.0, 229.0], [16.1, 229.0], [16.2, 229.0], [16.3, 229.0], [16.4, 230.0], [16.5, 230.0], [16.6, 230.0], [16.7, 230.0], [16.8, 230.0], [16.9, 230.0], [17.0, 230.0], [17.1, 230.0], [17.2, 230.0], [17.3, 230.0], [17.4, 230.0], [17.5, 230.0], [17.6, 230.0], [17.7, 230.0], [17.8, 230.0], [17.9, 230.0], [18.0, 230.0], [18.1, 230.0], [18.2, 230.0], [18.3, 230.0], [18.4, 230.0], [18.5, 230.0], [18.6, 230.0], [18.7, 230.0], [18.8, 230.0], [18.9, 230.0], [19.0, 230.0], [19.1, 230.0], [19.2, 230.0], [19.3, 230.0], [19.4, 230.0], [19.5, 230.0], [19.6, 230.0], [19.7, 230.0], [19.8, 230.0], [19.9, 230.0], [20.0, 230.0], [20.1, 230.0], [20.2, 230.0], [20.3, 230.0], [20.4, 230.0], [20.5, 230.0], [20.6, 230.0], [20.7, 230.0], [20.8, 230.0], [20.9, 230.0], [21.0, 230.0], [21.1, 230.0], [21.2, 230.0], [21.3, 230.0], [21.4, 230.0], [21.5, 230.0], [21.6, 230.0], [21.7, 230.0], [21.8, 231.0], [21.9, 231.0], [22.0, 231.0], [22.1, 231.0], [22.2, 231.0], [22.3, 231.0], [22.4, 231.0], [22.5, 231.0], [22.6, 231.0], [22.7, 231.0], [22.8, 231.0], [22.9, 231.0], [23.0, 231.0], [23.1, 231.0], [23.2, 231.0], [23.3, 231.0], [23.4, 231.0], [23.5, 231.0], [23.6, 231.0], [23.7, 231.0], [23.8, 231.0], [23.9, 231.0], [24.0, 231.0], [24.1, 231.0], [24.2, 231.0], [24.3, 231.0], [24.4, 231.0], [24.5, 231.0], [24.6, 231.0], [24.7, 231.0], [24.8, 231.0], [24.9, 231.0], [25.0, 231.0], [25.1, 231.0], [25.2, 231.0], [25.3, 231.0], [25.4, 231.0], [25.5, 231.0], [25.6, 231.0], [25.7, 231.0], [25.8, 231.0], [25.9, 231.0], [26.0, 231.0], [26.1, 231.0], [26.2, 231.0], [26.3, 231.0], [26.4, 232.0], [26.5, 232.0], [26.6, 232.0], [26.7, 232.0], [26.8, 232.0], [26.9, 232.0], [27.0, 232.0], [27.1, 232.0], [27.2, 232.0], [27.3, 232.0], [27.4, 232.0], [27.5, 232.0], [27.6, 232.0], [27.7, 232.0], [27.8, 232.0], [27.9, 232.0], [28.0, 232.0], [28.1, 232.0], [28.2, 232.0], [28.3, 232.0], [28.4, 232.0], [28.5, 233.0], [28.6, 233.0], [28.7, 233.0], [28.8, 233.0], [28.9, 233.0], [29.0, 233.0], [29.1, 233.0], [29.2, 233.0], [29.3, 233.0], [29.4, 233.0], [29.5, 233.0], [29.6, 233.0], [29.7, 233.0], [29.8, 233.0], [29.9, 233.0], [30.0, 233.0], [30.1, 233.0], [30.2, 233.0], [30.3, 233.0], [30.4, 233.0], [30.5, 233.0], [30.6, 233.0], [30.7, 233.0], [30.8, 233.0], [30.9, 233.0], [31.0, 233.0], [31.1, 233.0], [31.2, 233.0], [31.3, 233.0], [31.4, 233.0], [31.5, 233.0], [31.6, 234.0], [31.7, 234.0], [31.8, 234.0], [31.9, 234.0], [32.0, 234.0], [32.1, 234.0], [32.2, 234.0], [32.3, 234.0], [32.4, 234.0], [32.5, 234.0], [32.6, 234.0], [32.7, 234.0], [32.8, 234.0], [32.9, 234.0], [33.0, 234.0], [33.1, 234.0], [33.2, 234.0], [33.3, 235.0], [33.4, 235.0], [33.5, 235.0], [33.6, 235.0], [33.7, 235.0], [33.8, 235.0], [33.9, 235.0], [34.0, 235.0], [34.1, 235.0], [34.2, 235.0], [34.3, 235.0], [34.4, 235.0], [34.5, 235.0], [34.6, 235.0], [34.7, 235.0], [34.8, 235.0], [34.9, 236.0], [35.0, 236.0], [35.1, 236.0], [35.2, 236.0], [35.3, 236.0], [35.4, 236.0], [35.5, 236.0], [35.6, 236.0], [35.7, 236.0], [35.8, 236.0], [35.9, 236.0], [36.0, 236.0], [36.1, 236.0], [36.2, 236.0], [36.3, 236.0], [36.4, 236.0], [36.5, 236.0], [36.6, 236.0], [36.7, 236.0], [36.8, 236.0], [36.9, 236.0], [37.0, 236.0], [37.1, 236.0], [37.2, 236.0], [37.3, 236.0], [37.4, 236.0], [37.5, 236.0], [37.6, 236.0], [37.7, 236.0], [37.8, 236.0], [37.9, 236.0], [38.0, 236.0], [38.1, 236.0], [38.2, 236.0], [38.3, 236.0], [38.4, 236.0], [38.5, 236.0], [38.6, 236.0], [38.7, 237.0], [38.8, 237.0], [38.9, 237.0], [39.0, 237.0], [39.1, 237.0], [39.2, 237.0], [39.3, 237.0], [39.4, 237.0], [39.5, 237.0], [39.6, 237.0], [39.7, 237.0], [39.8, 237.0], [39.9, 237.0], [40.0, 237.0], [40.1, 237.0], [40.2, 237.0], [40.3, 237.0], [40.4, 237.0], [40.5, 237.0], [40.6, 237.0], [40.7, 237.0], [40.8, 237.0], [40.9, 237.0], [41.0, 237.0], [41.1, 237.0], [41.2, 237.0], [41.3, 237.0], [41.4, 237.0], [41.5, 237.0], [41.6, 237.0], [41.7, 237.0], [41.8, 237.0], [41.9, 237.0], [42.0, 238.0], [42.1, 238.0], [42.2, 238.0], [42.3, 238.0], [42.4, 238.0], [42.5, 238.0], [42.6, 238.0], [42.7, 238.0], [42.8, 238.0], [42.9, 238.0], [43.0, 238.0], [43.1, 238.0], [43.2, 238.0], [43.3, 238.0], [43.4, 238.0], [43.5, 238.0], [43.6, 238.0], [43.7, 238.0], [43.8, 238.0], [43.9, 238.0], [44.0, 238.0], [44.1, 238.0], [44.2, 238.0], [44.3, 238.0], [44.4, 238.0], [44.5, 238.0], [44.6, 238.0], [44.7, 238.0], [44.8, 238.0], [44.9, 238.0], [45.0, 238.0], [45.1, 238.0], [45.2, 238.0], [45.3, 238.0], [45.4, 238.0], [45.5, 238.0], [45.6, 239.0], [45.7, 239.0], [45.8, 239.0], [45.9, 239.0], [46.0, 239.0], [46.1, 239.0], [46.2, 239.0], [46.3, 239.0], [46.4, 239.0], [46.5, 239.0], [46.6, 239.0], [46.7, 239.0], [46.8, 239.0], [46.9, 239.0], [47.0, 239.0], [47.1, 239.0], [47.2, 239.0], [47.3, 239.0], [47.4, 239.0], [47.5, 239.0], [47.6, 239.0], [47.7, 239.0], [47.8, 239.0], [47.9, 239.0], [48.0, 239.0], [48.1, 239.0], [48.2, 239.0], [48.3, 239.0], [48.4, 239.0], [48.5, 239.0], [48.6, 239.0], [48.7, 239.0], [48.8, 239.0], [48.9, 239.0], [49.0, 239.0], [49.1, 239.0], [49.2, 239.0], [49.3, 239.0], [49.4, 239.0], [49.5, 239.0], [49.6, 239.0], [49.7, 239.0], [49.8, 239.0], [49.9, 239.0], [50.0, 239.0], [50.1, 239.0], [50.2, 239.0], [50.3, 239.0], [50.4, 239.0], [50.5, 239.0], [50.6, 239.0], [50.7, 239.0], [50.8, 239.0], [50.9, 239.0], [51.0, 239.0], [51.1, 239.0], [51.2, 239.0], [51.3, 239.0], [51.4, 239.0], [51.5, 239.0], [51.6, 239.0], [51.7, 239.0], [51.8, 239.0], [51.9, 239.0], [52.0, 239.0], [52.1, 239.0], [52.2, 240.0], [52.3, 240.0], [52.4, 240.0], [52.5, 240.0], [52.6, 240.0], [52.7, 240.0], [52.8, 240.0], [52.9, 240.0], [53.0, 240.0], [53.1, 240.0], [53.2, 240.0], [53.3, 240.0], [53.4, 240.0], [53.5, 240.0], [53.6, 240.0], [53.7, 240.0], [53.8, 240.0], [53.9, 240.0], [54.0, 240.0], [54.1, 240.0], [54.2, 240.0], [54.3, 240.0], [54.4, 240.0], [54.5, 240.0], [54.6, 240.0], [54.7, 240.0], [54.8, 240.0], [54.9, 240.0], [55.0, 240.0], [55.1, 240.0], [55.2, 240.0], [55.3, 240.0], [55.4, 240.0], [55.5, 240.0], [55.6, 240.0], [55.7, 240.0], [55.8, 240.0], [55.9, 240.0], [56.0, 240.0], [56.1, 240.0], [56.2, 240.0], [56.3, 240.0], [56.4, 240.0], [56.5, 240.0], [56.6, 240.0], [56.7, 240.0], [56.8, 240.0], [56.9, 240.0], [57.0, 240.0], [57.1, 240.0], [57.2, 240.0], [57.3, 240.0], [57.4, 240.0], [57.5, 240.0], [57.6, 240.0], [57.7, 240.0], [57.8, 240.0], [57.9, 240.0], [58.0, 240.0], [58.1, 240.0], [58.2, 240.0], [58.3, 240.0], [58.4, 240.0], [58.5, 240.0], [58.6, 240.0], [58.7, 240.0], [58.8, 240.0], [58.9, 240.0], [59.0, 240.0], [59.1, 240.0], [59.2, 240.0], [59.3, 240.0], [59.4, 240.0], [59.5, 240.0], [59.6, 240.0], [59.7, 240.0], [59.8, 240.0], [59.9, 240.0], [60.0, 240.0], [60.1, 240.0], [60.2, 241.0], [60.3, 241.0], [60.4, 241.0], [60.5, 241.0], [60.6, 241.0], [60.7, 241.0], [60.8, 241.0], [60.9, 241.0], [61.0, 241.0], [61.1, 241.0], [61.2, 241.0], [61.3, 241.0], [61.4, 241.0], [61.5, 241.0], [61.6, 241.0], [61.7, 241.0], [61.8, 241.0], [61.9, 241.0], [62.0, 241.0], [62.1, 241.0], [62.2, 241.0], [62.3, 241.0], [62.4, 241.0], [62.5, 241.0], [62.6, 241.0], [62.7, 241.0], [62.8, 241.0], [62.9, 241.0], [63.0, 241.0], [63.1, 242.0], [63.2, 242.0], [63.3, 242.0], [63.4, 242.0], [63.5, 242.0], [63.6, 242.0], [63.7, 242.0], [63.8, 242.0], [63.9, 242.0], [64.0, 242.0], [64.1, 242.0], [64.2, 242.0], [64.3, 242.0], [64.4, 242.0], [64.5, 242.0], [64.6, 242.0], [64.7, 242.0], [64.8, 242.0], [64.9, 242.0], [65.0, 242.0], [65.1, 242.0], [65.2, 242.0], [65.3, 242.0], [65.4, 242.0], [65.5, 242.0], [65.6, 242.0], [65.7, 242.0], [65.8, 242.0], [65.9, 242.0], [66.0, 242.0], [66.1, 242.0], [66.2, 242.0], [66.3, 242.0], [66.4, 242.0], [66.5, 242.0], [66.6, 243.0], [66.7, 243.0], [66.8, 243.0], [66.9, 243.0], [67.0, 243.0], [67.1, 243.0], [67.2, 243.0], [67.3, 243.0], [67.4, 243.0], [67.5, 243.0], [67.6, 243.0], [67.7, 243.0], [67.8, 243.0], [67.9, 243.0], [68.0, 243.0], [68.1, 243.0], [68.2, 243.0], [68.3, 243.0], [68.4, 243.0], [68.5, 243.0], [68.6, 243.0], [68.7, 243.0], [68.8, 243.0], [68.9, 243.0], [69.0, 243.0], [69.1, 243.0], [69.2, 243.0], [69.3, 244.0], [69.4, 244.0], [69.5, 244.0], [69.6, 244.0], [69.7, 244.0], [69.8, 244.0], [69.9, 244.0], [70.0, 244.0], [70.1, 244.0], [70.2, 244.0], [70.3, 244.0], [70.4, 244.0], [70.5, 244.0], [70.6, 244.0], [70.7, 244.0], [70.8, 245.0], [70.9, 245.0], [71.0, 245.0], [71.1, 245.0], [71.2, 245.0], [71.3, 245.0], [71.4, 245.0], [71.5, 245.0], [71.6, 245.0], [71.7, 245.0], [71.8, 245.0], [71.9, 245.0], [72.0, 245.0], [72.1, 245.0], [72.2, 245.0], [72.3, 245.0], [72.4, 246.0], [72.5, 246.0], [72.6, 246.0], [72.7, 246.0], [72.8, 246.0], [72.9, 246.0], [73.0, 246.0], [73.1, 246.0], [73.2, 246.0], [73.3, 246.0], [73.4, 246.0], [73.5, 246.0], [73.6, 246.0], [73.7, 246.0], [73.8, 246.0], [73.9, 246.0], [74.0, 246.0], [74.1, 246.0], [74.2, 246.0], [74.3, 247.0], [74.4, 247.0], [74.5, 247.0], [74.6, 247.0], [74.7, 247.0], [74.8, 247.0], [74.9, 248.0], [75.0, 248.0], [75.1, 248.0], [75.2, 248.0], [75.3, 248.0], [75.4, 248.0], [75.5, 248.0], [75.6, 248.0], [75.7, 248.0], [75.8, 248.0], [75.9, 248.0], [76.0, 248.0], [76.1, 248.0], [76.2, 248.0], [76.3, 248.0], [76.4, 249.0], [76.5, 249.0], [76.6, 249.0], [76.7, 249.0], [76.8, 249.0], [76.9, 249.0], [77.0, 249.0], [77.1, 249.0], [77.2, 249.0], [77.3, 249.0], [77.4, 250.0], [77.5, 250.0], [77.6, 250.0], [77.7, 250.0], [77.8, 250.0], [77.9, 250.0], [78.0, 250.0], [78.1, 250.0], [78.2, 250.0], [78.3, 250.0], [78.4, 250.0], [78.5, 250.0], [78.6, 250.0], [78.7, 250.0], [78.8, 250.0], [78.9, 250.0], [79.0, 250.0], [79.1, 250.0], [79.2, 250.0], [79.3, 251.0], [79.4, 251.0], [79.5, 251.0], [79.6, 251.0], [79.7, 251.0], [79.8, 251.0], [79.9, 251.0], [80.0, 251.0], [80.1, 251.0], [80.2, 252.0], [80.3, 252.0], [80.4, 252.0], [80.5, 252.0], [80.6, 252.0], [80.7, 252.0], [80.8, 252.0], [80.9, 252.0], [81.0, 252.0], [81.1, 252.0], [81.2, 252.0], [81.3, 252.0], [81.4, 252.0], [81.5, 252.0], [81.6, 253.0], [81.7, 253.0], [81.8, 253.0], [81.9, 253.0], [82.0, 253.0], [82.1, 253.0], [82.2, 253.0], [82.3, 253.0], [82.4, 253.0], [82.5, 253.0], [82.6, 253.0], [82.7, 254.0], [82.8, 254.0], [82.9, 255.0], [83.0, 255.0], [83.1, 255.0], [83.2, 255.0], [83.3, 256.0], [83.4, 256.0], [83.5, 256.0], [83.6, 256.0], [83.7, 256.0], [83.8, 256.0], [83.9, 256.0], [84.0, 256.0], [84.1, 256.0], [84.2, 256.0], [84.3, 257.0], [84.4, 257.0], [84.5, 257.0], [84.6, 257.0], [84.7, 258.0], [84.8, 258.0], [84.9, 258.0], [85.0, 258.0], [85.1, 258.0], [85.2, 258.0], [85.3, 258.0], [85.4, 259.0], [85.5, 259.0], [85.6, 259.0], [85.7, 259.0], [85.8, 260.0], [85.9, 260.0], [86.0, 260.0], [86.1, 260.0], [86.2, 260.0], [86.3, 260.0], [86.4, 260.0], [86.5, 260.0], [86.6, 260.0], [86.7, 260.0], [86.8, 261.0], [86.9, 261.0], [87.0, 261.0], [87.1, 261.0], [87.2, 261.0], [87.3, 261.0], [87.4, 261.0], [87.5, 261.0], [87.6, 262.0], [87.7, 263.0], [87.8, 263.0], [87.9, 263.0], [88.0, 263.0], [88.1, 264.0], [88.2, 264.0], [88.3, 264.0], [88.4, 264.0], [88.5, 264.0], [88.6, 264.0], [88.7, 265.0], [88.8, 265.0], [88.9, 265.0], [89.0, 265.0], [89.1, 265.0], [89.2, 265.0], [89.3, 265.0], [89.4, 265.0], [89.5, 267.0], [89.6, 267.0], [89.7, 267.0], [89.8, 267.0], [89.9, 269.0], [90.0, 269.0], [90.1, 269.0], [90.2, 269.0], [90.3, 269.0], [90.4, 270.0], [90.5, 270.0], [90.6, 271.0], [90.7, 271.0], [90.8, 273.0], [90.9, 273.0], [91.0, 273.0], [91.1, 273.0], [91.2, 275.0], [91.3, 275.0], [91.4, 275.0], [91.5, 275.0], [91.6, 276.0], [91.7, 276.0], [91.8, 277.0], [91.9, 277.0], [92.0, 277.0], [92.1, 277.0], [92.2, 277.0], [92.3, 277.0], [92.4, 277.0], [92.5, 277.0], [92.6, 278.0], [92.7, 280.0], [92.8, 280.0], [92.9, 281.0], [93.0, 281.0], [93.1, 281.0], [93.2, 281.0], [93.3, 282.0], [93.4, 282.0], [93.5, 283.0], [93.6, 283.0], [93.7, 284.0], [93.8, 284.0], [93.9, 286.0], [94.0, 286.0], [94.1, 287.0], [94.2, 287.0], [94.3, 290.0], [94.4, 290.0], [94.5, 292.0], [94.6, 292.0], [94.7, 293.0], [94.8, 293.0], [94.9, 293.0], [95.0, 293.0], [95.1, 294.0], [95.2, 294.0], [95.3, 294.0], [95.4, 295.0], [95.5, 295.0], [95.6, 298.0], [95.7, 298.0], [95.8, 301.0], [95.9, 301.0], [96.0, 301.0], [96.1, 301.0], [96.2, 302.0], [96.3, 302.0], [96.4, 303.0], [96.5, 303.0], [96.6, 304.0], [96.7, 304.0], [96.8, 310.0], [96.9, 310.0], [97.0, 311.0], [97.1, 311.0], [97.2, 312.0], [97.3, 312.0], [97.4, 314.0], [97.5, 314.0], [97.6, 314.0], [97.7, 315.0], [97.8, 315.0], [97.9, 315.0], [98.0, 315.0], [98.1, 317.0], [98.2, 317.0], [98.3, 319.0], [98.4, 319.0], [98.5, 321.0], [98.6, 321.0], [98.7, 322.0], [98.8, 322.0], [98.9, 336.0], [99.0, 336.0], [99.1, 362.0], [99.2, 362.0], [99.3, 375.0], [99.4, 375.0], [99.5, 382.0], [99.6, 382.0], [99.7, 387.0], [99.8, 387.0], [99.9, 1306.0], [100.0, 1306.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 498.0, "series": [{"data": [[33300.0, 1.0], [36100.0, 2.0], [35700.0, 1.0], [38500.0, 1.0], [39700.0, 1.0], [40100.0, 1.0], [42100.0, 1.0], [44500.0, 1.0], [43700.0, 1.0], [44100.0, 1.0], [47300.0, 1.0], [48500.0, 1.0], [49700.0, 1.0], [50900.0, 1.0], [50500.0, 1.0], [49300.0, 1.0], [52100.0, 1.0], [200.0, 3.0], [54500.0, 1.0], [53300.0, 1.0], [56900.0, 2.0], [56500.0, 1.0], [59300.0, 1.0], [60500.0, 2.0], [300.0, 63.0], [400.0, 6.0], [1000.0, 1.0], [1300.0, 1.0], [1800.0, 1.0], [2200.0, 1.0], [2700.0, 1.0], [2900.0, 2.0], [3000.0, 1.0], [3500.0, 1.0], [3900.0, 1.0], [4600.0, 2.0], [5100.0, 2.0], [4900.0, 2.0], [5300.0, 11.0], [5200.0, 1.0], [5600.0, 3.0], [5500.0, 2.0], [5400.0, 6.0], [5800.0, 3.0], [5700.0, 2.0], [5900.0, 4.0], [6100.0, 3.0], [6000.0, 2.0], [6300.0, 1.0], [6200.0, 2.0], [6400.0, 3.0], [6500.0, 2.0], [6600.0, 2.0], [6700.0, 2.0], [6900.0, 2.0], [7000.0, 5.0], [7200.0, 1.0], [7300.0, 1.0], [7600.0, 1.0], [7500.0, 2.0], [7900.0, 1.0], [7700.0, 1.0], [8100.0, 1.0], [8000.0, 1.0], [8300.0, 3.0], [8600.0, 2.0], [8400.0, 2.0], [8500.0, 2.0], [8900.0, 3.0], [8800.0, 3.0], [9000.0, 2.0], [9100.0, 1.0], [9200.0, 1.0], [9700.0, 3.0], [9500.0, 3.0], [9300.0, 2.0], [9400.0, 2.0], [9600.0, 1.0], [9800.0, 1.0], [10100.0, 3.0], [9900.0, 3.0], [10500.0, 3.0], [10700.0, 2.0], [10400.0, 1.0], [11100.0, 3.0], [11000.0, 1.0], [11200.0, 1.0], [10800.0, 1.0], [11400.0, 2.0], [11500.0, 1.0], [11600.0, 3.0], [11700.0, 1.0], [12200.0, 2.0], [12000.0, 2.0], [12100.0, 1.0], [12500.0, 2.0], [12400.0, 3.0], [12700.0, 2.0], [13000.0, 2.0], [13300.0, 3.0], [12800.0, 2.0], [13200.0, 2.0], [12900.0, 2.0], [13800.0, 2.0], [13700.0, 3.0], [13600.0, 1.0], [13400.0, 1.0], [14100.0, 1.0], [14000.0, 1.0], [13900.0, 3.0], [14200.0, 1.0], [14600.0, 2.0], [14400.0, 2.0], [14500.0, 1.0], [15000.0, 2.0], [14900.0, 1.0], [15200.0, 1.0], [15600.0, 1.0], [15500.0, 4.0], [15400.0, 3.0], [16000.0, 2.0], [16100.0, 1.0], [16300.0, 1.0], [17000.0, 4.0], [16800.0, 3.0], [17200.0, 2.0], [16400.0, 1.0], [17400.0, 2.0], [18200.0, 1.0], [18000.0, 2.0], [17600.0, 1.0], [19400.0, 3.0], [19000.0, 3.0], [19200.0, 3.0], [18600.0, 1.0], [20400.0, 2.0], [19800.0, 2.0], [20200.0, 1.0], [19600.0, 2.0], [20000.0, 2.0], [20600.0, 1.0], [21200.0, 2.0], [20800.0, 1.0], [22000.0, 2.0], [22200.0, 2.0], [21600.0, 1.0], [22400.0, 2.0], [22800.0, 1.0], [22600.0, 1.0], [23800.0, 3.0], [24200.0, 1.0], [23600.0, 4.0], [24400.0, 1.0], [24000.0, 1.0], [25000.0, 1.0], [24800.0, 2.0], [25200.0, 1.0], [26200.0, 2.0], [26000.0, 1.0], [26400.0, 2.0], [27400.0, 1.0], [26800.0, 2.0], [27600.0, 1.0], [27200.0, 2.0], [28600.0, 1.0], [28200.0, 1.0], [28400.0, 2.0], [28000.0, 1.0], [29000.0, 1.0], [29200.0, 1.0], [30200.0, 1.0], [29800.0, 1.0], [32400.0, 1.0], [34800.0, 2.0], [32800.0, 2.0], [34400.0, 1.0], [33200.0, 1.0], [36800.0, 1.0], [37200.0, 2.0], [38400.0, 1.0], [41600.0, 1.0], [46000.0, 1.0], [47600.0, 2.0], [48800.0, 1.0], [54800.0, 1.0], [56400.0, 1.0], [59200.0, 1.0], [60400.0, 6.0], [60000.0, 1.0], [33500.0, 2.0], [35900.0, 1.0], [35100.0, 1.0], [37500.0, 1.0], [38300.0, 1.0], [44700.0, 2.0], [47900.0, 1.0], [49500.0, 2.0], [58300.0, 1.0], [60300.0, 8.0], [17300.0, 3.0], [17100.0, 1.0], [16900.0, 1.0], [17500.0, 1.0], [18100.0, 2.0], [17700.0, 2.0], [18500.0, 2.0], [18900.0, 2.0], [19300.0, 1.0], [19500.0, 1.0], [19900.0, 2.0], [20100.0, 2.0], [19700.0, 1.0], [20700.0, 2.0], [21300.0, 2.0], [21500.0, 1.0], [21100.0, 1.0], [21700.0, 2.0], [22500.0, 1.0], [22100.0, 2.0], [23300.0, 3.0], [22900.0, 2.0], [23500.0, 1.0], [23700.0, 1.0], [24100.0, 1.0], [24500.0, 2.0], [23900.0, 1.0], [25500.0, 1.0], [24900.0, 1.0], [25300.0, 1.0], [24700.0, 2.0], [26500.0, 4.0], [26300.0, 1.0], [27500.0, 1.0], [26700.0, 5.0], [27100.0, 1.0], [27300.0, 1.0], [28500.0, 1.0], [28300.0, 1.0], [27700.0, 1.0], [29300.0, 1.0], [29100.0, 1.0], [28700.0, 1.0], [29500.0, 1.0], [28900.0, 1.0], [30700.0, 1.0], [29900.0, 1.0], [29700.0, 1.0], [31700.0, 2.0], [31100.0, 1.0], [32300.0, 1.0], [33000.0, 1.0], [34200.0, 1.0], [35000.0, 1.0], [36200.0, 2.0], [37800.0, 2.0], [38600.0, 1.0], [39000.0, 1.0], [41000.0, 1.0], [45800.0, 1.0], [51800.0, 1.0], [52200.0, 1.0], [54200.0, 1.0], [53800.0, 1.0], [54600.0, 1.0], [55400.0, 1.0], [55800.0, 1.0], [57000.0, 1.0], [57800.0, 1.0], [58600.0, 1.0], [58200.0, 1.0], [59400.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 69.0], [34500.0, 1.0], [34100.0, 1.0], [35700.0, 1.0], [34900.0, 1.0], [36900.0, 1.0], [41300.0, 1.0], [44500.0, 2.0], [45700.0, 1.0], [49300.0, 1.0], [52900.0, 1.0], [54500.0, 1.0], [56100.0, 1.0], [58100.0, 1.0], [58900.0, 1.0], [60100.0, 12.0], [59700.0, 1.0], [700.0, 1.0], [1100.0, 1.0], [1600.0, 1.0], [1900.0, 1.0], [2500.0, 1.0], [2600.0, 2.0], [2700.0, 1.0], [3300.0, 1.0], [3600.0, 1.0], [4400.0, 2.0], [4700.0, 2.0], [5000.0, 2.0], [4900.0, 3.0], [5100.0, 13.0], [5200.0, 4.0], [5300.0, 1.0], [5600.0, 5.0], [5400.0, 4.0], [5500.0, 1.0], [5800.0, 4.0], [5700.0, 1.0], [6100.0, 3.0], [5900.0, 3.0], [6200.0, 1.0], [6300.0, 3.0], [6600.0, 3.0], [6500.0, 2.0], [6400.0, 1.0], [6800.0, 3.0], [6700.0, 1.0], [6900.0, 1.0], [7100.0, 1.0], [7400.0, 1.0], [7200.0, 1.0], [7300.0, 1.0], [7500.0, 1.0], [7700.0, 2.0], [7900.0, 1.0], [8100.0, 4.0], [8000.0, 1.0], [8600.0, 4.0], [8500.0, 1.0], [8700.0, 2.0], [8300.0, 2.0], [8400.0, 1.0], [8200.0, 1.0], [9200.0, 4.0], [8800.0, 1.0], [9100.0, 3.0], [8900.0, 1.0], [9000.0, 1.0], [9600.0, 1.0], [9400.0, 2.0], [9500.0, 2.0], [9700.0, 3.0], [9800.0, 2.0], [10200.0, 2.0], [9900.0, 1.0], [10100.0, 1.0], [10700.0, 1.0], [10300.0, 1.0], [10500.0, 2.0], [10600.0, 1.0], [10800.0, 3.0], [11100.0, 2.0], [11200.0, 1.0], [10900.0, 1.0], [11700.0, 1.0], [11300.0, 1.0], [11400.0, 2.0], [11500.0, 1.0], [12200.0, 3.0], [12000.0, 2.0], [11800.0, 2.0], [12100.0, 2.0], [12600.0, 3.0], [12300.0, 1.0], [12500.0, 1.0], [12700.0, 1.0], [12800.0, 2.0], [13000.0, 4.0], [13100.0, 2.0], [13800.0, 1.0], [13500.0, 3.0], [13400.0, 2.0], [13600.0, 3.0], [13700.0, 1.0], [13900.0, 1.0], [14300.0, 1.0], [14200.0, 2.0], [14000.0, 1.0], [14100.0, 1.0], [14800.0, 2.0], [14700.0, 1.0], [14400.0, 1.0], [15300.0, 4.0], [14900.0, 1.0], [15200.0, 1.0], [15100.0, 1.0], [15000.0, 1.0], [15400.0, 1.0], [15800.0, 2.0], [16200.0, 1.0], [15900.0, 1.0], [16100.0, 1.0], [16800.0, 2.0], [17200.0, 3.0], [17000.0, 3.0], [16600.0, 2.0], [17400.0, 2.0], [18200.0, 2.0], [18000.0, 1.0], [19200.0, 5.0], [18800.0, 3.0], [19400.0, 1.0], [18600.0, 1.0], [19000.0, 1.0], [20400.0, 2.0], [19800.0, 3.0], [20200.0, 1.0], [19600.0, 1.0], [21000.0, 1.0], [21200.0, 1.0], [21800.0, 2.0], [22200.0, 2.0], [22000.0, 1.0], [22400.0, 1.0], [22600.0, 3.0], [23400.0, 2.0], [23200.0, 1.0], [23600.0, 2.0], [24000.0, 1.0], [23800.0, 1.0], [24200.0, 1.0], [24800.0, 1.0], [24600.0, 2.0], [25400.0, 1.0], [26000.0, 2.0], [26400.0, 1.0], [26200.0, 2.0], [27200.0, 1.0], [27000.0, 1.0], [26800.0, 1.0], [27400.0, 1.0], [28400.0, 2.0], [28000.0, 1.0], [28200.0, 1.0], [27800.0, 1.0], [29400.0, 1.0], [28800.0, 1.0], [29000.0, 1.0], [30000.0, 1.0], [30800.0, 1.0], [32600.0, 2.0], [32200.0, 1.0], [34800.0, 1.0], [33200.0, 2.0], [36400.0, 1.0], [37200.0, 1.0], [37600.0, 1.0], [38400.0, 1.0], [38000.0, 1.0], [40800.0, 1.0], [45600.0, 1.0], [47600.0, 1.0], [49200.0, 1.0], [54000.0, 1.0], [55600.0, 1.0], [56800.0, 1.0], [57600.0, 1.0], [58400.0, 1.0], [33100.0, 1.0], [33900.0, 1.0], [35900.0, 4.0], [35500.0, 1.0], [38700.0, 1.0], [38300.0, 1.0], [37500.0, 1.0], [39500.0, 1.0], [41900.0, 1.0], [44300.0, 1.0], [43500.0, 1.0], [43900.0, 1.0], [47100.0, 1.0], [51900.0, 2.0], [51500.0, 1.0], [54300.0, 2.0], [53500.0, 1.0], [56300.0, 1.0], [59100.0, 2.0], [57900.0, 1.0], [16500.0, 2.0], [16700.0, 2.0], [16900.0, 3.0], [17700.0, 3.0], [17900.0, 1.0], [18300.0, 1.0], [17500.0, 1.0], [18700.0, 1.0], [18900.0, 2.0], [19100.0, 1.0], [20100.0, 1.0], [19500.0, 2.0], [19900.0, 2.0], [19700.0, 2.0], [20500.0, 2.0], [20900.0, 3.0], [21500.0, 2.0], [21300.0, 1.0], [21100.0, 1.0], [21900.0, 3.0], [22100.0, 1.0], [23500.0, 3.0], [23100.0, 3.0], [23300.0, 2.0], [24300.0, 1.0], [24500.0, 3.0], [24100.0, 1.0], [23700.0, 1.0], [25300.0, 1.0], [25100.0, 1.0], [24900.0, 1.0], [25900.0, 1.0], [26300.0, 3.0], [26500.0, 5.0], [25700.0, 1.0], [26100.0, 1.0], [27300.0, 2.0], [26900.0, 1.0], [27100.0, 1.0], [28300.0, 1.0], [28100.0, 2.0], [29100.0, 1.0], [28900.0, 1.0], [29500.0, 1.0], [29300.0, 1.0], [28700.0, 1.0], [30500.0, 1.0], [29700.0, 1.0], [31500.0, 2.0], [32700.0, 1.0], [32100.0, 1.0], [34600.0, 1.0], [33000.0, 1.0], [37000.0, 1.0], [38200.0, 1.0], [39800.0, 1.0], [47400.0, 2.0], [48600.0, 1.0], [48200.0, 1.0], [49000.0, 1.0], [49400.0, 1.0], [50600.0, 1.0], [50200.0, 1.0], [55000.0, 1.0], [56600.0, 2.0], [60200.0, 4.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 21.0], [1300.0, 1.0], [200.0, 498.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 184.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 435.0, "series": [{"data": [[0.0, 435.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 417.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 184.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.8, "minX": 1.68520554E12, "maxY": 23.68103448275862, "series": [{"data": [[1.68520632E12, 23.68103448275862], [1.68520602E12, 15.0], [1.68520638E12, 23.58778625954198], [1.68520572E12, 5.282051282051282], [1.6852056E12, 4.230769230769231], [1.68520626E12, 20.24468085106383], [1.68520596E12, 14.249999999999998], [1.68520566E12, 5.0], [1.68520584E12, 10.0], [1.68520554E12, 1.8], [1.6852062E12, 20.0], [1.6852059E12, 10.452173913043476], [1.68520608E12, 15.2991452991453], [1.68520578E12, 8.999999999999995], [1.68520644E12, 7.384615384615383], [1.68520614E12, 18.93006993006993]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68520644E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 229.0, "minX": 1.0, "maxY": 47752.5, "series": [{"data": [[2.0, 7669.0], [8.0, 10363.333333333332], [9.0, 9135.6], [10.0, 14597.701298701297], [11.0, 12092.133333333333], [12.0, 26987.666666666668], [3.0, 27840.666666666668], [13.0, 9034.615384615383], [14.0, 17304.72222222222], [15.0, 12748.813559322034], [4.0, 19606.5], [16.0, 17327.0], [17.0, 23735.866666666665], [18.0, 14142.0], [19.0, 17384.5], [5.0, 17370.562499999993], [20.0, 24470.56179775281], [21.0, 15584.0], [22.0, 36297.769230769234], [23.0, 26454.2], [24.0, 28525.2], [6.0, 47752.5], [25.0, 33721.511111111104], [7.0, 20292.4]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[15.342967244701361, 19264.45279383431]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 7409.0], [8.0, 10127.166666666666], [9.0, 8886.0], [10.0, 14356.961038961037], [11.0, 11850.533333333333], [12.0, 26744.0], [3.0, 27591.0], [13.0, 8790.538461538461], [14.0, 17063.833333333336], [15.0, 12497.90677966102], [4.0, 19371.5], [16.0, 17085.5], [17.0, 27105.615384615383], [18.0, 13899.142857142857], [19.0, 17142.92857142857], [5.0, 17127.0625], [20.0, 24225.258426966295], [21.0, 15321.333333333332], [22.0, 36046.38461538462], [23.0, 26208.9], [24.0, 31419.333333333332], [6.0, 47446.0], [25.0, 33465.37777777778], [7.0, 20045.6]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[15.319767441860478, 19128.251937984496]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 232.25], [3.0, 231.0], [4.0, 242.5], [5.0, 242.3030303030303], [6.0, 229.0], [7.0, 240.90000000000003], [8.0, 237.0], [9.0, 250.2], [10.0, 241.80263157894737], [11.0, 237.9375], [12.0, 270.3333333333333], [13.0, 234.07692307692307], [14.0, 243.27777777777777], [15.0, 251.1525423728813], [1.0, 315.0], [16.0, 241.2], [17.0, 242.20000000000002], [18.0, 237.14285714285714], [19.0, 247.53846153846152], [20.0, 247.56321839080468], [21.0, 242.0], [22.0, 243.35714285714283], [23.0, 251.5], [24.0, 252.16666666666666], [25.0, 257.79069767441854]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[15.34423076923077, 246.73653846153854]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 145.95, "minX": 1.68520554E12, "maxY": 8087.1, "series": [{"data": [[1.68520632E12, 2795.2833333333333], [1.68520602E12, 3628.5666666666666], [1.68520638E12, 2487.55], [1.68520572E12, 701.8666666666667], [1.6852056E12, 989.45], [1.68520626E12, 2274.0666666666666], [1.68520596E12, 3169.6], [1.68520566E12, 1027.3666666666666], [1.68520584E12, 2156.5833333333335], [1.68520554E12, 145.95], [1.6852062E12, 3008.7166666666667], [1.6852059E12, 2468.9], [1.68520608E12, 2971.616666666667], [1.68520578E12, 1482.0166666666667], [1.68520644E12, 391.73333333333335], [1.68520614E12, 3594.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68520632E12, 5942.866666666667], [1.68520602E12, 8087.1], [1.68520638E12, 7289.683333333333], [1.68520572E12, 1549.65], [1.6852056E12, 1821.3833333333334], [1.68520626E12, 4365.2], [1.68520596E12, 8035.716666666666], [1.68520566E12, 1943.9833333333333], [1.68520584E12, 4589.716666666666], [1.68520554E12, 289.1], [1.6852062E12, 5115.333333333333], [1.6852059E12, 5153.516666666666], [1.68520608E12, 5937.5], [1.68520578E12, 6002.483333333334], [1.68520644E12, 2090.616666666667], [1.68520614E12, 6713.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68520644E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 237.875, "minX": 1.68520554E12, "maxY": 48278.857142857145, "series": [{"data": [[1.68520632E12, 38055.81081081081], [1.68520602E12, 13141.033898305084], [1.68520638E12, 27752.41666666666], [1.68520572E12, 15985.23076923077], [1.6852056E12, 14096.833333333332], [1.68520626E12, 27515.09375], [1.68520596E12, 9941.24590163934], [1.68520566E12, 16714.14285714286], [1.68520584E12, 15910.529411764706], [1.68520554E12, 7007.0], [1.6852062E12, 22671.78571428571], [1.6852059E12, 11592.638888888887], [1.68520608E12, 16506.25], [1.68520578E12, 10369.135135135137], [1.68520644E12, 46552.666666666664], [1.68520614E12, 20685.6]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68520632E12, 38310.131578947374], [1.68520602E12, 12455.767857142862], [1.68520638E12, 27994.933333333334], [1.68520572E12, 17047.25], [1.6852056E12, 13853.916666666666], [1.68520626E12, 25674.8], [1.68520596E12, 9588.672413793105], [1.68520566E12, 16467.357142857145], [1.68520584E12, 15765.575757575758], [1.68520554E12, 6692.0], [1.6852062E12, 22610.24390243902], [1.6852059E12, 11084.026315789471], [1.68520608E12, 15701.599999999999], [1.68520578E12, 10130.756756756755], [1.68520644E12, 48278.857142857145], [1.68520614E12, 20752.74468085106]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68520632E12, 252.85365853658539], [1.68520602E12, 264.2321428571429], [1.68520638E12, 254.63157894736847], [1.68520572E12, 239.2142857142857], [1.6852056E12, 244.4], [1.68520626E12, 250.81250000000003], [1.68520596E12, 240.1803278688525], [1.68520566E12, 244.07142857142858], [1.68520584E12, 243.87500000000003], [1.68520554E12, 260.0], [1.6852062E12, 247.65853658536582], [1.6852059E12, 241.5121951219513], [1.68520608E12, 240.0487804878049], [1.68520578E12, 237.875], [1.68520614E12, 242.29411764705887]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68520644E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 237.75000000000003, "minX": 1.68520554E12, "maxY": 48278.78571428571, "series": [{"data": [[1.68520632E12, 38055.08108108108], [1.68520602E12, 13140.508474576274], [1.68520638E12, 27751.916666666668], [1.68520572E12, 15984.923076923076], [1.6852056E12, 14096.416666666668], [1.68520626E12, 27514.59375], [1.68520596E12, 9940.803278688523], [1.68520566E12, 16713.642857142855], [1.68520584E12, 15910.000000000004], [1.68520554E12, 7001.0], [1.6852062E12, 22671.2380952381], [1.6852059E12, 11592.027777777777], [1.68520608E12, 16505.722222222223], [1.68520578E12, 10368.72972972973], [1.68520644E12, 46551.5], [1.68520614E12, 20685.26666666667]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68520632E12, 38309.92105263157], [1.68520602E12, 12455.607142857147], [1.68520638E12, 27994.822222222225], [1.68520572E12, 17047.083333333332], [1.6852056E12, 13853.75], [1.68520626E12, 25674.600000000002], [1.68520596E12, 9588.51724137931], [1.68520566E12, 16467.07142857143], [1.68520584E12, 15765.333333333338], [1.68520554E12, 6692.0], [1.6852062E12, 22610.048780487807], [1.6852059E12, 11083.842105263158], [1.68520608E12, 15701.374999999996], [1.68520578E12, 10130.51351351351], [1.68520644E12, 48278.78571428571], [1.68520614E12, 20752.617021276594]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68520632E12, 252.609756097561], [1.68520602E12, 263.8392857142857], [1.68520638E12, 253.89473684210526], [1.68520572E12, 238.99999999999997], [1.6852056E12, 244.20000000000002], [1.68520626E12, 250.34374999999997], [1.68520596E12, 239.93442622950823], [1.68520566E12, 243.92857142857142], [1.68520584E12, 243.5], [1.68520554E12, 257.6666666666667], [1.6852062E12, 247.21951219512195], [1.6852059E12, 241.04878048780492], [1.68520608E12, 239.80487804878044], [1.68520578E12, 237.75000000000003], [1.68520614E12, 242.078431372549]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68520644E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68520554E12, "maxY": 179.0, "series": [{"data": [[1.68520632E12, 117.99999999999999], [1.68520602E12, 121.5762711864407], [1.68520638E12, 117.08333333333331], [1.68520572E12, 122.15384615384617], [1.6852056E12, 114.75], [1.68520626E12, 116.53125], [1.68520596E12, 117.09836065573771], [1.68520566E12, 118.07142857142858], [1.68520584E12, 118.61764705882354], [1.68520554E12, 179.0], [1.6852062E12, 115.21428571428571], [1.6852059E12, 117.30555555555557], [1.68520608E12, 115.47222222222223], [1.68520578E12, 116.51351351351352], [1.68520644E12, 115.75], [1.68520614E12, 117.66666666666664]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68520632E12, 0.0], [1.68520602E12, 0.0], [1.68520638E12, 0.0], [1.68520572E12, 0.0], [1.6852056E12, 0.0], [1.68520626E12, 0.0], [1.68520596E12, 0.0], [1.68520566E12, 0.0], [1.68520584E12, 0.0], [1.68520554E12, 0.0], [1.6852062E12, 0.0], [1.6852059E12, 0.0], [1.68520608E12, 0.0], [1.68520578E12, 0.0], [1.68520644E12, 0.0], [1.68520614E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68520632E12, 117.07317073170731], [1.68520602E12, 121.5], [1.68520638E12, 115.9736842105263], [1.68520572E12, 122.42857142857142], [1.6852056E12, 114.66666666666667], [1.68520626E12, 118.78125], [1.68520596E12, 117.54098360655739], [1.68520566E12, 118.50000000000001], [1.68520584E12, 119.03124999999997], [1.68520554E12, 135.66666666666666], [1.6852062E12, 115.53658536585367], [1.6852059E12, 116.58536585365853], [1.68520608E12, 115.60975609756099], [1.68520578E12, 116.475], [1.68520614E12, 117.29411764705883]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68520644E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 226.0, "minX": 1.68520554E12, "maxY": 59781.0, "series": [{"data": [[1.68520632E12, 59781.0], [1.68520602E12, 28140.0], [1.68520638E12, 59135.0], [1.68520572E12, 23637.0], [1.6852056E12, 20197.0], [1.68520626E12, 56658.0], [1.68520596E12, 35933.0], [1.68520566E12, 20404.0], [1.68520584E12, 37277.0], [1.68520554E12, 6692.0], [1.6852062E12, 47403.0], [1.6852059E12, 26465.0], [1.68520608E12, 34901.0], [1.68520578E12, 35997.0], [1.68520644E12, 56831.0], [1.68520614E12, 39548.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68520632E12, 54611.8], [1.68520602E12, 20682.600000000006], [1.68520638E12, 49918.8], [1.68520572E12, 23557.2], [1.6852056E12, 17460.6], [1.68520626E12, 50943.00000000001], [1.68520596E12, 29386.2], [1.68520566E12, 19617.4], [1.68520584E12, 31189.30000000001], [1.68520554E12, 6692.0], [1.6852062E12, 40109.40000000001], [1.6852059E12, 22852.500000000004], [1.68520608E12, 23206.6], [1.68520578E12, 34719.0], [1.68520644E12, 56831.0], [1.68520614E12, 32410.600000000017]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68520632E12, 59781.0], [1.68520602E12, 28140.0], [1.68520638E12, 59135.0], [1.68520572E12, 23637.0], [1.6852056E12, 20197.0], [1.68520626E12, 56658.0], [1.68520596E12, 35933.0], [1.68520566E12, 20404.0], [1.68520584E12, 37277.0], [1.68520554E12, 6692.0], [1.6852062E12, 47403.0], [1.6852059E12, 26465.0], [1.68520608E12, 34901.0], [1.68520578E12, 35997.0], [1.68520644E12, 56831.0], [1.68520614E12, 39548.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68520632E12, 57743.8], [1.68520602E12, 24917.3], [1.68520638E12, 58337.6], [1.68520572E12, 23637.0], [1.6852056E12, 19428.199999999997], [1.68520626E12, 54475.799999999996], [1.68520596E12, 31923.549999999992], [1.68520566E12, 20217.699999999997], [1.68520584E12, 34765.0], [1.68520554E12, 6692.0], [1.6852062E12, 44552.05], [1.6852059E12, 26022.35], [1.68520608E12, 26440.699999999986], [1.68520578E12, 35705.5], [1.68520644E12, 56831.0], [1.68520614E12, 37011.1]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68520632E12, 226.0], [1.68520602E12, 229.0], [1.68520638E12, 228.0], [1.68520572E12, 229.0], [1.6852056E12, 226.0], [1.68520626E12, 229.0], [1.68520596E12, 227.0], [1.68520566E12, 227.0], [1.68520584E12, 229.0], [1.68520554E12, 230.0], [1.6852062E12, 226.0], [1.6852059E12, 229.0], [1.68520608E12, 227.0], [1.68520578E12, 229.0], [1.68520644E12, 23397.0], [1.68520614E12, 227.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68520632E12, 303.0], [1.68520602E12, 5205.0], [1.68520638E12, 278.0], [1.68520572E12, 18325.5], [1.6852056E12, 265.0], [1.68520626E12, 355.5], [1.68520596E12, 256.0], [1.68520566E12, 6181.0], [1.68520584E12, 2983.5], [1.68520554E12, 275.0], [1.6852062E12, 2372.5], [1.6852059E12, 5093.0], [1.68520608E12, 284.0], [1.68520578E12, 19783.5], [1.68520644E12, 41949.0], [1.68520614E12, 277.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68520644E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 120.0, "minX": 1.0, "maxY": 60121.0, "series": [{"data": [[1.0, 294.0], [2.0, 282.0], [4.0, 304.0], [8.0, 10006.0], [9.0, 10992.5], [10.0, 293.0], [5.0, 242.0], [11.0, 9293.0], [3.0, 5911.0], [6.0, 8120.0], [7.0, 273.0], [14.0, 27522.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 225.0], [8.0, 234.0], [1.0, 228.0], [4.0, 228.0], [9.0, 227.0], [5.0, 120.0], [10.0, 228.0], [3.0, 227.0], [6.0, 230.0], [7.0, 60121.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 14.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 120.0, "minX": 1.0, "maxY": 60121.0, "series": [{"data": [[1.0, 294.0], [2.0, 281.0], [4.0, 303.0], [8.0, 10005.5], [9.0, 10991.0], [10.0, 293.0], [5.0, 242.0], [11.0, 9292.0], [3.0, 5911.0], [6.0, 8120.0], [7.0, 273.0], [14.0, 27522.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 225.0], [8.0, 234.0], [1.0, 228.0], [4.0, 228.0], [9.0, 227.0], [5.0, 120.0], [10.0, 228.0], [3.0, 227.0], [6.0, 229.0], [7.0, 60121.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 14.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.68520554E12, "maxY": 2.05, "series": [{"data": [[1.68520632E12, 1.2833333333333334], [1.68520602E12, 1.8333333333333333], [1.68520638E12, 1.3166666666666667], [1.68520572E12, 0.45], [1.6852056E12, 0.48333333333333334], [1.68520626E12, 1.05], [1.68520596E12, 2.05], [1.68520566E12, 0.5], [1.68520584E12, 1.1], [1.68520554E12, 0.08333333333333333], [1.6852062E12, 1.45], [1.6852059E12, 1.3166666666666667], [1.68520608E12, 1.4], [1.68520578E12, 1.3166666666666667], [1.68520614E12, 1.6333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68520638E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68520554E12, "maxY": 1.6333333333333333, "series": [{"data": [[1.68520632E12, 1.25], [1.68520602E12, 1.55], [1.68520638E12, 1.05], [1.68520572E12, 0.26666666666666666], [1.6852056E12, 0.45], [1.68520626E12, 1.0333333333333334], [1.68520596E12, 1.2], [1.68520566E12, 0.4666666666666667], [1.68520584E12, 0.9333333333333333], [1.68520554E12, 0.06666666666666667], [1.6852062E12, 1.3666666666666667], [1.6852059E12, 1.0333333333333334], [1.68520608E12, 1.35], [1.68520578E12, 0.4], [1.68520644E12, 0.15], [1.68520614E12, 1.6333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68520638E12, 0.21666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68520584E12, 0.15], [1.68520602E12, 0.31666666666666665], [1.68520572E12, 0.16666666666666666], [1.6852059E12, 0.2833333333333333], [1.68520578E12, 0.8833333333333333], [1.68520596E12, 0.7833333333333333]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68520632E12, 0.06666666666666667], [1.68520638E12, 0.11666666666666667], [1.68520644E12, 0.08333333333333333]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68520644E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68520554E12, "maxY": 0.85, "series": [{"data": [[1.68520632E12, 0.6833333333333333], [1.68520602E12, 0.75], [1.68520638E12, 0.6333333333333333], [1.68520572E12, 0.1], [1.6852056E12, 0.25], [1.68520626E12, 0.5333333333333333], [1.68520596E12, 0.6833333333333333], [1.68520566E12, 0.23333333333333334], [1.68520584E12, 0.4666666666666667], [1.68520554E12, 0.05], [1.6852062E12, 0.6833333333333333], [1.6852059E12, 0.48333333333333334], [1.68520608E12, 0.6833333333333333], [1.68520578E12, 0.16666666666666666], [1.68520614E12, 0.85]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68520584E12, 0.06666666666666667], [1.68520602E12, 0.18333333333333332], [1.68520572E12, 0.13333333333333333], [1.6852059E12, 0.2], [1.68520578E12, 0.5], [1.68520596E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68520584E12, 0.08333333333333333], [1.68520632E12, 0.06666666666666667], [1.68520602E12, 0.13333333333333333], [1.68520638E12, 0.3333333333333333], [1.68520572E12, 0.03333333333333333], [1.6852059E12, 0.08333333333333333], [1.68520578E12, 0.38333333333333336], [1.68520596E12, 0.45], [1.68520644E12, 0.08333333333333333]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68520632E12, 0.5666666666666667], [1.68520602E12, 0.6666666666666666], [1.68520638E12, 0.43333333333333335], [1.68520572E12, 0.16666666666666666], [1.6852056E12, 0.2], [1.68520626E12, 0.5166666666666667], [1.68520596E12, 0.26666666666666666], [1.68520566E12, 0.23333333333333334], [1.68520584E12, 0.3333333333333333], [1.68520554E12, 0.016666666666666666], [1.6852062E12, 0.7], [1.6852059E12, 0.48333333333333334], [1.68520608E12, 0.6], [1.68520578E12, 0.016666666666666666], [1.68520644E12, 0.15], [1.68520614E12, 0.75]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68520584E12, 0.23333333333333334], [1.68520632E12, 0.05], [1.68520602E12, 0.31666666666666665], [1.68520638E12, 0.36666666666666664], [1.68520572E12, 0.05], [1.6852059E12, 0.11666666666666667], [1.68520578E12, 0.6], [1.68520626E12, 0.016666666666666666], [1.68520596E12, 0.75], [1.68520644E12, 0.05]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68520632E12, 0.5666666666666667], [1.68520602E12, 0.8], [1.68520638E12, 0.4166666666666667], [1.68520572E12, 0.16666666666666666], [1.6852056E12, 0.2], [1.68520626E12, 0.5], [1.68520596E12, 0.5166666666666667], [1.68520566E12, 0.23333333333333334], [1.68520584E12, 0.4666666666666667], [1.68520554E12, 0.016666666666666666], [1.6852062E12, 0.6833333333333333], [1.6852059E12, 0.55], [1.68520608E12, 0.6666666666666666], [1.68520578E12, 0.23333333333333334], [1.68520644E12, 0.15], [1.68520614E12, 0.7833333333333333]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68520644E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68520554E12, "maxY": 2.3833333333333333, "series": [{"data": [[1.68520632E12, 1.8166666666666667], [1.68520602E12, 2.216666666666667], [1.68520638E12, 1.4833333333333334], [1.68520572E12, 0.43333333333333335], [1.6852056E12, 0.65], [1.68520626E12, 1.55], [1.68520596E12, 1.4666666666666666], [1.68520566E12, 0.7], [1.68520584E12, 1.2666666666666666], [1.68520554E12, 0.08333333333333333], [1.6852062E12, 2.066666666666667], [1.6852059E12, 1.5166666666666666], [1.68520608E12, 1.95], [1.68520578E12, 0.4166666666666667], [1.68520644E12, 0.3], [1.68520614E12, 2.3833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68520584E12, 0.38333333333333336], [1.68520632E12, 0.11666666666666667], [1.68520602E12, 0.6333333333333333], [1.68520638E12, 0.7], [1.68520572E12, 0.21666666666666667], [1.6852059E12, 0.4], [1.68520578E12, 1.4833333333333334], [1.68520626E12, 0.016666666666666666], [1.68520596E12, 1.5333333333333334], [1.68520644E12, 0.13333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68520644E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

