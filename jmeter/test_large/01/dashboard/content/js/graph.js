/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 115.0, "minX": 0.0, "maxY": 61387.0, "series": [{"data": [[0.0, 228.0], [0.1, 228.0], [0.2, 228.0], [0.3, 245.0], [0.4, 245.0], [0.5, 343.0], [0.6, 343.0], [0.7, 343.0], [0.8, 343.0], [0.9, 343.0], [1.0, 343.0], [1.1, 343.0], [1.2, 344.0], [1.3, 344.0], [1.4, 344.0], [1.5, 345.0], [1.6, 345.0], [1.7, 346.0], [1.8, 346.0], [1.9, 346.0], [2.0, 346.0], [2.1, 346.0], [2.2, 346.0], [2.3, 346.0], [2.4, 346.0], [2.5, 346.0], [2.6, 346.0], [2.7, 347.0], [2.8, 347.0], [2.9, 347.0], [3.0, 347.0], [3.1, 347.0], [3.2, 347.0], [3.3, 347.0], [3.4, 348.0], [3.5, 348.0], [3.6, 348.0], [3.7, 348.0], [3.8, 348.0], [3.9, 348.0], [4.0, 348.0], [4.1, 348.0], [4.2, 348.0], [4.3, 348.0], [4.4, 348.0], [4.5, 348.0], [4.6, 349.0], [4.7, 349.0], [4.8, 349.0], [4.9, 349.0], [5.0, 350.0], [5.1, 350.0], [5.2, 350.0], [5.3, 350.0], [5.4, 350.0], [5.5, 351.0], [5.6, 351.0], [5.7, 351.0], [5.8, 351.0], [5.9, 351.0], [6.0, 351.0], [6.1, 351.0], [6.2, 351.0], [6.3, 351.0], [6.4, 351.0], [6.5, 351.0], [6.6, 351.0], [6.7, 351.0], [6.8, 351.0], [6.9, 353.0], [7.0, 353.0], [7.1, 353.0], [7.2, 354.0], [7.3, 354.0], [7.4, 354.0], [7.5, 354.0], [7.6, 354.0], [7.7, 355.0], [7.8, 355.0], [7.9, 355.0], [8.0, 355.0], [8.1, 357.0], [8.2, 357.0], [8.3, 357.0], [8.4, 357.0], [8.5, 357.0], [8.6, 358.0], [8.7, 358.0], [8.8, 358.0], [8.9, 358.0], [9.0, 358.0], [9.1, 359.0], [9.2, 359.0], [9.3, 359.0], [9.4, 359.0], [9.5, 359.0], [9.6, 359.0], [9.7, 359.0], [9.8, 359.0], [9.9, 359.0], [10.0, 360.0], [10.1, 360.0], [10.2, 360.0], [10.3, 360.0], [10.4, 360.0], [10.5, 360.0], [10.6, 360.0], [10.7, 360.0], [10.8, 360.0], [10.9, 360.0], [11.0, 361.0], [11.1, 361.0], [11.2, 361.0], [11.3, 361.0], [11.4, 361.0], [11.5, 361.0], [11.6, 361.0], [11.7, 361.0], [11.8, 361.0], [11.9, 361.0], [12.0, 361.0], [12.1, 361.0], [12.2, 362.0], [12.3, 362.0], [12.4, 362.0], [12.5, 362.0], [12.6, 362.0], [12.7, 362.0], [12.8, 362.0], [12.9, 362.0], [13.0, 362.0], [13.1, 362.0], [13.2, 362.0], [13.3, 362.0], [13.4, 362.0], [13.5, 362.0], [13.6, 363.0], [13.7, 363.0], [13.8, 363.0], [13.9, 363.0], [14.0, 363.0], [14.1, 363.0], [14.2, 363.0], [14.3, 363.0], [14.4, 363.0], [14.5, 363.0], [14.6, 363.0], [14.7, 363.0], [14.8, 363.0], [14.9, 363.0], [15.0, 364.0], [15.1, 364.0], [15.2, 364.0], [15.3, 364.0], [15.4, 364.0], [15.5, 364.0], [15.6, 364.0], [15.7, 364.0], [15.8, 364.0], [15.9, 364.0], [16.0, 365.0], [16.1, 365.0], [16.2, 365.0], [16.3, 365.0], [16.4, 366.0], [16.5, 366.0], [16.6, 366.0], [16.7, 366.0], [16.8, 366.0], [16.9, 366.0], [17.0, 366.0], [17.1, 366.0], [17.2, 367.0], [17.3, 367.0], [17.4, 367.0], [17.5, 367.0], [17.6, 367.0], [17.7, 367.0], [17.8, 367.0], [17.9, 367.0], [18.0, 367.0], [18.1, 367.0], [18.2, 367.0], [18.3, 367.0], [18.4, 367.0], [18.5, 367.0], [18.6, 368.0], [18.7, 368.0], [18.8, 368.0], [18.9, 368.0], [19.0, 368.0], [19.1, 368.0], [19.2, 368.0], [19.3, 368.0], [19.4, 368.0], [19.5, 368.0], [19.6, 368.0], [19.7, 368.0], [19.8, 370.0], [19.9, 370.0], [20.0, 370.0], [20.1, 370.0], [20.2, 371.0], [20.3, 371.0], [20.4, 371.0], [20.5, 372.0], [20.6, 372.0], [20.7, 372.0], [20.8, 372.0], [20.9, 372.0], [21.0, 373.0], [21.1, 373.0], [21.2, 374.0], [21.3, 374.0], [21.4, 374.0], [21.5, 374.0], [21.6, 374.0], [21.7, 377.0], [21.8, 377.0], [21.9, 378.0], [22.0, 378.0], [22.1, 378.0], [22.2, 378.0], [22.3, 378.0], [22.4, 378.0], [22.5, 378.0], [22.6, 378.0], [22.7, 378.0], [22.8, 378.0], [22.9, 379.0], [23.0, 379.0], [23.1, 379.0], [23.2, 379.0], [23.3, 380.0], [23.4, 380.0], [23.5, 380.0], [23.6, 380.0], [23.7, 380.0], [23.8, 382.0], [23.9, 382.0], [24.0, 385.0], [24.1, 385.0], [24.2, 385.0], [24.3, 385.0], [24.4, 385.0], [24.5, 391.0], [24.6, 391.0], [24.7, 391.0], [24.8, 393.0], [24.9, 393.0], [25.0, 393.0], [25.1, 393.0], [25.2, 394.0], [25.3, 394.0], [25.4, 394.0], [25.5, 396.0], [25.6, 396.0], [25.7, 397.0], [25.8, 397.0], [25.9, 398.0], [26.0, 398.0], [26.1, 398.0], [26.2, 419.0], [26.3, 419.0], [26.4, 432.0], [26.5, 432.0], [26.6, 432.0], [26.7, 442.0], [26.8, 442.0], [26.9, 458.0], [27.0, 458.0], [27.1, 459.0], [27.2, 459.0], [27.3, 459.0], [27.4, 469.0], [27.5, 469.0], [27.6, 616.0], [27.7, 616.0], [27.8, 1205.0], [27.9, 1205.0], [28.0, 1205.0], [28.1, 1353.0], [28.2, 1353.0], [28.3, 1457.0], [28.4, 1457.0], [28.5, 1457.0], [28.6, 1615.0], [28.7, 1615.0], [28.8, 1738.0], [28.9, 1738.0], [29.0, 3040.0], [29.1, 3040.0], [29.2, 3040.0], [29.3, 3733.0], [29.4, 3733.0], [29.5, 3853.0], [29.6, 3853.0], [29.7, 5084.0], [29.8, 5084.0], [29.9, 5084.0], [30.0, 5249.0], [30.1, 5249.0], [30.2, 5704.0], [30.3, 5704.0], [30.4, 5704.0], [30.5, 5991.0], [30.6, 5991.0], [30.7, 6238.0], [30.8, 6238.0], [30.9, 6326.0], [31.0, 6326.0], [31.1, 6326.0], [31.2, 6338.0], [31.3, 6338.0], [31.4, 6418.0], [31.5, 6418.0], [31.6, 6713.0], [31.7, 6713.0], [31.8, 6713.0], [31.9, 6928.0], [32.0, 6928.0], [32.1, 6949.0], [32.2, 6949.0], [32.3, 6949.0], [32.4, 7049.0], [32.5, 7049.0], [32.6, 7565.0], [32.7, 7565.0], [32.8, 7606.0], [32.9, 7606.0], [33.0, 7606.0], [33.1, 8129.0], [33.2, 8129.0], [33.3, 8255.0], [33.4, 8255.0], [33.5, 8304.0], [33.6, 8304.0], [33.7, 8304.0], [33.8, 8477.0], [33.9, 8477.0], [34.0, 8762.0], [34.1, 8762.0], [34.2, 8762.0], [34.3, 8997.0], [34.4, 8997.0], [34.5, 11125.0], [34.6, 11125.0], [34.7, 11760.0], [34.8, 11760.0], [34.9, 11760.0], [35.0, 12375.0], [35.1, 12375.0], [35.2, 12440.0], [35.3, 12440.0], [35.4, 12480.0], [35.5, 12480.0], [35.6, 12480.0], [35.7, 12550.0], [35.8, 12550.0], [35.9, 12756.0], [36.0, 12756.0], [36.1, 12756.0], [36.2, 13287.0], [36.3, 13287.0], [36.4, 13308.0], [36.5, 13308.0], [36.6, 13693.0], [36.7, 13693.0], [36.8, 13693.0], [36.9, 13743.0], [37.0, 13743.0], [37.1, 13749.0], [37.2, 13749.0], [37.3, 13928.0], [37.4, 13928.0], [37.5, 13928.0], [37.6, 14315.0], [37.7, 14315.0], [37.8, 14528.0], [37.9, 14528.0], [38.0, 14528.0], [38.1, 15082.0], [38.2, 15082.0], [38.3, 15142.0], [38.4, 15142.0], [38.5, 15152.0], [38.6, 15152.0], [38.7, 15152.0], [38.8, 15254.0], [38.9, 15254.0], [39.0, 15529.0], [39.1, 15529.0], [39.2, 15613.0], [39.3, 15613.0], [39.4, 15613.0], [39.5, 15635.0], [39.6, 15635.0], [39.7, 16329.0], [39.8, 16329.0], [39.9, 16329.0], [40.0, 16344.0], [40.1, 16344.0], [40.2, 16727.0], [40.3, 16727.0], [40.4, 16885.0], [40.5, 16885.0], [40.6, 16885.0], [40.7, 16914.0], [40.8, 16914.0], [40.9, 17146.0], [41.0, 17146.0], [41.1, 17312.0], [41.2, 17312.0], [41.3, 17312.0], [41.4, 17414.0], [41.5, 17414.0], [41.6, 17436.0], [41.7, 17436.0], [41.8, 17436.0], [41.9, 17579.0], [42.0, 17579.0], [42.1, 17682.0], [42.2, 17682.0], [42.3, 17877.0], [42.4, 17877.0], [42.5, 17877.0], [42.6, 17996.0], [42.7, 17996.0], [42.8, 18028.0], [42.9, 18028.0], [43.0, 18084.0], [43.1, 18084.0], [43.2, 18084.0], [43.3, 18269.0], [43.4, 18269.0], [43.5, 18355.0], [43.6, 18355.0], [43.7, 18355.0], [43.8, 18554.0], [43.9, 18554.0], [44.0, 18722.0], [44.1, 18722.0], [44.2, 18785.0], [44.3, 18785.0], [44.4, 18785.0], [44.5, 18962.0], [44.6, 18962.0], [44.7, 19160.0], [44.8, 19160.0], [44.9, 19398.0], [45.0, 19398.0], [45.1, 19398.0], [45.2, 19420.0], [45.3, 19420.0], [45.4, 19737.0], [45.5, 19737.0], [45.6, 19737.0], [45.7, 19753.0], [45.8, 19753.0], [45.9, 19946.0], [46.0, 19946.0], [46.1, 19982.0], [46.2, 19982.0], [46.3, 19982.0], [46.4, 20194.0], [46.5, 20194.0], [46.6, 20237.0], [46.7, 20237.0], [46.8, 20298.0], [46.9, 20298.0], [47.0, 20298.0], [47.1, 20312.0], [47.2, 20312.0], [47.3, 20609.0], [47.4, 20609.0], [47.5, 20609.0], [47.6, 20638.0], [47.7, 20638.0], [47.8, 20743.0], [47.9, 20743.0], [48.0, 20836.0], [48.1, 20836.0], [48.2, 20836.0], [48.3, 20903.0], [48.4, 20903.0], [48.5, 21000.0], [48.6, 21000.0], [48.7, 21205.0], [48.8, 21205.0], [48.9, 21205.0], [49.0, 21237.0], [49.1, 21237.0], [49.2, 21265.0], [49.3, 21265.0], [49.4, 21265.0], [49.5, 21274.0], [49.6, 21274.0], [49.7, 21347.0], [49.8, 21347.0], [49.9, 21471.0], [50.0, 21471.0], [50.1, 21471.0], [50.2, 21559.0], [50.3, 21559.0], [50.4, 21672.0], [50.5, 21672.0], [50.6, 21828.0], [50.7, 21828.0], [50.8, 21828.0], [50.9, 21831.0], [51.0, 21831.0], [51.1, 22026.0], [51.2, 22026.0], [51.3, 22026.0], [51.4, 22067.0], [51.5, 22067.0], [51.6, 22067.0], [51.7, 22067.0], [51.8, 22287.0], [51.9, 22287.0], [52.0, 22287.0], [52.1, 22375.0], [52.2, 22375.0], [52.3, 22424.0], [52.4, 22424.0], [52.5, 22446.0], [52.6, 22446.0], [52.7, 22446.0], [52.8, 22455.0], [52.9, 22455.0], [53.0, 22491.0], [53.1, 22491.0], [53.2, 22491.0], [53.3, 22701.0], [53.4, 22701.0], [53.5, 22775.0], [53.6, 22775.0], [53.7, 22814.0], [53.8, 22814.0], [53.9, 22814.0], [54.0, 22985.0], [54.1, 22985.0], [54.2, 23285.0], [54.3, 23285.0], [54.4, 23357.0], [54.5, 23357.0], [54.6, 23357.0], [54.7, 23588.0], [54.8, 23588.0], [54.9, 23697.0], [55.0, 23697.0], [55.1, 23697.0], [55.2, 23812.0], [55.3, 23812.0], [55.4, 24113.0], [55.5, 24113.0], [55.6, 24163.0], [55.7, 24163.0], [55.8, 24163.0], [55.9, 24246.0], [56.0, 24246.0], [56.1, 24362.0], [56.2, 24362.0], [56.3, 24450.0], [56.4, 24450.0], [56.5, 24450.0], [56.6, 24678.0], [56.7, 24678.0], [56.8, 24759.0], [56.9, 24759.0], [57.0, 24759.0], [57.1, 25281.0], [57.2, 25281.0], [57.3, 25369.0], [57.4, 25369.0], [57.5, 25749.0], [57.6, 25749.0], [57.7, 25749.0], [57.8, 26076.0], [57.9, 26076.0], [58.0, 26152.0], [58.1, 26152.0], [58.2, 26572.0], [58.3, 26572.0], [58.4, 26572.0], [58.5, 26618.0], [58.6, 26618.0], [58.7, 26743.0], [58.8, 26743.0], [58.9, 26743.0], [59.0, 27024.0], [59.1, 27024.0], [59.2, 27122.0], [59.3, 27122.0], [59.4, 27191.0], [59.5, 27191.0], [59.6, 27191.0], [59.7, 27238.0], [59.8, 27238.0], [59.9, 27414.0], [60.0, 27414.0], [60.1, 27607.0], [60.2, 27607.0], [60.3, 27607.0], [60.4, 28516.0], [60.5, 28516.0], [60.6, 28580.0], [60.7, 28580.0], [60.8, 28580.0], [60.9, 28931.0], [61.0, 28931.0], [61.1, 29434.0], [61.2, 29434.0], [61.3, 29753.0], [61.4, 29753.0], [61.5, 29753.0], [61.6, 29778.0], [61.7, 29778.0], [61.8, 30214.0], [61.9, 30214.0], [62.0, 30396.0], [62.1, 30396.0], [62.2, 30396.0], [62.3, 30416.0], [62.4, 30416.0], [62.5, 30624.0], [62.6, 30624.0], [62.7, 30624.0], [62.8, 30661.0], [62.9, 30661.0], [63.0, 30682.0], [63.1, 30682.0], [63.2, 30761.0], [63.3, 30761.0], [63.4, 30761.0], [63.5, 31312.0], [63.6, 31312.0], [63.7, 31414.0], [63.8, 31414.0], [63.9, 31627.0], [64.0, 31627.0], [64.1, 31627.0], [64.2, 32080.0], [64.3, 32080.0], [64.4, 33031.0], [64.5, 33031.0], [64.6, 33031.0], [64.7, 33103.0], [64.8, 33103.0], [64.9, 33252.0], [65.0, 33252.0], [65.1, 33265.0], [65.2, 33265.0], [65.3, 33265.0], [65.4, 33416.0], [65.5, 33416.0], [65.6, 33649.0], [65.7, 33649.0], [65.8, 33755.0], [65.9, 33755.0], [66.0, 33755.0], [66.1, 34677.0], [66.2, 34677.0], [66.3, 34724.0], [66.4, 34724.0], [66.5, 34724.0], [66.6, 34864.0], [66.7, 34864.0], [66.8, 35337.0], [66.9, 35337.0], [67.0, 35524.0], [67.1, 35524.0], [67.2, 35524.0], [67.3, 36019.0], [67.4, 36019.0], [67.5, 36287.0], [67.6, 36287.0], [67.7, 36457.0], [67.8, 36457.0], [67.9, 36457.0], [68.0, 36650.0], [68.1, 36650.0], [68.2, 36718.0], [68.3, 36718.0], [68.4, 36718.0], [68.5, 36915.0], [68.6, 36915.0], [68.7, 37182.0], [68.8, 37182.0], [68.9, 37382.0], [69.0, 37382.0], [69.1, 37382.0], [69.2, 37591.0], [69.3, 37591.0], [69.4, 37669.0], [69.5, 37669.0], [69.6, 37732.0], [69.7, 37732.0], [69.8, 37732.0], [69.9, 37806.0], [70.0, 37806.0], [70.1, 38037.0], [70.2, 38037.0], [70.3, 38037.0], [70.4, 38495.0], [70.5, 38495.0], [70.6, 38775.0], [70.7, 38775.0], [70.8, 39294.0], [70.9, 39294.0], [71.0, 39294.0], [71.1, 39407.0], [71.2, 39407.0], [71.3, 39495.0], [71.4, 39495.0], [71.5, 39872.0], [71.6, 39872.0], [71.7, 39872.0], [71.8, 39949.0], [71.9, 39949.0], [72.0, 40235.0], [72.1, 40235.0], [72.2, 40235.0], [72.3, 40832.0], [72.4, 40832.0], [72.5, 41007.0], [72.6, 41007.0], [72.7, 41517.0], [72.8, 41517.0], [72.9, 41517.0], [73.0, 42231.0], [73.1, 42231.0], [73.2, 42308.0], [73.3, 42308.0], [73.4, 42506.0], [73.5, 42506.0], [73.6, 42506.0], [73.7, 43052.0], [73.8, 43052.0], [73.9, 43116.0], [74.0, 43116.0], [74.1, 43116.0], [74.2, 43587.0], [74.3, 43587.0], [74.4, 43877.0], [74.5, 43877.0], [74.6, 43899.0], [74.7, 43899.0], [74.8, 43899.0], [74.9, 44177.0], [75.0, 44177.0], [75.1, 44493.0], [75.2, 44493.0], [75.3, 44541.0], [75.4, 44541.0], [75.5, 44541.0], [75.6, 44580.0], [75.7, 44580.0], [75.8, 44619.0], [75.9, 44619.0], [76.0, 44619.0], [76.1, 44710.0], [76.2, 44710.0], [76.3, 44913.0], [76.4, 44913.0], [76.5, 45175.0], [76.6, 45175.0], [76.7, 45175.0], [76.8, 45252.0], [76.9, 45252.0], [77.0, 45309.0], [77.1, 45309.0], [77.2, 45320.0], [77.3, 45320.0], [77.4, 45320.0], [77.5, 45566.0], [77.6, 45566.0], [77.7, 46183.0], [77.8, 46183.0], [77.9, 46183.0], [78.0, 46352.0], [78.1, 46352.0], [78.2, 46464.0], [78.3, 46464.0], [78.4, 46755.0], [78.5, 46755.0], [78.6, 46755.0], [78.7, 46894.0], [78.8, 46894.0], [78.9, 46898.0], [79.0, 46898.0], [79.1, 46957.0], [79.2, 46957.0], [79.3, 46957.0], [79.4, 47413.0], [79.5, 47413.0], [79.6, 47596.0], [79.7, 47596.0], [79.8, 47596.0], [79.9, 47820.0], [80.0, 47820.0], [80.1, 47841.0], [80.2, 47841.0], [80.3, 48253.0], [80.4, 48253.0], [80.5, 48253.0], [80.6, 48475.0], [80.7, 48475.0], [80.8, 48628.0], [80.9, 48628.0], [81.0, 48969.0], [81.1, 48969.0], [81.2, 48969.0], [81.3, 49993.0], [81.4, 49993.0], [81.5, 50116.0], [81.6, 50116.0], [81.7, 50116.0], [81.8, 50163.0], [81.9, 50163.0], [82.0, 50837.0], [82.1, 50837.0], [82.2, 51206.0], [82.3, 51206.0], [82.4, 51206.0], [82.5, 52046.0], [82.6, 52046.0], [82.7, 52310.0], [82.8, 52310.0], [82.9, 52658.0], [83.0, 52658.0], [83.1, 52658.0], [83.2, 53085.0], [83.3, 53085.0], [83.4, 53627.0], [83.5, 53627.0], [83.6, 53627.0], [83.7, 53736.0], [83.8, 53736.0], [83.9, 55220.0], [84.0, 55220.0], [84.1, 55532.0], [84.2, 55532.0], [84.3, 55532.0], [84.4, 55626.0], [84.5, 55626.0], [84.6, 55822.0], [84.7, 55822.0], [84.8, 55954.0], [84.9, 55954.0], [85.0, 55954.0], [85.1, 56062.0], [85.2, 56062.0], [85.3, 56274.0], [85.4, 56274.0], [85.5, 56274.0], [85.6, 56334.0], [85.7, 56334.0], [85.8, 56370.0], [85.9, 56370.0], [86.0, 56487.0], [86.1, 56487.0], [86.2, 56487.0], [86.3, 56998.0], [86.4, 56998.0], [86.5, 57121.0], [86.6, 57121.0], [86.7, 57288.0], [86.8, 57288.0], [86.9, 57288.0], [87.0, 57331.0], [87.1, 57331.0], [87.2, 57483.0], [87.3, 57483.0], [87.4, 57483.0], [87.5, 57644.0], [87.6, 57644.0], [87.7, 58107.0], [87.8, 58107.0], [87.9, 58130.0], [88.0, 58130.0], [88.1, 58130.0], [88.2, 58159.0], [88.3, 58159.0], [88.4, 58364.0], [88.5, 58364.0], [88.6, 58467.0], [88.7, 58467.0], [88.8, 58467.0], [88.9, 58915.0], [89.0, 58915.0], [89.1, 59124.0], [89.2, 59124.0], [89.3, 59124.0], [89.4, 59456.0], [89.5, 59456.0], [89.6, 59688.0], [89.7, 59688.0], [89.8, 59847.0], [89.9, 59847.0], [90.0, 59847.0], [90.1, 59849.0], [90.2, 59849.0], [90.3, 60110.0], [90.4, 60110.0], [90.5, 60348.0], [90.6, 60348.0], [90.7, 60348.0], [90.8, 60350.0], [90.9, 60350.0], [91.0, 60352.0], [91.1, 60352.0], [91.2, 60352.0], [91.3, 60352.0], [91.4, 60352.0], [91.5, 60355.0], [91.6, 60355.0], [91.7, 60357.0], [91.8, 60357.0], [91.9, 60357.0], [92.0, 60360.0], [92.1, 60360.0], [92.2, 60361.0], [92.3, 60361.0], [92.4, 60362.0], [92.5, 60362.0], [92.6, 60362.0], [92.7, 60363.0], [92.8, 60363.0], [92.9, 60363.0], [93.0, 60363.0], [93.1, 60363.0], [93.2, 60364.0], [93.3, 60364.0], [93.4, 60366.0], [93.5, 60366.0], [93.6, 60368.0], [93.7, 60368.0], [93.8, 60368.0], [93.9, 60368.0], [94.0, 60368.0], [94.1, 60369.0], [94.2, 60369.0], [94.3, 60370.0], [94.4, 60370.0], [94.5, 60370.0], [94.6, 60370.0], [94.7, 60370.0], [94.8, 60374.0], [94.9, 60374.0], [95.0, 60374.0], [95.1, 60375.0], [95.2, 60375.0], [95.3, 60376.0], [95.4, 60376.0], [95.5, 60382.0], [95.6, 60382.0], [95.7, 60382.0], [95.8, 60386.0], [95.9, 60386.0], [96.0, 60388.0], [96.1, 60388.0], [96.2, 60389.0], [96.3, 60389.0], [96.4, 60389.0], [96.5, 60391.0], [96.6, 60391.0], [96.7, 60392.0], [96.8, 60392.0], [96.9, 60392.0], [97.0, 60395.0], [97.1, 60395.0], [97.2, 60434.0], [97.3, 60434.0], [97.4, 60437.0], [97.5, 60437.0], [97.6, 60437.0], [97.7, 60456.0], [97.8, 60456.0], [97.9, 60458.0], [98.0, 60458.0], [98.1, 60476.0], [98.2, 60476.0], [98.3, 60476.0], [98.4, 60477.0], [98.5, 60477.0], [98.6, 60482.0], [98.7, 60482.0], [98.8, 60482.0], [98.9, 60485.0], [99.0, 60485.0], [99.1, 60496.0], [99.2, 60496.0], [99.3, 60497.0], [99.4, 60497.0], [99.5, 60497.0], [99.6, 60565.0], [99.7, 60565.0], [99.8, 61387.0], [99.9, 61387.0], [100.0, 61387.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 115.0], [0.1, 115.0], [0.2, 115.0], [0.3, 115.0], [0.4, 115.0], [0.5, 116.0], [0.6, 116.0], [0.7, 116.0], [0.8, 116.0], [0.9, 116.0], [1.0, 116.0], [1.1, 116.0], [1.2, 116.0], [1.3, 116.0], [1.4, 116.0], [1.5, 116.0], [1.6, 116.0], [1.7, 116.0], [1.8, 116.0], [1.9, 116.0], [2.0, 116.0], [2.1, 116.0], [2.2, 117.0], [2.3, 117.0], [2.4, 117.0], [2.5, 117.0], [2.6, 117.0], [2.7, 117.0], [2.8, 117.0], [2.9, 117.0], [3.0, 117.0], [3.1, 117.0], [3.2, 117.0], [3.3, 117.0], [3.4, 117.0], [3.5, 117.0], [3.6, 117.0], [3.7, 117.0], [3.8, 117.0], [3.9, 117.0], [4.0, 117.0], [4.1, 117.0], [4.2, 117.0], [4.3, 117.0], [4.4, 117.0], [4.5, 117.0], [4.6, 117.0], [4.7, 117.0], [4.8, 117.0], [4.9, 117.0], [5.0, 117.0], [5.1, 117.0], [5.2, 117.0], [5.3, 118.0], [5.4, 118.0], [5.5, 118.0], [5.6, 118.0], [5.7, 118.0], [5.8, 118.0], [5.9, 118.0], [6.0, 118.0], [6.1, 118.0], [6.2, 118.0], [6.3, 119.0], [6.4, 119.0], [6.5, 119.0], [6.6, 119.0], [6.7, 119.0], [6.8, 119.0], [6.9, 119.0], [7.0, 119.0], [7.1, 119.0], [7.2, 119.0], [7.3, 119.0], [7.4, 119.0], [7.5, 119.0], [7.6, 119.0], [7.7, 119.0], [7.8, 119.0], [7.9, 119.0], [8.0, 119.0], [8.1, 119.0], [8.2, 119.0], [8.3, 119.0], [8.4, 119.0], [8.5, 119.0], [8.6, 119.0], [8.7, 119.0], [8.8, 119.0], [8.9, 120.0], [9.0, 120.0], [9.1, 120.0], [9.2, 120.0], [9.3, 120.0], [9.4, 120.0], [9.5, 120.0], [9.6, 120.0], [9.7, 120.0], [9.8, 120.0], [9.9, 120.0], [10.0, 120.0], [10.1, 120.0], [10.2, 120.0], [10.3, 120.0], [10.4, 120.0], [10.5, 120.0], [10.6, 120.0], [10.7, 120.0], [10.8, 120.0], [10.9, 120.0], [11.0, 120.0], [11.1, 120.0], [11.2, 120.0], [11.3, 120.0], [11.4, 120.0], [11.5, 121.0], [11.6, 121.0], [11.7, 121.0], [11.8, 121.0], [11.9, 121.0], [12.0, 121.0], [12.1, 121.0], [12.2, 121.0], [12.3, 121.0], [12.4, 121.0], [12.5, 121.0], [12.6, 121.0], [12.7, 121.0], [12.8, 121.0], [12.9, 121.0], [13.0, 121.0], [13.1, 121.0], [13.2, 121.0], [13.3, 121.0], [13.4, 121.0], [13.5, 121.0], [13.6, 121.0], [13.7, 121.0], [13.8, 121.0], [13.9, 121.0], [14.0, 121.0], [14.1, 121.0], [14.2, 121.0], [14.3, 121.0], [14.4, 122.0], [14.5, 122.0], [14.6, 122.0], [14.7, 122.0], [14.8, 122.0], [14.9, 122.0], [15.0, 122.0], [15.1, 122.0], [15.2, 122.0], [15.3, 122.0], [15.4, 122.0], [15.5, 122.0], [15.6, 122.0], [15.7, 122.0], [15.8, 122.0], [15.9, 122.0], [16.0, 122.0], [16.1, 122.0], [16.2, 122.0], [16.3, 122.0], [16.4, 122.0], [16.5, 122.0], [16.6, 122.0], [16.7, 122.0], [16.8, 122.0], [16.9, 122.0], [17.0, 122.0], [17.1, 122.0], [17.2, 123.0], [17.3, 123.0], [17.4, 123.0], [17.5, 123.0], [17.6, 123.0], [17.7, 123.0], [17.8, 123.0], [17.9, 123.0], [18.0, 123.0], [18.1, 123.0], [18.2, 123.0], [18.3, 123.0], [18.4, 123.0], [18.5, 123.0], [18.6, 123.0], [18.7, 124.0], [18.8, 124.0], [18.9, 124.0], [19.0, 124.0], [19.1, 124.0], [19.2, 124.0], [19.3, 124.0], [19.4, 124.0], [19.5, 124.0], [19.6, 124.0], [19.7, 124.0], [19.8, 124.0], [19.9, 124.0], [20.0, 124.0], [20.1, 124.0], [20.2, 124.0], [20.3, 124.0], [20.4, 124.0], [20.5, 124.0], [20.6, 124.0], [20.7, 124.0], [20.8, 125.0], [20.9, 125.0], [21.0, 125.0], [21.1, 125.0], [21.2, 125.0], [21.3, 125.0], [21.4, 125.0], [21.5, 125.0], [21.6, 125.0], [21.7, 125.0], [21.8, 125.0], [21.9, 125.0], [22.0, 125.0], [22.1, 125.0], [22.2, 125.0], [22.3, 125.0], [22.4, 125.0], [22.5, 125.0], [22.6, 125.0], [22.7, 125.0], [22.8, 125.0], [22.9, 125.0], [23.0, 125.0], [23.1, 125.0], [23.2, 126.0], [23.3, 126.0], [23.4, 126.0], [23.5, 126.0], [23.6, 126.0], [23.7, 126.0], [23.8, 126.0], [23.9, 126.0], [24.0, 126.0], [24.1, 126.0], [24.2, 127.0], [24.3, 127.0], [24.4, 127.0], [24.5, 127.0], [24.6, 128.0], [24.7, 128.0], [24.8, 128.0], [24.9, 128.0], [25.0, 128.0], [25.1, 128.0], [25.2, 128.0], [25.3, 129.0], [25.4, 129.0], [25.5, 129.0], [25.6, 129.0], [25.7, 129.0], [25.8, 129.0], [25.9, 129.0], [26.0, 129.0], [26.1, 129.0], [26.2, 129.0], [26.3, 130.0], [26.4, 130.0], [26.5, 130.0], [26.6, 130.0], [26.7, 130.0], [26.8, 131.0], [26.9, 131.0], [27.0, 142.0], [27.1, 142.0], [27.2, 142.0], [27.3, 386.0], [27.4, 386.0], [27.5, 962.0], [27.6, 962.0], [27.7, 1106.0], [27.8, 1106.0], [27.9, 1106.0], [28.0, 1217.0], [28.1, 1217.0], [28.2, 1387.0], [28.3, 1387.0], [28.4, 1387.0], [28.5, 1492.0], [28.6, 1492.0], [28.7, 2795.0], [28.8, 2795.0], [28.9, 3499.0], [29.0, 3499.0], [29.1, 3499.0], [29.2, 3586.0], [29.3, 3586.0], [29.4, 4845.0], [29.5, 4845.0], [29.6, 4997.0], [29.7, 4997.0], [29.8, 4997.0], [29.9, 5476.0], [30.0, 5476.0], [30.1, 5745.0], [30.2, 5745.0], [30.3, 5745.0], [30.4, 6007.0], [30.5, 6007.0], [30.6, 6084.0], [30.7, 6084.0], [30.8, 6085.0], [30.9, 6085.0], [31.0, 6085.0], [31.1, 6180.0], [31.2, 6180.0], [31.3, 6475.0], [31.4, 6475.0], [31.5, 6475.0], [31.6, 6626.0], [31.7, 6626.0], [31.8, 6655.0], [31.9, 6655.0], [32.0, 6799.0], [32.1, 6799.0], [32.2, 6799.0], [32.3, 7305.0], [32.4, 7305.0], [32.5, 7349.0], [32.6, 7349.0], [32.7, 7897.0], [32.8, 7897.0], [32.9, 7897.0], [33.0, 8009.0], [33.1, 8009.0], [33.2, 8054.0], [33.3, 8054.0], [33.4, 8054.0], [33.5, 8234.0], [33.6, 8234.0], [33.7, 8528.0], [33.8, 8528.0], [33.9, 8754.0], [34.0, 8754.0], [34.1, 8754.0], [34.2, 10896.0], [34.3, 10896.0], [34.4, 11486.0], [34.5, 11486.0], [34.6, 11486.0], [34.7, 12127.0], [34.8, 12127.0], [34.9, 12210.0], [35.0, 12210.0], [35.1, 12246.0], [35.2, 12246.0], [35.3, 12246.0], [35.4, 12306.0], [35.5, 12306.0], [35.6, 12508.0], [35.7, 12508.0], [35.8, 13015.0], [35.9, 13015.0], [36.0, 13015.0], [36.1, 13067.0], [36.2, 13067.0], [36.3, 13454.0], [36.4, 13454.0], [36.5, 13454.0], [36.6, 13493.0], [36.7, 13493.0], [36.8, 13520.0], [36.9, 13520.0], [37.0, 13617.0], [37.1, 13617.0], [37.2, 13617.0], [37.3, 14077.0], [37.4, 14077.0], [37.5, 14285.0], [37.6, 14285.0], [37.7, 14285.0], [37.8, 14849.0], [37.9, 14849.0], [38.0, 14900.0], [38.1, 14900.0], [38.2, 14911.0], [38.3, 14911.0], [38.4, 14911.0], [38.5, 15014.0], [38.6, 15014.0], [38.7, 15281.0], [38.8, 15281.0], [38.9, 15281.0], [39.0, 15375.0], [39.1, 15375.0], [39.2, 15397.0], [39.3, 15397.0], [39.4, 16073.0], [39.5, 16073.0], [39.6, 16073.0], [39.7, 16099.0], [39.8, 16099.0], [39.9, 16485.0], [40.0, 16485.0], [40.1, 16626.0], [40.2, 16626.0], [40.3, 16626.0], [40.4, 16666.0], [40.5, 16666.0], [40.6, 16910.0], [40.7, 16910.0], [40.8, 16910.0], [40.9, 17046.0], [41.0, 17046.0], [41.1, 17182.0], [41.2, 17182.0], [41.3, 17203.0], [41.4, 17203.0], [41.5, 17203.0], [41.6, 17334.0], [41.7, 17334.0], [41.8, 17441.0], [41.9, 17441.0], [42.0, 17441.0], [42.1, 17640.0], [42.2, 17640.0], [42.3, 17754.0], [42.4, 17754.0], [42.5, 17780.0], [42.6, 17780.0], [42.7, 17780.0], [42.8, 17824.0], [42.9, 17824.0], [43.0, 18037.0], [43.1, 18037.0], [43.2, 18117.0], [43.3, 18117.0], [43.4, 18117.0], [43.5, 18317.0], [43.6, 18317.0], [43.7, 18481.0], [43.8, 18481.0], [43.9, 18481.0], [44.0, 18518.0], [44.1, 18518.0], [44.2, 18722.0], [44.3, 18722.0], [44.4, 18914.0], [44.5, 18914.0], [44.6, 18914.0], [44.7, 19146.0], [44.8, 19146.0], [44.9, 19171.0], [45.0, 19171.0], [45.1, 19171.0], [45.2, 19490.0], [45.3, 19490.0], [45.4, 19512.0], [45.5, 19512.0], [45.6, 19714.0], [45.7, 19714.0], [45.8, 19714.0], [45.9, 19733.0], [46.0, 19733.0], [46.1, 19945.0], [46.2, 19945.0], [46.3, 19945.0], [46.4, 19995.0], [46.5, 19995.0], [46.6, 20050.0], [46.7, 20050.0], [46.8, 20063.0], [46.9, 20063.0], [47.0, 20063.0], [47.1, 20369.0], [47.2, 20369.0], [47.3, 20400.0], [47.4, 20400.0], [47.5, 20516.0], [47.6, 20516.0], [47.7, 20516.0], [47.8, 20596.0], [47.9, 20596.0], [48.0, 20620.0], [48.1, 20620.0], [48.2, 20620.0], [48.3, 20746.0], [48.4, 20746.0], [48.5, 20959.0], [48.6, 20959.0], [48.7, 20999.0], [48.8, 20999.0], [48.9, 20999.0], [49.0, 21024.0], [49.1, 21024.0], [49.2, 21044.0], [49.3, 21044.0], [49.4, 21044.0], [49.5, 21055.0], [49.6, 21055.0], [49.7, 21225.0], [49.8, 21225.0], [49.9, 21316.0], [50.0, 21316.0], [50.1, 21316.0], [50.2, 21404.0], [50.3, 21404.0], [50.4, 21574.0], [50.5, 21574.0], [50.6, 21593.0], [50.7, 21593.0], [50.8, 21593.0], [50.9, 21789.0], [51.0, 21789.0], [51.1, 21796.0], [51.2, 21796.0], [51.3, 21796.0], [51.4, 21832.0], [51.5, 21832.0], [51.6, 22006.0], [51.7, 22006.0], [51.8, 22120.0], [51.9, 22120.0], [52.0, 22120.0], [52.1, 22190.0], [52.2, 22190.0], [52.3, 22215.0], [52.4, 22215.0], [52.5, 22215.0], [52.6, 22216.0], [52.7, 22216.0], [52.8, 22250.0], [52.9, 22250.0], [53.0, 22458.0], [53.1, 22458.0], [53.2, 22458.0], [53.3, 22529.0], [53.4, 22529.0], [53.5, 22583.0], [53.6, 22583.0], [53.7, 22754.0], [53.8, 22754.0], [53.9, 22754.0], [54.0, 23037.0], [54.1, 23037.0], [54.2, 23127.0], [54.3, 23127.0], [54.4, 23127.0], [54.5, 23356.0], [54.6, 23356.0], [54.7, 23472.0], [54.8, 23472.0], [54.9, 23582.0], [55.0, 23582.0], [55.1, 23582.0], [55.2, 23858.0], [55.3, 23858.0], [55.4, 23935.0], [55.5, 23935.0], [55.6, 23935.0], [55.7, 24014.0], [55.8, 24014.0], [55.9, 24121.0], [56.0, 24121.0], [56.1, 24213.0], [56.2, 24213.0], [56.3, 24213.0], [56.4, 24422.0], [56.5, 24422.0], [56.6, 24515.0], [56.7, 24515.0], [56.8, 24515.0], [56.9, 25042.0], [57.0, 25042.0], [57.1, 25101.0], [57.2, 25101.0], [57.3, 25522.0], [57.4, 25522.0], [57.5, 25522.0], [57.6, 25840.0], [57.7, 25840.0], [57.8, 25902.0], [57.9, 25902.0], [58.0, 26339.0], [58.1, 26339.0], [58.2, 26339.0], [58.3, 26381.0], [58.4, 26381.0], [58.5, 26485.0], [58.6, 26485.0], [58.7, 26485.0], [58.8, 26793.0], [58.9, 26793.0], [59.0, 26880.0], [59.1, 26880.0], [59.2, 26950.0], [59.3, 26950.0], [59.4, 26950.0], [59.5, 26976.0], [59.6, 26976.0], [59.7, 27171.0], [59.8, 27171.0], [59.9, 27171.0], [60.0, 27305.0], [60.1, 27305.0], [60.2, 28284.0], [60.3, 28284.0], [60.4, 28336.0], [60.5, 28336.0], [60.6, 28336.0], [60.7, 28691.0], [60.8, 28691.0], [60.9, 29194.0], [61.0, 29194.0], [61.1, 29510.0], [61.2, 29510.0], [61.3, 29510.0], [61.4, 29522.0], [61.5, 29522.0], [61.6, 29985.0], [61.7, 29985.0], [61.8, 29985.0], [61.9, 30148.0], [62.0, 30148.0], [62.1, 30169.0], [62.2, 30169.0], [62.3, 30365.0], [62.4, 30365.0], [62.5, 30365.0], [62.6, 30414.0], [62.7, 30414.0], [62.8, 30431.0], [62.9, 30431.0], [63.0, 30431.0], [63.1, 30489.0], [63.2, 30489.0], [63.3, 31042.0], [63.4, 31042.0], [63.5, 31178.0], [63.6, 31178.0], [63.7, 31178.0], [63.8, 31354.0], [63.9, 31354.0], [64.0, 31837.0], [64.1, 31837.0], [64.2, 31837.0], [64.3, 32787.0], [64.4, 32787.0], [64.5, 32814.0], [64.6, 32814.0], [64.7, 32993.0], [64.8, 32993.0], [64.9, 32993.0], [65.0, 33030.0], [65.1, 33030.0], [65.2, 33189.0], [65.3, 33189.0], [65.4, 33337.0], [65.5, 33337.0], [65.6, 33337.0], [65.7, 33494.0], [65.8, 33494.0], [65.9, 34428.0], [66.0, 34428.0], [66.1, 34428.0], [66.2, 34488.0], [66.3, 34488.0], [66.4, 34549.0], [66.5, 34549.0], [66.6, 35100.0], [66.7, 35100.0], [66.8, 35100.0], [66.9, 35295.0], [67.0, 35295.0], [67.1, 35729.0], [67.2, 35729.0], [67.3, 35729.0], [67.4, 35998.0], [67.5, 35998.0], [67.6, 36204.0], [67.7, 36204.0], [67.8, 36402.0], [67.9, 36402.0], [68.0, 36402.0], [68.1, 36472.0], [68.2, 36472.0], [68.3, 36659.0], [68.4, 36659.0], [68.5, 36906.0], [68.6, 36906.0], [68.7, 36906.0], [68.8, 37114.0], [68.9, 37114.0], [69.0, 37285.0], [69.1, 37285.0], [69.2, 37285.0], [69.3, 37421.0], [69.4, 37421.0], [69.5, 37463.0], [69.6, 37463.0], [69.7, 37500.0], [69.8, 37500.0], [69.9, 37500.0], [70.0, 37680.0], [70.1, 37680.0], [70.2, 38217.0], [70.3, 38217.0], [70.4, 38217.0], [70.5, 38511.0], [70.6, 38511.0], [70.7, 39064.0], [70.8, 39064.0], [70.9, 39149.0], [71.0, 39149.0], [71.1, 39149.0], [71.2, 39266.0], [71.3, 39266.0], [71.4, 39628.0], [71.5, 39628.0], [71.6, 39720.0], [71.7, 39720.0], [71.8, 39720.0], [71.9, 39964.0], [72.0, 39964.0], [72.1, 40570.0], [72.2, 40570.0], [72.3, 40570.0], [72.4, 40750.0], [72.5, 40750.0], [72.6, 41285.0], [72.7, 41285.0], [72.8, 41965.0], [72.9, 41965.0], [73.0, 41965.0], [73.1, 42062.0], [73.2, 42062.0], [73.3, 42256.0], [73.4, 42256.0], [73.5, 42256.0], [73.6, 42811.0], [73.7, 42811.0], [73.8, 42874.0], [73.9, 42874.0], [74.0, 43347.0], [74.1, 43347.0], [74.2, 43347.0], [74.3, 43643.0], [74.4, 43643.0], [74.5, 43651.0], [74.6, 43651.0], [74.7, 43651.0], [74.8, 43940.0], [74.9, 43940.0], [75.0, 44252.0], [75.1, 44252.0], [75.2, 44310.0], [75.3, 44310.0], [75.4, 44310.0], [75.5, 44339.0], [75.6, 44339.0], [75.7, 44387.0], [75.8, 44387.0], [75.9, 44470.0], [76.0, 44470.0], [76.1, 44470.0], [76.2, 44651.0], [76.3, 44651.0], [76.4, 44946.0], [76.5, 44946.0], [76.6, 44946.0], [76.7, 44958.0], [76.8, 44958.0], [76.9, 44998.0], [77.0, 44998.0], [77.1, 45025.0], [77.2, 45025.0], [77.3, 45025.0], [77.4, 45306.0], [77.5, 45306.0], [77.6, 45911.0], [77.7, 45911.0], [77.8, 45911.0], [77.9, 46085.0], [78.0, 46085.0], [78.1, 46238.0], [78.2, 46238.0], [78.3, 46428.0], [78.4, 46428.0], [78.5, 46428.0], [78.6, 46624.0], [78.7, 46624.0], [78.8, 46649.0], [78.9, 46649.0], [79.0, 46725.0], [79.1, 46725.0], [79.2, 46725.0], [79.3, 47152.0], [79.4, 47152.0], [79.5, 47368.0], [79.6, 47368.0], [79.7, 47368.0], [79.8, 47581.0], [79.9, 47581.0], [80.0, 47612.0], [80.1, 47612.0], [80.2, 47960.0], [80.3, 47960.0], [80.4, 47960.0], [80.5, 48242.0], [80.6, 48242.0], [80.7, 48381.0], [80.8, 48381.0], [80.9, 48381.0], [81.0, 48732.0], [81.1, 48732.0], [81.2, 49757.0], [81.3, 49757.0], [81.4, 49828.0], [81.5, 49828.0], [81.6, 49828.0], [81.7, 49908.0], [81.8, 49908.0], [81.9, 50601.0], [82.0, 50601.0], [82.1, 50601.0], [82.2, 50930.0], [82.3, 50930.0], [82.4, 51791.0], [82.5, 51791.0], [82.6, 52031.0], [82.7, 52031.0], [82.8, 52031.0], [82.9, 52422.0], [83.0, 52422.0], [83.1, 52728.0], [83.2, 52728.0], [83.3, 53376.0], [83.4, 53376.0], [83.5, 53376.0], [83.6, 53499.0], [83.7, 53499.0], [83.8, 54982.0], [83.9, 54982.0], [84.0, 54982.0], [84.1, 55305.0], [84.2, 55305.0], [84.3, 55339.0], [84.4, 55339.0], [84.5, 55590.0], [84.6, 55590.0], [84.7, 55590.0], [84.8, 55721.0], [84.9, 55721.0], [85.0, 55823.0], [85.1, 55823.0], [85.2, 55823.0], [85.3, 56015.0], [85.4, 56015.0], [85.5, 56107.0], [85.6, 56107.0], [85.7, 56141.0], [85.8, 56141.0], [85.9, 56141.0], [86.0, 56249.0], [86.1, 56249.0], [86.2, 56767.0], [86.3, 56767.0], [86.4, 56879.0], [86.5, 56879.0], [86.6, 56879.0], [86.7, 57040.0], [86.8, 57040.0], [86.9, 57061.0], [87.0, 57061.0], [87.1, 57061.0], [87.2, 57244.0], [87.3, 57244.0], [87.4, 57402.0], [87.5, 57402.0], [87.6, 57878.0], [87.7, 57878.0], [87.8, 57878.0], [87.9, 57891.0], [88.0, 57891.0], [88.1, 57924.0], [88.2, 57924.0], [88.3, 57924.0], [88.4, 58108.0], [88.5, 58108.0], [88.6, 58227.0], [88.7, 58227.0], [88.8, 58685.0], [88.9, 58685.0], [89.0, 58685.0], [89.1, 58891.0], [89.2, 58891.0], [89.3, 59147.0], [89.4, 59147.0], [89.5, 59448.0], [89.6, 59448.0], [89.7, 59448.0], [89.8, 59614.0], [89.9, 59614.0], [90.0, 59615.0], [90.1, 59615.0], [90.2, 59615.0], [90.3, 59881.0], [90.4, 59881.0], [90.5, 60119.0], [90.6, 60119.0], [90.7, 60119.0], [90.8, 60119.0], [90.9, 60119.0], [91.0, 60119.0], [91.1, 60119.0], [91.2, 60120.0], [91.3, 60120.0], [91.4, 60120.0], [91.5, 60120.0], [91.6, 60120.0], [91.7, 60120.0], [91.8, 60120.0], [91.9, 60121.0], [92.0, 60121.0], [92.1, 60121.0], [92.2, 60121.0], [92.3, 60121.0], [92.4, 60122.0], [92.5, 60122.0], [92.6, 60122.0], [92.7, 60122.0], [92.8, 60122.0], [92.9, 60122.0], [93.0, 60122.0], [93.1, 60123.0], [93.2, 60123.0], [93.3, 60123.0], [93.4, 60123.0], [93.5, 60123.0], [93.6, 60123.0], [93.7, 60123.0], [93.8, 60124.0], [93.9, 60124.0], [94.0, 60124.0], [94.1, 60126.0], [94.2, 60126.0], [94.3, 60126.0], [94.4, 60126.0], [94.5, 60126.0], [94.6, 60126.0], [94.7, 60126.0], [94.8, 60128.0], [94.9, 60128.0], [95.0, 60129.0], [95.1, 60129.0], [95.2, 60129.0], [95.3, 60129.0], [95.4, 60129.0], [95.5, 60132.0], [95.6, 60132.0], [95.7, 60132.0], [95.8, 60135.0], [95.9, 60135.0], [96.0, 60138.0], [96.1, 60138.0], [96.2, 60141.0], [96.3, 60141.0], [96.4, 60141.0], [96.5, 60157.0], [96.6, 60157.0], [96.7, 60159.0], [96.8, 60159.0], [96.9, 60160.0], [97.0, 60160.0], [97.1, 60160.0], [97.2, 60161.0], [97.3, 60161.0], [97.4, 60196.0], [97.5, 60196.0], [97.6, 60196.0], [97.7, 60213.0], [97.8, 60213.0], [97.9, 60216.0], [98.0, 60216.0], [98.1, 60229.0], [98.2, 60229.0], [98.3, 60229.0], [98.4, 60230.0], [98.5, 60230.0], [98.6, 60238.0], [98.7, 60238.0], [98.8, 60238.0], [98.9, 60241.0], [99.0, 60241.0], [99.1, 60246.0], [99.2, 60246.0], [99.3, 60256.0], [99.4, 60256.0], [99.5, 60256.0], [99.6, 60327.0], [99.7, 60327.0], [99.8, 61139.0], [99.9, 61139.0], [100.0, 61139.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 224.0], [0.1, 224.0], [0.2, 224.0], [0.3, 225.0], [0.4, 225.0], [0.5, 225.0], [0.6, 225.0], [0.7, 225.0], [0.8, 226.0], [0.9, 226.0], [1.0, 226.0], [1.1, 226.0], [1.2, 226.0], [1.3, 226.0], [1.4, 226.0], [1.5, 226.0], [1.6, 226.0], [1.7, 227.0], [1.8, 227.0], [1.9, 227.0], [2.0, 227.0], [2.1, 227.0], [2.2, 227.0], [2.3, 227.0], [2.4, 227.0], [2.5, 227.0], [2.6, 227.0], [2.7, 227.0], [2.8, 227.0], [2.9, 227.0], [3.0, 227.0], [3.1, 227.0], [3.2, 227.0], [3.3, 227.0], [3.4, 227.0], [3.5, 227.0], [3.6, 227.0], [3.7, 227.0], [3.8, 227.0], [3.9, 228.0], [4.0, 228.0], [4.1, 228.0], [4.2, 228.0], [4.3, 228.0], [4.4, 228.0], [4.5, 228.0], [4.6, 228.0], [4.7, 228.0], [4.8, 228.0], [4.9, 228.0], [5.0, 228.0], [5.1, 228.0], [5.2, 228.0], [5.3, 228.0], [5.4, 228.0], [5.5, 228.0], [5.6, 228.0], [5.7, 228.0], [5.8, 229.0], [5.9, 229.0], [6.0, 229.0], [6.1, 229.0], [6.2, 229.0], [6.3, 229.0], [6.4, 229.0], [6.5, 229.0], [6.6, 229.0], [6.7, 229.0], [6.8, 229.0], [6.9, 229.0], [7.0, 229.0], [7.1, 229.0], [7.2, 229.0], [7.3, 229.0], [7.4, 229.0], [7.5, 229.0], [7.6, 229.0], [7.7, 229.0], [7.8, 229.0], [7.9, 229.0], [8.0, 229.0], [8.1, 229.0], [8.2, 229.0], [8.3, 229.0], [8.4, 229.0], [8.5, 229.0], [8.6, 229.0], [8.7, 229.0], [8.8, 229.0], [8.9, 229.0], [9.0, 229.0], [9.1, 229.0], [9.2, 229.0], [9.3, 229.0], [9.4, 229.0], [9.5, 229.0], [9.6, 230.0], [9.7, 230.0], [9.8, 230.0], [9.9, 230.0], [10.0, 230.0], [10.1, 230.0], [10.2, 230.0], [10.3, 230.0], [10.4, 230.0], [10.5, 230.0], [10.6, 230.0], [10.7, 230.0], [10.8, 230.0], [10.9, 230.0], [11.0, 230.0], [11.1, 230.0], [11.2, 230.0], [11.3, 230.0], [11.4, 230.0], [11.5, 230.0], [11.6, 230.0], [11.7, 230.0], [11.8, 230.0], [11.9, 230.0], [12.0, 230.0], [12.1, 230.0], [12.2, 230.0], [12.3, 230.0], [12.4, 230.0], [12.5, 230.0], [12.6, 230.0], [12.7, 230.0], [12.8, 230.0], [12.9, 230.0], [13.0, 230.0], [13.1, 230.0], [13.2, 230.0], [13.3, 230.0], [13.4, 230.0], [13.5, 230.0], [13.6, 231.0], [13.7, 231.0], [13.8, 231.0], [13.9, 231.0], [14.0, 231.0], [14.1, 231.0], [14.2, 231.0], [14.3, 231.0], [14.4, 231.0], [14.5, 231.0], [14.6, 231.0], [14.7, 231.0], [14.8, 231.0], [14.9, 231.0], [15.0, 231.0], [15.1, 231.0], [15.2, 231.0], [15.3, 231.0], [15.4, 231.0], [15.5, 231.0], [15.6, 231.0], [15.7, 231.0], [15.8, 231.0], [15.9, 231.0], [16.0, 231.0], [16.1, 231.0], [16.2, 231.0], [16.3, 231.0], [16.4, 231.0], [16.5, 231.0], [16.6, 231.0], [16.7, 231.0], [16.8, 231.0], [16.9, 231.0], [17.0, 231.0], [17.1, 231.0], [17.2, 232.0], [17.3, 232.0], [17.4, 232.0], [17.5, 232.0], [17.6, 232.0], [17.7, 232.0], [17.8, 232.0], [17.9, 232.0], [18.0, 232.0], [18.1, 232.0], [18.2, 232.0], [18.3, 232.0], [18.4, 232.0], [18.5, 232.0], [18.6, 232.0], [18.7, 232.0], [18.8, 232.0], [18.9, 232.0], [19.0, 232.0], [19.1, 232.0], [19.2, 232.0], [19.3, 232.0], [19.4, 232.0], [19.5, 232.0], [19.6, 232.0], [19.7, 232.0], [19.8, 232.0], [19.9, 232.0], [20.0, 232.0], [20.1, 232.0], [20.2, 232.0], [20.3, 232.0], [20.4, 232.0], [20.5, 232.0], [20.6, 232.0], [20.7, 233.0], [20.8, 233.0], [20.9, 233.0], [21.0, 233.0], [21.1, 233.0], [21.2, 233.0], [21.3, 233.0], [21.4, 233.0], [21.5, 233.0], [21.6, 233.0], [21.7, 233.0], [21.8, 233.0], [21.9, 233.0], [22.0, 233.0], [22.1, 233.0], [22.2, 233.0], [22.3, 233.0], [22.4, 233.0], [22.5, 233.0], [22.6, 233.0], [22.7, 233.0], [22.8, 233.0], [22.9, 233.0], [23.0, 233.0], [23.1, 234.0], [23.2, 234.0], [23.3, 234.0], [23.4, 234.0], [23.5, 234.0], [23.6, 234.0], [23.7, 234.0], [23.8, 234.0], [23.9, 234.0], [24.0, 234.0], [24.1, 234.0], [24.2, 234.0], [24.3, 234.0], [24.4, 234.0], [24.5, 234.0], [24.6, 234.0], [24.7, 234.0], [24.8, 234.0], [24.9, 234.0], [25.0, 235.0], [25.1, 235.0], [25.2, 235.0], [25.3, 235.0], [25.4, 235.0], [25.5, 235.0], [25.6, 235.0], [25.7, 235.0], [25.8, 235.0], [25.9, 235.0], [26.0, 235.0], [26.1, 235.0], [26.2, 235.0], [26.3, 235.0], [26.4, 235.0], [26.5, 235.0], [26.6, 235.0], [26.7, 235.0], [26.8, 235.0], [26.9, 235.0], [27.0, 235.0], [27.1, 235.0], [27.2, 235.0], [27.3, 235.0], [27.4, 235.0], [27.5, 235.0], [27.6, 235.0], [27.7, 235.0], [27.8, 235.0], [27.9, 235.0], [28.0, 235.0], [28.1, 235.0], [28.2, 235.0], [28.3, 235.0], [28.4, 235.0], [28.5, 235.0], [28.6, 236.0], [28.7, 236.0], [28.8, 236.0], [28.9, 236.0], [29.0, 236.0], [29.1, 236.0], [29.2, 236.0], [29.3, 236.0], [29.4, 236.0], [29.5, 236.0], [29.6, 236.0], [29.7, 236.0], [29.8, 236.0], [29.9, 236.0], [30.0, 236.0], [30.1, 236.0], [30.2, 236.0], [30.3, 236.0], [30.4, 236.0], [30.5, 236.0], [30.6, 236.0], [30.7, 236.0], [30.8, 236.0], [30.9, 236.0], [31.0, 236.0], [31.1, 236.0], [31.2, 237.0], [31.3, 237.0], [31.4, 237.0], [31.5, 237.0], [31.6, 237.0], [31.7, 237.0], [31.8, 237.0], [31.9, 237.0], [32.0, 237.0], [32.1, 237.0], [32.2, 237.0], [32.3, 237.0], [32.4, 237.0], [32.5, 237.0], [32.6, 237.0], [32.7, 237.0], [32.8, 237.0], [32.9, 237.0], [33.0, 237.0], [33.1, 237.0], [33.2, 237.0], [33.3, 237.0], [33.4, 237.0], [33.5, 237.0], [33.6, 237.0], [33.7, 237.0], [33.8, 238.0], [33.9, 238.0], [34.0, 238.0], [34.1, 238.0], [34.2, 238.0], [34.3, 238.0], [34.4, 238.0], [34.5, 238.0], [34.6, 238.0], [34.7, 238.0], [34.8, 238.0], [34.9, 238.0], [35.0, 238.0], [35.1, 238.0], [35.2, 238.0], [35.3, 238.0], [35.4, 238.0], [35.5, 238.0], [35.6, 238.0], [35.7, 238.0], [35.8, 238.0], [35.9, 238.0], [36.0, 238.0], [36.1, 238.0], [36.2, 238.0], [36.3, 238.0], [36.4, 238.0], [36.5, 238.0], [36.6, 238.0], [36.7, 238.0], [36.8, 238.0], [36.9, 238.0], [37.0, 238.0], [37.1, 238.0], [37.2, 238.0], [37.3, 238.0], [37.4, 238.0], [37.5, 238.0], [37.6, 238.0], [37.7, 238.0], [37.8, 238.0], [37.9, 238.0], [38.0, 238.0], [38.1, 238.0], [38.2, 238.0], [38.3, 238.0], [38.4, 238.0], [38.5, 238.0], [38.6, 238.0], [38.7, 238.0], [38.8, 238.0], [38.9, 238.0], [39.0, 238.0], [39.1, 238.0], [39.2, 238.0], [39.3, 238.0], [39.4, 238.0], [39.5, 238.0], [39.6, 238.0], [39.7, 239.0], [39.8, 239.0], [39.9, 239.0], [40.0, 239.0], [40.1, 239.0], [40.2, 239.0], [40.3, 239.0], [40.4, 239.0], [40.5, 239.0], [40.6, 239.0], [40.7, 239.0], [40.8, 239.0], [40.9, 239.0], [41.0, 239.0], [41.1, 239.0], [41.2, 239.0], [41.3, 239.0], [41.4, 239.0], [41.5, 239.0], [41.6, 239.0], [41.7, 239.0], [41.8, 239.0], [41.9, 239.0], [42.0, 239.0], [42.1, 239.0], [42.2, 239.0], [42.3, 239.0], [42.4, 239.0], [42.5, 239.0], [42.6, 239.0], [42.7, 239.0], [42.8, 239.0], [42.9, 239.0], [43.0, 240.0], [43.1, 240.0], [43.2, 240.0], [43.3, 240.0], [43.4, 240.0], [43.5, 240.0], [43.6, 240.0], [43.7, 240.0], [43.8, 240.0], [43.9, 240.0], [44.0, 240.0], [44.1, 240.0], [44.2, 240.0], [44.3, 240.0], [44.4, 240.0], [44.5, 240.0], [44.6, 240.0], [44.7, 240.0], [44.8, 240.0], [44.9, 240.0], [45.0, 240.0], [45.1, 240.0], [45.2, 240.0], [45.3, 240.0], [45.4, 240.0], [45.5, 240.0], [45.6, 240.0], [45.7, 240.0], [45.8, 240.0], [45.9, 240.0], [46.0, 240.0], [46.1, 240.0], [46.2, 240.0], [46.3, 240.0], [46.4, 240.0], [46.5, 240.0], [46.6, 240.0], [46.7, 240.0], [46.8, 240.0], [46.9, 240.0], [47.0, 240.0], [47.1, 240.0], [47.2, 240.0], [47.3, 240.0], [47.4, 240.0], [47.5, 240.0], [47.6, 241.0], [47.7, 241.0], [47.8, 241.0], [47.9, 241.0], [48.0, 241.0], [48.1, 241.0], [48.2, 241.0], [48.3, 241.0], [48.4, 241.0], [48.5, 241.0], [48.6, 241.0], [48.7, 241.0], [48.8, 241.0], [48.9, 241.0], [49.0, 241.0], [49.1, 241.0], [49.2, 241.0], [49.3, 241.0], [49.4, 241.0], [49.5, 241.0], [49.6, 241.0], [49.7, 241.0], [49.8, 241.0], [49.9, 241.0], [50.0, 241.0], [50.1, 241.0], [50.2, 241.0], [50.3, 241.0], [50.4, 241.0], [50.5, 241.0], [50.6, 241.0], [50.7, 241.0], [50.8, 241.0], [50.9, 241.0], [51.0, 241.0], [51.1, 241.0], [51.2, 241.0], [51.3, 241.0], [51.4, 241.0], [51.5, 241.0], [51.6, 241.0], [51.7, 241.0], [51.8, 241.0], [51.9, 241.0], [52.0, 241.0], [52.1, 241.0], [52.2, 241.0], [52.3, 241.0], [52.4, 241.0], [52.5, 241.0], [52.6, 241.0], [52.7, 241.0], [52.8, 242.0], [52.9, 242.0], [53.0, 242.0], [53.1, 242.0], [53.2, 242.0], [53.3, 242.0], [53.4, 242.0], [53.5, 242.0], [53.6, 242.0], [53.7, 242.0], [53.8, 242.0], [53.9, 242.0], [54.0, 242.0], [54.1, 242.0], [54.2, 242.0], [54.3, 242.0], [54.4, 242.0], [54.5, 242.0], [54.6, 242.0], [54.7, 242.0], [54.8, 242.0], [54.9, 242.0], [55.0, 242.0], [55.1, 242.0], [55.2, 242.0], [55.3, 242.0], [55.4, 242.0], [55.5, 242.0], [55.6, 242.0], [55.7, 242.0], [55.8, 242.0], [55.9, 243.0], [56.0, 243.0], [56.1, 243.0], [56.2, 243.0], [56.3, 243.0], [56.4, 243.0], [56.5, 243.0], [56.6, 243.0], [56.7, 243.0], [56.8, 243.0], [56.9, 243.0], [57.0, 243.0], [57.1, 243.0], [57.2, 243.0], [57.3, 243.0], [57.4, 243.0], [57.5, 243.0], [57.6, 243.0], [57.7, 243.0], [57.8, 243.0], [57.9, 243.0], [58.0, 243.0], [58.1, 243.0], [58.2, 243.0], [58.3, 243.0], [58.4, 243.0], [58.5, 243.0], [58.6, 243.0], [58.7, 244.0], [58.8, 244.0], [58.9, 244.0], [59.0, 244.0], [59.1, 244.0], [59.2, 244.0], [59.3, 244.0], [59.4, 244.0], [59.5, 244.0], [59.6, 244.0], [59.7, 244.0], [59.8, 244.0], [59.9, 244.0], [60.0, 244.0], [60.1, 244.0], [60.2, 244.0], [60.3, 244.0], [60.4, 245.0], [60.5, 245.0], [60.6, 245.0], [60.7, 245.0], [60.8, 245.0], [60.9, 245.0], [61.0, 245.0], [61.1, 245.0], [61.2, 245.0], [61.3, 245.0], [61.4, 245.0], [61.5, 245.0], [61.6, 246.0], [61.7, 246.0], [61.8, 246.0], [61.9, 246.0], [62.0, 246.0], [62.1, 246.0], [62.2, 246.0], [62.3, 246.0], [62.4, 246.0], [62.5, 246.0], [62.6, 246.0], [62.7, 246.0], [62.8, 246.0], [62.9, 246.0], [63.0, 246.0], [63.1, 246.0], [63.2, 246.0], [63.3, 246.0], [63.4, 246.0], [63.5, 246.0], [63.6, 246.0], [63.7, 246.0], [63.8, 246.0], [63.9, 246.0], [64.0, 246.0], [64.1, 246.0], [64.2, 246.0], [64.3, 246.0], [64.4, 247.0], [64.5, 247.0], [64.6, 247.0], [64.7, 247.0], [64.8, 247.0], [64.9, 247.0], [65.0, 247.0], [65.1, 247.0], [65.2, 247.0], [65.3, 247.0], [65.4, 247.0], [65.5, 247.0], [65.6, 247.0], [65.7, 247.0], [65.8, 247.0], [65.9, 247.0], [66.0, 247.0], [66.1, 247.0], [66.2, 247.0], [66.3, 247.0], [66.4, 247.0], [66.5, 247.0], [66.6, 248.0], [66.7, 248.0], [66.8, 248.0], [66.9, 248.0], [67.0, 248.0], [67.1, 248.0], [67.2, 248.0], [67.3, 248.0], [67.4, 248.0], [67.5, 248.0], [67.6, 248.0], [67.7, 248.0], [67.8, 248.0], [67.9, 248.0], [68.0, 248.0], [68.1, 248.0], [68.2, 248.0], [68.3, 248.0], [68.4, 248.0], [68.5, 248.0], [68.6, 248.0], [68.7, 248.0], [68.8, 248.0], [68.9, 248.0], [69.0, 248.0], [69.1, 248.0], [69.2, 248.0], [69.3, 248.0], [69.4, 249.0], [69.5, 249.0], [69.6, 249.0], [69.7, 249.0], [69.8, 249.0], [69.9, 249.0], [70.0, 249.0], [70.1, 249.0], [70.2, 249.0], [70.3, 249.0], [70.4, 249.0], [70.5, 249.0], [70.6, 250.0], [70.7, 250.0], [70.8, 250.0], [70.9, 250.0], [71.0, 250.0], [71.1, 250.0], [71.2, 250.0], [71.3, 250.0], [71.4, 250.0], [71.5, 250.0], [71.6, 250.0], [71.7, 250.0], [71.8, 250.0], [71.9, 250.0], [72.0, 250.0], [72.1, 250.0], [72.2, 250.0], [72.3, 250.0], [72.4, 250.0], [72.5, 251.0], [72.6, 251.0], [72.7, 251.0], [72.8, 251.0], [72.9, 251.0], [73.0, 251.0], [73.1, 251.0], [73.2, 251.0], [73.3, 251.0], [73.4, 252.0], [73.5, 252.0], [73.6, 252.0], [73.7, 252.0], [73.8, 252.0], [73.9, 252.0], [74.0, 252.0], [74.1, 252.0], [74.2, 253.0], [74.3, 253.0], [74.4, 253.0], [74.5, 253.0], [74.6, 254.0], [74.7, 254.0], [74.8, 254.0], [74.9, 254.0], [75.0, 254.0], [75.1, 254.0], [75.2, 254.0], [75.3, 255.0], [75.4, 255.0], [75.5, 255.0], [75.6, 255.0], [75.7, 255.0], [75.8, 255.0], [75.9, 255.0], [76.0, 255.0], [76.1, 255.0], [76.2, 255.0], [76.3, 255.0], [76.4, 255.0], [76.5, 255.0], [76.6, 255.0], [76.7, 255.0], [76.8, 256.0], [76.9, 256.0], [77.0, 256.0], [77.1, 256.0], [77.2, 256.0], [77.3, 256.0], [77.4, 256.0], [77.5, 256.0], [77.6, 256.0], [77.7, 256.0], [77.8, 256.0], [77.9, 256.0], [78.0, 256.0], [78.1, 256.0], [78.2, 256.0], [78.3, 256.0], [78.4, 256.0], [78.5, 256.0], [78.6, 256.0], [78.7, 256.0], [78.8, 256.0], [78.9, 257.0], [79.0, 257.0], [79.1, 257.0], [79.2, 257.0], [79.3, 257.0], [79.4, 257.0], [79.5, 257.0], [79.6, 258.0], [79.7, 258.0], [79.8, 258.0], [79.9, 258.0], [80.0, 258.0], [80.1, 258.0], [80.2, 258.0], [80.3, 259.0], [80.4, 259.0], [80.5, 259.0], [80.6, 259.0], [80.7, 259.0], [80.8, 259.0], [80.9, 259.0], [81.0, 259.0], [81.1, 259.0], [81.2, 259.0], [81.3, 259.0], [81.4, 259.0], [81.5, 260.0], [81.6, 260.0], [81.7, 260.0], [81.8, 260.0], [81.9, 260.0], [82.0, 260.0], [82.1, 260.0], [82.2, 260.0], [82.3, 260.0], [82.4, 260.0], [82.5, 261.0], [82.6, 261.0], [82.7, 261.0], [82.8, 261.0], [82.9, 261.0], [83.0, 261.0], [83.1, 261.0], [83.2, 261.0], [83.3, 261.0], [83.4, 261.0], [83.5, 261.0], [83.6, 261.0], [83.7, 262.0], [83.8, 262.0], [83.9, 262.0], [84.0, 262.0], [84.1, 262.0], [84.2, 262.0], [84.3, 262.0], [84.4, 262.0], [84.5, 262.0], [84.6, 262.0], [84.7, 262.0], [84.8, 262.0], [84.9, 262.0], [85.0, 262.0], [85.1, 264.0], [85.2, 264.0], [85.3, 266.0], [85.4, 266.0], [85.5, 266.0], [85.6, 266.0], [85.7, 266.0], [85.8, 267.0], [85.9, 267.0], [86.0, 267.0], [86.1, 267.0], [86.2, 267.0], [86.3, 267.0], [86.4, 267.0], [86.5, 267.0], [86.6, 267.0], [86.7, 268.0], [86.8, 268.0], [86.9, 268.0], [87.0, 268.0], [87.1, 268.0], [87.2, 268.0], [87.3, 268.0], [87.4, 268.0], [87.5, 269.0], [87.6, 269.0], [87.7, 269.0], [87.8, 269.0], [87.9, 269.0], [88.0, 269.0], [88.1, 269.0], [88.2, 269.0], [88.3, 269.0], [88.4, 270.0], [88.5, 270.0], [88.6, 270.0], [88.7, 270.0], [88.8, 270.0], [88.9, 271.0], [89.0, 271.0], [89.1, 271.0], [89.2, 271.0], [89.3, 271.0], [89.4, 271.0], [89.5, 271.0], [89.6, 271.0], [89.7, 271.0], [89.8, 272.0], [89.9, 272.0], [90.0, 272.0], [90.1, 272.0], [90.2, 272.0], [90.3, 272.0], [90.4, 272.0], [90.5, 272.0], [90.6, 272.0], [90.7, 272.0], [90.8, 273.0], [90.9, 273.0], [91.0, 273.0], [91.1, 273.0], [91.2, 273.0], [91.3, 274.0], [91.4, 274.0], [91.5, 276.0], [91.6, 276.0], [91.7, 276.0], [91.8, 276.0], [91.9, 276.0], [92.0, 277.0], [92.1, 277.0], [92.2, 278.0], [92.3, 278.0], [92.4, 279.0], [92.5, 279.0], [92.6, 279.0], [92.7, 280.0], [92.8, 280.0], [92.9, 281.0], [93.0, 281.0], [93.1, 281.0], [93.2, 283.0], [93.3, 283.0], [93.4, 287.0], [93.5, 287.0], [93.6, 288.0], [93.7, 288.0], [93.8, 288.0], [93.9, 289.0], [94.0, 289.0], [94.1, 289.0], [94.2, 289.0], [94.3, 290.0], [94.4, 290.0], [94.5, 290.0], [94.6, 291.0], [94.7, 291.0], [94.8, 292.0], [94.9, 292.0], [95.0, 292.0], [95.1, 293.0], [95.2, 293.0], [95.3, 298.0], [95.4, 298.0], [95.5, 302.0], [95.6, 302.0], [95.7, 302.0], [95.8, 306.0], [95.9, 306.0], [96.0, 306.0], [96.1, 306.0], [96.2, 309.0], [96.3, 309.0], [96.4, 309.0], [96.5, 310.0], [96.6, 310.0], [96.7, 311.0], [96.8, 311.0], [96.9, 311.0], [97.0, 312.0], [97.1, 312.0], [97.2, 313.0], [97.3, 313.0], [97.4, 315.0], [97.5, 315.0], [97.6, 315.0], [97.7, 320.0], [97.8, 320.0], [97.9, 322.0], [98.0, 322.0], [98.1, 323.0], [98.2, 323.0], [98.3, 323.0], [98.4, 327.0], [98.5, 327.0], [98.6, 337.0], [98.7, 337.0], [98.8, 337.0], [98.9, 339.0], [99.0, 339.0], [99.1, 347.0], [99.2, 347.0], [99.3, 351.0], [99.4, 351.0], [99.5, 351.0], [99.6, 357.0], [99.7, 357.0], [99.8, 357.0], [99.9, 357.0], [100.0, 357.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 402.0, "series": [{"data": [[33700.0, 1.0], [35300.0, 1.0], [37300.0, 1.0], [37700.0, 1.0], [36900.0, 1.0], [42500.0, 1.0], [44500.0, 2.0], [44900.0, 1.0], [44100.0, 1.0], [45300.0, 2.0], [46900.0, 1.0], [46100.0, 1.0], [48900.0, 1.0], [50100.0, 2.0], [200.0, 2.0], [53700.0, 1.0], [57300.0, 1.0], [56900.0, 1.0], [58900.0, 1.0], [58100.0, 3.0], [60100.0, 1.0], [61300.0, 1.0], [60500.0, 1.0], [300.0, 108.0], [400.0, 6.0], [600.0, 1.0], [1200.0, 1.0], [1300.0, 1.0], [1400.0, 1.0], [1600.0, 1.0], [1700.0, 1.0], [3000.0, 1.0], [3700.0, 1.0], [3800.0, 1.0], [5000.0, 1.0], [5200.0, 1.0], [5700.0, 1.0], [5900.0, 1.0], [6300.0, 2.0], [6200.0, 1.0], [6400.0, 1.0], [6900.0, 2.0], [6700.0, 1.0], [7000.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [8100.0, 1.0], [8200.0, 1.0], [8300.0, 1.0], [8400.0, 1.0], [8700.0, 1.0], [8900.0, 1.0], [11100.0, 1.0], [11700.0, 1.0], [12500.0, 1.0], [12400.0, 2.0], [12300.0, 1.0], [12700.0, 1.0], [13300.0, 1.0], [13200.0, 1.0], [13700.0, 2.0], [13600.0, 1.0], [13900.0, 1.0], [14300.0, 1.0], [14500.0, 1.0], [15100.0, 2.0], [15200.0, 1.0], [15000.0, 1.0], [15500.0, 1.0], [15600.0, 2.0], [16300.0, 2.0], [17400.0, 2.0], [16800.0, 1.0], [18200.0, 1.0], [18000.0, 2.0], [17600.0, 1.0], [17800.0, 1.0], [19400.0, 1.0], [20200.0, 2.0], [21400.0, 1.0], [21200.0, 4.0], [20600.0, 2.0], [21000.0, 1.0], [20800.0, 1.0], [22000.0, 3.0], [22400.0, 4.0], [21800.0, 2.0], [21600.0, 1.0], [22200.0, 1.0], [22800.0, 1.0], [23200.0, 1.0], [24200.0, 1.0], [24400.0, 1.0], [23800.0, 1.0], [23600.0, 1.0], [24600.0, 1.0], [25200.0, 1.0], [26000.0, 1.0], [26600.0, 1.0], [27400.0, 1.0], [27600.0, 1.0], [27000.0, 1.0], [27200.0, 1.0], [29400.0, 1.0], [30400.0, 1.0], [30600.0, 3.0], [30200.0, 1.0], [31400.0, 1.0], [31600.0, 1.0], [32000.0, 1.0], [33200.0, 2.0], [33600.0, 1.0], [34800.0, 1.0], [36400.0, 1.0], [36000.0, 1.0], [37600.0, 1.0], [38000.0, 1.0], [38400.0, 1.0], [39200.0, 1.0], [40800.0, 1.0], [44400.0, 1.0], [46400.0, 1.0], [46800.0, 2.0], [45200.0, 1.0], [48400.0, 1.0], [50800.0, 1.0], [51200.0, 1.0], [52000.0, 1.0], [53600.0, 1.0], [55200.0, 1.0], [57200.0, 1.0], [56000.0, 1.0], [55600.0, 1.0], [56400.0, 1.0], [58400.0, 1.0], [57600.0, 1.0], [60400.0, 10.0], [59600.0, 1.0], [34700.0, 1.0], [33100.0, 1.0], [36700.0, 1.0], [35500.0, 1.0], [37100.0, 1.0], [38700.0, 1.0], [37500.0, 1.0], [39900.0, 1.0], [42300.0, 1.0], [41500.0, 1.0], [43500.0, 1.0], [44700.0, 1.0], [43100.0, 1.0], [46300.0, 1.0], [46700.0, 1.0], [45500.0, 1.0], [45100.0, 1.0], [47500.0, 1.0], [49900.0, 1.0], [52300.0, 1.0], [56300.0, 2.0], [55500.0, 1.0], [55900.0, 1.0], [57100.0, 1.0], [58300.0, 1.0], [59100.0, 1.0], [60300.0, 28.0], [16900.0, 1.0], [17300.0, 1.0], [17100.0, 1.0], [16700.0, 1.0], [17900.0, 1.0], [18300.0, 1.0], [17500.0, 1.0], [18700.0, 2.0], [19100.0, 1.0], [18500.0, 1.0], [19300.0, 1.0], [18900.0, 1.0], [19700.0, 2.0], [20100.0, 1.0], [19900.0, 2.0], [20300.0, 1.0], [20900.0, 1.0], [20700.0, 1.0], [21500.0, 1.0], [21300.0, 1.0], [22300.0, 1.0], [22700.0, 2.0], [22900.0, 1.0], [23300.0, 1.0], [23500.0, 1.0], [24100.0, 2.0], [24300.0, 1.0], [24700.0, 1.0], [25300.0, 1.0], [26500.0, 1.0], [25700.0, 1.0], [26100.0, 1.0], [27100.0, 2.0], [26700.0, 1.0], [28500.0, 2.0], [28900.0, 1.0], [29700.0, 2.0], [30700.0, 1.0], [30300.0, 1.0], [31300.0, 1.0], [33400.0, 1.0], [33000.0, 1.0], [34600.0, 1.0], [36600.0, 1.0], [36200.0, 1.0], [37800.0, 1.0], [40200.0, 1.0], [39400.0, 2.0], [39800.0, 1.0], [43000.0, 1.0], [41000.0, 1.0], [42200.0, 1.0], [44600.0, 1.0], [43800.0, 2.0], [47800.0, 2.0], [48200.0, 1.0], [47400.0, 1.0], [48600.0, 1.0], [53000.0, 1.0], [52600.0, 1.0], [56200.0, 1.0], [55800.0, 1.0], [57400.0, 1.0], [59800.0, 2.0], [59400.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 114.0], [32900.0, 1.0], [33300.0, 1.0], [34500.0, 1.0], [35700.0, 1.0], [36900.0, 1.0], [38500.0, 1.0], [40500.0, 1.0], [39700.0, 1.0], [44900.0, 3.0], [43300.0, 1.0], [45300.0, 1.0], [47300.0, 1.0], [50900.0, 1.0], [49700.0, 1.0], [51700.0, 1.0], [53300.0, 1.0], [54900.0, 1.0], [56100.0, 2.0], [55300.0, 2.0], [55700.0, 1.0], [58100.0, 1.0], [60100.0, 30.0], [300.0, 1.0], [900.0, 1.0], [1100.0, 1.0], [1200.0, 1.0], [1300.0, 1.0], [1400.0, 1.0], [2700.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [4800.0, 1.0], [4900.0, 1.0], [5400.0, 1.0], [5700.0, 1.0], [6000.0, 3.0], [6100.0, 1.0], [6600.0, 2.0], [6400.0, 1.0], [6700.0, 1.0], [7300.0, 2.0], [7800.0, 1.0], [8000.0, 2.0], [8700.0, 1.0], [8200.0, 1.0], [8500.0, 1.0], [10800.0, 1.0], [11400.0, 1.0], [12200.0, 2.0], [12100.0, 1.0], [12300.0, 1.0], [12500.0, 1.0], [13000.0, 2.0], [13500.0, 1.0], [13600.0, 1.0], [13400.0, 2.0], [14200.0, 1.0], [14000.0, 1.0], [14800.0, 1.0], [14900.0, 2.0], [15000.0, 1.0], [15200.0, 1.0], [15300.0, 2.0], [16000.0, 2.0], [17200.0, 1.0], [16600.0, 2.0], [17000.0, 1.0], [17400.0, 1.0], [16400.0, 1.0], [18000.0, 1.0], [17800.0, 1.0], [18400.0, 1.0], [17600.0, 1.0], [19400.0, 1.0], [20400.0, 1.0], [20000.0, 2.0], [21200.0, 1.0], [20600.0, 1.0], [21400.0, 1.0], [21000.0, 3.0], [22400.0, 1.0], [22000.0, 1.0], [22200.0, 3.0], [21800.0, 1.0], [23000.0, 1.0], [23400.0, 1.0], [24000.0, 1.0], [23800.0, 1.0], [24200.0, 1.0], [24400.0, 1.0], [25000.0, 1.0], [26400.0, 1.0], [25800.0, 1.0], [26800.0, 1.0], [28600.0, 1.0], [28200.0, 1.0], [30400.0, 3.0], [31000.0, 1.0], [31800.0, 1.0], [34400.0, 2.0], [32800.0, 1.0], [36400.0, 2.0], [35200.0, 1.0], [37600.0, 1.0], [37200.0, 1.0], [39200.0, 1.0], [39600.0, 1.0], [42000.0, 1.0], [42800.0, 2.0], [41200.0, 1.0], [44400.0, 1.0], [43600.0, 2.0], [46000.0, 1.0], [46400.0, 1.0], [47600.0, 1.0], [52400.0, 1.0], [52000.0, 1.0], [56000.0, 1.0], [57200.0, 1.0], [56800.0, 1.0], [58800.0, 1.0], [59600.0, 2.0], [33100.0, 1.0], [35900.0, 1.0], [35100.0, 1.0], [37500.0, 1.0], [37100.0, 1.0], [39900.0, 1.0], [39100.0, 1.0], [40700.0, 1.0], [41900.0, 1.0], [44300.0, 3.0], [43900.0, 1.0], [46700.0, 1.0], [45900.0, 1.0], [47100.0, 1.0], [47500.0, 1.0], [47900.0, 1.0], [48700.0, 1.0], [48300.0, 1.0], [49900.0, 1.0], [52700.0, 1.0], [56700.0, 1.0], [55500.0, 1.0], [57900.0, 1.0], [59100.0, 1.0], [61100.0, 1.0], [60300.0, 1.0], [16900.0, 1.0], [17300.0, 1.0], [17100.0, 1.0], [17700.0, 2.0], [18100.0, 1.0], [18300.0, 1.0], [18500.0, 1.0], [18900.0, 1.0], [19100.0, 2.0], [18700.0, 1.0], [20300.0, 1.0], [19900.0, 2.0], [19700.0, 2.0], [19500.0, 1.0], [21500.0, 2.0], [20900.0, 2.0], [20700.0, 1.0], [20500.0, 2.0], [21300.0, 1.0], [21700.0, 2.0], [22500.0, 2.0], [22100.0, 2.0], [22700.0, 1.0], [23500.0, 1.0], [23100.0, 1.0], [23300.0, 1.0], [23900.0, 1.0], [24100.0, 1.0], [24500.0, 1.0], [25100.0, 1.0], [25500.0, 1.0], [26300.0, 2.0], [25900.0, 1.0], [27100.0, 1.0], [26900.0, 2.0], [27300.0, 1.0], [26700.0, 1.0], [28300.0, 1.0], [29500.0, 2.0], [29100.0, 1.0], [30100.0, 2.0], [30300.0, 1.0], [29900.0, 1.0], [31100.0, 1.0], [31300.0, 1.0], [32700.0, 1.0], [33000.0, 1.0], [33400.0, 1.0], [36200.0, 1.0], [36600.0, 1.0], [37400.0, 2.0], [38200.0, 1.0], [39000.0, 1.0], [42200.0, 1.0], [44600.0, 1.0], [44200.0, 1.0], [45000.0, 1.0], [46200.0, 1.0], [46600.0, 2.0], [48200.0, 1.0], [50600.0, 1.0], [49800.0, 1.0], [53400.0, 1.0], [57000.0, 2.0], [55800.0, 1.0], [56200.0, 1.0], [58600.0, 1.0], [58200.0, 1.0], [57400.0, 1.0], [57800.0, 2.0], [60200.0, 8.0], [59800.0, 1.0], [59400.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 19.0], [200.0, 402.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 61300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 256.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 315.0, "series": [{"data": [[0.0, 315.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 256.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 269.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.1666666666666665, "minX": 1.68512358E12, "maxY": 24.770161290322577, "series": [{"data": [[1.68512394E12, 11.931034482758625], [1.68512424E12, 20.0], [1.6851243E12, 21.389380530973455], [1.68512364E12, 4.638888888888888], [1.68512418E12, 19.54716981132075], [1.68512448E12, 3.2], [1.68512358E12, 2.1666666666666665], [1.68512388E12, 10.0], [1.68512442E12, 20.682170542635667], [1.68512376E12, 5.6923076923076925], [1.68512382E12, 9.800000000000002], [1.68512412E12, 16.112359550561806], [1.6851237E12, 5.0], [1.685124E12, 14.905660377358492], [1.68512406E12, 15.0], [1.68512436E12, 24.770161290322577]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68512448E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 238.0, "minX": 1.0, "maxY": 55913.333333333336, "series": [{"data": [[2.0, 7837.0], [3.0, 38784.0], [4.0, 19447.0], [5.0, 20818.444444444445], [6.0, 24415.166666666664], [7.0, 8304.0], [8.0, 53028.5], [9.0, 38116.666666666664], [10.0, 37810.2], [11.0, 25618.5], [12.0, 21649.454545454544], [13.0, 15395.25], [14.0, 15388.5], [15.0, 27704.65277777777], [16.0, 12790.0], [1.0, 16344.0], [17.0, 15045.6], [18.0, 17020.555555555555], [19.0, 27529.066666666666], [20.0, 35634.26153846155], [21.0, 55913.333333333336], [22.0, 17954.117647058825], [23.0, 18513.461538461535], [24.0, 15056.625], [25.0, 16859.35632183908]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[17.237529691211407, 24764.197149643707]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 7561.666666666667], [3.0, 38532.5], [4.0, 19206.8], [5.0, 20568.259259259263], [6.0, 24174.0], [7.0, 8054.0], [8.0, 52791.5], [9.0, 37883.333333333336], [10.0, 37543.56666666667], [11.0, 25373.0], [12.0, 21395.772727272728], [13.0, 15131.5], [14.0, 15123.25], [15.0, 27462.888888888883], [16.0, 12537.2], [1.0, 16073.0], [17.0, 14799.8], [18.0, 16781.88888888889], [19.0, 29230.857142857145], [20.0, 35384.923076923085], [21.0, 55636.0], [22.0, 17703.764705882357], [23.0, 18273.615384615387], [24.0, 14811.249999999998], [25.0, 16809.43023255814]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[17.214797136038197, 24633.360381861592]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 251.5], [3.0, 238.0], [4.0, 244.8], [5.0, 248.62962962962962], [6.0, 254.66666666666666], [7.0, 285.5], [8.0, 256.0], [9.0, 278.0], [10.0, 260.43333333333334], [11.0, 268.0], [12.0, 243.59090909090904], [13.0, 263.25], [14.0, 243.5], [15.0, 243.82191780821918], [1.0, 323.0], [16.0, 241.0], [17.0, 243.6], [18.0, 249.55555555555554], [19.0, 255.46666666666667], [20.0, 247.03076923076924], [21.0, 268.6666666666667], [22.0, 242.76470588235296], [23.0, 243.6923076923077], [24.0, 241.93749999999994], [25.0, 245.10344827586218]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[17.235154394299297, 247.85985748218533]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 185.5, "minX": 1.68512358E12, "maxY": 13040.033333333333, "series": [{"data": [[1.68512394E12, 1426.4833333333333], [1.68512424E12, 1974.9166666666667], [1.6851243E12, 2318.866666666667], [1.68512364E12, 806.4], [1.68512418E12, 2567.6], [1.68512448E12, 185.5], [1.68512358E12, 329.0], [1.68512388E12, 1467.6666666666667], [1.68512442E12, 1982.8333333333333], [1.68512376E12, 989.45], [1.68512382E12, 806.4], [1.68512412E12, 2163.5833333333335], [1.6851237E12, 1027.3666666666666], [1.685124E12, 1200.55], [1.68512406E12, 1370.9], [1.68512436E12, 3334.7166666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68512394E12, 4041.2833333333333], [1.68512424E12, 3787.9666666666667], [1.6851243E12, 5335.783333333334], [1.68512364E12, 1377.0666666666666], [1.68512418E12, 4844.283333333334], [1.68512448E12, 585.95], [1.68512358E12, 681.2833333333333], [1.68512388E12, 2621.6833333333334], [1.68512442E12, 6380.616666666667], [1.68512376E12, 1839.7833333333333], [1.68512382E12, 1171.9833333333333], [1.68512412E12, 4644.733333333334], [1.6851237E12, 1828.9], [1.685124E12, 3644.883333333333], [1.68512406E12, 4606.933333333333], [1.68512436E12, 13040.033333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68512448E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 237.14814814814818, "minX": 1.68512358E12, "maxY": 39629.82352941176, "series": [{"data": [[1.68512394E12, 16967.21428571429], [1.68512424E12, 39066.259259259255], [1.6851243E12, 26070.815789473683], [1.68512364E12, 18107.928571428572], [1.68512418E12, 30610.5], [1.68512358E12, 7837.0], [1.68512388E12, 39629.82352941176], [1.68512442E12, 30739.568627450983], [1.68512376E12, 16904.333333333332], [1.68512382E12, 34095.846153846156], [1.68512412E12, 18209.600000000006], [1.6851237E12, 21822.0], [1.685124E12, 22533.05263157895], [1.68512406E12, 37814.95454545455], [1.68512436E12, 14462.792682926827]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68512394E12, 16713.571428571428], [1.68512424E12, 36827.448275862065], [1.6851243E12, 28444.19444444445], [1.68512364E12, 17951.2], [1.68512418E12, 29609.14705882353], [1.68512448E12, 37381.2], [1.68512358E12, 7561.666666666667], [1.68512388E12, 39076.95], [1.68512442E12, 30033.291666666664], [1.68512376E12, 16655.75], [1.68512382E12, 32740.600000000002], [1.68512412E12, 17636.07142857143], [1.6851237E12, 20450.07142857143], [1.685124E12, 25647.060606060608], [1.68512406E12, 30639.03703703704], [1.68512436E12, 14164.231707317069]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68512394E12, 250.74193548387095], [1.68512424E12, 246.44827586206898], [1.6851243E12, 244.89743589743586], [1.68512364E12, 243.08333333333337], [1.68512418E12, 252.25000000000006], [1.68512358E12, 256.66666666666663], [1.68512388E12, 257.25000000000006], [1.68512442E12, 245.6666666666667], [1.68512376E12, 254.73333333333335], [1.68512382E12, 267.75000000000006], [1.68512412E12, 247.3870967741936], [1.6851237E12, 253.85714285714283], [1.685124E12, 246.45714285714286], [1.68512406E12, 237.14814814814818], [1.68512436E12, 244.51190476190473]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68512448E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 236.92592592592587, "minX": 1.68512358E12, "maxY": 39629.17647058823, "series": [{"data": [[1.68512394E12, 16966.785714285714], [1.68512424E12, 39065.88888888888], [1.6851243E12, 26070.105263157897], [1.68512364E12, 18107.5], [1.68512418E12, 30610.138888888887], [1.68512358E12, 7834.333333333333], [1.68512388E12, 39629.17647058823], [1.68512442E12, 30739.35294117647], [1.68512376E12, 16903.83333333333], [1.68512382E12, 34094.38461538462], [1.68512412E12, 18209.200000000004], [1.6851237E12, 21821.2], [1.685124E12, 22532.710526315797], [1.68512406E12, 37814.454545454544], [1.68512436E12, 14462.512195121952]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68512394E12, 16713.42857142857], [1.68512424E12, 36827.275862068964], [1.6851243E12, 28443.972222222223], [1.68512364E12, 17951.2], [1.68512418E12, 29609.029411764706], [1.68512448E12, 37381.2], [1.68512358E12, 7561.333333333333], [1.68512388E12, 39076.59999999999], [1.68512442E12, 30033.145833333332], [1.68512376E12, 16655.416666666668], [1.68512382E12, 32740.199999999997], [1.68512412E12, 17635.89285714286], [1.6851237E12, 20449.57142857143], [1.685124E12, 25646.969696969696], [1.68512406E12, 30638.703703703708], [1.68512436E12, 14164.097560975602]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68512394E12, 250.32258064516128], [1.68512424E12, 245.89655172413788], [1.6851243E12, 244.6923076923077], [1.68512364E12, 242.75000000000003], [1.68512418E12, 252.0277777777778], [1.68512358E12, 255.33333333333334], [1.68512388E12, 257.00000000000006], [1.68512442E12, 245.5666666666667], [1.68512376E12, 254.39999999999995], [1.68512382E12, 266.8333333333333], [1.68512412E12, 247.09677419354836], [1.6851237E12, 253.64285714285714], [1.685124E12, 246.37142857142854], [1.68512406E12, 236.92592592592587], [1.68512436E12, 244.404761904762]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68512448E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68512358E12, "maxY": 143.0, "series": [{"data": [[1.68512394E12, 118.67857142857143], [1.68512424E12, 119.40740740740742], [1.6851243E12, 118.1842105263158], [1.68512364E12, 119.42857142857143], [1.68512418E12, 116.97222222222223], [1.68512358E12, 143.0], [1.68512388E12, 116.29411764705883], [1.68512442E12, 119.15686274509802], [1.68512376E12, 117.41666666666666], [1.68512382E12, 121.38461538461537], [1.68512412E12, 119.43333333333334], [1.6851237E12, 129.3], [1.685124E12, 118.21052631578948], [1.68512406E12, 116.27272727272727], [1.68512436E12, 117.39024390243904]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68512394E12, 0.0], [1.68512424E12, 0.0], [1.6851243E12, 0.0], [1.68512364E12, 0.0], [1.68512418E12, 0.0], [1.68512448E12, 0.0], [1.68512358E12, 0.0], [1.68512388E12, 0.0], [1.68512442E12, 0.0], [1.68512376E12, 0.0], [1.68512382E12, 0.0], [1.68512412E12, 0.0], [1.6851237E12, 0.0], [1.685124E12, 0.0], [1.68512406E12, 0.0], [1.68512436E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68512394E12, 116.93548387096774], [1.68512424E12, 116.27586206896552], [1.6851243E12, 118.3076923076923], [1.68512364E12, 118.91666666666667], [1.68512418E12, 119.61111111111111], [1.68512358E12, 131.33333333333334], [1.68512388E12, 118.30000000000001], [1.68512442E12, 120.3], [1.68512376E12, 118.0], [1.68512382E12, 121.75], [1.68512412E12, 118.12903225806451], [1.6851237E12, 125.64285714285715], [1.685124E12, 118.28571428571429], [1.68512406E12, 117.0], [1.68512436E12, 117.67857142857143]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68512448E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 227.0, "minX": 1.68512358E12, "maxY": 59881.0, "series": [{"data": [[1.68512394E12, 47960.0], [1.68512424E12, 59448.0], [1.6851243E12, 59615.0], [1.68512364E12, 22583.0], [1.68512418E12, 51791.0], [1.68512448E12, 49828.0], [1.68512358E12, 8754.0], [1.68512388E12, 48242.0], [1.68512442E12, 59614.0], [1.68512376E12, 21789.0], [1.68512382E12, 37500.0], [1.68512412E12, 24515.0], [1.6851237E12, 24014.0], [1.685124E12, 58685.0], [1.68512406E12, 59881.0], [1.68512436E12, 57402.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68512394E12, 47303.700000000004], [1.68512424E12, 52303.40000000004], [1.6851243E12, 55731.2], [1.68512364E12, 22071.8], [1.68512418E12, 42643.6], [1.68512448E12, 49828.0], [1.68512358E12, 8754.0], [1.68512388E12, 44994.0], [1.68512442E12, 57478.4], [1.68512376E12, 20676.6], [1.68512382E12, 37055.9], [1.68512412E12, 22250.0], [1.6851237E12, 22598.000000000004], [1.685124E12, 56622.6], [1.68512406E12, 57837.700000000004], [1.68512436E12, 13015.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68512394E12, 47960.0], [1.68512424E12, 59448.0], [1.6851243E12, 59615.0], [1.68512364E12, 22583.0], [1.68512418E12, 51791.0], [1.68512448E12, 49828.0], [1.68512358E12, 8754.0], [1.68512388E12, 48242.0], [1.68512442E12, 59614.0], [1.68512376E12, 21789.0], [1.68512382E12, 37500.0], [1.68512412E12, 24515.0], [1.6851237E12, 24014.0], [1.685124E12, 58685.0], [1.68512406E12, 59881.0], [1.68512436E12, 57402.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68512394E12, 47751.55], [1.68512424E12, 58382.049999999996], [1.6851243E12, 56790.85], [1.68512364E12, 22524.05], [1.68512418E12, 46635.25], [1.68512448E12, 49828.0], [1.68512358E12, 8754.0], [1.68512388E12, 46410.85], [1.68512442E12, 58895.799999999996], [1.68512376E12, 21473.0], [1.68512382E12, 37488.15], [1.68512412E12, 24213.0], [1.6851237E12, 23943.8], [1.685124E12, 58685.0], [1.68512406E12, 58971.299999999996], [1.68512436E12, 29985.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68512394E12, 230.0], [1.68512424E12, 229.0], [1.6851243E12, 227.0], [1.68512364E12, 231.0], [1.68512418E12, 229.0], [1.68512448E12, 16073.0], [1.68512358E12, 230.0], [1.68512388E12, 228.0], [1.68512442E12, 231.0], [1.68512376E12, 228.0], [1.68512382E12, 233.0], [1.68512412E12, 227.0], [1.6851237E12, 232.0], [1.685124E12, 230.0], [1.68512406E12, 230.0], [1.68512436E12, 229.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68512394E12, 293.5], [1.68512424E12, 273.5], [1.6851243E12, 283.0], [1.68512364E12, 263.0], [1.68512418E12, 298.5], [1.68512448E12, 41965.0], [1.68512358E12, 260.0], [1.68512388E12, 9635.5], [1.68512442E12, 25902.0], [1.68512376E12, 306.0], [1.68512382E12, 339.0], [1.68512412E12, 311.0], [1.6851237E12, 7648.5], [1.685124E12, 258.0], [1.68512406E12, 241.5], [1.68512436E12, 250.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68512448E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 124.0, "minX": 1.0, "maxY": 60129.0, "series": [{"data": [[1.0, 268.5], [4.0, 271.0], [2.0, 301.5], [8.0, 12127.0], [17.0, 44470.0], [9.0, 256.0], [5.0, 286.0], [10.0, 255.0], [3.0, 5540.5], [6.0, 261.0], [7.0, 289.0], [15.0, 248.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 178.0], [1.0, 235.0], [4.0, 228.0], [8.0, 239.0], [17.0, 233.0], [9.0, 181.0], [5.0, 177.5], [10.0, 236.0], [3.0, 229.5], [6.0, 229.0], [7.0, 124.0], [15.0, 60129.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 124.0, "minX": 1.0, "maxY": 60129.0, "series": [{"data": [[1.0, 268.0], [4.0, 271.0], [2.0, 301.5], [8.0, 12127.0], [17.0, 44469.0], [9.0, 256.0], [5.0, 286.0], [10.0, 255.0], [3.0, 5540.5], [6.0, 261.0], [7.0, 288.5], [15.0, 247.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 178.0], [1.0, 235.0], [4.0, 228.0], [8.0, 239.0], [17.0, 233.0], [9.0, 181.0], [5.0, 177.5], [10.0, 236.0], [3.0, 229.5], [6.0, 229.0], [7.0, 124.0], [15.0, 60129.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.68512358E12, "maxY": 2.783333333333333, "series": [{"data": [[1.68512394E12, 1.0166666666666666], [1.68512424E12, 0.9833333333333333], [1.6851243E12, 1.25], [1.68512364E12, 0.38333333333333336], [1.68512418E12, 1.2166666666666666], [1.68512358E12, 0.2], [1.68512388E12, 0.6666666666666666], [1.68512442E12, 1.0333333333333334], [1.68512376E12, 0.5], [1.68512382E12, 0.4], [1.68512412E12, 1.15], [1.6851237E12, 0.48333333333333334], [1.685124E12, 1.05], [1.68512406E12, 0.8833333333333333], [1.68512436E12, 2.783333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68512442E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68512358E12, "maxY": 1.4, "series": [{"data": [[1.68512394E12, 0.5], [1.68512424E12, 0.8666666666666667], [1.6851243E12, 0.9666666666666667], [1.68512364E12, 0.36666666666666664], [1.68512418E12, 1.1666666666666667], [1.68512448E12, 0.08333333333333333], [1.68512358E12, 0.15], [1.68512388E12, 0.6666666666666666], [1.68512442E12, 0.7166666666666667], [1.68512376E12, 0.45], [1.68512382E12, 0.36666666666666664], [1.68512412E12, 0.9833333333333333], [1.6851237E12, 0.4666666666666667], [1.685124E12, 0.2833333333333333], [1.68512406E12, 0.5], [1.68512436E12, 0.9833333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68512436E12, 0.13333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68512394E12, 0.48333333333333334], [1.68512442E12, 0.5], [1.6851243E12, 0.2833333333333333], [1.685124E12, 0.6833333333333333], [1.68512406E12, 0.3333333333333333], [1.68512436E12, 1.4]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68512442E12, 0.08333333333333333], [1.68512424E12, 0.1], [1.685124E12, 0.16666666666666666], [1.68512406E12, 0.06666666666666667], [1.68512436E12, 0.25]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68512448E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68512358E12, "maxY": 1.25, "series": [{"data": [[1.68512394E12, 0.3], [1.68512424E12, 0.48333333333333334], [1.6851243E12, 0.5166666666666667], [1.68512364E12, 0.2], [1.68512418E12, 0.6], [1.68512358E12, 0.1], [1.68512388E12, 0.3333333333333333], [1.68512442E12, 0.2], [1.68512376E12, 0.25], [1.68512382E12, 0.2], [1.68512412E12, 0.5166666666666667], [1.6851237E12, 0.23333333333333334], [1.685124E12, 0.2], [1.68512406E12, 0.3], [1.68512436E12, 0.8166666666666667]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68512394E12, 0.21666666666666667], [1.68512442E12, 0.3], [1.6851243E12, 0.13333333333333333], [1.685124E12, 0.38333333333333336], [1.68512406E12, 0.15], [1.68512436E12, 0.5833333333333334]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68512394E12, 0.26666666666666666], [1.68512442E12, 0.2833333333333333], [1.68512424E12, 0.1], [1.6851243E12, 0.15], [1.685124E12, 0.4666666666666667], [1.68512406E12, 0.25], [1.68512436E12, 1.2]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68512394E12, 0.2], [1.68512424E12, 0.35], [1.6851243E12, 0.45], [1.68512364E12, 0.23333333333333334], [1.68512418E12, 0.6], [1.68512358E12, 0.05], [1.68512388E12, 0.2833333333333333], [1.68512442E12, 0.35], [1.68512376E12, 0.2], [1.68512382E12, 0.21666666666666667], [1.68512412E12, 0.5], [1.6851237E12, 0.16666666666666666], [1.685124E12, 0.03333333333333333], [1.68512406E12, 0.03333333333333333], [1.68512436E12, 0.11666666666666667]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68512394E12, 0.26666666666666666], [1.68512442E12, 0.5], [1.68512424E12, 0.1], [1.6851243E12, 0.18333333333333332], [1.685124E12, 0.6], [1.68512406E12, 0.3333333333333333], [1.68512436E12, 1.25]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68512394E12, 0.2], [1.68512424E12, 0.38333333333333336], [1.6851243E12, 0.45], [1.68512364E12, 0.16666666666666666], [1.68512418E12, 0.5666666666666667], [1.68512448E12, 0.08333333333333333], [1.68512358E12, 0.05], [1.68512388E12, 0.3333333333333333], [1.68512442E12, 0.5166666666666667], [1.68512376E12, 0.2], [1.68512382E12, 0.16666666666666666], [1.68512412E12, 0.4666666666666667], [1.6851237E12, 0.23333333333333334], [1.685124E12, 0.08333333333333333], [1.68512406E12, 0.2], [1.68512436E12, 0.16666666666666666]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68512448E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.68512358E12, "maxY": 3.033333333333333, "series": [{"data": [[1.68512394E12, 0.7], [1.68512424E12, 1.2166666666666666], [1.6851243E12, 1.4166666666666667], [1.68512364E12, 0.6], [1.68512418E12, 1.7666666666666666], [1.68512448E12, 0.08333333333333333], [1.68512358E12, 0.2], [1.68512388E12, 0.95], [1.68512442E12, 1.0666666666666667], [1.68512376E12, 0.65], [1.68512382E12, 0.5833333333333334], [1.68512412E12, 1.4833333333333334], [1.6851237E12, 0.6333333333333333], [1.685124E12, 0.31666666666666665], [1.68512406E12, 0.5333333333333333], [1.68512436E12, 1.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68512394E12, 0.75], [1.68512442E12, 1.0833333333333333], [1.68512424E12, 0.2], [1.6851243E12, 0.4666666666666667], [1.685124E12, 1.45], [1.68512406E12, 0.7333333333333333], [1.68512436E12, 3.033333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68512448E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

