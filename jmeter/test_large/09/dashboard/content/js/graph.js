/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 112.0, "minX": 0.0, "maxY": 60356.0, "series": [{"data": [[0.0, 249.0], [0.1, 249.0], [0.2, 249.0], [0.3, 258.0], [0.4, 258.0], [0.5, 262.0], [0.6, 262.0], [0.7, 331.0], [0.8, 331.0], [0.9, 334.0], [1.0, 334.0], [1.1, 336.0], [1.2, 336.0], [1.3, 337.0], [1.4, 337.0], [1.5, 338.0], [1.6, 338.0], [1.7, 342.0], [1.8, 342.0], [1.9, 342.0], [2.0, 342.0], [2.1, 343.0], [2.2, 343.0], [2.3, 343.0], [2.4, 343.0], [2.5, 344.0], [2.6, 344.0], [2.7, 345.0], [2.8, 345.0], [2.9, 345.0], [3.0, 345.0], [3.1, 346.0], [3.2, 346.0], [3.3, 347.0], [3.4, 347.0], [3.5, 349.0], [3.6, 349.0], [3.7, 350.0], [3.8, 350.0], [3.9, 350.0], [4.0, 350.0], [4.1, 352.0], [4.2, 352.0], [4.3, 352.0], [4.4, 352.0], [4.5, 353.0], [4.6, 353.0], [4.7, 353.0], [4.8, 353.0], [4.9, 353.0], [5.0, 353.0], [5.1, 354.0], [5.2, 354.0], [5.3, 354.0], [5.4, 354.0], [5.5, 354.0], [5.6, 354.0], [5.7, 354.0], [5.8, 354.0], [5.9, 354.0], [6.0, 354.0], [6.1, 355.0], [6.2, 355.0], [6.3, 355.0], [6.4, 355.0], [6.5, 355.0], [6.6, 355.0], [6.7, 356.0], [6.8, 356.0], [6.9, 356.0], [7.0, 356.0], [7.1, 357.0], [7.2, 357.0], [7.3, 358.0], [7.4, 358.0], [7.5, 358.0], [7.6, 358.0], [7.7, 359.0], [7.8, 359.0], [7.9, 359.0], [8.0, 359.0], [8.1, 360.0], [8.2, 360.0], [8.3, 361.0], [8.4, 361.0], [8.5, 361.0], [8.6, 361.0], [8.7, 361.0], [8.8, 361.0], [8.9, 362.0], [9.0, 362.0], [9.1, 362.0], [9.2, 362.0], [9.3, 362.0], [9.4, 362.0], [9.5, 363.0], [9.6, 363.0], [9.7, 364.0], [9.8, 364.0], [9.9, 365.0], [10.0, 365.0], [10.1, 366.0], [10.2, 366.0], [10.3, 368.0], [10.4, 368.0], [10.5, 368.0], [10.6, 368.0], [10.7, 368.0], [10.8, 368.0], [10.9, 370.0], [11.0, 370.0], [11.1, 370.0], [11.2, 370.0], [11.3, 370.0], [11.4, 370.0], [11.5, 374.0], [11.6, 374.0], [11.7, 376.0], [11.8, 376.0], [11.9, 381.0], [12.0, 381.0], [12.1, 381.0], [12.2, 381.0], [12.3, 382.0], [12.4, 382.0], [12.5, 389.0], [12.6, 389.0], [12.7, 389.0], [12.8, 398.0], [12.9, 398.0], [13.0, 399.0], [13.1, 399.0], [13.2, 400.0], [13.3, 400.0], [13.4, 409.0], [13.5, 409.0], [13.6, 413.0], [13.7, 413.0], [13.8, 670.0], [13.9, 670.0], [14.0, 1239.0], [14.1, 1239.0], [14.2, 4332.0], [14.3, 4332.0], [14.4, 4349.0], [14.5, 4349.0], [14.6, 4359.0], [14.7, 4359.0], [14.8, 4365.0], [14.9, 4365.0], [15.0, 4393.0], [15.1, 4393.0], [15.2, 4711.0], [15.3, 4711.0], [15.4, 4821.0], [15.5, 4821.0], [15.6, 4979.0], [15.7, 4979.0], [15.8, 4992.0], [15.9, 4992.0], [16.0, 5149.0], [16.1, 5149.0], [16.2, 5267.0], [16.3, 5267.0], [16.4, 5274.0], [16.5, 5274.0], [16.6, 5283.0], [16.7, 5283.0], [16.8, 5315.0], [16.9, 5315.0], [17.0, 5326.0], [17.1, 5326.0], [17.2, 5334.0], [17.3, 5334.0], [17.4, 5351.0], [17.5, 5351.0], [17.6, 5352.0], [17.7, 5352.0], [17.8, 5375.0], [17.9, 5375.0], [18.0, 5398.0], [18.1, 5398.0], [18.2, 5409.0], [18.3, 5409.0], [18.4, 5429.0], [18.5, 5429.0], [18.6, 5437.0], [18.7, 5437.0], [18.8, 5455.0], [18.9, 5455.0], [19.0, 5461.0], [19.1, 5461.0], [19.2, 5487.0], [19.3, 5487.0], [19.4, 5545.0], [19.5, 5545.0], [19.6, 5566.0], [19.7, 5566.0], [19.8, 5607.0], [19.9, 5607.0], [20.0, 5652.0], [20.1, 5652.0], [20.2, 5696.0], [20.3, 5696.0], [20.4, 5698.0], [20.5, 5698.0], [20.6, 5748.0], [20.7, 5748.0], [20.8, 5787.0], [20.9, 5787.0], [21.0, 5809.0], [21.1, 5809.0], [21.2, 5811.0], [21.3, 5811.0], [21.4, 5873.0], [21.5, 5873.0], [21.6, 5926.0], [21.7, 5926.0], [21.8, 5977.0], [21.9, 5977.0], [22.0, 6013.0], [22.1, 6013.0], [22.2, 6028.0], [22.3, 6028.0], [22.4, 6032.0], [22.5, 6032.0], [22.6, 6056.0], [22.7, 6056.0], [22.8, 6080.0], [22.9, 6080.0], [23.0, 6195.0], [23.1, 6195.0], [23.2, 6384.0], [23.3, 6384.0], [23.4, 6399.0], [23.5, 6399.0], [23.6, 6439.0], [23.7, 6439.0], [23.8, 6445.0], [23.9, 6445.0], [24.0, 6567.0], [24.1, 6567.0], [24.2, 6583.0], [24.3, 6583.0], [24.4, 6621.0], [24.5, 6621.0], [24.6, 6638.0], [24.7, 6638.0], [24.8, 6673.0], [24.9, 6673.0], [25.0, 6673.0], [25.1, 6724.0], [25.2, 6724.0], [25.3, 6763.0], [25.4, 6763.0], [25.5, 6925.0], [25.6, 6925.0], [25.7, 7529.0], [25.8, 7529.0], [25.9, 7534.0], [26.0, 7534.0], [26.1, 7782.0], [26.2, 7782.0], [26.3, 8251.0], [26.4, 8251.0], [26.5, 8344.0], [26.6, 8344.0], [26.7, 8382.0], [26.8, 8382.0], [26.9, 8389.0], [27.0, 8389.0], [27.1, 8394.0], [27.2, 8394.0], [27.3, 8496.0], [27.4, 8496.0], [27.5, 8592.0], [27.6, 8592.0], [27.7, 8601.0], [27.8, 8601.0], [27.9, 8616.0], [28.0, 8616.0], [28.1, 8651.0], [28.2, 8651.0], [28.3, 8735.0], [28.4, 8735.0], [28.5, 8764.0], [28.6, 8764.0], [28.7, 8771.0], [28.8, 8771.0], [28.9, 8880.0], [29.0, 8880.0], [29.1, 8903.0], [29.2, 8903.0], [29.3, 8921.0], [29.4, 8921.0], [29.5, 9012.0], [29.6, 9012.0], [29.7, 9102.0], [29.8, 9102.0], [29.9, 9193.0], [30.0, 9193.0], [30.1, 9199.0], [30.2, 9199.0], [30.3, 9302.0], [30.4, 9302.0], [30.5, 9495.0], [30.6, 9495.0], [30.7, 9547.0], [30.8, 9547.0], [30.9, 9768.0], [31.0, 9768.0], [31.1, 9926.0], [31.2, 9926.0], [31.3, 10002.0], [31.4, 10002.0], [31.5, 10039.0], [31.6, 10039.0], [31.7, 10126.0], [31.8, 10126.0], [31.9, 10150.0], [32.0, 10150.0], [32.1, 10212.0], [32.2, 10212.0], [32.3, 10323.0], [32.4, 10323.0], [32.5, 10342.0], [32.6, 10342.0], [32.7, 10398.0], [32.8, 10398.0], [32.9, 10423.0], [33.0, 10423.0], [33.1, 10478.0], [33.2, 10478.0], [33.3, 10636.0], [33.4, 10636.0], [33.5, 10669.0], [33.6, 10669.0], [33.7, 10861.0], [33.8, 10861.0], [33.9, 10878.0], [34.0, 10878.0], [34.1, 11058.0], [34.2, 11058.0], [34.3, 11062.0], [34.4, 11062.0], [34.5, 11178.0], [34.6, 11178.0], [34.7, 11201.0], [34.8, 11201.0], [34.9, 11279.0], [35.0, 11279.0], [35.1, 11418.0], [35.2, 11418.0], [35.3, 11512.0], [35.4, 11512.0], [35.5, 11593.0], [35.6, 11593.0], [35.7, 11673.0], [35.8, 11673.0], [35.9, 11879.0], [36.0, 11879.0], [36.1, 11886.0], [36.2, 11886.0], [36.3, 11888.0], [36.4, 11888.0], [36.5, 12005.0], [36.6, 12005.0], [36.7, 12050.0], [36.8, 12050.0], [36.9, 12268.0], [37.0, 12268.0], [37.1, 12307.0], [37.2, 12307.0], [37.3, 12432.0], [37.4, 12432.0], [37.5, 12432.0], [37.6, 12541.0], [37.7, 12541.0], [37.8, 12637.0], [37.9, 12637.0], [38.0, 12722.0], [38.1, 12722.0], [38.2, 12801.0], [38.3, 12801.0], [38.4, 12894.0], [38.5, 12894.0], [38.6, 12932.0], [38.7, 12932.0], [38.8, 12956.0], [38.9, 12956.0], [39.0, 13075.0], [39.1, 13075.0], [39.2, 13179.0], [39.3, 13179.0], [39.4, 13189.0], [39.5, 13189.0], [39.6, 13193.0], [39.7, 13193.0], [39.8, 13234.0], [39.9, 13234.0], [40.0, 13290.0], [40.1, 13290.0], [40.2, 13299.0], [40.3, 13299.0], [40.4, 13493.0], [40.5, 13493.0], [40.6, 13536.0], [40.7, 13536.0], [40.8, 13721.0], [40.9, 13721.0], [41.0, 13873.0], [41.1, 13873.0], [41.2, 13886.0], [41.3, 13886.0], [41.4, 13947.0], [41.5, 13947.0], [41.6, 13958.0], [41.7, 13958.0], [41.8, 13970.0], [41.9, 13970.0], [42.0, 13995.0], [42.1, 13995.0], [42.2, 14229.0], [42.3, 14229.0], [42.4, 14317.0], [42.5, 14317.0], [42.6, 14366.0], [42.7, 14366.0], [42.8, 14390.0], [42.9, 14390.0], [43.0, 14423.0], [43.1, 14423.0], [43.2, 14605.0], [43.3, 14605.0], [43.4, 14692.0], [43.5, 14692.0], [43.6, 14721.0], [43.7, 14721.0], [43.8, 14723.0], [43.9, 14723.0], [44.0, 14739.0], [44.1, 14739.0], [44.2, 14816.0], [44.3, 14816.0], [44.4, 14874.0], [44.5, 14874.0], [44.6, 14877.0], [44.7, 14877.0], [44.8, 14928.0], [44.9, 14928.0], [45.0, 14932.0], [45.1, 14932.0], [45.2, 15190.0], [45.3, 15190.0], [45.4, 15319.0], [45.5, 15319.0], [45.6, 15376.0], [45.7, 15376.0], [45.8, 15462.0], [45.9, 15462.0], [46.0, 15561.0], [46.1, 15561.0], [46.2, 15628.0], [46.3, 15628.0], [46.4, 15706.0], [46.5, 15706.0], [46.6, 15809.0], [46.7, 15809.0], [46.8, 15872.0], [46.9, 15872.0], [47.0, 15877.0], [47.1, 15877.0], [47.2, 16053.0], [47.3, 16053.0], [47.4, 16109.0], [47.5, 16109.0], [47.6, 16119.0], [47.7, 16119.0], [47.8, 16329.0], [47.9, 16329.0], [48.0, 16620.0], [48.1, 16620.0], [48.2, 16628.0], [48.3, 16628.0], [48.4, 16631.0], [48.5, 16631.0], [48.6, 16642.0], [48.7, 16642.0], [48.8, 16780.0], [48.9, 16780.0], [49.0, 16814.0], [49.1, 16814.0], [49.2, 16882.0], [49.3, 16882.0], [49.4, 16919.0], [49.5, 16919.0], [49.6, 16924.0], [49.7, 16924.0], [49.8, 16933.0], [49.9, 16933.0], [50.0, 16933.0], [50.1, 16954.0], [50.2, 16954.0], [50.3, 17042.0], [50.4, 17042.0], [50.5, 17061.0], [50.6, 17061.0], [50.7, 17090.0], [50.8, 17090.0], [50.9, 17116.0], [51.0, 17116.0], [51.1, 17168.0], [51.2, 17168.0], [51.3, 17223.0], [51.4, 17223.0], [51.5, 17380.0], [51.6, 17380.0], [51.7, 17820.0], [51.8, 17820.0], [51.9, 17874.0], [52.0, 17874.0], [52.1, 17879.0], [52.2, 17879.0], [52.3, 17915.0], [52.4, 17915.0], [52.5, 17981.0], [52.6, 17981.0], [52.7, 18026.0], [52.8, 18026.0], [52.9, 18057.0], [53.0, 18057.0], [53.1, 18083.0], [53.2, 18083.0], [53.3, 18160.0], [53.4, 18160.0], [53.5, 18230.0], [53.6, 18230.0], [53.7, 18287.0], [53.8, 18287.0], [53.9, 18314.0], [54.0, 18314.0], [54.1, 18413.0], [54.2, 18413.0], [54.3, 18470.0], [54.4, 18470.0], [54.5, 18503.0], [54.6, 18503.0], [54.7, 18594.0], [54.8, 18594.0], [54.9, 18602.0], [55.0, 18602.0], [55.1, 18619.0], [55.2, 18619.0], [55.3, 18621.0], [55.4, 18621.0], [55.5, 18689.0], [55.6, 18689.0], [55.7, 18772.0], [55.8, 18772.0], [55.9, 18803.0], [56.0, 18803.0], [56.1, 18853.0], [56.2, 18853.0], [56.3, 18927.0], [56.4, 18927.0], [56.5, 19155.0], [56.6, 19155.0], [56.7, 19158.0], [56.8, 19158.0], [56.9, 19272.0], [57.0, 19272.0], [57.1, 19378.0], [57.2, 19378.0], [57.3, 19654.0], [57.4, 19654.0], [57.5, 19666.0], [57.6, 19666.0], [57.7, 19670.0], [57.8, 19670.0], [57.9, 19764.0], [58.0, 19764.0], [58.1, 19824.0], [58.2, 19824.0], [58.3, 19843.0], [58.4, 19843.0], [58.5, 19861.0], [58.6, 19861.0], [58.7, 19952.0], [58.8, 19952.0], [58.9, 19980.0], [59.0, 19980.0], [59.1, 20019.0], [59.2, 20019.0], [59.3, 20339.0], [59.4, 20339.0], [59.5, 20422.0], [59.6, 20422.0], [59.7, 20529.0], [59.8, 20529.0], [59.9, 20604.0], [60.0, 20604.0], [60.1, 20698.0], [60.2, 20698.0], [60.3, 20745.0], [60.4, 20745.0], [60.5, 21036.0], [60.6, 21036.0], [60.7, 21067.0], [60.8, 21067.0], [60.9, 21145.0], [61.0, 21145.0], [61.1, 21159.0], [61.2, 21159.0], [61.3, 21476.0], [61.4, 21476.0], [61.5, 21531.0], [61.6, 21531.0], [61.7, 21664.0], [61.8, 21664.0], [61.9, 21789.0], [62.0, 21789.0], [62.1, 21865.0], [62.2, 21865.0], [62.3, 21885.0], [62.4, 21885.0], [62.5, 21885.0], [62.6, 21891.0], [62.7, 21891.0], [62.8, 22076.0], [62.9, 22076.0], [63.0, 22128.0], [63.1, 22128.0], [63.2, 22182.0], [63.3, 22182.0], [63.4, 22303.0], [63.5, 22303.0], [63.6, 22413.0], [63.7, 22413.0], [63.8, 22431.0], [63.9, 22431.0], [64.0, 22599.0], [64.1, 22599.0], [64.2, 22838.0], [64.3, 22838.0], [64.4, 23078.0], [64.5, 23078.0], [64.6, 23087.0], [64.7, 23087.0], [64.8, 23135.0], [64.9, 23135.0], [65.0, 23187.0], [65.1, 23187.0], [65.2, 23288.0], [65.3, 23288.0], [65.4, 23393.0], [65.5, 23393.0], [65.6, 23437.0], [65.7, 23437.0], [65.8, 23545.0], [65.9, 23545.0], [66.0, 23612.0], [66.1, 23612.0], [66.2, 23794.0], [66.3, 23794.0], [66.4, 23898.0], [66.5, 23898.0], [66.6, 24050.0], [66.7, 24050.0], [66.8, 24370.0], [66.9, 24370.0], [67.0, 24466.0], [67.1, 24466.0], [67.2, 24480.0], [67.3, 24480.0], [67.4, 24557.0], [67.5, 24557.0], [67.6, 24632.0], [67.7, 24632.0], [67.8, 24701.0], [67.9, 24701.0], [68.0, 24705.0], [68.1, 24705.0], [68.2, 24807.0], [68.3, 24807.0], [68.4, 24994.0], [68.5, 24994.0], [68.6, 25081.0], [68.7, 25081.0], [68.8, 25128.0], [68.9, 25128.0], [69.0, 25170.0], [69.1, 25170.0], [69.2, 25406.0], [69.3, 25406.0], [69.4, 25556.0], [69.5, 25556.0], [69.6, 25713.0], [69.7, 25713.0], [69.8, 25822.0], [69.9, 25822.0], [70.0, 26203.0], [70.1, 26203.0], [70.2, 26359.0], [70.3, 26359.0], [70.4, 26382.0], [70.5, 26382.0], [70.6, 26425.0], [70.7, 26425.0], [70.8, 26427.0], [70.9, 26427.0], [71.0, 26460.0], [71.1, 26460.0], [71.2, 26525.0], [71.3, 26525.0], [71.4, 26600.0], [71.5, 26600.0], [71.6, 26608.0], [71.7, 26608.0], [71.8, 26953.0], [71.9, 26953.0], [72.0, 27121.0], [72.1, 27121.0], [72.2, 27392.0], [72.3, 27392.0], [72.4, 27528.0], [72.5, 27528.0], [72.6, 27565.0], [72.7, 27565.0], [72.8, 27796.0], [72.9, 27796.0], [73.0, 27837.0], [73.1, 27837.0], [73.2, 27896.0], [73.3, 27896.0], [73.4, 28052.0], [73.5, 28052.0], [73.6, 28487.0], [73.7, 28487.0], [73.8, 28658.0], [73.9, 28658.0], [74.0, 28845.0], [74.1, 28845.0], [74.2, 29261.0], [74.3, 29261.0], [74.4, 29320.0], [74.5, 29320.0], [74.6, 29389.0], [74.7, 29389.0], [74.8, 29406.0], [74.9, 29406.0], [75.0, 29406.0], [75.1, 29433.0], [75.2, 29433.0], [75.3, 29471.0], [75.4, 29471.0], [75.5, 29886.0], [75.6, 29886.0], [75.7, 29927.0], [75.8, 29927.0], [75.9, 30136.0], [76.0, 30136.0], [76.1, 30632.0], [76.2, 30632.0], [76.3, 30649.0], [76.4, 30649.0], [76.5, 30716.0], [76.6, 30716.0], [76.7, 30730.0], [76.8, 30730.0], [76.9, 30804.0], [77.0, 30804.0], [77.1, 30885.0], [77.2, 30885.0], [77.3, 30983.0], [77.4, 30983.0], [77.5, 31210.0], [77.6, 31210.0], [77.7, 31296.0], [77.8, 31296.0], [77.9, 31343.0], [78.0, 31343.0], [78.1, 31395.0], [78.2, 31395.0], [78.3, 31477.0], [78.4, 31477.0], [78.5, 31831.0], [78.6, 31831.0], [78.7, 31920.0], [78.8, 31920.0], [78.9, 32129.0], [79.0, 32129.0], [79.1, 32251.0], [79.2, 32251.0], [79.3, 33213.0], [79.4, 33213.0], [79.5, 33768.0], [79.6, 33768.0], [79.7, 33921.0], [79.8, 33921.0], [79.9, 34115.0], [80.0, 34115.0], [80.1, 34300.0], [80.2, 34300.0], [80.3, 34338.0], [80.4, 34338.0], [80.5, 34518.0], [80.6, 34518.0], [80.7, 34755.0], [80.8, 34755.0], [80.9, 34800.0], [81.0, 34800.0], [81.1, 34814.0], [81.2, 34814.0], [81.3, 34930.0], [81.4, 34930.0], [81.5, 35286.0], [81.6, 35286.0], [81.7, 35422.0], [81.8, 35422.0], [81.9, 35677.0], [82.0, 35677.0], [82.1, 35760.0], [82.2, 35760.0], [82.3, 36079.0], [82.4, 36079.0], [82.5, 36348.0], [82.6, 36348.0], [82.7, 36756.0], [82.8, 36756.0], [82.9, 37021.0], [83.0, 37021.0], [83.1, 37500.0], [83.2, 37500.0], [83.3, 37548.0], [83.4, 37548.0], [83.5, 37727.0], [83.6, 37727.0], [83.7, 37834.0], [83.8, 37834.0], [83.9, 38413.0], [84.0, 38413.0], [84.1, 38515.0], [84.2, 38515.0], [84.3, 38652.0], [84.4, 38652.0], [84.5, 38872.0], [84.6, 38872.0], [84.7, 38991.0], [84.8, 38991.0], [84.9, 39758.0], [85.0, 39758.0], [85.1, 40244.0], [85.2, 40244.0], [85.3, 40428.0], [85.4, 40428.0], [85.5, 40645.0], [85.6, 40645.0], [85.7, 40775.0], [85.8, 40775.0], [85.9, 40888.0], [86.0, 40888.0], [86.1, 41556.0], [86.2, 41556.0], [86.3, 41596.0], [86.4, 41596.0], [86.5, 41827.0], [86.6, 41827.0], [86.7, 41858.0], [86.8, 41858.0], [86.9, 41895.0], [87.0, 41895.0], [87.1, 41899.0], [87.2, 41899.0], [87.3, 41966.0], [87.4, 41966.0], [87.5, 41966.0], [87.6, 42602.0], [87.7, 42602.0], [87.8, 42626.0], [87.9, 42626.0], [88.0, 43244.0], [88.1, 43244.0], [88.2, 43274.0], [88.3, 43274.0], [88.4, 43378.0], [88.5, 43378.0], [88.6, 43690.0], [88.7, 43690.0], [88.8, 44766.0], [88.9, 44766.0], [89.0, 44948.0], [89.1, 44948.0], [89.2, 45028.0], [89.3, 45028.0], [89.4, 45212.0], [89.5, 45212.0], [89.6, 45228.0], [89.7, 45228.0], [89.8, 45409.0], [89.9, 45409.0], [90.0, 45590.0], [90.1, 45590.0], [90.2, 45893.0], [90.3, 45893.0], [90.4, 46025.0], [90.5, 46025.0], [90.6, 46072.0], [90.7, 46072.0], [90.8, 46412.0], [90.9, 46412.0], [91.0, 46687.0], [91.1, 46687.0], [91.2, 46841.0], [91.3, 46841.0], [91.4, 47058.0], [91.5, 47058.0], [91.6, 47135.0], [91.7, 47135.0], [91.8, 47379.0], [91.9, 47379.0], [92.0, 47403.0], [92.1, 47403.0], [92.2, 47855.0], [92.3, 47855.0], [92.4, 47933.0], [92.5, 47933.0], [92.6, 48076.0], [92.7, 48076.0], [92.8, 48423.0], [92.9, 48423.0], [93.0, 48665.0], [93.1, 48665.0], [93.2, 48798.0], [93.3, 48798.0], [93.4, 48870.0], [93.5, 48870.0], [93.6, 49016.0], [93.7, 49016.0], [93.8, 49410.0], [93.9, 49410.0], [94.0, 49589.0], [94.1, 49589.0], [94.2, 49775.0], [94.3, 49775.0], [94.4, 50038.0], [94.5, 50038.0], [94.6, 50141.0], [94.7, 50141.0], [94.8, 50203.0], [94.9, 50203.0], [95.0, 50917.0], [95.1, 50917.0], [95.2, 51226.0], [95.3, 51226.0], [95.4, 51570.0], [95.5, 51570.0], [95.6, 52048.0], [95.7, 52048.0], [95.8, 52163.0], [95.9, 52163.0], [96.0, 52382.0], [96.1, 52382.0], [96.2, 53215.0], [96.3, 53215.0], [96.4, 53908.0], [96.5, 53908.0], [96.6, 54391.0], [96.7, 54391.0], [96.8, 54836.0], [96.9, 54836.0], [97.0, 55369.0], [97.1, 55369.0], [97.2, 55446.0], [97.3, 55446.0], [97.4, 55833.0], [97.5, 55833.0], [97.6, 56478.0], [97.7, 56478.0], [97.8, 56713.0], [97.9, 56713.0], [98.0, 57044.0], [98.1, 57044.0], [98.2, 57073.0], [98.3, 57073.0], [98.4, 58250.0], [98.5, 58250.0], [98.6, 58256.0], [98.7, 58256.0], [98.8, 58394.0], [98.9, 58394.0], [99.0, 58663.0], [99.1, 58663.0], [99.2, 59011.0], [99.3, 59011.0], [99.4, 60027.0], [99.5, 60027.0], [99.6, 60155.0], [99.7, 60155.0], [99.8, 60356.0], [99.9, 60356.0], [100.0, 60356.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 112.0], [0.1, 112.0], [0.2, 112.0], [0.3, 112.0], [0.4, 112.0], [0.5, 113.0], [0.6, 113.0], [0.7, 114.0], [0.8, 114.0], [0.9, 114.0], [1.0, 114.0], [1.1, 114.0], [1.2, 114.0], [1.3, 114.0], [1.4, 114.0], [1.5, 114.0], [1.6, 114.0], [1.7, 114.0], [1.8, 114.0], [1.9, 115.0], [2.0, 115.0], [2.1, 115.0], [2.2, 115.0], [2.3, 115.0], [2.4, 115.0], [2.5, 115.0], [2.6, 115.0], [2.7, 116.0], [2.8, 116.0], [2.9, 116.0], [3.0, 116.0], [3.1, 117.0], [3.2, 117.0], [3.3, 117.0], [3.4, 117.0], [3.5, 117.0], [3.6, 117.0], [3.7, 118.0], [3.8, 118.0], [3.9, 118.0], [4.0, 118.0], [4.1, 118.0], [4.2, 118.0], [4.3, 119.0], [4.4, 119.0], [4.5, 119.0], [4.6, 119.0], [4.7, 119.0], [4.8, 119.0], [4.9, 119.0], [5.0, 119.0], [5.1, 119.0], [5.2, 119.0], [5.3, 119.0], [5.4, 119.0], [5.5, 119.0], [5.6, 119.0], [5.7, 120.0], [5.8, 120.0], [5.9, 120.0], [6.0, 120.0], [6.1, 120.0], [6.2, 120.0], [6.3, 120.0], [6.4, 120.0], [6.5, 120.0], [6.6, 120.0], [6.7, 120.0], [6.8, 120.0], [6.9, 120.0], [7.0, 120.0], [7.1, 120.0], [7.2, 121.0], [7.3, 121.0], [7.4, 121.0], [7.5, 121.0], [7.6, 121.0], [7.7, 121.0], [7.8, 121.0], [7.9, 121.0], [8.0, 121.0], [8.1, 121.0], [8.2, 122.0], [8.3, 122.0], [8.4, 122.0], [8.5, 122.0], [8.6, 122.0], [8.7, 122.0], [8.8, 122.0], [8.9, 122.0], [9.0, 122.0], [9.1, 122.0], [9.2, 123.0], [9.3, 123.0], [9.4, 123.0], [9.5, 123.0], [9.6, 123.0], [9.7, 123.0], [9.8, 123.0], [9.9, 123.0], [10.0, 124.0], [10.1, 124.0], [10.2, 124.0], [10.3, 124.0], [10.4, 125.0], [10.5, 125.0], [10.6, 125.0], [10.7, 125.0], [10.8, 125.0], [10.9, 125.0], [11.0, 125.0], [11.1, 125.0], [11.2, 126.0], [11.3, 126.0], [11.4, 126.0], [11.5, 126.0], [11.6, 128.0], [11.7, 128.0], [11.8, 128.0], [11.9, 128.0], [12.0, 128.0], [12.1, 128.0], [12.2, 131.0], [12.3, 131.0], [12.4, 132.0], [12.5, 132.0], [12.6, 132.0], [12.7, 133.0], [12.8, 133.0], [12.9, 136.0], [13.0, 136.0], [13.1, 155.0], [13.2, 155.0], [13.3, 1000.0], [13.4, 1000.0], [13.5, 4043.0], [13.6, 4043.0], [13.7, 4120.0], [13.8, 4120.0], [13.9, 4126.0], [14.0, 4126.0], [14.1, 4130.0], [14.2, 4130.0], [14.3, 4159.0], [14.4, 4159.0], [14.5, 4462.0], [14.6, 4462.0], [14.7, 4585.0], [14.8, 4585.0], [14.9, 4744.0], [15.0, 4744.0], [15.1, 4755.0], [15.2, 4755.0], [15.3, 4917.0], [15.4, 4917.0], [15.5, 5019.0], [15.6, 5019.0], [15.7, 5029.0], [15.8, 5029.0], [15.9, 5046.0], [16.0, 5046.0], [16.1, 5067.0], [16.2, 5067.0], [16.3, 5074.0], [16.4, 5074.0], [16.5, 5095.0], [16.6, 5095.0], [16.7, 5099.0], [16.8, 5099.0], [16.9, 5119.0], [17.0, 5119.0], [17.1, 5137.0], [17.2, 5137.0], [17.3, 5146.0], [17.4, 5146.0], [17.5, 5147.0], [17.6, 5147.0], [17.7, 5193.0], [17.8, 5193.0], [17.9, 5203.0], [18.0, 5203.0], [18.1, 5211.0], [18.2, 5211.0], [18.3, 5216.0], [18.4, 5216.0], [18.5, 5224.0], [18.6, 5224.0], [18.7, 5243.0], [18.8, 5243.0], [18.9, 5243.0], [19.0, 5316.0], [19.1, 5316.0], [19.2, 5372.0], [19.3, 5372.0], [19.4, 5422.0], [19.5, 5422.0], [19.6, 5458.0], [19.7, 5458.0], [19.8, 5475.0], [19.9, 5475.0], [20.0, 5516.0], [20.1, 5516.0], [20.2, 5546.0], [20.3, 5546.0], [20.4, 5572.0], [20.5, 5572.0], [20.6, 5586.0], [20.7, 5586.0], [20.8, 5638.0], [20.9, 5638.0], [21.0, 5696.0], [21.1, 5696.0], [21.2, 5755.0], [21.3, 5755.0], [21.4, 5763.0], [21.5, 5763.0], [21.6, 5779.0], [21.7, 5779.0], [21.8, 5790.0], [21.9, 5790.0], [22.0, 5820.0], [22.1, 5820.0], [22.2, 5823.0], [22.3, 5823.0], [22.4, 5937.0], [22.5, 5937.0], [22.6, 6109.0], [22.7, 6109.0], [22.8, 6128.0], [22.9, 6128.0], [23.0, 6213.0], [23.1, 6213.0], [23.2, 6217.0], [23.3, 6217.0], [23.4, 6336.0], [23.5, 6336.0], [23.6, 6347.0], [23.7, 6347.0], [23.8, 6369.0], [23.9, 6369.0], [24.0, 6414.0], [24.1, 6414.0], [24.2, 6434.0], [24.3, 6434.0], [24.4, 6476.0], [24.5, 6476.0], [24.6, 6525.0], [24.7, 6525.0], [24.8, 6635.0], [24.9, 6635.0], [25.0, 7296.0], [25.1, 7296.0], [25.2, 7296.0], [25.3, 7302.0], [25.4, 7302.0], [25.5, 7468.0], [25.6, 7468.0], [25.7, 8022.0], [25.8, 8022.0], [25.9, 8056.0], [26.0, 8056.0], [26.1, 8098.0], [26.2, 8098.0], [26.3, 8131.0], [26.4, 8131.0], [26.5, 8152.0], [26.6, 8152.0], [26.7, 8252.0], [26.8, 8252.0], [26.9, 8360.0], [27.0, 8360.0], [27.1, 8369.0], [27.2, 8369.0], [27.3, 8377.0], [27.4, 8377.0], [27.5, 8422.0], [27.6, 8422.0], [27.7, 8479.0], [27.8, 8479.0], [27.9, 8496.0], [28.0, 8496.0], [28.1, 8534.0], [28.2, 8534.0], [28.3, 8619.0], [28.4, 8619.0], [28.5, 8661.0], [28.6, 8661.0], [28.7, 8694.0], [28.8, 8694.0], [28.9, 8785.0], [29.0, 8785.0], [29.1, 8871.0], [29.2, 8871.0], [29.3, 8947.0], [29.4, 8947.0], [29.5, 8968.0], [29.6, 8968.0], [29.7, 9063.0], [29.8, 9063.0], [29.9, 9264.0], [30.0, 9264.0], [30.1, 9305.0], [30.2, 9305.0], [30.3, 9541.0], [30.4, 9541.0], [30.5, 9683.0], [30.6, 9683.0], [30.7, 9728.0], [30.8, 9728.0], [30.9, 9794.0], [31.0, 9794.0], [31.1, 9886.0], [31.2, 9886.0], [31.3, 9886.0], [31.4, 9920.0], [31.5, 9920.0], [31.6, 9971.0], [31.7, 9971.0], [31.8, 10079.0], [31.9, 10079.0], [32.0, 10097.0], [32.1, 10097.0], [32.2, 10154.0], [32.3, 10154.0], [32.4, 10158.0], [32.5, 10158.0], [32.6, 10214.0], [32.7, 10214.0], [32.8, 10409.0], [32.9, 10409.0], [33.0, 10431.0], [33.1, 10431.0], [33.2, 10623.0], [33.3, 10623.0], [33.4, 10653.0], [33.5, 10653.0], [33.6, 10816.0], [33.7, 10816.0], [33.8, 10831.0], [33.9, 10831.0], [34.0, 10943.0], [34.1, 10943.0], [34.2, 10966.0], [34.3, 10966.0], [34.4, 11053.0], [34.5, 11053.0], [34.6, 11184.0], [34.7, 11184.0], [34.8, 11272.0], [34.9, 11272.0], [35.0, 11358.0], [35.1, 11358.0], [35.2, 11441.0], [35.3, 11441.0], [35.4, 11645.0], [35.5, 11645.0], [35.6, 11647.0], [35.7, 11647.0], [35.8, 11661.0], [35.9, 11661.0], [36.0, 11736.0], [36.1, 11736.0], [36.2, 11817.0], [36.3, 11817.0], [36.4, 12030.0], [36.5, 12030.0], [36.6, 12034.0], [36.7, 12034.0], [36.8, 12198.0], [36.9, 12198.0], [37.0, 12285.0], [37.1, 12285.0], [37.2, 12347.0], [37.3, 12347.0], [37.4, 12493.0], [37.5, 12493.0], [37.6, 12493.0], [37.7, 12565.0], [37.8, 12565.0], [37.9, 12656.0], [38.0, 12656.0], [38.1, 12699.0], [38.2, 12699.0], [38.3, 12711.0], [38.4, 12711.0], [38.5, 12826.0], [38.6, 12826.0], [38.7, 12935.0], [38.8, 12935.0], [38.9, 12941.0], [39.0, 12941.0], [39.1, 12944.0], [39.2, 12944.0], [39.3, 12983.0], [39.4, 12983.0], [39.5, 12989.0], [39.6, 12989.0], [39.7, 13001.0], [39.8, 13001.0], [39.9, 13224.0], [40.0, 13224.0], [40.1, 13255.0], [40.2, 13255.0], [40.3, 13482.0], [40.4, 13482.0], [40.5, 13652.0], [40.6, 13652.0], [40.7, 13663.0], [40.8, 13663.0], [40.9, 13688.0], [41.0, 13688.0], [41.1, 13718.0], [41.2, 13718.0], [41.3, 13723.0], [41.4, 13723.0], [41.5, 13761.0], [41.6, 13761.0], [41.7, 13977.0], [41.8, 13977.0], [41.9, 14039.0], [42.0, 14039.0], [42.1, 14081.0], [42.2, 14081.0], [42.3, 14125.0], [42.4, 14125.0], [42.5, 14182.0], [42.6, 14182.0], [42.7, 14352.0], [42.8, 14352.0], [42.9, 14433.0], [43.0, 14433.0], [43.1, 14452.0], [43.2, 14452.0], [43.3, 14494.0], [43.4, 14494.0], [43.5, 14517.0], [43.6, 14517.0], [43.7, 14549.0], [43.8, 14549.0], [43.9, 14549.0], [44.0, 14570.0], [44.1, 14570.0], [44.2, 14642.0], [44.3, 14642.0], [44.4, 14662.0], [44.5, 14662.0], [44.6, 14706.0], [44.7, 14706.0], [44.8, 14957.0], [44.9, 14957.0], [45.0, 15071.0], [45.1, 15071.0], [45.2, 15128.0], [45.3, 15128.0], [45.4, 15212.0], [45.5, 15212.0], [45.6, 15325.0], [45.7, 15325.0], [45.8, 15376.0], [45.9, 15376.0], [46.0, 15474.0], [46.1, 15474.0], [46.2, 15578.0], [46.3, 15578.0], [46.4, 15589.0], [46.5, 15589.0], [46.6, 15622.0], [46.7, 15622.0], [46.8, 15821.0], [46.9, 15821.0], [47.0, 15860.0], [47.1, 15860.0], [47.2, 15867.0], [47.3, 15867.0], [47.4, 16058.0], [47.5, 16058.0], [47.6, 16367.0], [47.7, 16367.0], [47.8, 16389.0], [47.9, 16389.0], [48.0, 16399.0], [48.1, 16399.0], [48.2, 16401.0], [48.3, 16401.0], [48.4, 16496.0], [48.5, 16496.0], [48.6, 16579.0], [48.7, 16579.0], [48.8, 16652.0], [48.9, 16652.0], [49.0, 16682.0], [49.1, 16682.0], [49.2, 16693.0], [49.3, 16693.0], [49.4, 16694.0], [49.5, 16694.0], [49.6, 16695.0], [49.7, 16695.0], [49.8, 16817.0], [49.9, 16817.0], [50.0, 16818.0], [50.1, 16818.0], [50.2, 16818.0], [50.3, 16850.0], [50.4, 16850.0], [50.5, 16891.0], [50.6, 16891.0], [50.7, 16906.0], [50.8, 16906.0], [50.9, 16971.0], [51.0, 16971.0], [51.1, 17143.0], [51.2, 17143.0], [51.3, 17593.0], [51.4, 17593.0], [51.5, 17632.0], [51.6, 17632.0], [51.7, 17645.0], [51.8, 17645.0], [51.9, 17658.0], [52.0, 17658.0], [52.1, 17740.0], [52.2, 17740.0], [52.3, 17786.0], [52.4, 17786.0], [52.5, 17829.0], [52.6, 17829.0], [52.7, 17840.0], [52.8, 17840.0], [52.9, 17910.0], [53.0, 17910.0], [53.1, 17991.0], [53.2, 17991.0], [53.3, 18055.0], [53.4, 18055.0], [53.5, 18068.0], [53.6, 18068.0], [53.7, 18178.0], [53.8, 18178.0], [53.9, 18196.0], [54.0, 18196.0], [54.1, 18274.0], [54.2, 18274.0], [54.3, 18308.0], [54.4, 18308.0], [54.5, 18329.0], [54.6, 18329.0], [54.7, 18348.0], [54.8, 18348.0], [54.9, 18392.0], [55.0, 18392.0], [55.1, 18426.0], [55.2, 18426.0], [55.3, 18514.0], [55.4, 18514.0], [55.5, 18562.0], [55.6, 18562.0], [55.7, 18565.0], [55.8, 18565.0], [55.9, 18687.0], [56.0, 18687.0], [56.1, 18915.0], [56.2, 18915.0], [56.3, 18915.0], [56.4, 18929.0], [56.5, 18929.0], [56.6, 19035.0], [56.7, 19035.0], [56.8, 19144.0], [56.9, 19144.0], [57.0, 19430.0], [57.1, 19430.0], [57.2, 19431.0], [57.3, 19431.0], [57.4, 19431.0], [57.5, 19431.0], [57.6, 19519.0], [57.7, 19519.0], [57.8, 19586.0], [57.9, 19586.0], [58.0, 19602.0], [58.1, 19602.0], [58.2, 19634.0], [58.3, 19634.0], [58.4, 19699.0], [58.5, 19699.0], [58.6, 19734.0], [58.7, 19734.0], [58.8, 19780.0], [58.9, 19780.0], [59.0, 20095.0], [59.1, 20095.0], [59.2, 20189.0], [59.3, 20189.0], [59.4, 20288.0], [59.5, 20288.0], [59.6, 20351.0], [59.7, 20351.0], [59.8, 20445.0], [59.9, 20445.0], [60.0, 20472.0], [60.1, 20472.0], [60.2, 20758.0], [60.3, 20758.0], [60.4, 20837.0], [60.5, 20837.0], [60.6, 20898.0], [60.7, 20898.0], [60.8, 20913.0], [60.9, 20913.0], [61.0, 21247.0], [61.1, 21247.0], [61.2, 21273.0], [61.3, 21273.0], [61.4, 21428.0], [61.5, 21428.0], [61.6, 21555.0], [61.7, 21555.0], [61.8, 21617.0], [61.9, 21617.0], [62.0, 21653.0], [62.1, 21653.0], [62.2, 21658.0], [62.3, 21658.0], [62.4, 21838.0], [62.5, 21838.0], [62.6, 21838.0], [62.7, 21872.0], [62.8, 21872.0], [62.9, 21924.0], [63.0, 21924.0], [63.1, 22034.0], [63.2, 22034.0], [63.3, 22175.0], [63.4, 22175.0], [63.5, 22198.0], [63.6, 22198.0], [63.7, 22357.0], [63.8, 22357.0], [63.9, 22594.0], [64.0, 22594.0], [64.1, 22837.0], [64.2, 22837.0], [64.3, 22838.0], [64.4, 22838.0], [64.5, 22887.0], [64.6, 22887.0], [64.7, 22953.0], [64.8, 22953.0], [64.9, 23059.0], [65.0, 23059.0], [65.1, 23113.0], [65.2, 23113.0], [65.3, 23209.0], [65.4, 23209.0], [65.5, 23308.0], [65.6, 23308.0], [65.7, 23373.0], [65.8, 23373.0], [65.9, 23538.0], [66.0, 23538.0], [66.1, 23653.0], [66.2, 23653.0], [66.3, 23816.0], [66.4, 23816.0], [66.5, 24116.0], [66.6, 24116.0], [66.7, 24211.0], [66.8, 24211.0], [66.9, 24239.0], [67.0, 24239.0], [67.1, 24307.0], [67.2, 24307.0], [67.3, 24383.0], [67.4, 24383.0], [67.5, 24396.0], [67.6, 24396.0], [67.7, 24454.0], [67.8, 24454.0], [67.9, 24561.0], [68.0, 24561.0], [68.1, 24760.0], [68.2, 24760.0], [68.3, 24801.0], [68.4, 24801.0], [68.5, 24872.0], [68.6, 24872.0], [68.7, 24943.0], [68.8, 24943.0], [68.9, 24943.0], [69.0, 25182.0], [69.1, 25182.0], [69.2, 25327.0], [69.3, 25327.0], [69.4, 25413.0], [69.5, 25413.0], [69.6, 25582.0], [69.7, 25582.0], [69.8, 25969.0], [69.9, 25969.0], [70.0, 26119.0], [70.1, 26119.0], [70.2, 26126.0], [70.3, 26126.0], [70.4, 26166.0], [70.5, 26166.0], [70.6, 26181.0], [70.7, 26181.0], [70.8, 26221.0], [70.9, 26221.0], [71.0, 26233.0], [71.1, 26233.0], [71.2, 26342.0], [71.3, 26342.0], [71.4, 26347.0], [71.5, 26347.0], [71.6, 26726.0], [71.7, 26726.0], [71.8, 26825.0], [71.9, 26825.0], [72.0, 27139.0], [72.1, 27139.0], [72.2, 27296.0], [72.3, 27296.0], [72.4, 27314.0], [72.5, 27314.0], [72.6, 27562.0], [72.7, 27562.0], [72.8, 27609.0], [72.9, 27609.0], [73.0, 27666.0], [73.1, 27666.0], [73.2, 27823.0], [73.3, 27823.0], [73.4, 28245.0], [73.5, 28245.0], [73.6, 28411.0], [73.7, 28411.0], [73.8, 28609.0], [73.9, 28609.0], [74.0, 29024.0], [74.1, 29024.0], [74.2, 29037.0], [74.3, 29037.0], [74.4, 29144.0], [74.5, 29144.0], [74.6, 29156.0], [74.7, 29156.0], [74.8, 29202.0], [74.9, 29202.0], [75.0, 29226.0], [75.1, 29226.0], [75.2, 29226.0], [75.3, 29646.0], [75.4, 29646.0], [75.5, 29673.0], [75.6, 29673.0], [75.7, 29893.0], [75.8, 29893.0], [75.9, 30386.0], [76.0, 30386.0], [76.1, 30415.0], [76.2, 30415.0], [76.3, 30447.0], [76.4, 30447.0], [76.5, 30461.0], [76.6, 30461.0], [76.7, 30569.0], [76.8, 30569.0], [76.9, 30648.0], [77.0, 30648.0], [77.1, 30690.0], [77.2, 30690.0], [77.3, 30982.0], [77.4, 30982.0], [77.5, 31058.0], [77.6, 31058.0], [77.7, 31104.0], [77.8, 31104.0], [77.9, 31162.0], [78.0, 31162.0], [78.1, 31209.0], [78.2, 31209.0], [78.3, 31592.0], [78.4, 31592.0], [78.5, 31694.0], [78.6, 31694.0], [78.7, 31884.0], [78.8, 31884.0], [78.9, 32021.0], [79.0, 32021.0], [79.1, 32981.0], [79.2, 32981.0], [79.3, 33538.0], [79.4, 33538.0], [79.5, 33696.0], [79.6, 33696.0], [79.7, 33890.0], [79.8, 33890.0], [79.9, 34056.0], [80.0, 34056.0], [80.1, 34085.0], [80.2, 34085.0], [80.3, 34290.0], [80.4, 34290.0], [80.5, 34486.0], [80.6, 34486.0], [80.7, 34559.0], [80.8, 34559.0], [80.9, 34562.0], [81.0, 34562.0], [81.1, 34692.0], [81.2, 34692.0], [81.3, 34692.0], [81.4, 35060.0], [81.5, 35060.0], [81.6, 35071.0], [81.7, 35071.0], [81.8, 35444.0], [81.9, 35444.0], [82.0, 35523.0], [82.1, 35523.0], [82.2, 35827.0], [82.3, 35827.0], [82.4, 36107.0], [82.5, 36107.0], [82.6, 36524.0], [82.7, 36524.0], [82.8, 36778.0], [82.9, 36778.0], [83.0, 37255.0], [83.1, 37255.0], [83.2, 37324.0], [83.3, 37324.0], [83.4, 37500.0], [83.5, 37500.0], [83.6, 37598.0], [83.7, 37598.0], [83.8, 38173.0], [83.9, 38173.0], [84.0, 38269.0], [84.1, 38269.0], [84.2, 38426.0], [84.3, 38426.0], [84.4, 38633.0], [84.5, 38633.0], [84.6, 38727.0], [84.7, 38727.0], [84.8, 39514.0], [84.9, 39514.0], [85.0, 40016.0], [85.1, 40016.0], [85.2, 40196.0], [85.3, 40196.0], [85.4, 40405.0], [85.5, 40405.0], [85.6, 40534.0], [85.7, 40534.0], [85.8, 40652.0], [85.9, 40652.0], [86.0, 41333.0], [86.1, 41333.0], [86.2, 41364.0], [86.3, 41364.0], [86.4, 41581.0], [86.5, 41581.0], [86.6, 41631.0], [86.7, 41631.0], [86.8, 41651.0], [86.9, 41651.0], [87.0, 41668.0], [87.1, 41668.0], [87.2, 41717.0], [87.3, 41717.0], [87.4, 42361.0], [87.5, 42361.0], [87.6, 42361.0], [87.7, 42373.0], [87.8, 42373.0], [87.9, 42990.0], [88.0, 42990.0], [88.1, 43019.0], [88.2, 43019.0], [88.3, 43123.0], [88.4, 43123.0], [88.5, 43451.0], [88.6, 43451.0], [88.7, 44537.0], [88.8, 44537.0], [88.9, 44707.0], [89.0, 44707.0], [89.1, 44795.0], [89.2, 44795.0], [89.3, 44929.0], [89.4, 44929.0], [89.5, 44992.0], [89.6, 44992.0], [89.7, 45159.0], [89.8, 45159.0], [89.9, 45355.0], [90.0, 45355.0], [90.1, 45659.0], [90.2, 45659.0], [90.3, 45762.0], [90.4, 45762.0], [90.5, 45831.0], [90.6, 45831.0], [90.7, 46184.0], [90.8, 46184.0], [90.9, 46454.0], [91.0, 46454.0], [91.1, 46598.0], [91.2, 46598.0], [91.3, 46813.0], [91.4, 46813.0], [91.5, 46883.0], [91.6, 46883.0], [91.7, 47137.0], [91.8, 47137.0], [91.9, 47146.0], [92.0, 47146.0], [92.1, 47626.0], [92.2, 47626.0], [92.3, 47680.0], [92.4, 47680.0], [92.5, 47832.0], [92.6, 47832.0], [92.7, 48183.0], [92.8, 48183.0], [92.9, 48429.0], [93.0, 48429.0], [93.1, 48546.0], [93.2, 48546.0], [93.3, 48620.0], [93.4, 48620.0], [93.5, 48775.0], [93.6, 48775.0], [93.7, 49184.0], [93.8, 49184.0], [93.9, 49184.0], [94.0, 49344.0], [94.1, 49344.0], [94.2, 49539.0], [94.3, 49539.0], [94.4, 49813.0], [94.5, 49813.0], [94.6, 49913.0], [94.7, 49913.0], [94.8, 49968.0], [94.9, 49968.0], [95.0, 50675.0], [95.1, 50675.0], [95.2, 50998.0], [95.3, 50998.0], [95.4, 51332.0], [95.5, 51332.0], [95.6, 51814.0], [95.7, 51814.0], [95.8, 51913.0], [95.9, 51913.0], [96.0, 52153.0], [96.1, 52153.0], [96.2, 52973.0], [96.3, 52973.0], [96.4, 53681.0], [96.5, 53681.0], [96.6, 54149.0], [96.7, 54149.0], [96.8, 54584.0], [96.9, 54584.0], [97.0, 55142.0], [97.1, 55142.0], [97.2, 55143.0], [97.3, 55143.0], [97.4, 55603.0], [97.5, 55603.0], [97.6, 56165.0], [97.7, 56165.0], [97.8, 56486.0], [97.9, 56486.0], [98.0, 56807.0], [98.1, 56807.0], [98.2, 56832.0], [98.3, 56832.0], [98.4, 58021.0], [98.5, 58021.0], [98.6, 58027.0], [98.7, 58027.0], [98.8, 58153.0], [98.9, 58153.0], [99.0, 58408.0], [99.1, 58408.0], [99.2, 58736.0], [99.3, 58736.0], [99.4, 59776.0], [99.5, 59776.0], [99.6, 59925.0], [99.7, 59925.0], [99.8, 60121.0], [99.9, 60121.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 220.0], [0.1, 220.0], [0.2, 220.0], [0.3, 221.0], [0.4, 221.0], [0.5, 222.0], [0.6, 222.0], [0.7, 222.0], [0.8, 222.0], [0.9, 222.0], [1.0, 222.0], [1.1, 223.0], [1.2, 223.0], [1.3, 223.0], [1.4, 223.0], [1.5, 223.0], [1.6, 223.0], [1.7, 223.0], [1.8, 223.0], [1.9, 223.0], [2.0, 223.0], [2.1, 223.0], [2.2, 223.0], [2.3, 223.0], [2.4, 223.0], [2.5, 223.0], [2.6, 223.0], [2.7, 223.0], [2.8, 223.0], [2.9, 224.0], [3.0, 224.0], [3.1, 224.0], [3.2, 224.0], [3.3, 224.0], [3.4, 224.0], [3.5, 224.0], [3.6, 224.0], [3.7, 224.0], [3.8, 224.0], [3.9, 224.0], [4.0, 224.0], [4.1, 224.0], [4.2, 224.0], [4.3, 225.0], [4.4, 225.0], [4.5, 225.0], [4.6, 225.0], [4.7, 225.0], [4.8, 225.0], [4.9, 225.0], [5.0, 225.0], [5.1, 225.0], [5.2, 225.0], [5.3, 225.0], [5.4, 225.0], [5.5, 225.0], [5.6, 225.0], [5.7, 225.0], [5.8, 225.0], [5.9, 226.0], [6.0, 226.0], [6.1, 226.0], [6.2, 226.0], [6.3, 226.0], [6.4, 226.0], [6.5, 226.0], [6.6, 226.0], [6.7, 226.0], [6.8, 226.0], [6.9, 226.0], [7.0, 226.0], [7.1, 226.0], [7.2, 226.0], [7.3, 226.0], [7.4, 226.0], [7.5, 227.0], [7.6, 227.0], [7.7, 227.0], [7.8, 227.0], [7.9, 227.0], [8.0, 227.0], [8.1, 227.0], [8.2, 227.0], [8.3, 227.0], [8.4, 227.0], [8.5, 227.0], [8.6, 227.0], [8.7, 227.0], [8.8, 227.0], [8.9, 227.0], [9.0, 227.0], [9.1, 227.0], [9.2, 227.0], [9.3, 227.0], [9.4, 227.0], [9.5, 227.0], [9.6, 227.0], [9.7, 227.0], [9.8, 227.0], [9.9, 227.0], [10.0, 227.0], [10.1, 227.0], [10.2, 227.0], [10.3, 227.0], [10.4, 227.0], [10.5, 227.0], [10.6, 227.0], [10.7, 227.0], [10.8, 227.0], [10.9, 227.0], [11.0, 227.0], [11.1, 227.0], [11.2, 227.0], [11.3, 227.0], [11.4, 227.0], [11.5, 227.0], [11.6, 227.0], [11.7, 228.0], [11.8, 228.0], [11.9, 228.0], [12.0, 228.0], [12.1, 228.0], [12.2, 228.0], [12.3, 228.0], [12.4, 228.0], [12.5, 228.0], [12.6, 228.0], [12.7, 228.0], [12.8, 228.0], [12.9, 228.0], [13.0, 228.0], [13.1, 228.0], [13.2, 228.0], [13.3, 228.0], [13.4, 228.0], [13.5, 228.0], [13.6, 228.0], [13.7, 228.0], [13.8, 228.0], [13.9, 228.0], [14.0, 229.0], [14.1, 229.0], [14.2, 229.0], [14.3, 229.0], [14.4, 229.0], [14.5, 229.0], [14.6, 229.0], [14.7, 229.0], [14.8, 229.0], [14.9, 229.0], [15.0, 229.0], [15.1, 229.0], [15.2, 229.0], [15.3, 229.0], [15.4, 229.0], [15.5, 229.0], [15.6, 229.0], [15.7, 229.0], [15.8, 229.0], [15.9, 229.0], [16.0, 229.0], [16.1, 229.0], [16.2, 229.0], [16.3, 229.0], [16.4, 229.0], [16.5, 229.0], [16.6, 229.0], [16.7, 229.0], [16.8, 229.0], [16.9, 229.0], [17.0, 229.0], [17.1, 229.0], [17.2, 229.0], [17.3, 229.0], [17.4, 230.0], [17.5, 230.0], [17.6, 230.0], [17.7, 230.0], [17.8, 230.0], [17.9, 230.0], [18.0, 230.0], [18.1, 230.0], [18.2, 230.0], [18.3, 230.0], [18.4, 230.0], [18.5, 230.0], [18.6, 230.0], [18.7, 230.0], [18.8, 230.0], [18.9, 230.0], [19.0, 230.0], [19.1, 230.0], [19.2, 230.0], [19.3, 230.0], [19.4, 230.0], [19.5, 230.0], [19.6, 230.0], [19.7, 230.0], [19.8, 230.0], [19.9, 230.0], [20.0, 230.0], [20.1, 230.0], [20.2, 230.0], [20.3, 230.0], [20.4, 231.0], [20.5, 231.0], [20.6, 231.0], [20.7, 231.0], [20.8, 231.0], [20.9, 231.0], [21.0, 231.0], [21.1, 231.0], [21.2, 231.0], [21.3, 231.0], [21.4, 231.0], [21.5, 231.0], [21.6, 231.0], [21.7, 231.0], [21.8, 231.0], [21.9, 231.0], [22.0, 231.0], [22.1, 231.0], [22.2, 231.0], [22.3, 231.0], [22.4, 232.0], [22.5, 232.0], [22.6, 232.0], [22.7, 232.0], [22.8, 232.0], [22.9, 232.0], [23.0, 232.0], [23.1, 232.0], [23.2, 232.0], [23.3, 232.0], [23.4, 232.0], [23.5, 232.0], [23.6, 232.0], [23.7, 232.0], [23.8, 232.0], [23.9, 232.0], [24.0, 232.0], [24.1, 232.0], [24.2, 232.0], [24.3, 232.0], [24.4, 232.0], [24.5, 232.0], [24.6, 232.0], [24.7, 232.0], [24.8, 232.0], [24.9, 232.0], [25.0, 232.0], [25.1, 232.0], [25.2, 232.0], [25.3, 232.0], [25.4, 232.0], [25.5, 233.0], [25.6, 233.0], [25.7, 233.0], [25.8, 233.0], [25.9, 233.0], [26.0, 233.0], [26.1, 233.0], [26.2, 233.0], [26.3, 233.0], [26.4, 233.0], [26.5, 233.0], [26.6, 233.0], [26.7, 233.0], [26.8, 233.0], [26.9, 233.0], [27.0, 233.0], [27.1, 233.0], [27.2, 233.0], [27.3, 233.0], [27.4, 233.0], [27.5, 233.0], [27.6, 233.0], [27.7, 233.0], [27.8, 233.0], [27.9, 233.0], [28.0, 233.0], [28.1, 233.0], [28.2, 233.0], [28.3, 234.0], [28.4, 234.0], [28.5, 234.0], [28.6, 234.0], [28.7, 234.0], [28.8, 234.0], [28.9, 234.0], [29.0, 234.0], [29.1, 234.0], [29.2, 234.0], [29.3, 234.0], [29.4, 234.0], [29.5, 234.0], [29.6, 234.0], [29.7, 234.0], [29.8, 234.0], [29.9, 234.0], [30.0, 234.0], [30.1, 234.0], [30.2, 234.0], [30.3, 234.0], [30.4, 234.0], [30.5, 234.0], [30.6, 234.0], [30.7, 234.0], [30.8, 234.0], [30.9, 234.0], [31.0, 234.0], [31.1, 234.0], [31.2, 234.0], [31.3, 234.0], [31.4, 234.0], [31.5, 234.0], [31.6, 234.0], [31.7, 234.0], [31.8, 234.0], [31.9, 234.0], [32.0, 234.0], [32.1, 235.0], [32.2, 235.0], [32.3, 235.0], [32.4, 235.0], [32.5, 235.0], [32.6, 235.0], [32.7, 235.0], [32.8, 235.0], [32.9, 235.0], [33.0, 235.0], [33.1, 235.0], [33.2, 235.0], [33.3, 235.0], [33.4, 235.0], [33.5, 235.0], [33.6, 235.0], [33.7, 235.0], [33.8, 235.0], [33.9, 235.0], [34.0, 235.0], [34.1, 235.0], [34.2, 235.0], [34.3, 235.0], [34.4, 235.0], [34.5, 235.0], [34.6, 235.0], [34.7, 235.0], [34.8, 235.0], [34.9, 236.0], [35.0, 236.0], [35.1, 236.0], [35.2, 236.0], [35.3, 236.0], [35.4, 236.0], [35.5, 236.0], [35.6, 236.0], [35.7, 236.0], [35.8, 236.0], [35.9, 236.0], [36.0, 236.0], [36.1, 236.0], [36.2, 236.0], [36.3, 236.0], [36.4, 236.0], [36.5, 236.0], [36.6, 236.0], [36.7, 236.0], [36.8, 236.0], [36.9, 236.0], [37.0, 236.0], [37.1, 236.0], [37.2, 236.0], [37.3, 236.0], [37.4, 236.0], [37.5, 236.0], [37.6, 236.0], [37.7, 236.0], [37.8, 236.0], [37.9, 236.0], [38.0, 236.0], [38.1, 236.0], [38.2, 236.0], [38.3, 236.0], [38.4, 236.0], [38.5, 236.0], [38.6, 236.0], [38.7, 236.0], [38.8, 237.0], [38.9, 237.0], [39.0, 237.0], [39.1, 237.0], [39.2, 237.0], [39.3, 237.0], [39.4, 237.0], [39.5, 237.0], [39.6, 237.0], [39.7, 237.0], [39.8, 237.0], [39.9, 237.0], [40.0, 237.0], [40.1, 237.0], [40.2, 237.0], [40.3, 237.0], [40.4, 237.0], [40.5, 237.0], [40.6, 237.0], [40.7, 237.0], [40.8, 237.0], [40.9, 237.0], [41.0, 237.0], [41.1, 237.0], [41.2, 237.0], [41.3, 237.0], [41.4, 237.0], [41.5, 237.0], [41.6, 237.0], [41.7, 237.0], [41.8, 238.0], [41.9, 238.0], [42.0, 238.0], [42.1, 238.0], [42.2, 238.0], [42.3, 238.0], [42.4, 238.0], [42.5, 238.0], [42.6, 238.0], [42.7, 238.0], [42.8, 238.0], [42.9, 238.0], [43.0, 238.0], [43.1, 238.0], [43.2, 238.0], [43.3, 238.0], [43.4, 238.0], [43.5, 238.0], [43.6, 238.0], [43.7, 238.0], [43.8, 238.0], [43.9, 238.0], [44.0, 238.0], [44.1, 238.0], [44.2, 238.0], [44.3, 238.0], [44.4, 238.0], [44.5, 238.0], [44.6, 238.0], [44.7, 238.0], [44.8, 238.0], [44.9, 238.0], [45.0, 238.0], [45.1, 238.0], [45.2, 238.0], [45.3, 238.0], [45.4, 238.0], [45.5, 238.0], [45.6, 238.0], [45.7, 238.0], [45.8, 239.0], [45.9, 239.0], [46.0, 239.0], [46.1, 239.0], [46.2, 239.0], [46.3, 239.0], [46.4, 239.0], [46.5, 239.0], [46.6, 239.0], [46.7, 239.0], [46.8, 239.0], [46.9, 239.0], [47.0, 239.0], [47.1, 239.0], [47.2, 239.0], [47.3, 239.0], [47.4, 239.0], [47.5, 239.0], [47.6, 239.0], [47.7, 239.0], [47.8, 239.0], [47.9, 239.0], [48.0, 239.0], [48.1, 239.0], [48.2, 239.0], [48.3, 239.0], [48.4, 239.0], [48.5, 239.0], [48.6, 239.0], [48.7, 239.0], [48.8, 239.0], [48.9, 239.0], [49.0, 239.0], [49.1, 239.0], [49.2, 239.0], [49.3, 239.0], [49.4, 239.0], [49.5, 239.0], [49.6, 239.0], [49.7, 239.0], [49.8, 240.0], [49.9, 240.0], [50.0, 240.0], [50.1, 240.0], [50.2, 240.0], [50.3, 240.0], [50.4, 240.0], [50.5, 240.0], [50.6, 240.0], [50.7, 240.0], [50.8, 240.0], [50.9, 240.0], [51.0, 240.0], [51.1, 240.0], [51.2, 240.0], [51.3, 240.0], [51.4, 240.0], [51.5, 240.0], [51.6, 240.0], [51.7, 240.0], [51.8, 240.0], [51.9, 240.0], [52.0, 240.0], [52.1, 240.0], [52.2, 240.0], [52.3, 240.0], [52.4, 240.0], [52.5, 240.0], [52.6, 240.0], [52.7, 240.0], [52.8, 240.0], [52.9, 240.0], [53.0, 240.0], [53.1, 240.0], [53.2, 240.0], [53.3, 240.0], [53.4, 240.0], [53.5, 240.0], [53.6, 240.0], [53.7, 240.0], [53.8, 240.0], [53.9, 241.0], [54.0, 241.0], [54.1, 241.0], [54.2, 241.0], [54.3, 241.0], [54.4, 241.0], [54.5, 241.0], [54.6, 241.0], [54.7, 241.0], [54.8, 241.0], [54.9, 241.0], [55.0, 241.0], [55.1, 241.0], [55.2, 241.0], [55.3, 241.0], [55.4, 241.0], [55.5, 241.0], [55.6, 241.0], [55.7, 241.0], [55.8, 241.0], [55.9, 241.0], [56.0, 241.0], [56.1, 241.0], [56.2, 241.0], [56.3, 241.0], [56.4, 241.0], [56.5, 241.0], [56.6, 241.0], [56.7, 241.0], [56.8, 241.0], [56.9, 241.0], [57.0, 241.0], [57.1, 241.0], [57.2, 241.0], [57.3, 241.0], [57.4, 241.0], [57.5, 241.0], [57.6, 241.0], [57.7, 241.0], [57.8, 241.0], [57.9, 241.0], [58.0, 241.0], [58.1, 241.0], [58.2, 241.0], [58.3, 242.0], [58.4, 242.0], [58.5, 242.0], [58.6, 242.0], [58.7, 242.0], [58.8, 242.0], [58.9, 242.0], [59.0, 242.0], [59.1, 242.0], [59.2, 242.0], [59.3, 242.0], [59.4, 242.0], [59.5, 242.0], [59.6, 242.0], [59.7, 242.0], [59.8, 242.0], [59.9, 242.0], [60.0, 242.0], [60.1, 242.0], [60.2, 242.0], [60.3, 242.0], [60.4, 242.0], [60.5, 242.0], [60.6, 242.0], [60.7, 243.0], [60.8, 243.0], [60.9, 243.0], [61.0, 243.0], [61.1, 243.0], [61.2, 243.0], [61.3, 243.0], [61.4, 243.0], [61.5, 243.0], [61.6, 243.0], [61.7, 243.0], [61.8, 243.0], [61.9, 243.0], [62.0, 243.0], [62.1, 244.0], [62.2, 244.0], [62.3, 244.0], [62.4, 244.0], [62.5, 244.0], [62.6, 244.0], [62.7, 244.0], [62.8, 244.0], [62.9, 244.0], [63.0, 244.0], [63.1, 244.0], [63.2, 244.0], [63.3, 244.0], [63.4, 244.0], [63.5, 244.0], [63.6, 244.0], [63.7, 244.0], [63.8, 244.0], [63.9, 244.0], [64.0, 244.0], [64.1, 244.0], [64.2, 244.0], [64.3, 244.0], [64.4, 244.0], [64.5, 244.0], [64.6, 245.0], [64.7, 245.0], [64.8, 245.0], [64.9, 245.0], [65.0, 245.0], [65.1, 245.0], [65.2, 245.0], [65.3, 245.0], [65.4, 245.0], [65.5, 245.0], [65.6, 245.0], [65.7, 245.0], [65.8, 245.0], [65.9, 245.0], [66.0, 245.0], [66.1, 245.0], [66.2, 245.0], [66.3, 245.0], [66.4, 245.0], [66.5, 245.0], [66.6, 245.0], [66.7, 245.0], [66.8, 245.0], [66.9, 245.0], [67.0, 246.0], [67.1, 246.0], [67.2, 246.0], [67.3, 246.0], [67.4, 246.0], [67.5, 246.0], [67.6, 246.0], [67.7, 246.0], [67.8, 246.0], [67.9, 246.0], [68.0, 246.0], [68.1, 246.0], [68.2, 246.0], [68.3, 246.0], [68.4, 246.0], [68.5, 246.0], [68.6, 246.0], [68.7, 246.0], [68.8, 246.0], [68.9, 246.0], [69.0, 246.0], [69.1, 246.0], [69.2, 247.0], [69.3, 247.0], [69.4, 247.0], [69.5, 247.0], [69.6, 247.0], [69.7, 247.0], [69.8, 247.0], [69.9, 247.0], [70.0, 247.0], [70.1, 247.0], [70.2, 247.0], [70.3, 247.0], [70.4, 248.0], [70.5, 248.0], [70.6, 248.0], [70.7, 248.0], [70.8, 248.0], [70.9, 248.0], [71.0, 248.0], [71.1, 248.0], [71.2, 248.0], [71.3, 248.0], [71.4, 248.0], [71.5, 248.0], [71.6, 248.0], [71.7, 248.0], [71.8, 249.0], [71.9, 249.0], [72.0, 249.0], [72.1, 249.0], [72.2, 249.0], [72.3, 249.0], [72.4, 249.0], [72.5, 249.0], [72.6, 249.0], [72.7, 249.0], [72.8, 250.0], [72.9, 250.0], [73.0, 250.0], [73.1, 250.0], [73.2, 250.0], [73.3, 250.0], [73.4, 250.0], [73.5, 250.0], [73.6, 250.0], [73.7, 250.0], [73.8, 250.0], [73.9, 250.0], [74.0, 250.0], [74.1, 250.0], [74.2, 250.0], [74.3, 250.0], [74.4, 250.0], [74.5, 250.0], [74.6, 250.0], [74.7, 250.0], [74.8, 250.0], [74.9, 250.0], [75.0, 250.0], [75.1, 250.0], [75.2, 250.0], [75.3, 251.0], [75.4, 251.0], [75.5, 251.0], [75.6, 251.0], [75.7, 251.0], [75.8, 251.0], [75.9, 252.0], [76.0, 252.0], [76.1, 252.0], [76.2, 252.0], [76.3, 252.0], [76.4, 252.0], [76.5, 252.0], [76.6, 252.0], [76.7, 252.0], [76.8, 252.0], [76.9, 252.0], [77.0, 252.0], [77.1, 252.0], [77.2, 252.0], [77.3, 252.0], [77.4, 252.0], [77.5, 252.0], [77.6, 252.0], [77.7, 252.0], [77.8, 252.0], [77.9, 252.0], [78.0, 252.0], [78.1, 253.0], [78.2, 253.0], [78.3, 253.0], [78.4, 253.0], [78.5, 253.0], [78.6, 253.0], [78.7, 253.0], [78.8, 253.0], [78.9, 253.0], [79.0, 253.0], [79.1, 253.0], [79.2, 253.0], [79.3, 253.0], [79.4, 253.0], [79.5, 253.0], [79.6, 253.0], [79.7, 253.0], [79.8, 253.0], [79.9, 253.0], [80.0, 253.0], [80.1, 254.0], [80.2, 254.0], [80.3, 254.0], [80.4, 254.0], [80.5, 254.0], [80.6, 254.0], [80.7, 254.0], [80.8, 254.0], [80.9, 254.0], [81.0, 254.0], [81.1, 254.0], [81.2, 254.0], [81.3, 254.0], [81.4, 254.0], [81.5, 255.0], [81.6, 255.0], [81.7, 255.0], [81.8, 255.0], [81.9, 255.0], [82.0, 255.0], [82.1, 255.0], [82.2, 255.0], [82.3, 255.0], [82.4, 255.0], [82.5, 256.0], [82.6, 256.0], [82.7, 256.0], [82.8, 256.0], [82.9, 256.0], [83.0, 256.0], [83.1, 256.0], [83.2, 256.0], [83.3, 256.0], [83.4, 256.0], [83.5, 256.0], [83.6, 256.0], [83.7, 257.0], [83.8, 257.0], [83.9, 257.0], [84.0, 257.0], [84.1, 257.0], [84.2, 257.0], [84.3, 258.0], [84.4, 258.0], [84.5, 258.0], [84.6, 258.0], [84.7, 258.0], [84.8, 258.0], [84.9, 258.0], [85.0, 258.0], [85.1, 258.0], [85.2, 258.0], [85.3, 258.0], [85.4, 258.0], [85.5, 259.0], [85.6, 259.0], [85.7, 259.0], [85.8, 259.0], [85.9, 259.0], [86.0, 259.0], [86.1, 260.0], [86.2, 260.0], [86.3, 260.0], [86.4, 260.0], [86.5, 261.0], [86.6, 261.0], [86.7, 261.0], [86.8, 261.0], [86.9, 262.0], [87.0, 262.0], [87.1, 262.0], [87.2, 262.0], [87.3, 262.0], [87.4, 262.0], [87.5, 262.0], [87.6, 263.0], [87.7, 263.0], [87.8, 263.0], [87.9, 263.0], [88.0, 263.0], [88.1, 263.0], [88.2, 264.0], [88.3, 264.0], [88.4, 264.0], [88.5, 264.0], [88.6, 265.0], [88.7, 265.0], [88.8, 266.0], [88.9, 266.0], [89.0, 268.0], [89.1, 268.0], [89.2, 268.0], [89.3, 268.0], [89.4, 269.0], [89.5, 269.0], [89.6, 269.0], [89.7, 269.0], [89.8, 269.0], [89.9, 269.0], [90.0, 269.0], [90.1, 269.0], [90.2, 269.0], [90.3, 269.0], [90.4, 270.0], [90.5, 270.0], [90.6, 271.0], [90.7, 271.0], [90.8, 271.0], [90.9, 271.0], [91.0, 273.0], [91.1, 273.0], [91.2, 274.0], [91.3, 274.0], [91.4, 274.0], [91.5, 274.0], [91.6, 275.0], [91.7, 275.0], [91.8, 275.0], [91.9, 275.0], [92.0, 278.0], [92.1, 278.0], [92.2, 278.0], [92.3, 278.0], [92.4, 280.0], [92.5, 280.0], [92.6, 280.0], [92.7, 280.0], [92.8, 280.0], [92.9, 280.0], [93.0, 281.0], [93.1, 281.0], [93.2, 281.0], [93.3, 281.0], [93.4, 282.0], [93.5, 282.0], [93.6, 283.0], [93.7, 283.0], [93.8, 283.0], [93.9, 283.0], [94.0, 283.0], [94.1, 283.0], [94.2, 283.0], [94.3, 283.0], [94.4, 284.0], [94.5, 284.0], [94.6, 286.0], [94.7, 286.0], [94.8, 288.0], [94.9, 288.0], [95.0, 289.0], [95.1, 289.0], [95.2, 290.0], [95.3, 290.0], [95.4, 290.0], [95.5, 290.0], [95.6, 290.0], [95.7, 290.0], [95.8, 291.0], [95.9, 291.0], [96.0, 292.0], [96.1, 292.0], [96.2, 292.0], [96.3, 292.0], [96.4, 293.0], [96.5, 293.0], [96.6, 294.0], [96.7, 294.0], [96.8, 296.0], [96.9, 296.0], [97.0, 300.0], [97.1, 300.0], [97.2, 300.0], [97.3, 300.0], [97.4, 303.0], [97.5, 303.0], [97.6, 307.0], [97.7, 307.0], [97.8, 309.0], [97.9, 309.0], [98.0, 310.0], [98.1, 310.0], [98.2, 313.0], [98.3, 313.0], [98.4, 314.0], [98.5, 314.0], [98.6, 321.0], [98.7, 321.0], [98.8, 322.0], [98.9, 322.0], [99.0, 325.0], [99.1, 325.0], [99.2, 331.0], [99.3, 331.0], [99.4, 338.0], [99.5, 338.0], [99.6, 351.0], [99.7, 351.0], [99.8, 547.0], [99.9, 547.0], [100.0, 547.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 481.0, "series": [{"data": [[34100.0, 1.0], [34500.0, 1.0], [33700.0, 1.0], [35700.0, 1.0], [34900.0, 1.0], [37700.0, 1.0], [38500.0, 1.0], [38900.0, 1.0], [39700.0, 1.0], [44900.0, 1.0], [43300.0, 1.0], [47300.0, 1.0], [50100.0, 1.0], [50900.0, 1.0], [49700.0, 1.0], [52100.0, 1.0], [200.0, 3.0], [55300.0, 1.0], [60100.0, 1.0], [300.0, 62.0], [400.0, 3.0], [600.0, 1.0], [1200.0, 1.0], [4300.0, 5.0], [4800.0, 1.0], [4700.0, 1.0], [4900.0, 2.0], [5100.0, 1.0], [5300.0, 7.0], [5200.0, 3.0], [5500.0, 2.0], [5600.0, 4.0], [5400.0, 6.0], [5800.0, 3.0], [5700.0, 2.0], [5900.0, 2.0], [6000.0, 5.0], [6100.0, 1.0], [6300.0, 2.0], [6500.0, 2.0], [6400.0, 2.0], [6600.0, 3.0], [6700.0, 2.0], [6900.0, 1.0], [7500.0, 2.0], [7700.0, 1.0], [8400.0, 1.0], [8600.0, 3.0], [8700.0, 3.0], [8200.0, 1.0], [8300.0, 4.0], [8500.0, 1.0], [8800.0, 1.0], [9100.0, 3.0], [9000.0, 1.0], [8900.0, 2.0], [9300.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [9400.0, 1.0], [9900.0, 1.0], [10000.0, 2.0], [10200.0, 1.0], [10100.0, 2.0], [10600.0, 2.0], [10300.0, 3.0], [10400.0, 2.0], [10800.0, 2.0], [11000.0, 2.0], [11100.0, 1.0], [11200.0, 2.0], [11500.0, 2.0], [11400.0, 1.0], [11600.0, 1.0], [11800.0, 3.0], [12000.0, 2.0], [12200.0, 1.0], [12500.0, 1.0], [12400.0, 1.0], [12300.0, 1.0], [12700.0, 1.0], [12600.0, 1.0], [12900.0, 2.0], [13100.0, 3.0], [13200.0, 3.0], [12800.0, 2.0], [13000.0, 1.0], [13700.0, 1.0], [13500.0, 1.0], [13800.0, 2.0], [13400.0, 1.0], [14300.0, 3.0], [13900.0, 4.0], [14200.0, 1.0], [14700.0, 3.0], [14800.0, 3.0], [14600.0, 2.0], [14400.0, 1.0], [15300.0, 2.0], [14900.0, 2.0], [15100.0, 1.0], [15800.0, 3.0], [15600.0, 1.0], [15700.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [16100.0, 2.0], [16300.0, 1.0], [16000.0, 1.0], [16600.0, 4.0], [16800.0, 2.0], [17200.0, 1.0], [17000.0, 3.0], [18000.0, 3.0], [18400.0, 2.0], [17800.0, 3.0], [18200.0, 2.0], [18800.0, 2.0], [18600.0, 4.0], [19200.0, 1.0], [19800.0, 3.0], [19600.0, 3.0], [20000.0, 1.0], [20400.0, 1.0], [20600.0, 2.0], [21400.0, 1.0], [21000.0, 2.0], [21800.0, 3.0], [22400.0, 2.0], [21600.0, 1.0], [22000.0, 1.0], [23000.0, 2.0], [23200.0, 1.0], [23400.0, 1.0], [22800.0, 1.0], [24000.0, 1.0], [23800.0, 1.0], [24400.0, 2.0], [23600.0, 1.0], [25000.0, 1.0], [25400.0, 1.0], [24600.0, 1.0], [24800.0, 1.0], [26600.0, 2.0], [25800.0, 1.0], [26400.0, 3.0], [26200.0, 1.0], [27800.0, 2.0], [28600.0, 1.0], [28000.0, 1.0], [28400.0, 1.0], [28800.0, 1.0], [29200.0, 1.0], [29400.0, 3.0], [30600.0, 2.0], [29800.0, 1.0], [31200.0, 2.0], [31400.0, 1.0], [30800.0, 2.0], [31800.0, 1.0], [32200.0, 1.0], [33200.0, 1.0], [34800.0, 2.0], [35200.0, 1.0], [35600.0, 1.0], [36000.0, 1.0], [38800.0, 1.0], [38400.0, 1.0], [40800.0, 1.0], [40400.0, 1.0], [43200.0, 2.0], [43600.0, 1.0], [46800.0, 1.0], [45200.0, 2.0], [46000.0, 2.0], [46400.0, 1.0], [48800.0, 1.0], [48400.0, 1.0], [48000.0, 1.0], [50000.0, 1.0], [52000.0, 1.0], [51200.0, 1.0], [53200.0, 1.0], [54800.0, 1.0], [56400.0, 1.0], [60000.0, 1.0], [34300.0, 2.0], [34700.0, 1.0], [33900.0, 1.0], [36300.0, 1.0], [36700.0, 1.0], [37500.0, 2.0], [40700.0, 1.0], [41500.0, 2.0], [41900.0, 1.0], [44700.0, 1.0], [45500.0, 1.0], [47100.0, 1.0], [47900.0, 1.0], [48700.0, 1.0], [49500.0, 1.0], [52300.0, 1.0], [51500.0, 1.0], [53900.0, 1.0], [54300.0, 1.0], [56700.0, 1.0], [58300.0, 1.0], [60300.0, 1.0], [17300.0, 1.0], [16900.0, 4.0], [17100.0, 2.0], [16700.0, 1.0], [18100.0, 1.0], [18300.0, 1.0], [17900.0, 2.0], [18900.0, 1.0], [18500.0, 2.0], [19100.0, 2.0], [18700.0, 1.0], [19300.0, 1.0], [19900.0, 2.0], [20300.0, 1.0], [19700.0, 1.0], [21100.0, 2.0], [20700.0, 1.0], [20500.0, 1.0], [21500.0, 1.0], [22100.0, 2.0], [21700.0, 1.0], [22500.0, 1.0], [22300.0, 1.0], [23100.0, 2.0], [23500.0, 1.0], [23300.0, 1.0], [24300.0, 1.0], [24500.0, 1.0], [23700.0, 1.0], [24700.0, 2.0], [24900.0, 1.0], [25500.0, 1.0], [25100.0, 2.0], [26500.0, 1.0], [25700.0, 1.0], [26300.0, 2.0], [27500.0, 2.0], [26900.0, 1.0], [27300.0, 1.0], [27100.0, 1.0], [27700.0, 1.0], [29300.0, 2.0], [30700.0, 2.0], [29900.0, 1.0], [30100.0, 1.0], [31300.0, 2.0], [30900.0, 1.0], [32100.0, 1.0], [31900.0, 1.0], [35400.0, 1.0], [38600.0, 1.0], [37800.0, 1.0], [37000.0, 1.0], [40600.0, 1.0], [40200.0, 1.0], [41800.0, 4.0], [42600.0, 2.0], [45000.0, 1.0], [45800.0, 1.0], [45400.0, 1.0], [47000.0, 1.0], [46600.0, 1.0], [47400.0, 1.0], [48600.0, 1.0], [47800.0, 1.0], [49000.0, 1.0], [49400.0, 1.0], [50200.0, 1.0], [57000.0, 2.0], [55400.0, 1.0], [55800.0, 1.0], [58200.0, 2.0], [59000.0, 1.0], [58600.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 65.0], [32900.0, 1.0], [34500.0, 2.0], [36100.0, 1.0], [36500.0, 1.0], [37300.0, 1.0], [38100.0, 1.0], [40500.0, 1.0], [40100.0, 1.0], [41300.0, 2.0], [42900.0, 1.0], [41700.0, 1.0], [44900.0, 2.0], [44500.0, 1.0], [46500.0, 1.0], [45300.0, 1.0], [46100.0, 1.0], [45700.0, 1.0], [48100.0, 1.0], [48500.0, 1.0], [50900.0, 1.0], [49300.0, 1.0], [52100.0, 1.0], [51300.0, 1.0], [52900.0, 1.0], [54100.0, 1.0], [54500.0, 1.0], [56100.0, 1.0], [58100.0, 1.0], [60100.0, 1.0], [59700.0, 1.0], [1000.0, 1.0], [4000.0, 1.0], [4100.0, 4.0], [4500.0, 1.0], [4400.0, 1.0], [4700.0, 2.0], [5000.0, 7.0], [5100.0, 5.0], [4900.0, 1.0], [5200.0, 5.0], [5300.0, 2.0], [5500.0, 4.0], [5400.0, 3.0], [5600.0, 2.0], [5700.0, 4.0], [5800.0, 2.0], [5900.0, 1.0], [6100.0, 2.0], [6300.0, 3.0], [6200.0, 2.0], [6400.0, 3.0], [6500.0, 1.0], [6600.0, 1.0], [7400.0, 1.0], [7200.0, 1.0], [7300.0, 1.0], [8000.0, 3.0], [8100.0, 2.0], [8600.0, 3.0], [8200.0, 1.0], [8400.0, 3.0], [8300.0, 3.0], [8700.0, 1.0], [8500.0, 1.0], [9000.0, 1.0], [8800.0, 1.0], [8900.0, 2.0], [9200.0, 1.0], [9300.0, 1.0], [9600.0, 1.0], [9500.0, 1.0], [9700.0, 2.0], [9900.0, 2.0], [9800.0, 1.0], [10000.0, 2.0], [10100.0, 2.0], [10200.0, 1.0], [10400.0, 2.0], [10600.0, 2.0], [11200.0, 1.0], [10800.0, 2.0], [10900.0, 2.0], [11000.0, 1.0], [11100.0, 1.0], [11600.0, 3.0], [11700.0, 1.0], [11300.0, 1.0], [11400.0, 1.0], [12200.0, 1.0], [12100.0, 1.0], [12000.0, 2.0], [11800.0, 1.0], [12700.0, 1.0], [12600.0, 2.0], [12500.0, 1.0], [12400.0, 1.0], [12300.0, 1.0], [12900.0, 5.0], [13200.0, 2.0], [12800.0, 1.0], [13000.0, 1.0], [13700.0, 3.0], [13400.0, 1.0], [13600.0, 3.0], [14000.0, 2.0], [14100.0, 2.0], [13900.0, 1.0], [14300.0, 1.0], [14400.0, 3.0], [14500.0, 3.0], [14700.0, 1.0], [14600.0, 2.0], [15300.0, 2.0], [15100.0, 1.0], [14900.0, 1.0], [15200.0, 1.0], [15000.0, 1.0], [15500.0, 2.0], [15800.0, 3.0], [15400.0, 1.0], [15600.0, 1.0], [16300.0, 3.0], [16000.0, 1.0], [16600.0, 5.0], [16800.0, 4.0], [16400.0, 2.0], [18400.0, 1.0], [17800.0, 2.0], [17600.0, 3.0], [18200.0, 1.0], [18000.0, 2.0], [18600.0, 1.0], [19400.0, 3.0], [19000.0, 1.0], [19600.0, 3.0], [20000.0, 1.0], [20400.0, 2.0], [20200.0, 1.0], [21400.0, 1.0], [20800.0, 2.0], [21200.0, 2.0], [21600.0, 3.0], [21800.0, 2.0], [22000.0, 1.0], [22800.0, 3.0], [23000.0, 1.0], [23200.0, 1.0], [23800.0, 1.0], [23600.0, 1.0], [24400.0, 1.0], [24200.0, 2.0], [24800.0, 2.0], [25400.0, 1.0], [26200.0, 2.0], [27600.0, 2.0], [27200.0, 1.0], [26800.0, 1.0], [28600.0, 1.0], [28400.0, 1.0], [27800.0, 1.0], [28200.0, 1.0], [29600.0, 2.0], [29000.0, 2.0], [29200.0, 2.0], [30400.0, 3.0], [30600.0, 2.0], [29800.0, 1.0], [31000.0, 1.0], [31600.0, 1.0], [31200.0, 1.0], [31800.0, 1.0], [32000.0, 1.0], [34000.0, 2.0], [34400.0, 1.0], [33600.0, 1.0], [37200.0, 1.0], [38400.0, 1.0], [40400.0, 1.0], [40000.0, 1.0], [41600.0, 3.0], [45600.0, 1.0], [46800.0, 2.0], [46400.0, 1.0], [47600.0, 2.0], [48400.0, 1.0], [53600.0, 1.0], [56800.0, 2.0], [56400.0, 1.0], [55600.0, 1.0], [58000.0, 2.0], [58400.0, 1.0], [33500.0, 1.0], [35500.0, 1.0], [36700.0, 1.0], [37500.0, 2.0], [38700.0, 1.0], [39500.0, 1.0], [41500.0, 1.0], [42300.0, 2.0], [44700.0, 2.0], [43100.0, 1.0], [47100.0, 2.0], [45100.0, 1.0], [49100.0, 1.0], [48700.0, 1.0], [49900.0, 2.0], [49500.0, 1.0], [51900.0, 1.0], [55100.0, 2.0], [58700.0, 1.0], [59900.0, 1.0], [16900.0, 2.0], [17100.0, 1.0], [16500.0, 1.0], [18300.0, 4.0], [18100.0, 2.0], [17700.0, 2.0], [17900.0, 2.0], [17500.0, 1.0], [18900.0, 2.0], [18500.0, 3.0], [19100.0, 1.0], [19700.0, 2.0], [20100.0, 1.0], [20300.0, 1.0], [19500.0, 2.0], [21500.0, 1.0], [20700.0, 1.0], [20900.0, 1.0], [21900.0, 1.0], [22100.0, 2.0], [22300.0, 1.0], [22500.0, 1.0], [23300.0, 2.0], [23500.0, 1.0], [23100.0, 1.0], [22900.0, 1.0], [24100.0, 1.0], [24300.0, 3.0], [24500.0, 1.0], [25500.0, 1.0], [24700.0, 1.0], [25300.0, 1.0], [25100.0, 1.0], [24900.0, 1.0], [26300.0, 2.0], [26100.0, 4.0], [25900.0, 1.0], [27300.0, 1.0], [26700.0, 1.0], [27100.0, 1.0], [27500.0, 1.0], [29100.0, 2.0], [30300.0, 1.0], [30500.0, 1.0], [31500.0, 1.0], [31100.0, 2.0], [30900.0, 1.0], [33800.0, 1.0], [34600.0, 1.0], [34200.0, 1.0], [35000.0, 2.0], [35400.0, 1.0], [35800.0, 1.0], [38600.0, 1.0], [38200.0, 1.0], [40600.0, 1.0], [43000.0, 1.0], [43400.0, 1.0], [45800.0, 1.0], [48600.0, 1.0], [47800.0, 1.0], [50600.0, 1.0], [49800.0, 1.0], [51800.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 14.0], [200.0, 481.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 424.0, "series": [{"data": [[0.0, 420.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 424.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 143.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.75, "minX": 1.68518328E12, "maxY": 24.899999999999995, "series": [{"data": [[1.68518388E12, 20.0], [1.68518358E12, 10.0], [1.68518352E12, 10.0], [1.68518364E12, 12.212389380530977], [1.68518334E12, 5.0], [1.68518328E12, 2.75], [1.68518394E12, 20.0], [1.6851834E12, 5.0], [1.68518406E12, 24.899999999999995], [1.685184E12, 22.843575418994426], [1.6851837E12, 15.0], [1.68518412E12, 15.317647058823528], [1.68518382E12, 17.617142857142856], [1.68518376E12, 15.0], [1.68518346E12, 7.872340425531912]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68518412E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 231.79999999999998, "minX": 1.0, "maxY": 38000.880000000005, "series": [{"data": [[2.0, 11283.333333333334], [9.0, 31817.125000000004], [10.0, 38000.880000000005], [11.0, 8887.666666666668], [3.0, 14467.666666666668], [12.0, 16896.72], [13.0, 2429.4], [14.0, 15178.2], [15.0, 22103.23255813953], [1.0, 13352.0], [4.0, 17670.0], [16.0, 7714.428571428571], [17.0, 11078.499999999998], [18.0, 14506.357142857145], [19.0, 17934.076923076922], [5.0, 19429.5], [20.0, 17426.417322834637], [21.0, 20632.8], [22.0, 21048.761904761905], [23.0, 16541.75], [6.0, 25340.571428571428], [24.0, 19578.08333333333], [25.0, 24598.57692307692], [7.0, 34814.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[16.983870967741936, 20022.29838709675]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 11046.333333333334], [9.0, 31575.000000000004], [10.0, 37750.80000000001], [11.0, 8644.333333333332], [3.0, 14229.666666666668], [12.0, 16652.439999999995], [13.0, 2130.8], [14.0, 14942.6], [15.0, 22117.705882352944], [1.0, 13068.5], [4.0, 17420.0], [16.0, 7476.428571428572], [17.0, 10834.277777777777], [18.0, 14259.714285714286], [19.0, 17701.999999999996], [5.0, 19180.10714285714], [20.0, 17185.92125984252], [21.0, 22649.333333333332], [22.0, 20798.476190476184], [23.0, 21705.666666666668], [6.0, 25093.0], [24.0, 19327.625], [25.0, 24825.960784313727], [7.0, 34562.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[16.951219512195106, 19937.849593495936]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 237.0], [3.0, 273.5], [4.0, 240.33333333333334], [5.0, 249.49999999999991], [6.0, 239.71428571428572], [7.0, 245.0], [8.0, 245.0], [9.0, 243.85714285714286], [10.0, 250.16000000000003], [11.0, 247.0], [12.0, 250.26923076923077], [13.0, 238.0], [14.0, 241.4], [15.0, 243.70930232558135], [1.0, 280.0], [16.0, 233.75], [17.0, 244.11111111111114], [18.0, 240.74999999999997], [19.0, 231.79999999999998], [20.0, 242.08730158730162], [21.0, 248.9], [22.0, 244.7142857142857], [23.0, 272.6], [24.0, 249.39130434782612], [25.0, 250.48076923076923]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[16.979838709677406, 245.23588709677426]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 621.7166666666667, "minX": 1.68518328E12, "maxY": 8880.45, "series": [{"data": [[1.68518388E12, 2959.483333333333], [1.68518358E12, 782.25], [1.68518352E12, 843.5], [1.68518364E12, 1429.6333333333334], [1.68518334E12, 1174.1333333333334], [1.68518328E12, 621.7166666666667], [1.68518394E12, 4769.916666666667], [1.6851834E12, 807.2166666666667], [1.68518406E12, 3316.866666666667], [1.685184E12, 4511.033333333334], [1.6851837E12, 2267.3166666666666], [1.68518412E12, 1806.4666666666667], [1.68518382E12, 3273.55], [1.68518376E12, 2881.4333333333334], [1.68518346E12, 1172.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68518388E12, 7447.016666666666], [1.68518358E12, 1626.7333333333333], [1.68518352E12, 2115.133333333333], [1.68518364E12, 5565.9], [1.68518334E12, 2038.85], [1.68518328E12, 788.75], [1.68518394E12, 8873.35], [1.6851834E12, 1172.7666666666667], [1.68518406E12, 6567.683333333333], [1.685184E12, 8648.316666666668], [1.6851837E12, 4040.1666666666665], [1.68518412E12, 4295.816666666667], [1.68518382E12, 8880.45], [1.68518376E12, 5993.283333333334], [1.68518346E12, 2274.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68518412E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 237.40000000000003, "minX": 1.68518328E12, "maxY": 42774.7, "series": [{"data": [[1.68518388E12, 20591.37735849057], [1.68518358E12, 40616.36363636364], [1.68518352E12, 42774.7], [1.68518364E12, 13845.944444444442], [1.68518334E12, 19208.86666666667], [1.68518328E12, 9872.0], [1.68518394E12, 15825.838709677424], [1.6851834E12, 18451.0], [1.68518406E12, 24416.02083333333], [1.685184E12, 20037.017857142855], [1.6851837E12, 29341.837837837837], [1.68518412E12, 20316.694444444445], [1.68518382E12, 12245.624999999998], [1.68518376E12, 17037.627906976744], [1.68518346E12, 26391.466666666664]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68518388E12, 19424.26000000001], [1.68518358E12, 40369.90909090909], [1.68518352E12, 40144.36363636364], [1.68518364E12, 13594.722222222224], [1.68518334E12, 18916.375], [1.68518328E12, 8163.0], [1.68518394E12, 16576.707692307697], [1.6851834E12, 18208.727272727272], [1.68518406E12, 24013.08695652174], [1.685184E12, 19187.08474576272], [1.6851837E12, 30295.5294117647], [1.68518412E12, 22404.057142857142], [1.68518382E12, 12227.438596491227], [1.68518376E12, 17320.17073170732], [1.68518346E12, 26842.785714285714]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68518388E12, 237.40000000000003], [1.68518358E12, 247.90909090909093], [1.68518352E12, 252.33333333333331], [1.68518364E12, 246.609756097561], [1.68518334E12, 251.1875], [1.68518328E12, 252.27272727272728], [1.68518394E12, 243.5538461538461], [1.6851834E12, 248.27272727272725], [1.68518406E12, 247.08695652173915], [1.685184E12, 250.90624999999997], [1.6851837E12, 246.3235294117647], [1.68518412E12, 251.64285714285714], [1.68518382E12, 240.30645161290326], [1.68518376E12, 242.68292682926833], [1.68518346E12, 243.00000000000003]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68518412E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 237.16, "minX": 1.68518328E12, "maxY": 42773.9, "series": [{"data": [[1.68518388E12, 20591.018867924533], [1.68518358E12, 40614.27272727273], [1.68518352E12, 42773.9], [1.68518364E12, 13845.25], [1.68518334E12, 19208.533333333336], [1.68518328E12, 9870.0], [1.68518394E12, 15825.370967741934], [1.6851834E12, 18450.545454545452], [1.68518406E12, 24415.729166666664], [1.685184E12, 20036.267857142855], [1.6851837E12, 29341.378378378377], [1.68518412E12, 20316.166666666668], [1.68518382E12, 12245.214285714284], [1.68518376E12, 17037.023255813958], [1.68518346E12, 26390.933333333334]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68518388E12, 19424.159999999993], [1.68518358E12, 40368.72727272728], [1.68518352E12, 40143.818181818184], [1.68518364E12, 13594.416666666666], [1.68518334E12, 18916.25], [1.68518328E12, 8162.5], [1.68518394E12, 16576.553846153856], [1.6851834E12, 18208.272727272728], [1.68518406E12, 24012.97826086956], [1.685184E12, 19186.84745762712], [1.6851837E12, 30295.352941176476], [1.68518412E12, 22403.771428571436], [1.68518382E12, 12227.210526315786], [1.68518376E12, 17320.07317073171], [1.68518346E12, 26842.642857142855]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68518388E12, 237.16], [1.68518358E12, 247.36363636363635], [1.68518352E12, 251.49999999999997], [1.68518364E12, 246.36585365853657], [1.68518334E12, 250.99999999999997], [1.68518328E12, 251.27272727272728], [1.68518394E12, 243.13846153846157], [1.6851834E12, 248.18181818181816], [1.68518406E12, 246.89130434782612], [1.685184E12, 250.515625], [1.6851837E12, 245.94117647058823], [1.68518412E12, 251.28571428571428], [1.68518382E12, 240.1451612903226], [1.68518376E12, 242.24390243902437], [1.68518346E12, 242.61111111111111]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68518412E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68518328E12, "maxY": 127.14285714285715, "series": [{"data": [[1.68518388E12, 114.32075471698113], [1.68518358E12, 123.27272727272728], [1.68518352E12, 116.9], [1.68518364E12, 119.22222222222221], [1.68518334E12, 122.19999999999999], [1.68518328E12, 127.14285714285715], [1.68518394E12, 116.24193548387096], [1.6851834E12, 118.09090909090908], [1.68518406E12, 117.04166666666667], [1.685184E12, 116.89285714285717], [1.6851837E12, 117.56756756756756], [1.68518412E12, 117.72222222222221], [1.68518382E12, 116.10714285714283], [1.68518376E12, 115.72093023255815], [1.68518346E12, 117.93333333333334]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68518388E12, 0.0], [1.68518358E12, 0.0], [1.68518352E12, 0.0], [1.68518364E12, 0.0], [1.68518334E12, 0.0], [1.68518328E12, 0.0], [1.68518394E12, 0.0], [1.6851834E12, 0.0], [1.68518406E12, 0.0], [1.685184E12, 0.0], [1.6851837E12, 0.0], [1.68518412E12, 0.0], [1.68518382E12, 0.0], [1.68518376E12, 0.0], [1.68518346E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68518388E12, 115.33999999999997], [1.68518358E12, 118.72727272727272], [1.68518352E12, 122.33333333333333], [1.68518364E12, 118.24390243902441], [1.68518334E12, 121.68749999999999], [1.68518328E12, 124.18181818181819], [1.68518394E12, 115.69230769230774], [1.6851834E12, 117.54545454545455], [1.68518406E12, 116.97826086956519], [1.685184E12, 117.14062500000001], [1.6851837E12, 117.64705882352942], [1.68518412E12, 119.57142857142857], [1.68518382E12, 115.8064516129032], [1.68518376E12, 115.41463414634147], [1.68518346E12, 118.05555555555556]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68518412E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 223.0, "minX": 1.68518328E12, "maxY": 59925.0, "series": [{"data": [[1.68518388E12, 56486.0], [1.68518358E12, 45355.0], [1.68518352E12, 47680.0], [1.68518364E12, 48620.0], [1.68518334E12, 23059.0], [1.68518328E12, 10431.0], [1.68518394E12, 46184.0], [1.6851834E12, 22175.0], [1.68518406E12, 59776.0], [1.685184E12, 38727.0], [1.6851837E12, 59925.0], [1.68518412E12, 48775.0], [1.68518382E12, 48429.0], [1.68518376E12, 30982.0], [1.68518346E12, 32981.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68518388E12, 49921.5], [1.68518358E12, 44884.6], [1.68518352E12, 46926.8], [1.68518364E12, 48077.7], [1.68518334E12, 22837.7], [1.68518328E12, 9530.199999999999], [1.68518394E12, 27417.700000000008], [1.6851834E12, 21623.6], [1.68518406E12, 54422.90000000001], [1.685184E12, 28933.000000000015], [1.6851837E12, 52153.0], [1.68518412E12, 35827.0], [1.68518382E12, 34972.299999999996], [1.68518376E12, 25675.600000000002], [1.68518346E12, 31431.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68518388E12, 56486.0], [1.68518358E12, 45355.0], [1.68518352E12, 47680.0], [1.68518364E12, 48620.0], [1.68518334E12, 23059.0], [1.68518328E12, 10431.0], [1.68518394E12, 44469.07999999999], [1.6851834E12, 22175.0], [1.68518406E12, 59776.0], [1.685184E12, 38617.08], [1.6851837E12, 59925.0], [1.68518412E12, 48775.0], [1.68518382E12, 48429.0], [1.68518376E12, 30982.0], [1.68518346E12, 32981.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68518388E12, 52695.599999999984], [1.68518358E12, 45312.4], [1.68518352E12, 47573.2], [1.68518364E12, 48554.45], [1.68518334E12, 22947.2], [1.68518328E12, 10431.0], [1.68518394E12, 32633.39999999995], [1.6851834E12, 22096.699999999997], [1.68518406E12, 58083.7], [1.685184E12, 34505.2], [1.6851837E12, 56807.0], [1.68518412E12, 42979.0], [1.68518382E12, 40698.54999999999], [1.68518376E12, 27443.499999999993], [1.68518346E12, 32267.949999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68518388E12, 224.0], [1.68518358E12, 233.0], [1.68518352E12, 229.0], [1.68518364E12, 228.0], [1.68518334E12, 229.0], [1.68518328E12, 231.0], [1.68518394E12, 225.0], [1.6851834E12, 232.0], [1.68518406E12, 229.0], [1.685184E12, 227.0], [1.6851837E12, 227.0], [1.68518412E12, 228.0], [1.68518382E12, 225.0], [1.68518376E12, 223.0], [1.68518346E12, 232.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68518388E12, 5109.0], [1.68518358E12, 14039.0], [1.68518352E12, 351.0], [1.68518364E12, 15854.5], [1.68518334E12, 3330.5], [1.68518328E12, 261.0], [1.68518394E12, 2206.5], [1.6851834E12, 4272.0], [1.68518406E12, 291.0], [1.685184E12, 307.0], [1.6851837E12, 5074.0], [1.68518412E12, 16693.0], [1.68518382E12, 306.5], [1.68518376E12, 309.0], [1.68518346E12, 254.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68518412E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 125.0, "minX": 1.0, "maxY": 43991.0, "series": [{"data": [[2.0, 5051.5], [8.0, 9971.0], [9.0, 255.5], [10.0, 4381.0], [11.0, 294.0], [3.0, 303.0], [1.0, 311.5], [4.0, 284.0], [16.0, 20329.5], [5.0, 331.0], [22.0, 43991.0], [6.0, 8229.0], [7.0, 5974.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 223.0], [2.0, 130.0], [4.0, 125.0], [8.0, 222.0], [5.0, 140.5], [22.0, 235.5], [11.0, 223.0], [3.0, 175.0], [6.0, 229.5], [7.0, 227.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 125.0, "minX": 1.0, "maxY": 43991.0, "series": [{"data": [[2.0, 5051.5], [8.0, 9971.0], [9.0, 253.0], [10.0, 4379.0], [11.0, 293.0], [3.0, 303.0], [1.0, 309.5], [4.0, 283.0], [16.0, 20329.0], [5.0, 331.0], [22.0, 43991.0], [6.0, 8229.0], [7.0, 5974.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 223.0], [2.0, 130.0], [4.0, 125.0], [8.0, 222.0], [5.0, 140.5], [22.0, 235.5], [11.0, 223.0], [3.0, 175.0], [6.0, 229.5], [7.0, 227.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.68518328E12, "maxY": 2.15, "series": [{"data": [[1.68518388E12, 1.7], [1.68518358E12, 0.36666666666666664], [1.68518352E12, 0.4], [1.68518364E12, 1.35], [1.68518334E12, 0.48333333333333334], [1.68518328E12, 0.35], [1.68518394E12, 2.15], [1.6851834E12, 0.43333333333333335], [1.68518406E12, 1.55], [1.685184E12, 2.1166666666666667], [1.6851837E12, 1.0666666666666667], [1.68518412E12, 0.45], [1.68518382E12, 2.066666666666667], [1.68518376E12, 1.3833333333333333], [1.68518346E12, 0.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68518412E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68518328E12, "maxY": 2.1666666666666665, "series": [{"data": [[1.68518388E12, 1.2], [1.68518358E12, 0.35], [1.68518352E12, 0.38333333333333336], [1.68518364E12, 0.36666666666666664], [1.68518334E12, 0.5333333333333333], [1.68518328E12, 0.2833333333333333], [1.68518394E12, 2.1666666666666665], [1.6851834E12, 0.36666666666666664], [1.68518406E12, 1.5], [1.685184E12, 2.05], [1.6851837E12, 0.9833333333333333], [1.68518412E12, 0.8166666666666667], [1.68518382E12, 1.2666666666666666], [1.68518376E12, 1.2833333333333334], [1.68518346E12, 0.5333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68518406E12, 0.03333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68518388E12, 0.4666666666666667], [1.68518358E12, 0.016666666666666666], [1.6851837E12, 0.13333333333333333], [1.68518364E12, 0.9166666666666666], [1.68518382E12, 0.7166666666666667], [1.68518376E12, 0.08333333333333333]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.6851837E12, 0.016666666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68518412E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68518328E12, "maxY": 1.0833333333333333, "series": [{"data": [[1.68518388E12, 0.5833333333333334], [1.68518358E12, 0.16666666666666666], [1.68518352E12, 0.2], [1.68518364E12, 0.18333333333333332], [1.68518334E12, 0.26666666666666666], [1.68518328E12, 0.18333333333333332], [1.68518394E12, 1.0833333333333333], [1.6851834E12, 0.18333333333333332], [1.68518406E12, 0.7666666666666667], [1.685184E12, 1.0666666666666667], [1.6851837E12, 0.48333333333333334], [1.68518412E12, 0.23333333333333334], [1.68518382E12, 0.6666666666666666], [1.68518376E12, 0.65], [1.68518346E12, 0.3]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68518388E12, 0.25], [1.68518358E12, 0.016666666666666666], [1.6851837E12, 0.08333333333333333], [1.68518364E12, 0.5], [1.68518382E12, 0.36666666666666664], [1.68518376E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68518388E12, 0.21666666666666667], [1.68518406E12, 0.03333333333333333], [1.6851837E12, 0.06666666666666667], [1.68518364E12, 0.4166666666666667], [1.68518382E12, 0.35], [1.68518376E12, 0.05]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68518388E12, 0.38333333333333336], [1.68518358E12, 0.18333333333333332], [1.68518352E12, 0.16666666666666666], [1.68518364E12, 0.15], [1.68518334E12, 0.25], [1.68518328E12, 0.11666666666666667], [1.68518394E12, 1.0166666666666666], [1.6851834E12, 0.18333333333333332], [1.68518406E12, 0.7666666666666667], [1.685184E12, 0.9333333333333333], [1.6851837E12, 0.3333333333333333], [1.68518412E12, 0.6], [1.68518382E12, 0.4166666666666667], [1.68518376E12, 0.65], [1.68518346E12, 0.25]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68518388E12, 0.5], [1.68518406E12, 0.03333333333333333], [1.6851837E12, 0.2833333333333333], [1.68518364E12, 0.45], [1.68518382E12, 0.5166666666666667], [1.68518376E12, 0.06666666666666667], [1.68518394E12, 0.016666666666666666]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68518388E12, 0.6166666666666667], [1.68518358E12, 0.18333333333333332], [1.68518352E12, 0.18333333333333332], [1.68518364E12, 0.18333333333333332], [1.68518334E12, 0.26666666666666666], [1.68518328E12, 0.1], [1.68518394E12, 1.0833333333333333], [1.6851834E12, 0.18333333333333332], [1.68518406E12, 0.7333333333333333], [1.685184E12, 0.9833333333333333], [1.6851837E12, 0.5], [1.68518412E12, 0.5833333333333334], [1.68518382E12, 0.6], [1.68518376E12, 0.6333333333333333], [1.68518346E12, 0.23333333333333334]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68518412E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68518328E12, "maxY": 3.183333333333333, "series": [{"data": [[1.68518388E12, 1.5833333333333333], [1.68518358E12, 0.5333333333333333], [1.68518352E12, 0.55], [1.68518364E12, 0.5166666666666667], [1.68518334E12, 0.7833333333333333], [1.68518328E12, 0.4], [1.68518394E12, 3.183333333333333], [1.6851834E12, 0.55], [1.68518406E12, 2.2666666666666666], [1.685184E12, 2.9833333333333334], [1.6851837E12, 1.3166666666666667], [1.68518412E12, 1.4166666666666667], [1.68518382E12, 1.6833333333333333], [1.68518376E12, 1.9333333333333333], [1.68518346E12, 0.7833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68518388E12, 0.9666666666666667], [1.68518358E12, 0.016666666666666666], [1.68518406E12, 0.06666666666666667], [1.6851837E12, 0.43333333333333335], [1.68518364E12, 1.3666666666666667], [1.68518382E12, 1.2333333333333334], [1.68518376E12, 0.15], [1.68518394E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68518412E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

