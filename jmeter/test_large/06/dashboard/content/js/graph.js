/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 112.0, "minX": 0.0, "maxY": 60545.0, "series": [{"data": [[0.0, 236.0], [0.1, 236.0], [0.2, 237.0], [0.3, 237.0], [0.4, 336.0], [0.5, 336.0], [0.6, 339.0], [0.7, 339.0], [0.8, 340.0], [0.9, 340.0], [1.0, 340.0], [1.1, 342.0], [1.2, 342.0], [1.3, 342.0], [1.4, 342.0], [1.5, 342.0], [1.6, 342.0], [1.7, 343.0], [1.8, 343.0], [1.9, 343.0], [2.0, 344.0], [2.1, 344.0], [2.2, 344.0], [2.3, 344.0], [2.4, 344.0], [2.5, 344.0], [2.6, 344.0], [2.7, 344.0], [2.8, 344.0], [2.9, 344.0], [3.0, 344.0], [3.1, 344.0], [3.2, 344.0], [3.3, 345.0], [3.4, 345.0], [3.5, 345.0], [3.6, 345.0], [3.7, 345.0], [3.8, 345.0], [3.9, 345.0], [4.0, 345.0], [4.1, 345.0], [4.2, 345.0], [4.3, 345.0], [4.4, 346.0], [4.5, 346.0], [4.6, 346.0], [4.7, 346.0], [4.8, 346.0], [4.9, 346.0], [5.0, 346.0], [5.1, 346.0], [5.2, 346.0], [5.3, 346.0], [5.4, 346.0], [5.5, 346.0], [5.6, 347.0], [5.7, 347.0], [5.8, 347.0], [5.9, 347.0], [6.0, 348.0], [6.1, 348.0], [6.2, 348.0], [6.3, 348.0], [6.4, 348.0], [6.5, 350.0], [6.6, 350.0], [6.7, 353.0], [6.8, 353.0], [6.9, 354.0], [7.0, 354.0], [7.1, 354.0], [7.2, 354.0], [7.3, 355.0], [7.4, 355.0], [7.5, 355.0], [7.6, 355.0], [7.7, 355.0], [7.8, 356.0], [7.9, 356.0], [8.0, 356.0], [8.1, 356.0], [8.2, 356.0], [8.3, 356.0], [8.4, 356.0], [8.5, 357.0], [8.6, 357.0], [8.7, 357.0], [8.8, 357.0], [8.9, 357.0], [9.0, 357.0], [9.1, 357.0], [9.2, 357.0], [9.3, 357.0], [9.4, 358.0], [9.5, 358.0], [9.6, 358.0], [9.7, 358.0], [9.8, 358.0], [9.9, 358.0], [10.0, 358.0], [10.1, 358.0], [10.2, 358.0], [10.3, 359.0], [10.4, 359.0], [10.5, 359.0], [10.6, 359.0], [10.7, 359.0], [10.8, 359.0], [10.9, 360.0], [11.0, 360.0], [11.1, 361.0], [11.2, 361.0], [11.3, 361.0], [11.4, 361.0], [11.5, 361.0], [11.6, 362.0], [11.7, 362.0], [11.8, 363.0], [11.9, 363.0], [12.0, 363.0], [12.1, 363.0], [12.2, 363.0], [12.3, 363.0], [12.4, 363.0], [12.5, 365.0], [12.6, 365.0], [12.7, 367.0], [12.8, 367.0], [12.9, 367.0], [13.0, 367.0], [13.1, 367.0], [13.2, 370.0], [13.3, 370.0], [13.4, 371.0], [13.5, 371.0], [13.6, 371.0], [13.7, 371.0], [13.8, 373.0], [13.9, 373.0], [14.0, 373.0], [14.1, 375.0], [14.2, 375.0], [14.3, 375.0], [14.4, 375.0], [14.5, 376.0], [14.6, 376.0], [14.7, 379.0], [14.8, 379.0], [14.9, 380.0], [15.0, 380.0], [15.1, 380.0], [15.2, 387.0], [15.3, 387.0], [15.4, 395.0], [15.5, 395.0], [15.6, 395.0], [15.7, 395.0], [15.8, 404.0], [15.9, 421.0], [16.0, 421.0], [16.1, 434.0], [16.2, 434.0], [16.3, 475.0], [16.4, 475.0], [16.5, 769.0], [16.6, 769.0], [16.7, 826.0], [16.8, 1076.0], [16.9, 1076.0], [17.0, 1078.0], [17.1, 1078.0], [17.2, 1095.0], [17.3, 1095.0], [17.4, 1096.0], [17.5, 1096.0], [17.6, 1183.0], [17.7, 1213.0], [17.8, 1213.0], [17.9, 1317.0], [18.0, 1317.0], [18.1, 1368.0], [18.2, 1368.0], [18.3, 1386.0], [18.4, 1386.0], [18.5, 1391.0], [18.6, 1578.0], [18.7, 1578.0], [18.8, 3922.0], [18.9, 3922.0], [19.0, 3965.0], [19.1, 3965.0], [19.2, 4462.0], [19.3, 4462.0], [19.4, 4467.0], [19.5, 4887.0], [19.6, 4887.0], [19.7, 4899.0], [19.8, 4899.0], [19.9, 5012.0], [20.0, 5012.0], [20.1, 5034.0], [20.2, 5034.0], [20.3, 5035.0], [20.4, 5082.0], [20.5, 5082.0], [20.6, 5291.0], [20.7, 5291.0], [20.8, 5294.0], [20.9, 5294.0], [21.0, 5306.0], [21.1, 5306.0], [21.2, 5314.0], [21.3, 5346.0], [21.4, 5346.0], [21.5, 5374.0], [21.6, 5374.0], [21.7, 5375.0], [21.8, 5375.0], [21.9, 5378.0], [22.0, 5378.0], [22.1, 5422.0], [22.2, 5422.0], [22.3, 5439.0], [22.4, 5464.0], [22.5, 5464.0], [22.6, 5523.0], [22.7, 5523.0], [22.8, 5548.0], [22.9, 5548.0], [23.0, 5574.0], [23.1, 5574.0], [23.2, 5584.0], [23.3, 5601.0], [23.4, 5601.0], [23.5, 5689.0], [23.6, 5689.0], [23.7, 5778.0], [23.8, 5778.0], [23.9, 5827.0], [24.0, 5827.0], [24.1, 5834.0], [24.2, 5841.0], [24.3, 5841.0], [24.4, 5841.0], [24.5, 5841.0], [24.6, 5841.0], [24.7, 5841.0], [24.8, 5974.0], [24.9, 5974.0], [25.0, 6215.0], [25.1, 6241.0], [25.2, 6241.0], [25.3, 6248.0], [25.4, 6248.0], [25.5, 6381.0], [25.6, 6381.0], [25.7, 6429.0], [25.8, 6429.0], [25.9, 6570.0], [26.0, 6584.0], [26.1, 6584.0], [26.2, 6601.0], [26.3, 6601.0], [26.4, 6690.0], [26.5, 6690.0], [26.6, 6788.0], [26.7, 6788.0], [26.8, 6906.0], [26.9, 6937.0], [27.0, 6937.0], [27.1, 7084.0], [27.2, 7084.0], [27.3, 7128.0], [27.4, 7128.0], [27.5, 7133.0], [27.6, 7133.0], [27.7, 7183.0], [27.8, 7199.0], [27.9, 7199.0], [28.0, 7338.0], [28.1, 7338.0], [28.2, 7342.0], [28.3, 7342.0], [28.4, 7366.0], [28.5, 7366.0], [28.6, 7416.0], [28.7, 7416.0], [28.8, 7485.0], [28.9, 7617.0], [29.0, 7617.0], [29.1, 7793.0], [29.2, 7793.0], [29.3, 7807.0], [29.4, 7807.0], [29.5, 7810.0], [29.6, 7810.0], [29.7, 7845.0], [29.8, 7889.0], [29.9, 7889.0], [30.0, 7900.0], [30.1, 7900.0], [30.2, 7957.0], [30.3, 7957.0], [30.4, 8285.0], [30.5, 8285.0], [30.6, 8366.0], [30.7, 8425.0], [30.8, 8425.0], [30.9, 8443.0], [31.0, 8443.0], [31.1, 8537.0], [31.2, 8537.0], [31.3, 8546.0], [31.4, 8546.0], [31.5, 8587.0], [31.6, 8601.0], [31.7, 8601.0], [31.8, 8733.0], [31.9, 8733.0], [32.0, 8757.0], [32.1, 8757.0], [32.2, 8889.0], [32.3, 8889.0], [32.4, 8971.0], [32.5, 9026.0], [32.6, 9026.0], [32.7, 9159.0], [32.8, 9159.0], [32.9, 9258.0], [33.0, 9258.0], [33.1, 9269.0], [33.2, 9269.0], [33.3, 9278.0], [33.4, 9292.0], [33.5, 9292.0], [33.6, 9301.0], [33.7, 9301.0], [33.8, 9309.0], [33.9, 9309.0], [34.0, 9326.0], [34.1, 9326.0], [34.2, 9377.0], [34.3, 9384.0], [34.4, 9384.0], [34.5, 9628.0], [34.6, 9628.0], [34.7, 9725.0], [34.8, 9725.0], [34.9, 9785.0], [35.0, 9785.0], [35.1, 9863.0], [35.2, 9870.0], [35.3, 9870.0], [35.4, 9875.0], [35.5, 9875.0], [35.6, 9896.0], [35.7, 9896.0], [35.8, 9913.0], [35.9, 9913.0], [36.0, 9937.0], [36.1, 9937.0], [36.2, 9964.0], [36.3, 10198.0], [36.4, 10198.0], [36.5, 10377.0], [36.6, 10377.0], [36.7, 10513.0], [36.8, 10513.0], [36.9, 10543.0], [37.0, 10543.0], [37.1, 10681.0], [37.2, 10760.0], [37.3, 10760.0], [37.4, 10768.0], [37.5, 10768.0], [37.6, 10792.0], [37.7, 10792.0], [37.8, 10808.0], [37.9, 10808.0], [38.0, 10824.0], [38.1, 11136.0], [38.2, 11136.0], [38.3, 11335.0], [38.4, 11335.0], [38.5, 11365.0], [38.6, 11365.0], [38.7, 11576.0], [38.8, 11576.0], [38.9, 11653.0], [39.0, 11693.0], [39.1, 11693.0], [39.2, 11737.0], [39.3, 11737.0], [39.4, 12026.0], [39.5, 12026.0], [39.6, 12120.0], [39.7, 12120.0], [39.8, 12125.0], [39.9, 12267.0], [40.0, 12267.0], [40.1, 12311.0], [40.2, 12311.0], [40.3, 12391.0], [40.4, 12391.0], [40.5, 12484.0], [40.6, 12484.0], [40.7, 12494.0], [40.8, 12574.0], [40.9, 12574.0], [41.0, 12594.0], [41.1, 12594.0], [41.2, 12596.0], [41.3, 12596.0], [41.4, 12597.0], [41.5, 12597.0], [41.6, 12633.0], [41.7, 12639.0], [41.8, 12639.0], [41.9, 12729.0], [42.0, 12729.0], [42.1, 12730.0], [42.2, 12730.0], [42.3, 12758.0], [42.4, 12758.0], [42.5, 12782.0], [42.6, 12858.0], [42.7, 12858.0], [42.8, 12875.0], [42.9, 12875.0], [43.0, 12907.0], [43.1, 12907.0], [43.2, 13008.0], [43.3, 13008.0], [43.4, 13012.0], [43.5, 13012.0], [43.6, 13056.0], [43.7, 13093.0], [43.8, 13093.0], [43.9, 13221.0], [44.0, 13221.0], [44.1, 13264.0], [44.2, 13264.0], [44.3, 13290.0], [44.4, 13290.0], [44.5, 13296.0], [44.6, 13361.0], [44.7, 13361.0], [44.8, 13427.0], [44.9, 13427.0], [45.0, 13482.0], [45.1, 13482.0], [45.2, 13483.0], [45.3, 13483.0], [45.4, 13487.0], [45.5, 13514.0], [45.6, 13514.0], [45.7, 13534.0], [45.8, 13534.0], [45.9, 13560.0], [46.0, 13560.0], [46.1, 13600.0], [46.2, 13600.0], [46.3, 13642.0], [46.4, 13768.0], [46.5, 13768.0], [46.6, 13908.0], [46.7, 13908.0], [46.8, 14054.0], [46.9, 14054.0], [47.0, 14210.0], [47.1, 14210.0], [47.2, 14216.0], [47.3, 14284.0], [47.4, 14284.0], [47.5, 14309.0], [47.6, 14309.0], [47.7, 14380.0], [47.8, 14380.0], [47.9, 14410.0], [48.0, 14410.0], [48.1, 14638.0], [48.2, 14662.0], [48.3, 14662.0], [48.4, 14903.0], [48.5, 14903.0], [48.6, 14983.0], [48.7, 14983.0], [48.8, 15078.0], [48.9, 15078.0], [49.0, 15100.0], [49.1, 15168.0], [49.2, 15168.0], [49.3, 15219.0], [49.4, 15219.0], [49.5, 15275.0], [49.6, 15275.0], [49.7, 15324.0], [49.8, 15324.0], [49.9, 15330.0], [50.0, 15330.0], [50.1, 15394.0], [50.2, 15561.0], [50.3, 15561.0], [50.4, 15684.0], [50.5, 15684.0], [50.6, 15842.0], [50.7, 15842.0], [50.8, 15857.0], [50.9, 15857.0], [51.0, 15947.0], [51.1, 16027.0], [51.2, 16027.0], [51.3, 16064.0], [51.4, 16064.0], [51.5, 16133.0], [51.6, 16133.0], [51.7, 16179.0], [51.8, 16179.0], [51.9, 16258.0], [52.0, 16280.0], [52.1, 16280.0], [52.2, 16374.0], [52.3, 16374.0], [52.4, 16415.0], [52.5, 16415.0], [52.6, 16449.0], [52.7, 16449.0], [52.8, 16452.0], [52.9, 16585.0], [53.0, 16585.0], [53.1, 16647.0], [53.2, 16647.0], [53.3, 16687.0], [53.4, 16687.0], [53.5, 16763.0], [53.6, 16763.0], [53.7, 16766.0], [53.8, 16894.0], [53.9, 16894.0], [54.0, 17024.0], [54.1, 17024.0], [54.2, 17051.0], [54.3, 17051.0], [54.4, 17209.0], [54.5, 17209.0], [54.6, 17370.0], [54.7, 17467.0], [54.8, 17467.0], [54.9, 17467.0], [55.0, 17467.0], [55.1, 17523.0], [55.2, 17523.0], [55.3, 17623.0], [55.4, 17623.0], [55.5, 17680.0], [55.6, 17971.0], [55.7, 17971.0], [55.8, 17978.0], [55.9, 17978.0], [56.0, 18035.0], [56.1, 18035.0], [56.2, 18159.0], [56.3, 18159.0], [56.4, 18202.0], [56.5, 18267.0], [56.6, 18267.0], [56.7, 18310.0], [56.8, 18310.0], [56.9, 18373.0], [57.0, 18373.0], [57.1, 18374.0], [57.2, 18374.0], [57.3, 18518.0], [57.4, 18518.0], [57.5, 18542.0], [57.6, 18588.0], [57.7, 18588.0], [57.8, 18721.0], [57.9, 18721.0], [58.0, 18874.0], [58.1, 18874.0], [58.2, 18914.0], [58.3, 18914.0], [58.4, 18928.0], [58.5, 18934.0], [58.6, 18934.0], [58.7, 18990.0], [58.8, 18990.0], [58.9, 19033.0], [59.0, 19033.0], [59.1, 19168.0], [59.2, 19168.0], [59.3, 19169.0], [59.4, 19240.0], [59.5, 19240.0], [59.6, 19267.0], [59.7, 19267.0], [59.8, 19282.0], [59.9, 19282.0], [60.0, 19352.0], [60.1, 19352.0], [60.2, 19434.0], [60.3, 19462.0], [60.4, 19462.0], [60.5, 19759.0], [60.6, 19759.0], [60.7, 20003.0], [60.8, 20003.0], [60.9, 20030.0], [61.0, 20030.0], [61.1, 20275.0], [61.2, 20330.0], [61.3, 20330.0], [61.4, 20369.0], [61.5, 20369.0], [61.6, 20400.0], [61.7, 20400.0], [61.8, 20432.0], [61.9, 20432.0], [62.0, 20444.0], [62.1, 20447.0], [62.2, 20447.0], [62.3, 20457.0], [62.4, 20457.0], [62.5, 20467.0], [62.6, 20467.0], [62.7, 20469.0], [62.8, 20469.0], [62.9, 20651.0], [63.0, 20727.0], [63.1, 20727.0], [63.2, 20773.0], [63.3, 20773.0], [63.4, 20782.0], [63.5, 20782.0], [63.6, 20840.0], [63.7, 20840.0], [63.8, 20857.0], [63.9, 20865.0], [64.0, 20865.0], [64.1, 20881.0], [64.2, 20881.0], [64.3, 20906.0], [64.4, 20906.0], [64.5, 20957.0], [64.6, 20957.0], [64.7, 20997.0], [64.8, 20997.0], [64.9, 21028.0], [65.0, 21218.0], [65.1, 21218.0], [65.2, 21245.0], [65.3, 21245.0], [65.4, 21250.0], [65.5, 21250.0], [65.6, 21252.0], [65.7, 21252.0], [65.8, 21277.0], [65.9, 21290.0], [66.0, 21290.0], [66.1, 21354.0], [66.2, 21354.0], [66.3, 21385.0], [66.4, 21385.0], [66.5, 21551.0], [66.6, 21551.0], [66.7, 21562.0], [66.8, 21593.0], [66.9, 21593.0], [67.0, 21613.0], [67.1, 21613.0], [67.2, 21640.0], [67.3, 21640.0], [67.4, 21655.0], [67.5, 21655.0], [67.6, 21662.0], [67.7, 21793.0], [67.8, 21793.0], [67.9, 21904.0], [68.0, 21904.0], [68.1, 21933.0], [68.2, 21933.0], [68.3, 21943.0], [68.4, 21943.0], [68.5, 21962.0], [68.6, 21997.0], [68.7, 21997.0], [68.8, 22008.0], [68.9, 22008.0], [69.0, 22011.0], [69.1, 22011.0], [69.2, 22154.0], [69.3, 22154.0], [69.4, 22160.0], [69.5, 22182.0], [69.6, 22182.0], [69.7, 22211.0], [69.8, 22211.0], [69.9, 22243.0], [70.0, 22243.0], [70.1, 22277.0], [70.2, 22277.0], [70.3, 22318.0], [70.4, 22404.0], [70.5, 22404.0], [70.6, 22413.0], [70.7, 22413.0], [70.8, 22530.0], [70.9, 22530.0], [71.0, 22540.0], [71.1, 22540.0], [71.2, 22576.0], [71.3, 22598.0], [71.4, 22598.0], [71.5, 22699.0], [71.6, 22699.0], [71.7, 22719.0], [71.8, 22719.0], [71.9, 22730.0], [72.0, 22730.0], [72.1, 22741.0], [72.2, 22741.0], [72.3, 22800.0], [72.4, 22809.0], [72.5, 22809.0], [72.6, 22900.0], [72.7, 22900.0], [72.8, 22927.0], [72.9, 22927.0], [73.0, 23012.0], [73.1, 23012.0], [73.2, 23135.0], [73.3, 23149.0], [73.4, 23149.0], [73.5, 23185.0], [73.6, 23185.0], [73.7, 23318.0], [73.8, 23318.0], [73.9, 23414.0], [74.0, 23414.0], [74.1, 23420.0], [74.2, 23571.0], [74.3, 23571.0], [74.4, 23712.0], [74.5, 23712.0], [74.6, 23969.0], [74.7, 23969.0], [74.8, 24007.0], [74.9, 24007.0], [75.0, 24209.0], [75.1, 24229.0], [75.2, 24229.0], [75.3, 24444.0], [75.4, 24444.0], [75.5, 24456.0], [75.6, 24456.0], [75.7, 24499.0], [75.8, 24499.0], [75.9, 24522.0], [76.0, 24587.0], [76.1, 24587.0], [76.2, 24592.0], [76.3, 24592.0], [76.4, 24639.0], [76.5, 24639.0], [76.6, 24642.0], [76.7, 24642.0], [76.8, 24731.0], [76.9, 24777.0], [77.0, 24777.0], [77.1, 24818.0], [77.2, 24818.0], [77.3, 25060.0], [77.4, 25060.0], [77.5, 25089.0], [77.6, 25089.0], [77.7, 25118.0], [77.8, 25180.0], [77.9, 25180.0], [78.0, 25187.0], [78.1, 25187.0], [78.2, 25711.0], [78.3, 25711.0], [78.4, 25939.0], [78.5, 25939.0], [78.6, 26114.0], [78.7, 26114.0], [78.8, 26210.0], [78.9, 26216.0], [79.0, 26216.0], [79.1, 26246.0], [79.2, 26246.0], [79.3, 26355.0], [79.4, 26355.0], [79.5, 26369.0], [79.6, 26369.0], [79.7, 26426.0], [79.8, 26736.0], [79.9, 26736.0], [80.0, 26784.0], [80.1, 26784.0], [80.2, 27024.0], [80.3, 27024.0], [80.4, 27039.0], [80.5, 27039.0], [80.6, 27129.0], [80.7, 27315.0], [80.8, 27315.0], [80.9, 27359.0], [81.0, 27359.0], [81.1, 28362.0], [81.2, 28362.0], [81.3, 28378.0], [81.4, 28378.0], [81.5, 28454.0], [81.6, 29078.0], [81.7, 29078.0], [81.8, 29303.0], [81.9, 29303.0], [82.0, 29341.0], [82.1, 29341.0], [82.2, 29700.0], [82.3, 29700.0], [82.4, 29780.0], [82.5, 29952.0], [82.6, 29952.0], [82.7, 30057.0], [82.8, 30057.0], [82.9, 30084.0], [83.0, 30084.0], [83.1, 30361.0], [83.2, 30361.0], [83.3, 30426.0], [83.4, 30503.0], [83.5, 30503.0], [83.6, 30601.0], [83.7, 30601.0], [83.8, 30690.0], [83.9, 30690.0], [84.0, 30885.0], [84.1, 30885.0], [84.2, 30992.0], [84.3, 31356.0], [84.4, 31356.0], [84.5, 31571.0], [84.6, 31571.0], [84.7, 31837.0], [84.8, 31837.0], [84.9, 31854.0], [85.0, 31854.0], [85.1, 32201.0], [85.2, 32359.0], [85.3, 32359.0], [85.4, 32571.0], [85.5, 32571.0], [85.6, 32642.0], [85.7, 32642.0], [85.8, 32943.0], [85.9, 32943.0], [86.0, 33004.0], [86.1, 33004.0], [86.2, 33581.0], [86.3, 33598.0], [86.4, 33598.0], [86.5, 33655.0], [86.6, 33655.0], [86.7, 33686.0], [86.8, 33686.0], [86.9, 34185.0], [87.0, 34185.0], [87.1, 34283.0], [87.2, 34338.0], [87.3, 34338.0], [87.4, 34574.0], [87.5, 34574.0], [87.6, 35058.0], [87.7, 35058.0], [87.8, 35113.0], [87.9, 35113.0], [88.0, 35571.0], [88.1, 35724.0], [88.2, 35724.0], [88.3, 35928.0], [88.4, 35928.0], [88.5, 36899.0], [88.6, 36899.0], [88.7, 37772.0], [88.8, 37772.0], [88.9, 38697.0], [89.0, 39066.0], [89.1, 39066.0], [89.2, 39210.0], [89.3, 39210.0], [89.4, 39385.0], [89.5, 39385.0], [89.6, 39556.0], [89.7, 39556.0], [89.8, 39627.0], [89.9, 39736.0], [90.0, 39736.0], [90.1, 40400.0], [90.2, 40400.0], [90.3, 40616.0], [90.4, 40616.0], [90.5, 43125.0], [90.6, 43125.0], [90.7, 43281.0], [90.8, 44417.0], [90.9, 44417.0], [91.0, 46024.0], [91.1, 46024.0], [91.2, 46044.0], [91.3, 46044.0], [91.4, 46683.0], [91.5, 46683.0], [91.6, 47358.0], [91.7, 47632.0], [91.8, 47632.0], [91.9, 47799.0], [92.0, 47799.0], [92.1, 47941.0], [92.2, 47941.0], [92.3, 47942.0], [92.4, 47942.0], [92.5, 48277.0], [92.6, 49779.0], [92.7, 49779.0], [92.8, 50096.0], [92.9, 50096.0], [93.0, 50292.0], [93.1, 50292.0], [93.2, 50316.0], [93.3, 50316.0], [93.4, 50414.0], [93.5, 50414.0], [93.6, 50675.0], [93.7, 50883.0], [93.8, 50883.0], [93.9, 51526.0], [94.0, 51526.0], [94.1, 51635.0], [94.2, 51635.0], [94.3, 53095.0], [94.4, 53095.0], [94.5, 53360.0], [94.6, 54002.0], [94.7, 54002.0], [94.8, 54112.0], [94.9, 54112.0], [95.0, 55134.0], [95.1, 55134.0], [95.2, 55383.0], [95.3, 55383.0], [95.4, 55390.0], [95.5, 55494.0], [95.6, 55494.0], [95.7, 55708.0], [95.8, 55708.0], [95.9, 56078.0], [96.0, 56078.0], [96.1, 56227.0], [96.2, 56227.0], [96.3, 57310.0], [96.4, 57754.0], [96.5, 57754.0], [96.6, 58776.0], [96.7, 58776.0], [96.8, 59225.0], [96.9, 59225.0], [97.0, 59350.0], [97.1, 59350.0], [97.2, 60345.0], [97.3, 60351.0], [97.4, 60351.0], [97.5, 60352.0], [97.6, 60352.0], [97.7, 60359.0], [97.8, 60359.0], [97.9, 60361.0], [98.0, 60361.0], [98.1, 60382.0], [98.2, 60398.0], [98.3, 60398.0], [98.4, 60400.0], [98.5, 60400.0], [98.6, 60407.0], [98.7, 60407.0], [98.8, 60412.0], [98.9, 60412.0], [99.0, 60433.0], [99.1, 60448.0], [99.2, 60448.0], [99.3, 60491.0], [99.4, 60491.0], [99.5, 60502.0], [99.6, 60502.0], [99.7, 60504.0], [99.8, 60504.0], [99.9, 60545.0], [100.0, 60545.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 112.0], [0.1, 112.0], [0.2, 112.0], [0.3, 112.0], [0.4, 113.0], [0.5, 113.0], [0.6, 114.0], [0.7, 114.0], [0.8, 114.0], [0.9, 114.0], [1.0, 114.0], [1.1, 114.0], [1.2, 114.0], [1.3, 114.0], [1.4, 114.0], [1.5, 114.0], [1.6, 114.0], [1.7, 114.0], [1.8, 114.0], [1.9, 115.0], [2.0, 115.0], [2.1, 115.0], [2.2, 115.0], [2.3, 115.0], [2.4, 116.0], [2.5, 116.0], [2.6, 116.0], [2.7, 116.0], [2.8, 116.0], [2.9, 117.0], [3.0, 117.0], [3.1, 117.0], [3.2, 117.0], [3.3, 117.0], [3.4, 117.0], [3.5, 117.0], [3.6, 117.0], [3.7, 117.0], [3.8, 117.0], [3.9, 117.0], [4.0, 117.0], [4.1, 117.0], [4.2, 117.0], [4.3, 117.0], [4.4, 117.0], [4.5, 117.0], [4.6, 117.0], [4.7, 117.0], [4.8, 117.0], [4.9, 117.0], [5.0, 117.0], [5.1, 118.0], [5.2, 118.0], [5.3, 118.0], [5.4, 118.0], [5.5, 118.0], [5.6, 118.0], [5.7, 118.0], [5.8, 118.0], [5.9, 118.0], [6.0, 118.0], [6.1, 118.0], [6.2, 118.0], [6.3, 118.0], [6.4, 119.0], [6.5, 119.0], [6.6, 119.0], [6.7, 119.0], [6.8, 119.0], [6.9, 119.0], [7.0, 119.0], [7.1, 119.0], [7.2, 119.0], [7.3, 119.0], [7.4, 119.0], [7.5, 119.0], [7.6, 119.0], [7.7, 119.0], [7.8, 119.0], [7.9, 119.0], [8.0, 119.0], [8.1, 119.0], [8.2, 119.0], [8.3, 119.0], [8.4, 120.0], [8.5, 120.0], [8.6, 120.0], [8.7, 120.0], [8.8, 120.0], [8.9, 120.0], [9.0, 120.0], [9.1, 120.0], [9.2, 120.0], [9.3, 120.0], [9.4, 120.0], [9.5, 120.0], [9.6, 120.0], [9.7, 120.0], [9.8, 120.0], [9.9, 120.0], [10.0, 120.0], [10.1, 120.0], [10.2, 120.0], [10.3, 120.0], [10.4, 120.0], [10.5, 120.0], [10.6, 121.0], [10.7, 121.0], [10.8, 121.0], [10.9, 121.0], [11.0, 121.0], [11.1, 121.0], [11.2, 121.0], [11.3, 121.0], [11.4, 121.0], [11.5, 122.0], [11.6, 122.0], [11.7, 122.0], [11.8, 122.0], [11.9, 122.0], [12.0, 122.0], [12.1, 122.0], [12.2, 122.0], [12.3, 122.0], [12.4, 122.0], [12.5, 122.0], [12.6, 122.0], [12.7, 123.0], [12.8, 123.0], [12.9, 123.0], [13.0, 123.0], [13.1, 123.0], [13.2, 123.0], [13.3, 123.0], [13.4, 123.0], [13.5, 123.0], [13.6, 124.0], [13.7, 124.0], [13.8, 124.0], [13.9, 124.0], [14.0, 124.0], [14.1, 124.0], [14.2, 124.0], [14.3, 124.0], [14.4, 124.0], [14.5, 124.0], [14.6, 124.0], [14.7, 124.0], [14.8, 124.0], [14.9, 125.0], [15.0, 125.0], [15.1, 125.0], [15.2, 125.0], [15.3, 125.0], [15.4, 125.0], [15.5, 125.0], [15.6, 127.0], [15.7, 127.0], [15.8, 127.0], [15.9, 127.0], [16.0, 139.0], [16.1, 139.0], [16.2, 522.0], [16.3, 522.0], [16.4, 581.0], [16.5, 804.0], [16.6, 804.0], [16.7, 846.0], [16.8, 846.0], [16.9, 866.0], [17.0, 866.0], [17.1, 869.0], [17.2, 869.0], [17.3, 884.0], [17.4, 978.0], [17.5, 978.0], [17.6, 1040.0], [17.7, 1040.0], [17.8, 1122.0], [17.9, 1122.0], [18.0, 1146.0], [18.1, 1146.0], [18.2, 1152.0], [18.3, 1329.0], [18.4, 1329.0], [18.5, 3664.0], [18.6, 3664.0], [18.7, 3715.0], [18.8, 3715.0], [18.9, 4208.0], [19.0, 4208.0], [19.1, 4234.0], [19.2, 4234.0], [19.3, 4627.0], [19.4, 4671.0], [19.5, 4671.0], [19.6, 4773.0], [19.7, 4773.0], [19.8, 4795.0], [19.9, 4795.0], [20.0, 4809.0], [20.1, 4809.0], [20.2, 4843.0], [20.3, 5030.0], [20.4, 5030.0], [20.5, 5046.0], [20.6, 5046.0], [20.7, 5049.0], [20.8, 5049.0], [20.9, 5070.0], [21.0, 5070.0], [21.1, 5118.0], [21.2, 5120.0], [21.3, 5120.0], [21.4, 5136.0], [21.5, 5136.0], [21.6, 5145.0], [21.7, 5145.0], [21.8, 5177.0], [21.9, 5177.0], [22.0, 5195.0], [22.1, 5195.0], [22.2, 5213.0], [22.3, 5285.0], [22.4, 5285.0], [22.5, 5309.0], [22.6, 5309.0], [22.7, 5326.0], [22.8, 5326.0], [22.9, 5337.0], [23.0, 5337.0], [23.1, 5372.0], [23.2, 5453.0], [23.3, 5453.0], [23.4, 5482.0], [23.5, 5482.0], [23.6, 5536.0], [23.7, 5536.0], [23.8, 5590.0], [23.9, 5590.0], [24.0, 5592.0], [24.1, 5600.0], [24.2, 5600.0], [24.3, 5615.0], [24.4, 5615.0], [24.5, 5707.0], [24.6, 5707.0], [24.7, 5961.0], [24.8, 5961.0], [24.9, 5988.0], [25.0, 5988.0], [25.1, 6007.0], [25.2, 6135.0], [25.3, 6135.0], [25.4, 6201.0], [25.5, 6201.0], [25.6, 6332.0], [25.7, 6332.0], [25.8, 6333.0], [25.9, 6333.0], [26.0, 6363.0], [26.1, 6439.0], [26.2, 6439.0], [26.3, 6560.0], [26.4, 6560.0], [26.5, 6664.0], [26.6, 6664.0], [26.7, 6702.0], [26.8, 6702.0], [26.9, 6832.0], [27.0, 6850.0], [27.1, 6850.0], [27.2, 6888.0], [27.3, 6888.0], [27.4, 6909.0], [27.5, 6909.0], [27.6, 6944.0], [27.7, 6944.0], [27.8, 7053.0], [27.9, 7088.0], [28.0, 7088.0], [28.1, 7092.0], [28.2, 7092.0], [28.3, 7175.0], [28.4, 7175.0], [28.5, 7238.0], [28.6, 7238.0], [28.7, 7378.0], [28.8, 7378.0], [28.9, 7565.0], [29.0, 7568.0], [29.1, 7568.0], [29.2, 7570.0], [29.3, 7570.0], [29.4, 7619.0], [29.5, 7619.0], [29.6, 7648.0], [29.7, 7648.0], [29.8, 7675.0], [29.9, 7718.0], [30.0, 7718.0], [30.1, 8057.0], [30.2, 8057.0], [30.3, 8139.0], [30.4, 8139.0], [30.5, 8173.0], [30.6, 8173.0], [30.7, 8178.0], [30.8, 8263.0], [30.9, 8263.0], [31.0, 8295.0], [31.1, 8295.0], [31.2, 8349.0], [31.3, 8349.0], [31.4, 8364.0], [31.5, 8364.0], [31.6, 8491.0], [31.7, 8491.0], [31.8, 8506.0], [31.9, 8641.0], [32.0, 8641.0], [32.1, 8689.0], [32.2, 8689.0], [32.3, 8799.0], [32.4, 8799.0], [32.5, 8929.0], [32.6, 8929.0], [32.7, 9021.0], [32.8, 9021.0], [32.9, 9021.0], [33.0, 9026.0], [33.1, 9026.0], [33.2, 9054.0], [33.3, 9054.0], [33.4, 9062.0], [33.5, 9062.0], [33.6, 9065.0], [33.7, 9090.0], [33.8, 9090.0], [33.9, 9145.0], [34.0, 9145.0], [34.1, 9149.0], [34.2, 9149.0], [34.3, 9396.0], [34.4, 9396.0], [34.5, 9493.0], [34.6, 9493.0], [34.7, 9541.0], [34.8, 9587.0], [34.9, 9587.0], [35.0, 9622.0], [35.1, 9622.0], [35.2, 9634.0], [35.3, 9634.0], [35.4, 9640.0], [35.5, 9640.0], [35.6, 9660.0], [35.7, 9666.0], [35.8, 9666.0], [35.9, 9710.0], [36.0, 9710.0], [36.1, 9717.0], [36.2, 9717.0], [36.3, 9946.0], [36.4, 9946.0], [36.5, 10150.0], [36.6, 10284.0], [36.7, 10284.0], [36.8, 10303.0], [36.9, 10303.0], [37.0, 10452.0], [37.1, 10452.0], [37.2, 10501.0], [37.3, 10501.0], [37.4, 10541.0], [37.5, 10558.0], [37.6, 10558.0], [37.7, 10567.0], [37.8, 10567.0], [37.9, 10901.0], [38.0, 10901.0], [38.1, 11086.0], [38.2, 11086.0], [38.3, 11090.0], [38.4, 11090.0], [38.5, 11329.0], [38.6, 11354.0], [38.7, 11354.0], [38.8, 11467.0], [38.9, 11467.0], [39.0, 11495.0], [39.1, 11495.0], [39.2, 11785.0], [39.3, 11785.0], [39.4, 11869.0], [39.5, 11886.0], [39.6, 11886.0], [39.7, 12029.0], [39.8, 12029.0], [39.9, 12086.0], [40.0, 12086.0], [40.1, 12167.0], [40.2, 12167.0], [40.3, 12224.0], [40.4, 12254.0], [40.5, 12254.0], [40.6, 12333.0], [40.7, 12333.0], [40.8, 12365.0], [40.9, 12365.0], [41.0, 12368.0], [41.1, 12368.0], [41.2, 12370.0], [41.3, 12370.0], [41.4, 12382.0], [41.5, 12407.0], [41.6, 12407.0], [41.7, 12478.0], [41.8, 12478.0], [41.9, 12495.0], [42.0, 12495.0], [42.1, 12533.0], [42.2, 12533.0], [42.3, 12538.0], [42.4, 12583.0], [42.5, 12583.0], [42.6, 12645.0], [42.7, 12645.0], [42.8, 12670.0], [42.9, 12670.0], [43.0, 12696.0], [43.1, 12696.0], [43.2, 12713.0], [43.3, 12827.0], [43.4, 12827.0], [43.5, 12855.0], [43.6, 12855.0], [43.7, 12986.0], [43.8, 12986.0], [43.9, 13029.0], [44.0, 13029.0], [44.1, 13036.0], [44.2, 13036.0], [44.3, 13064.0], [44.4, 13125.0], [44.5, 13125.0], [44.6, 13160.0], [44.7, 13160.0], [44.8, 13194.0], [44.9, 13194.0], [45.0, 13232.0], [45.1, 13232.0], [45.2, 13253.0], [45.3, 13254.0], [45.4, 13254.0], [45.5, 13299.0], [45.6, 13299.0], [45.7, 13331.0], [45.8, 13331.0], [45.9, 13362.0], [46.0, 13362.0], [46.1, 13413.0], [46.2, 13540.0], [46.3, 13540.0], [46.4, 13671.0], [46.5, 13671.0], [46.6, 13828.0], [46.7, 13828.0], [46.8, 13975.0], [46.9, 13975.0], [47.0, 13978.0], [47.1, 13978.0], [47.2, 14051.0], [47.3, 14058.0], [47.4, 14058.0], [47.5, 14141.0], [47.6, 14141.0], [47.7, 14167.0], [47.8, 14167.0], [47.9, 14337.0], [48.0, 14337.0], [48.1, 14423.0], [48.2, 14677.0], [48.3, 14677.0], [48.4, 14744.0], [48.5, 14744.0], [48.6, 14839.0], [48.7, 14839.0], [48.8, 14842.0], [48.9, 14842.0], [49.0, 14939.0], [49.1, 14991.0], [49.2, 14991.0], [49.3, 15028.0], [49.4, 15028.0], [49.5, 15040.0], [49.6, 15040.0], [49.7, 15099.0], [49.8, 15099.0], [49.9, 15155.0], [50.0, 15335.0], [50.1, 15335.0], [50.2, 15448.0], [50.3, 15448.0], [50.4, 15610.0], [50.5, 15610.0], [50.6, 15612.0], [50.7, 15612.0], [50.8, 15711.0], [50.9, 15711.0], [51.0, 15783.0], [51.1, 15827.0], [51.2, 15827.0], [51.3, 15880.0], [51.4, 15880.0], [51.5, 15949.0], [51.6, 15949.0], [51.7, 16033.0], [51.8, 16033.0], [51.9, 16037.0], [52.0, 16112.0], [52.1, 16112.0], [52.2, 16116.0], [52.3, 16116.0], [52.4, 16148.0], [52.5, 16148.0], [52.6, 16210.0], [52.7, 16210.0], [52.8, 16342.0], [52.9, 16410.0], [53.0, 16410.0], [53.1, 16440.0], [53.2, 16440.0], [53.3, 16527.0], [53.4, 16527.0], [53.5, 16528.0], [53.6, 16528.0], [53.7, 16656.0], [53.8, 16656.0], [53.9, 16791.0], [54.0, 16812.0], [54.1, 16812.0], [54.2, 16973.0], [54.3, 16973.0], [54.4, 17107.0], [54.5, 17107.0], [54.6, 17230.0], [54.7, 17230.0], [54.8, 17240.0], [54.9, 17288.0], [55.0, 17288.0], [55.1, 17387.0], [55.2, 17387.0], [55.3, 17432.0], [55.4, 17432.0], [55.5, 17733.0], [55.6, 17733.0], [55.7, 17750.0], [55.8, 17762.0], [55.9, 17762.0], [56.0, 17934.0], [56.1, 17934.0], [56.2, 17976.0], [56.3, 17976.0], [56.4, 18043.0], [56.5, 18043.0], [56.6, 18074.0], [56.7, 18074.0], [56.8, 18136.0], [56.9, 18149.0], [57.0, 18149.0], [57.1, 18279.0], [57.2, 18279.0], [57.3, 18307.0], [57.4, 18307.0], [57.5, 18349.0], [57.6, 18349.0], [57.7, 18492.0], [57.8, 18602.0], [57.9, 18602.0], [58.0, 18636.0], [58.1, 18636.0], [58.2, 18637.0], [58.3, 18637.0], [58.4, 18710.0], [58.5, 18710.0], [58.6, 18751.0], [58.7, 18806.0], [58.8, 18806.0], [58.9, 18931.0], [59.0, 18931.0], [59.1, 18931.0], [59.2, 18931.0], [59.3, 19007.0], [59.4, 19007.0], [59.5, 19032.0], [59.6, 19032.0], [59.7, 19057.0], [59.8, 19116.0], [59.9, 19116.0], [60.0, 19197.0], [60.1, 19197.0], [60.2, 19233.0], [60.3, 19233.0], [60.4, 19498.0], [60.5, 19498.0], [60.6, 19759.0], [60.7, 19795.0], [60.8, 19795.0], [60.9, 20039.0], [61.0, 20039.0], [61.1, 20081.0], [61.2, 20081.0], [61.3, 20143.0], [61.4, 20143.0], [61.5, 20161.0], [61.6, 20193.0], [61.7, 20193.0], [61.8, 20206.0], [61.9, 20206.0], [62.0, 20218.0], [62.1, 20218.0], [62.2, 20221.0], [62.3, 20221.0], [62.4, 20228.0], [62.5, 20229.0], [62.6, 20229.0], [62.7, 20423.0], [62.8, 20423.0], [62.9, 20479.0], [63.0, 20479.0], [63.1, 20514.0], [63.2, 20514.0], [63.3, 20524.0], [63.4, 20524.0], [63.5, 20600.0], [63.6, 20612.0], [63.7, 20612.0], [63.8, 20633.0], [63.9, 20633.0], [64.0, 20645.0], [64.1, 20645.0], [64.2, 20685.0], [64.3, 20685.0], [64.4, 20723.0], [64.5, 20760.0], [64.6, 20760.0], [64.7, 20769.0], [64.8, 20769.0], [64.9, 20913.0], [65.0, 20913.0], [65.1, 20983.0], [65.2, 20983.0], [65.3, 21003.0], [65.4, 21012.0], [65.5, 21012.0], [65.6, 21015.0], [65.7, 21015.0], [65.8, 21043.0], [65.9, 21043.0], [66.0, 21052.0], [66.1, 21052.0], [66.2, 21124.0], [66.3, 21124.0], [66.4, 21291.0], [66.5, 21312.0], [66.6, 21312.0], [66.7, 21355.0], [66.8, 21355.0], [66.9, 21373.0], [67.0, 21373.0], [67.1, 21398.0], [67.2, 21398.0], [67.3, 21421.0], [67.4, 21430.0], [67.5, 21430.0], [67.6, 21552.0], [67.7, 21552.0], [67.8, 21598.0], [67.9, 21598.0], [68.0, 21666.0], [68.1, 21666.0], [68.2, 21714.0], [68.3, 21717.0], [68.4, 21717.0], [68.5, 21734.0], [68.6, 21734.0], [68.7, 21755.0], [68.8, 21755.0], [68.9, 21762.0], [69.0, 21762.0], [69.1, 21890.0], [69.2, 21890.0], [69.3, 21906.0], [69.4, 21942.0], [69.5, 21942.0], [69.6, 21972.0], [69.7, 21972.0], [69.8, 22020.0], [69.9, 22020.0], [70.0, 22028.0], [70.1, 22028.0], [70.2, 22067.0], [70.3, 22073.0], [70.4, 22073.0], [70.5, 22180.0], [70.6, 22180.0], [70.7, 22291.0], [70.8, 22291.0], [70.9, 22300.0], [71.0, 22300.0], [71.1, 22348.0], [71.2, 22365.0], [71.3, 22365.0], [71.4, 22395.0], [71.5, 22395.0], [71.6, 22463.0], [71.7, 22463.0], [71.8, 22479.0], [71.9, 22479.0], [72.0, 22500.0], [72.1, 22500.0], [72.2, 22565.0], [72.3, 22575.0], [72.4, 22575.0], [72.5, 22668.0], [72.6, 22668.0], [72.7, 22693.0], [72.8, 22693.0], [72.9, 22747.0], [73.0, 22747.0], [73.1, 22779.0], [73.2, 22914.0], [73.3, 22914.0], [73.4, 22947.0], [73.5, 22947.0], [73.6, 23070.0], [73.7, 23070.0], [73.8, 23186.0], [73.9, 23186.0], [74.0, 23191.0], [74.1, 23341.0], [74.2, 23341.0], [74.3, 23451.0], [74.4, 23451.0], [74.5, 23677.0], [74.6, 23677.0], [74.7, 23770.0], [74.8, 23770.0], [74.9, 23943.0], [75.0, 24001.0], [75.1, 24001.0], [75.2, 24197.0], [75.3, 24197.0], [75.4, 24228.0], [75.5, 24228.0], [75.6, 24267.0], [75.7, 24267.0], [75.8, 24279.0], [75.9, 24279.0], [76.0, 24353.0], [76.1, 24354.0], [76.2, 24354.0], [76.3, 24400.0], [76.4, 24400.0], [76.5, 24405.0], [76.6, 24405.0], [76.7, 24475.0], [76.8, 24475.0], [76.9, 24505.0], [77.0, 24578.0], [77.1, 24578.0], [77.2, 24830.0], [77.3, 24830.0], [77.4, 24834.0], [77.5, 24834.0], [77.6, 24881.0], [77.7, 24881.0], [77.8, 24911.0], [77.9, 24956.0], [78.0, 24956.0], [78.1, 25455.0], [78.2, 25455.0], [78.3, 25695.0], [78.4, 25695.0], [78.5, 25875.0], [78.6, 25875.0], [78.7, 25951.0], [78.8, 25951.0], [78.9, 25976.0], [79.0, 25998.0], [79.1, 25998.0], [79.2, 26118.0], [79.3, 26118.0], [79.4, 26144.0], [79.5, 26144.0], [79.6, 26196.0], [79.7, 26196.0], [79.8, 26499.0], [79.9, 26532.0], [80.0, 26532.0], [80.1, 26723.0], [80.2, 26723.0], [80.3, 26751.0], [80.4, 26751.0], [80.5, 26891.0], [80.6, 26891.0], [80.7, 27074.0], [80.8, 27123.0], [80.9, 27123.0], [81.0, 28126.0], [81.1, 28126.0], [81.2, 28131.0], [81.3, 28131.0], [81.4, 28219.0], [81.5, 28219.0], [81.6, 28841.0], [81.7, 28841.0], [81.8, 29064.0], [81.9, 29106.0], [82.0, 29106.0], [82.1, 29476.0], [82.2, 29476.0], [82.3, 29544.0], [82.4, 29544.0], [82.5, 29718.0], [82.6, 29718.0], [82.7, 29829.0], [82.8, 29847.0], [82.9, 29847.0], [83.0, 30104.0], [83.1, 30104.0], [83.2, 30125.0], [83.3, 30125.0], [83.4, 30233.0], [83.5, 30233.0], [83.6, 30368.0], [83.7, 30464.0], [83.8, 30464.0], [83.9, 30627.0], [84.0, 30627.0], [84.1, 30754.0], [84.2, 30754.0], [84.3, 31088.0], [84.4, 31088.0], [84.5, 31340.0], [84.6, 31340.0], [84.7, 31611.0], [84.8, 31623.0], [84.9, 31623.0], [85.0, 31974.0], [85.1, 31974.0], [85.2, 32123.0], [85.3, 32123.0], [85.4, 32279.0], [85.5, 32279.0], [85.6, 32402.0], [85.7, 32415.0], [85.8, 32415.0], [85.9, 32702.0], [86.0, 32702.0], [86.1, 32774.0], [86.2, 32774.0], [86.3, 33352.0], [86.4, 33352.0], [86.5, 33362.0], [86.6, 33450.0], [86.7, 33450.0], [86.8, 33959.0], [86.9, 33959.0], [87.0, 34046.0], [87.1, 34046.0], [87.2, 34105.0], [87.3, 34105.0], [87.4, 34341.0], [87.5, 34829.0], [87.6, 34829.0], [87.7, 34887.0], [87.8, 34887.0], [87.9, 35334.0], [88.0, 35334.0], [88.1, 35472.0], [88.2, 35472.0], [88.3, 35672.0], [88.4, 35672.0], [88.5, 36666.0], [88.6, 37519.0], [88.7, 37519.0], [88.8, 38459.0], [88.9, 38459.0], [89.0, 38808.0], [89.1, 38808.0], [89.2, 38983.0], [89.3, 38983.0], [89.4, 39155.0], [89.5, 39321.0], [89.6, 39321.0], [89.7, 39387.0], [89.8, 39387.0], [89.9, 39502.0], [90.0, 39502.0], [90.1, 40164.0], [90.2, 40164.0], [90.3, 40368.0], [90.4, 42845.0], [90.5, 42845.0], [90.6, 43056.0], [90.7, 43056.0], [90.8, 44154.0], [90.9, 44154.0], [91.0, 45755.0], [91.1, 45755.0], [91.2, 45758.0], [91.3, 45758.0], [91.4, 46384.0], [91.5, 47123.0], [91.6, 47123.0], [91.7, 47388.0], [91.8, 47388.0], [91.9, 47564.0], [92.0, 47564.0], [92.1, 47692.0], [92.2, 47692.0], [92.3, 47704.0], [92.4, 48003.0], [92.5, 48003.0], [92.6, 49547.0], [92.7, 49547.0], [92.8, 49866.0], [92.9, 49866.0], [93.0, 50026.0], [93.1, 50026.0], [93.2, 50090.0], [93.3, 50174.0], [93.4, 50174.0], [93.5, 50409.0], [93.6, 50409.0], [93.7, 50647.0], [93.8, 50647.0], [93.9, 51300.0], [94.0, 51300.0], [94.1, 51358.0], [94.2, 51358.0], [94.3, 52860.0], [94.4, 53104.0], [94.5, 53104.0], [94.6, 53765.0], [94.7, 53765.0], [94.8, 53807.0], [94.9, 53807.0], [95.0, 54897.0], [95.1, 54897.0], [95.2, 55110.0], [95.3, 55159.0], [95.4, 55159.0], [95.5, 55266.0], [95.6, 55266.0], [95.7, 55452.0], [95.8, 55452.0], [95.9, 55853.0], [96.0, 55853.0], [96.1, 55991.0], [96.2, 57051.0], [96.3, 57051.0], [96.4, 57524.0], [96.5, 57524.0], [96.6, 58506.0], [96.7, 58506.0], [96.8, 59001.0], [96.9, 59001.0], [97.0, 59115.0], [97.1, 59115.0], [97.2, 60115.0], [97.3, 60117.0], [97.4, 60117.0], [97.5, 60118.0], [97.6, 60118.0], [97.7, 60119.0], [97.8, 60119.0], [97.9, 60120.0], [98.0, 60120.0], [98.1, 60121.0], [98.2, 60124.0], [98.3, 60124.0], [98.4, 60130.0], [98.5, 60130.0], [98.6, 60153.0], [98.7, 60153.0], [98.8, 60171.0], [98.9, 60171.0], [99.0, 60171.0], [99.1, 60185.0], [99.2, 60185.0], [99.3, 60209.0], [99.4, 60209.0], [99.5, 60256.0], [99.6, 60256.0], [99.7, 60264.0], [99.8, 60264.0], [99.9, 60292.0], [100.0, 60292.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 221.0], [0.1, 221.0], [0.2, 223.0], [0.3, 223.0], [0.4, 224.0], [0.5, 224.0], [0.6, 224.0], [0.7, 224.0], [0.8, 224.0], [0.9, 224.0], [1.0, 224.0], [1.1, 224.0], [1.2, 224.0], [1.3, 224.0], [1.4, 224.0], [1.5, 224.0], [1.6, 224.0], [1.7, 224.0], [1.8, 224.0], [1.9, 224.0], [2.0, 224.0], [2.1, 224.0], [2.2, 224.0], [2.3, 224.0], [2.4, 225.0], [2.5, 225.0], [2.6, 225.0], [2.7, 225.0], [2.8, 225.0], [2.9, 225.0], [3.0, 225.0], [3.1, 225.0], [3.2, 225.0], [3.3, 225.0], [3.4, 225.0], [3.5, 225.0], [3.6, 225.0], [3.7, 225.0], [3.8, 225.0], [3.9, 225.0], [4.0, 225.0], [4.1, 225.0], [4.2, 225.0], [4.3, 225.0], [4.4, 225.0], [4.5, 225.0], [4.6, 225.0], [4.7, 225.0], [4.8, 225.0], [4.9, 225.0], [5.0, 225.0], [5.1, 225.0], [5.2, 225.0], [5.3, 226.0], [5.4, 226.0], [5.5, 226.0], [5.6, 226.0], [5.7, 226.0], [5.8, 226.0], [5.9, 226.0], [6.0, 226.0], [6.1, 226.0], [6.2, 226.0], [6.3, 226.0], [6.4, 226.0], [6.5, 226.0], [6.6, 226.0], [6.7, 226.0], [6.8, 226.0], [6.9, 226.0], [7.0, 226.0], [7.1, 226.0], [7.2, 226.0], [7.3, 226.0], [7.4, 226.0], [7.5, 226.0], [7.6, 226.0], [7.7, 226.0], [7.8, 226.0], [7.9, 226.0], [8.0, 226.0], [8.1, 226.0], [8.2, 226.0], [8.3, 226.0], [8.4, 226.0], [8.5, 226.0], [8.6, 226.0], [8.7, 226.0], [8.8, 226.0], [8.9, 226.0], [9.0, 226.0], [9.1, 226.0], [9.2, 226.0], [9.3, 226.0], [9.4, 226.0], [9.5, 226.0], [9.6, 226.0], [9.7, 226.0], [9.8, 226.0], [9.9, 226.0], [10.0, 226.0], [10.1, 226.0], [10.2, 226.0], [10.3, 226.0], [10.4, 226.0], [10.5, 226.0], [10.6, 226.0], [10.7, 226.0], [10.8, 226.0], [10.9, 226.0], [11.0, 226.0], [11.1, 227.0], [11.2, 227.0], [11.3, 227.0], [11.4, 227.0], [11.5, 227.0], [11.6, 227.0], [11.7, 227.0], [11.8, 227.0], [11.9, 227.0], [12.0, 227.0], [12.1, 227.0], [12.2, 227.0], [12.3, 227.0], [12.4, 227.0], [12.5, 227.0], [12.6, 227.0], [12.7, 227.0], [12.8, 227.0], [12.9, 227.0], [13.0, 227.0], [13.1, 227.0], [13.2, 227.0], [13.3, 227.0], [13.4, 227.0], [13.5, 227.0], [13.6, 228.0], [13.7, 228.0], [13.8, 228.0], [13.9, 228.0], [14.0, 228.0], [14.1, 228.0], [14.2, 228.0], [14.3, 228.0], [14.4, 228.0], [14.5, 228.0], [14.6, 228.0], [14.7, 228.0], [14.8, 228.0], [14.9, 228.0], [15.0, 228.0], [15.1, 228.0], [15.2, 228.0], [15.3, 228.0], [15.4, 228.0], [15.5, 228.0], [15.6, 228.0], [15.7, 228.0], [15.8, 228.0], [15.9, 228.0], [16.0, 228.0], [16.1, 228.0], [16.2, 228.0], [16.3, 228.0], [16.4, 228.0], [16.5, 228.0], [16.6, 228.0], [16.7, 228.0], [16.8, 228.0], [16.9, 228.0], [17.0, 228.0], [17.1, 228.0], [17.2, 228.0], [17.3, 228.0], [17.4, 228.0], [17.5, 228.0], [17.6, 228.0], [17.7, 228.0], [17.8, 228.0], [17.9, 228.0], [18.0, 228.0], [18.1, 228.0], [18.2, 228.0], [18.3, 229.0], [18.4, 229.0], [18.5, 229.0], [18.6, 229.0], [18.7, 229.0], [18.8, 229.0], [18.9, 229.0], [19.0, 229.0], [19.1, 229.0], [19.2, 229.0], [19.3, 229.0], [19.4, 229.0], [19.5, 229.0], [19.6, 229.0], [19.7, 229.0], [19.8, 229.0], [19.9, 229.0], [20.0, 229.0], [20.1, 229.0], [20.2, 229.0], [20.3, 229.0], [20.4, 229.0], [20.5, 229.0], [20.6, 229.0], [20.7, 229.0], [20.8, 229.0], [20.9, 229.0], [21.0, 229.0], [21.1, 229.0], [21.2, 229.0], [21.3, 229.0], [21.4, 229.0], [21.5, 229.0], [21.6, 229.0], [21.7, 230.0], [21.8, 230.0], [21.9, 230.0], [22.0, 230.0], [22.1, 230.0], [22.2, 230.0], [22.3, 230.0], [22.4, 230.0], [22.5, 230.0], [22.6, 230.0], [22.7, 230.0], [22.8, 230.0], [22.9, 230.0], [23.0, 230.0], [23.1, 230.0], [23.2, 230.0], [23.3, 230.0], [23.4, 230.0], [23.5, 230.0], [23.6, 230.0], [23.7, 230.0], [23.8, 230.0], [23.9, 230.0], [24.0, 230.0], [24.1, 230.0], [24.2, 230.0], [24.3, 230.0], [24.4, 230.0], [24.5, 230.0], [24.6, 230.0], [24.7, 230.0], [24.8, 230.0], [24.9, 230.0], [25.0, 230.0], [25.1, 230.0], [25.2, 230.0], [25.3, 230.0], [25.4, 230.0], [25.5, 230.0], [25.6, 230.0], [25.7, 231.0], [25.8, 231.0], [25.9, 231.0], [26.0, 231.0], [26.1, 231.0], [26.2, 231.0], [26.3, 231.0], [26.4, 231.0], [26.5, 231.0], [26.6, 231.0], [26.7, 231.0], [26.8, 232.0], [26.9, 232.0], [27.0, 232.0], [27.1, 232.0], [27.2, 232.0], [27.3, 232.0], [27.4, 232.0], [27.5, 232.0], [27.6, 232.0], [27.7, 232.0], [27.8, 232.0], [27.9, 232.0], [28.0, 232.0], [28.1, 232.0], [28.2, 232.0], [28.3, 232.0], [28.4, 233.0], [28.5, 233.0], [28.6, 233.0], [28.7, 233.0], [28.8, 233.0], [28.9, 233.0], [29.0, 233.0], [29.1, 233.0], [29.2, 233.0], [29.3, 233.0], [29.4, 233.0], [29.5, 233.0], [29.6, 233.0], [29.7, 233.0], [29.8, 233.0], [29.9, 233.0], [30.0, 234.0], [30.1, 234.0], [30.2, 234.0], [30.3, 234.0], [30.4, 234.0], [30.5, 234.0], [30.6, 234.0], [30.7, 234.0], [30.8, 234.0], [30.9, 234.0], [31.0, 234.0], [31.1, 234.0], [31.2, 234.0], [31.3, 234.0], [31.4, 234.0], [31.5, 234.0], [31.6, 234.0], [31.7, 234.0], [31.8, 234.0], [31.9, 234.0], [32.0, 234.0], [32.1, 234.0], [32.2, 234.0], [32.3, 234.0], [32.4, 235.0], [32.5, 235.0], [32.6, 235.0], [32.7, 235.0], [32.8, 235.0], [32.9, 235.0], [33.0, 235.0], [33.1, 235.0], [33.2, 235.0], [33.3, 235.0], [33.4, 235.0], [33.5, 235.0], [33.6, 235.0], [33.7, 235.0], [33.8, 235.0], [33.9, 235.0], [34.0, 235.0], [34.1, 235.0], [34.2, 235.0], [34.3, 235.0], [34.4, 235.0], [34.5, 235.0], [34.6, 235.0], [34.7, 235.0], [34.8, 235.0], [34.9, 235.0], [35.0, 235.0], [35.1, 235.0], [35.2, 235.0], [35.3, 235.0], [35.4, 235.0], [35.5, 235.0], [35.6, 235.0], [35.7, 235.0], [35.8, 235.0], [35.9, 235.0], [36.0, 235.0], [36.1, 235.0], [36.2, 235.0], [36.3, 235.0], [36.4, 235.0], [36.5, 235.0], [36.6, 235.0], [36.7, 235.0], [36.8, 235.0], [36.9, 235.0], [37.0, 235.0], [37.1, 235.0], [37.2, 235.0], [37.3, 235.0], [37.4, 235.0], [37.5, 235.0], [37.6, 235.0], [37.7, 235.0], [37.8, 235.0], [37.9, 235.0], [38.0, 235.0], [38.1, 235.0], [38.2, 235.0], [38.3, 235.0], [38.4, 235.0], [38.5, 236.0], [38.6, 236.0], [38.7, 236.0], [38.8, 236.0], [38.9, 236.0], [39.0, 236.0], [39.1, 236.0], [39.2, 236.0], [39.3, 236.0], [39.4, 236.0], [39.5, 236.0], [39.6, 236.0], [39.7, 236.0], [39.8, 236.0], [39.9, 236.0], [40.0, 236.0], [40.1, 236.0], [40.2, 236.0], [40.3, 236.0], [40.4, 236.0], [40.5, 236.0], [40.6, 236.0], [40.7, 236.0], [40.8, 236.0], [40.9, 236.0], [41.0, 236.0], [41.1, 236.0], [41.2, 236.0], [41.3, 236.0], [41.4, 236.0], [41.5, 236.0], [41.6, 236.0], [41.7, 236.0], [41.8, 236.0], [41.9, 236.0], [42.0, 236.0], [42.1, 236.0], [42.2, 236.0], [42.3, 236.0], [42.4, 236.0], [42.5, 236.0], [42.6, 236.0], [42.7, 236.0], [42.8, 236.0], [42.9, 236.0], [43.0, 236.0], [43.1, 236.0], [43.2, 236.0], [43.3, 236.0], [43.4, 236.0], [43.5, 236.0], [43.6, 236.0], [43.7, 236.0], [43.8, 236.0], [43.9, 236.0], [44.0, 236.0], [44.1, 236.0], [44.2, 236.0], [44.3, 236.0], [44.4, 236.0], [44.5, 236.0], [44.6, 236.0], [44.7, 236.0], [44.8, 237.0], [44.9, 237.0], [45.0, 237.0], [45.1, 237.0], [45.2, 237.0], [45.3, 237.0], [45.4, 237.0], [45.5, 237.0], [45.6, 237.0], [45.7, 237.0], [45.8, 237.0], [45.9, 237.0], [46.0, 237.0], [46.1, 237.0], [46.2, 237.0], [46.3, 237.0], [46.4, 237.0], [46.5, 237.0], [46.6, 237.0], [46.7, 237.0], [46.8, 237.0], [46.9, 237.0], [47.0, 237.0], [47.1, 237.0], [47.2, 237.0], [47.3, 237.0], [47.4, 237.0], [47.5, 237.0], [47.6, 237.0], [47.7, 237.0], [47.8, 237.0], [47.9, 237.0], [48.0, 237.0], [48.1, 237.0], [48.2, 237.0], [48.3, 237.0], [48.4, 237.0], [48.5, 237.0], [48.6, 237.0], [48.7, 237.0], [48.8, 237.0], [48.9, 237.0], [49.0, 237.0], [49.1, 237.0], [49.2, 237.0], [49.3, 237.0], [49.4, 237.0], [49.5, 237.0], [49.6, 237.0], [49.7, 237.0], [49.8, 237.0], [49.9, 237.0], [50.0, 237.0], [50.1, 237.0], [50.2, 237.0], [50.3, 237.0], [50.4, 237.0], [50.5, 237.0], [50.6, 237.0], [50.7, 237.0], [50.8, 238.0], [50.9, 238.0], [51.0, 238.0], [51.1, 238.0], [51.2, 238.0], [51.3, 238.0], [51.4, 238.0], [51.5, 238.0], [51.6, 238.0], [51.7, 238.0], [51.8, 238.0], [51.9, 238.0], [52.0, 238.0], [52.1, 238.0], [52.2, 238.0], [52.3, 238.0], [52.4, 238.0], [52.5, 238.0], [52.6, 238.0], [52.7, 238.0], [52.8, 238.0], [52.9, 238.0], [53.0, 238.0], [53.1, 238.0], [53.2, 238.0], [53.3, 238.0], [53.4, 238.0], [53.5, 238.0], [53.6, 238.0], [53.7, 238.0], [53.8, 238.0], [53.9, 238.0], [54.0, 238.0], [54.1, 238.0], [54.2, 238.0], [54.3, 238.0], [54.4, 238.0], [54.5, 238.0], [54.6, 238.0], [54.7, 238.0], [54.8, 238.0], [54.9, 238.0], [55.0, 238.0], [55.1, 238.0], [55.2, 238.0], [55.3, 238.0], [55.4, 238.0], [55.5, 238.0], [55.6, 239.0], [55.7, 239.0], [55.8, 239.0], [55.9, 239.0], [56.0, 239.0], [56.1, 239.0], [56.2, 239.0], [56.3, 239.0], [56.4, 239.0], [56.5, 239.0], [56.6, 239.0], [56.7, 239.0], [56.8, 239.0], [56.9, 239.0], [57.0, 239.0], [57.1, 239.0], [57.2, 239.0], [57.3, 239.0], [57.4, 239.0], [57.5, 239.0], [57.6, 239.0], [57.7, 239.0], [57.8, 239.0], [57.9, 239.0], [58.0, 239.0], [58.1, 239.0], [58.2, 239.0], [58.3, 239.0], [58.4, 239.0], [58.5, 239.0], [58.6, 239.0], [58.7, 239.0], [58.8, 239.0], [58.9, 239.0], [59.0, 239.0], [59.1, 239.0], [59.2, 239.0], [59.3, 239.0], [59.4, 239.0], [59.5, 239.0], [59.6, 239.0], [59.7, 239.0], [59.8, 239.0], [59.9, 239.0], [60.0, 239.0], [60.1, 239.0], [60.2, 239.0], [60.3, 239.0], [60.4, 239.0], [60.5, 240.0], [60.6, 240.0], [60.7, 240.0], [60.8, 240.0], [60.9, 240.0], [61.0, 240.0], [61.1, 240.0], [61.2, 240.0], [61.3, 240.0], [61.4, 240.0], [61.5, 240.0], [61.6, 240.0], [61.7, 240.0], [61.8, 240.0], [61.9, 240.0], [62.0, 240.0], [62.1, 240.0], [62.2, 240.0], [62.3, 240.0], [62.4, 240.0], [62.5, 240.0], [62.6, 240.0], [62.7, 240.0], [62.8, 240.0], [62.9, 240.0], [63.0, 240.0], [63.1, 240.0], [63.2, 240.0], [63.3, 240.0], [63.4, 241.0], [63.5, 241.0], [63.6, 241.0], [63.7, 241.0], [63.8, 241.0], [63.9, 241.0], [64.0, 241.0], [64.1, 241.0], [64.2, 241.0], [64.3, 241.0], [64.4, 241.0], [64.5, 241.0], [64.6, 241.0], [64.7, 241.0], [64.8, 241.0], [64.9, 241.0], [65.0, 241.0], [65.1, 241.0], [65.2, 242.0], [65.3, 242.0], [65.4, 242.0], [65.5, 242.0], [65.6, 242.0], [65.7, 242.0], [65.8, 242.0], [65.9, 242.0], [66.0, 242.0], [66.1, 242.0], [66.2, 242.0], [66.3, 242.0], [66.4, 242.0], [66.5, 242.0], [66.6, 242.0], [66.7, 242.0], [66.8, 243.0], [66.9, 243.0], [67.0, 243.0], [67.1, 243.0], [67.2, 243.0], [67.3, 243.0], [67.4, 243.0], [67.5, 243.0], [67.6, 243.0], [67.7, 244.0], [67.8, 244.0], [67.9, 244.0], [68.0, 244.0], [68.1, 244.0], [68.2, 244.0], [68.3, 244.0], [68.4, 244.0], [68.5, 244.0], [68.6, 244.0], [68.7, 244.0], [68.8, 244.0], [68.9, 244.0], [69.0, 245.0], [69.1, 245.0], [69.2, 245.0], [69.3, 245.0], [69.4, 245.0], [69.5, 245.0], [69.6, 245.0], [69.7, 246.0], [69.8, 246.0], [69.9, 246.0], [70.0, 246.0], [70.1, 246.0], [70.2, 246.0], [70.3, 246.0], [70.4, 247.0], [70.5, 247.0], [70.6, 247.0], [70.7, 247.0], [70.8, 247.0], [70.9, 247.0], [71.0, 247.0], [71.1, 247.0], [71.2, 247.0], [71.3, 247.0], [71.4, 247.0], [71.5, 247.0], [71.6, 247.0], [71.7, 247.0], [71.8, 247.0], [71.9, 247.0], [72.0, 247.0], [72.1, 247.0], [72.2, 247.0], [72.3, 247.0], [72.4, 247.0], [72.5, 247.0], [72.6, 248.0], [72.7, 248.0], [72.8, 248.0], [72.9, 248.0], [73.0, 248.0], [73.1, 248.0], [73.2, 248.0], [73.3, 248.0], [73.4, 248.0], [73.5, 248.0], [73.6, 248.0], [73.7, 248.0], [73.8, 248.0], [73.9, 248.0], [74.0, 248.0], [74.1, 248.0], [74.2, 248.0], [74.3, 248.0], [74.4, 249.0], [74.5, 249.0], [74.6, 249.0], [74.7, 249.0], [74.8, 249.0], [74.9, 249.0], [75.0, 249.0], [75.1, 249.0], [75.2, 249.0], [75.3, 249.0], [75.4, 249.0], [75.5, 249.0], [75.6, 249.0], [75.7, 250.0], [75.8, 250.0], [75.9, 250.0], [76.0, 250.0], [76.1, 250.0], [76.2, 250.0], [76.3, 250.0], [76.4, 250.0], [76.5, 250.0], [76.6, 250.0], [76.7, 250.0], [76.8, 251.0], [76.9, 251.0], [77.0, 251.0], [77.1, 251.0], [77.2, 251.0], [77.3, 251.0], [77.4, 251.0], [77.5, 251.0], [77.6, 251.0], [77.7, 251.0], [77.8, 251.0], [77.9, 251.0], [78.0, 252.0], [78.1, 252.0], [78.2, 252.0], [78.3, 252.0], [78.4, 252.0], [78.5, 252.0], [78.6, 252.0], [78.7, 252.0], [78.8, 252.0], [78.9, 252.0], [79.0, 252.0], [79.1, 253.0], [79.2, 253.0], [79.3, 253.0], [79.4, 253.0], [79.5, 253.0], [79.6, 253.0], [79.7, 253.0], [79.8, 253.0], [79.9, 253.0], [80.0, 253.0], [80.1, 253.0], [80.2, 254.0], [80.3, 254.0], [80.4, 254.0], [80.5, 254.0], [80.6, 254.0], [80.7, 255.0], [80.8, 255.0], [80.9, 255.0], [81.0, 255.0], [81.1, 256.0], [81.2, 256.0], [81.3, 256.0], [81.4, 256.0], [81.5, 256.0], [81.6, 256.0], [81.7, 256.0], [81.8, 256.0], [81.9, 256.0], [82.0, 256.0], [82.1, 256.0], [82.2, 256.0], [82.3, 256.0], [82.4, 257.0], [82.5, 257.0], [82.6, 257.0], [82.7, 257.0], [82.8, 257.0], [82.9, 258.0], [83.0, 258.0], [83.1, 258.0], [83.2, 258.0], [83.3, 258.0], [83.4, 258.0], [83.5, 258.0], [83.6, 258.0], [83.7, 258.0], [83.8, 258.0], [83.9, 258.0], [84.0, 258.0], [84.1, 258.0], [84.2, 259.0], [84.3, 259.0], [84.4, 259.0], [84.5, 259.0], [84.6, 259.0], [84.7, 259.0], [84.8, 259.0], [84.9, 259.0], [85.0, 259.0], [85.1, 260.0], [85.2, 260.0], [85.3, 260.0], [85.4, 260.0], [85.5, 260.0], [85.6, 260.0], [85.7, 260.0], [85.8, 260.0], [85.9, 260.0], [86.0, 261.0], [86.1, 261.0], [86.2, 261.0], [86.3, 261.0], [86.4, 261.0], [86.5, 263.0], [86.6, 263.0], [86.7, 263.0], [86.8, 263.0], [86.9, 263.0], [87.0, 263.0], [87.1, 264.0], [87.2, 265.0], [87.3, 265.0], [87.4, 265.0], [87.5, 265.0], [87.6, 265.0], [87.7, 265.0], [87.8, 266.0], [87.9, 266.0], [88.0, 266.0], [88.1, 266.0], [88.2, 266.0], [88.3, 267.0], [88.4, 267.0], [88.5, 267.0], [88.6, 267.0], [88.7, 267.0], [88.8, 267.0], [88.9, 268.0], [89.0, 268.0], [89.1, 268.0], [89.2, 269.0], [89.3, 269.0], [89.4, 269.0], [89.5, 269.0], [89.6, 270.0], [89.7, 270.0], [89.8, 270.0], [89.9, 272.0], [90.0, 272.0], [90.1, 273.0], [90.2, 273.0], [90.3, 273.0], [90.4, 273.0], [90.5, 274.0], [90.6, 274.0], [90.7, 274.0], [90.8, 275.0], [90.9, 275.0], [91.0, 275.0], [91.1, 275.0], [91.2, 276.0], [91.3, 276.0], [91.4, 276.0], [91.5, 276.0], [91.6, 276.0], [91.7, 277.0], [91.8, 277.0], [91.9, 277.0], [92.0, 277.0], [92.1, 278.0], [92.2, 278.0], [92.3, 280.0], [92.4, 280.0], [92.5, 280.0], [92.6, 282.0], [92.7, 282.0], [92.8, 282.0], [92.9, 282.0], [93.0, 283.0], [93.1, 283.0], [93.2, 283.0], [93.3, 283.0], [93.4, 286.0], [93.5, 286.0], [93.6, 287.0], [93.7, 288.0], [93.8, 288.0], [93.9, 292.0], [94.0, 292.0], [94.1, 292.0], [94.2, 292.0], [94.3, 292.0], [94.4, 292.0], [94.5, 292.0], [94.6, 294.0], [94.7, 294.0], [94.8, 295.0], [94.9, 295.0], [95.0, 296.0], [95.1, 296.0], [95.2, 296.0], [95.3, 296.0], [95.4, 299.0], [95.5, 299.0], [95.6, 299.0], [95.7, 299.0], [95.8, 299.0], [95.9, 299.0], [96.0, 299.0], [96.1, 301.0], [96.2, 301.0], [96.3, 301.0], [96.4, 304.0], [96.5, 304.0], [96.6, 305.0], [96.7, 305.0], [96.8, 312.0], [96.9, 312.0], [97.0, 312.0], [97.1, 312.0], [97.2, 312.0], [97.3, 313.0], [97.4, 313.0], [97.5, 320.0], [97.6, 320.0], [97.7, 322.0], [97.8, 322.0], [97.9, 333.0], [98.0, 333.0], [98.1, 335.0], [98.2, 337.0], [98.3, 337.0], [98.4, 340.0], [98.5, 340.0], [98.6, 340.0], [98.7, 340.0], [98.8, 342.0], [98.9, 342.0], [99.0, 346.0], [99.1, 352.0], [99.2, 352.0], [99.3, 356.0], [99.4, 356.0], [99.5, 357.0], [99.6, 357.0], [99.7, 1237.0], [99.8, 1237.0], [99.9, 1240.0], [100.0, 1240.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 532.0, "series": [{"data": [[32900.0, 1.0], [34500.0, 1.0], [34100.0, 1.0], [35700.0, 1.0], [37700.0, 1.0], [39700.0, 1.0], [39300.0, 1.0], [47700.0, 1.0], [47300.0, 1.0], [49700.0, 1.0], [200.0, 2.0], [53300.0, 1.0], [54100.0, 1.0], [55300.0, 2.0], [57300.0, 1.0], [55700.0, 1.0], [57700.0, 1.0], [59300.0, 1.0], [60500.0, 3.0], [300.0, 85.0], [400.0, 4.0], [700.0, 1.0], [800.0, 1.0], [1000.0, 4.0], [1100.0, 1.0], [1200.0, 1.0], [1300.0, 4.0], [1500.0, 1.0], [3900.0, 2.0], [4400.0, 2.0], [4800.0, 2.0], [5000.0, 4.0], [5200.0, 2.0], [5300.0, 6.0], [5600.0, 2.0], [5400.0, 3.0], [5500.0, 4.0], [5800.0, 5.0], [5700.0, 1.0], [5900.0, 1.0], [6300.0, 1.0], [6200.0, 3.0], [6400.0, 1.0], [6600.0, 2.0], [6500.0, 2.0], [6700.0, 1.0], [6900.0, 2.0], [7100.0, 4.0], [7000.0, 1.0], [7300.0, 3.0], [7400.0, 2.0], [7600.0, 1.0], [7900.0, 2.0], [7800.0, 4.0], [7700.0, 1.0], [8500.0, 3.0], [8200.0, 1.0], [8700.0, 2.0], [8300.0, 1.0], [8600.0, 1.0], [8400.0, 2.0], [9200.0, 4.0], [8800.0, 1.0], [9000.0, 1.0], [9100.0, 1.0], [8900.0, 1.0], [9300.0, 5.0], [9700.0, 2.0], [9600.0, 1.0], [9800.0, 4.0], [10100.0, 1.0], [9900.0, 3.0], [10700.0, 3.0], [10300.0, 1.0], [10600.0, 1.0], [10500.0, 2.0], [10800.0, 2.0], [11100.0, 1.0], [11300.0, 2.0], [11600.0, 2.0], [11500.0, 1.0], [11700.0, 1.0], [12200.0, 1.0], [12000.0, 1.0], [12100.0, 2.0], [12700.0, 4.0], [12600.0, 2.0], [12500.0, 4.0], [12300.0, 2.0], [12400.0, 2.0], [12800.0, 2.0], [12900.0, 1.0], [13200.0, 4.0], [13000.0, 4.0], [13300.0, 1.0], [13400.0, 4.0], [13500.0, 3.0], [13600.0, 2.0], [13700.0, 1.0], [14200.0, 3.0], [14300.0, 2.0], [13900.0, 1.0], [14000.0, 1.0], [14600.0, 2.0], [14400.0, 1.0], [15100.0, 2.0], [15000.0, 1.0], [15300.0, 3.0], [15200.0, 2.0], [14900.0, 2.0], [15800.0, 2.0], [15600.0, 1.0], [15500.0, 1.0], [16000.0, 2.0], [15900.0, 1.0], [16300.0, 1.0], [16100.0, 2.0], [16200.0, 2.0], [17000.0, 2.0], [16600.0, 2.0], [16400.0, 3.0], [17400.0, 2.0], [17200.0, 1.0], [16800.0, 1.0], [18000.0, 1.0], [18200.0, 2.0], [17600.0, 2.0], [19200.0, 3.0], [19000.0, 1.0], [19400.0, 2.0], [18800.0, 1.0], [20400.0, 7.0], [20000.0, 2.0], [20200.0, 1.0], [21200.0, 6.0], [20800.0, 4.0], [21000.0, 1.0], [20600.0, 1.0], [22400.0, 2.0], [21600.0, 4.0], [22200.0, 3.0], [22000.0, 2.0], [23400.0, 2.0], [22800.0, 2.0], [23000.0, 1.0], [22600.0, 1.0], [24400.0, 3.0], [24000.0, 1.0], [24200.0, 2.0], [24800.0, 1.0], [24600.0, 2.0], [25000.0, 2.0], [26400.0, 1.0], [26200.0, 3.0], [27000.0, 2.0], [28400.0, 1.0], [29000.0, 1.0], [30600.0, 2.0], [30000.0, 2.0], [30400.0, 1.0], [30800.0, 1.0], [31800.0, 2.0], [32200.0, 1.0], [32600.0, 1.0], [33600.0, 2.0], [36800.0, 1.0], [39600.0, 1.0], [40400.0, 1.0], [39200.0, 1.0], [44400.0, 1.0], [43200.0, 1.0], [46000.0, 2.0], [47600.0, 1.0], [50800.0, 1.0], [50400.0, 1.0], [50000.0, 1.0], [51600.0, 1.0], [54000.0, 1.0], [56000.0, 1.0], [59200.0, 1.0], [60400.0, 6.0], [33500.0, 2.0], [34300.0, 1.0], [35900.0, 1.0], [35500.0, 1.0], [35100.0, 1.0], [39500.0, 1.0], [43100.0, 1.0], [47900.0, 2.0], [50300.0, 1.0], [51500.0, 1.0], [55100.0, 1.0], [58700.0, 1.0], [60300.0, 7.0], [16700.0, 2.0], [17300.0, 1.0], [16500.0, 1.0], [17500.0, 1.0], [18300.0, 3.0], [17900.0, 2.0], [18100.0, 1.0], [18500.0, 3.0], [18900.0, 4.0], [19100.0, 2.0], [18700.0, 1.0], [19300.0, 1.0], [20300.0, 2.0], [19700.0, 1.0], [21300.0, 2.0], [20900.0, 3.0], [21500.0, 3.0], [20700.0, 3.0], [21900.0, 5.0], [22100.0, 3.0], [22500.0, 4.0], [22300.0, 1.0], [21700.0, 1.0], [22700.0, 3.0], [23100.0, 3.0], [22900.0, 2.0], [23500.0, 1.0], [23300.0, 1.0], [24500.0, 3.0], [23700.0, 1.0], [23900.0, 1.0], [24700.0, 2.0], [25100.0, 3.0], [25700.0, 1.0], [26100.0, 1.0], [25900.0, 1.0], [26300.0, 2.0], [27300.0, 2.0], [26700.0, 2.0], [27100.0, 1.0], [28300.0, 2.0], [29300.0, 2.0], [29900.0, 1.0], [30300.0, 1.0], [30500.0, 1.0], [29700.0, 2.0], [30900.0, 1.0], [31500.0, 1.0], [31300.0, 1.0], [32500.0, 1.0], [32300.0, 1.0], [33000.0, 1.0], [34200.0, 1.0], [35000.0, 1.0], [38600.0, 1.0], [40600.0, 1.0], [39000.0, 1.0], [46600.0, 1.0], [48200.0, 1.0], [50600.0, 1.0], [50200.0, 1.0], [53000.0, 1.0], [55400.0, 1.0], [56200.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 89.0], [33300.0, 2.0], [34100.0, 1.0], [35300.0, 1.0], [38900.0, 1.0], [39300.0, 2.0], [40100.0, 1.0], [44100.0, 1.0], [45700.0, 2.0], [47300.0, 1.0], [47700.0, 1.0], [50100.0, 1.0], [51300.0, 2.0], [53700.0, 1.0], [58500.0, 1.0], [60100.0, 12.0], [500.0, 2.0], [800.0, 5.0], [900.0, 1.0], [1000.0, 1.0], [1100.0, 3.0], [1300.0, 1.0], [3700.0, 1.0], [3600.0, 1.0], [4200.0, 2.0], [4600.0, 2.0], [4700.0, 2.0], [4800.0, 2.0], [5000.0, 4.0], [5100.0, 6.0], [5300.0, 4.0], [5200.0, 2.0], [5400.0, 2.0], [5500.0, 3.0], [5600.0, 2.0], [5700.0, 1.0], [6100.0, 1.0], [5900.0, 2.0], [6000.0, 1.0], [6200.0, 1.0], [6300.0, 3.0], [6500.0, 1.0], [6400.0, 1.0], [6600.0, 1.0], [6800.0, 3.0], [6900.0, 2.0], [6700.0, 1.0], [7000.0, 3.0], [7100.0, 1.0], [7200.0, 1.0], [7300.0, 1.0], [7500.0, 3.0], [7600.0, 3.0], [7700.0, 1.0], [8000.0, 1.0], [8100.0, 3.0], [8600.0, 2.0], [8700.0, 1.0], [8200.0, 2.0], [8300.0, 2.0], [8500.0, 1.0], [8400.0, 1.0], [9000.0, 7.0], [9100.0, 2.0], [8900.0, 1.0], [9500.0, 2.0], [9400.0, 1.0], [9300.0, 1.0], [9600.0, 5.0], [9700.0, 2.0], [10100.0, 1.0], [9900.0, 1.0], [10200.0, 1.0], [10500.0, 4.0], [10400.0, 1.0], [10300.0, 1.0], [11000.0, 2.0], [10900.0, 1.0], [11700.0, 1.0], [11400.0, 2.0], [11300.0, 2.0], [12000.0, 2.0], [12100.0, 1.0], [11800.0, 2.0], [12200.0, 2.0], [12500.0, 3.0], [12400.0, 3.0], [12600.0, 3.0], [12300.0, 5.0], [12700.0, 1.0], [13200.0, 4.0], [13000.0, 3.0], [12800.0, 2.0], [13100.0, 3.0], [13300.0, 2.0], [12900.0, 1.0], [13600.0, 1.0], [13500.0, 1.0], [13400.0, 1.0], [13800.0, 1.0], [13900.0, 2.0], [14000.0, 2.0], [14300.0, 1.0], [14100.0, 2.0], [14800.0, 2.0], [14600.0, 1.0], [14700.0, 1.0], [14400.0, 1.0], [14900.0, 2.0], [15100.0, 1.0], [15000.0, 3.0], [15300.0, 1.0], [15600.0, 2.0], [15700.0, 2.0], [15800.0, 2.0], [15400.0, 1.0], [16200.0, 1.0], [16100.0, 3.0], [15900.0, 1.0], [16000.0, 2.0], [16300.0, 1.0], [17200.0, 3.0], [16800.0, 1.0], [16400.0, 2.0], [17400.0, 1.0], [16600.0, 1.0], [18400.0, 1.0], [18000.0, 2.0], [18200.0, 1.0], [18800.0, 1.0], [19000.0, 3.0], [18600.0, 3.0], [19400.0, 1.0], [19200.0, 1.0], [20200.0, 5.0], [20000.0, 2.0], [20400.0, 2.0], [21000.0, 5.0], [20600.0, 5.0], [21200.0, 1.0], [21400.0, 2.0], [22000.0, 4.0], [21800.0, 1.0], [21600.0, 1.0], [22400.0, 2.0], [22200.0, 1.0], [23400.0, 1.0], [22600.0, 2.0], [23000.0, 1.0], [24400.0, 3.0], [24200.0, 3.0], [24000.0, 1.0], [23600.0, 1.0], [25400.0, 1.0], [24800.0, 3.0], [26400.0, 1.0], [25800.0, 1.0], [25600.0, 1.0], [27000.0, 1.0], [26800.0, 1.0], [28200.0, 1.0], [29000.0, 1.0], [29400.0, 1.0], [28800.0, 1.0], [30400.0, 1.0], [30200.0, 1.0], [30600.0, 1.0], [29800.0, 2.0], [31600.0, 2.0], [31000.0, 1.0], [32400.0, 2.0], [32200.0, 1.0], [34800.0, 2.0], [34000.0, 1.0], [35600.0, 1.0], [38800.0, 1.0], [38400.0, 1.0], [42800.0, 1.0], [47600.0, 1.0], [48000.0, 1.0], [50000.0, 2.0], [50400.0, 1.0], [52800.0, 1.0], [55200.0, 1.0], [54800.0, 1.0], [34300.0, 1.0], [33900.0, 1.0], [37500.0, 1.0], [39500.0, 1.0], [40300.0, 1.0], [39100.0, 1.0], [46300.0, 1.0], [47100.0, 1.0], [47500.0, 1.0], [49500.0, 1.0], [53100.0, 1.0], [55100.0, 2.0], [55900.0, 1.0], [57500.0, 1.0], [59100.0, 1.0], [16700.0, 1.0], [16500.0, 2.0], [17300.0, 1.0], [17100.0, 1.0], [16900.0, 1.0], [17700.0, 3.0], [18300.0, 2.0], [17900.0, 2.0], [18100.0, 2.0], [18900.0, 2.0], [18700.0, 2.0], [19100.0, 2.0], [20100.0, 3.0], [19700.0, 2.0], [21300.0, 4.0], [21500.0, 2.0], [20900.0, 2.0], [20500.0, 2.0], [21100.0, 1.0], [20700.0, 3.0], [21900.0, 3.0], [21700.0, 5.0], [22300.0, 4.0], [22100.0, 1.0], [22500.0, 3.0], [22900.0, 2.0], [23100.0, 2.0], [22700.0, 2.0], [23300.0, 1.0], [24500.0, 2.0], [24300.0, 2.0], [24100.0, 1.0], [23700.0, 1.0], [23900.0, 1.0], [24900.0, 2.0], [26100.0, 3.0], [25900.0, 3.0], [26500.0, 1.0], [27100.0, 1.0], [26700.0, 2.0], [28100.0, 2.0], [29100.0, 1.0], [29500.0, 1.0], [29700.0, 1.0], [30700.0, 1.0], [30100.0, 2.0], [30300.0, 1.0], [31300.0, 1.0], [32700.0, 2.0], [31900.0, 1.0], [32100.0, 1.0], [33400.0, 1.0], [36600.0, 1.0], [35400.0, 1.0], [43000.0, 1.0], [50600.0, 1.0], [49800.0, 1.0], [53800.0, 1.0], [55800.0, 1.0], [57000.0, 1.0], [55400.0, 1.0], [59000.0, 1.0], [60200.0, 4.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 20.0], [1200.0, 2.0], [200.0, 532.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 209.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 465.0, "series": [{"data": [[0.0, 465.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 432.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 209.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.8, "minX": 1.68517644E12, "maxY": 23.927999999999994, "series": [{"data": [[1.68517692E12, 15.0], [1.68517662E12, 5.772151898734178], [1.68517722E12, 23.927999999999994], [1.68517656E12, 5.0], [1.68517716E12, 20.40869565217391], [1.68517686E12, 14.189189189189191], [1.6851768E12, 10.461538461538463], [1.6851765E12, 4.083333333333334], [1.6851771E12, 20.0], [1.68517644E12, 1.8], [1.68517704E12, 19.123376623376625], [1.68517674E12, 10.0], [1.68517734E12, 8.516129032258066], [1.68517668E12, 8.88709677419355], [1.68517698E12, 15.45454545454546], [1.68517728E12, 23.78125]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68517734E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 226.0, "minX": 1.0, "maxY": 42161.53333333334, "series": [{"data": [[2.0, 12720.75], [8.0, 8752.818181818184], [9.0, 10966.23076923077], [10.0, 13749.905405405405], [11.0, 15817.285714285716], [3.0, 9269.0], [12.0, 32859.5], [13.0, 16006.052631578948], [14.0, 8428.0], [15.0, 13654.280701754393], [4.0, 28280.6], [16.0, 18794.8], [17.0, 12916.9], [18.0, 17993.357142857145], [19.0, 18632.571428571428], [5.0, 17670.624999999996], [20.0, 19309.99047619047], [21.0, 15347.6], [22.0, 42161.53333333334], [23.0, 22323.571428571428], [6.0, 7746.0], [24.0, 32432.5], [25.0, 36094.43181818183], [7.0, 6725.8]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[15.137184115523464, 18006.6534296029]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 12459.0], [8.0, 8521.818181818182], [9.0, 10731.538461538461], [10.0, 13479.391891891893], [11.0, 15573.28571428571], [3.0, 9026.0], [12.0, 32625.5], [13.0, 15773.052631578947], [14.0, 8189.571428571429], [15.0, 13410.552631578943], [4.0, 28037.4], [16.0, 18555.33333333333], [17.0, 14069.555555555558], [18.0, 17751.142857142855], [19.0, 18395.85714285714], [5.0, 17413.031249999993], [20.0, 19064.371428571427], [21.0, 15107.6], [22.0, 41917.53333333333], [23.0, 25763.0], [6.0, 7508.363636363636], [24.0, 32191.0], [25.0, 35842.59090909091], [7.0, 6481.8]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[15.1195652173913, 17823.01811594204]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 246.0], [3.0, 238.0], [4.0, 247.0], [5.0, 257.96875000000006], [6.0, 233.36363636363637], [7.0, 236.49999999999997], [8.0, 235.27272727272725], [9.0, 235.9230769230769], [10.0, 271.3108108108108], [11.0, 234.07142857142856], [12.0, 226.0], [13.0, 237.94736842105266], [14.0, 238.28571428571428], [15.0, 243.26548672566375], [1.0, 313.0], [16.0, 247.93749999999997], [17.0, 238.9], [18.0, 236.7857142857143], [19.0, 253.71428571428572], [20.0, 245.2038834951456], [21.0, 252.2857142857143], [22.0, 247.85714285714286], [23.0, 247.875], [24.0, 241.55555555555554], [25.0, 250.5581395348837]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[15.135379061371843, 247.97472924187727]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 145.95, "minX": 1.68517644E12, "maxY": 9437.433333333332, "series": [{"data": [[1.68517692E12, 3465.35], [1.68517662E12, 1120.1166666666666], [1.68517722E12, 2604.7], [1.68517656E12, 1100.75], [1.68517716E12, 2861.133333333333], [1.68517686E12, 3218.133333333333], [1.6851768E12, 2315.483333333333], [1.6851765E12, 842.6833333333333], [1.6851771E12, 3338.5333333333333], [1.68517644E12, 145.95], [1.68517704E12, 3815.116666666667], [1.68517674E12, 2402.05], [1.68517734E12, 542.5333333333333], [1.68517668E12, 1545.8333333333333], [1.68517698E12, 3815.116666666667], [1.68517728E12, 2087.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68517692E12, 6688.416666666667], [1.68517662E12, 4083.8333333333335], [1.68517722E12, 5967.033333333334], [1.68517656E12, 2299.5333333333333], [1.68517716E12, 5121.6], [1.68517686E12, 9437.433333333332], [1.6851768E12, 5009.133333333333], [1.6851765E12, 1606.05], [1.6851771E12, 6223.6], [1.68517644E12, 289.56666666666666], [1.68517704E12, 7192.333333333333], [1.68517674E12, 5819.783333333334], [1.68517734E12, 2030.45], [1.68517668E12, 6356.45], [1.68517698E12, 7173.3], [1.68517728E12, 5228.883333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68517734E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 234.55813953488376, "minX": 1.68517644E12, "maxY": 49771.59999999999, "series": [{"data": [[1.68517692E12, 15212.384615384615], [1.68517662E12, 6739.444444444444], [1.68517722E12, 24915.999999999993], [1.68517656E12, 21774.08333333333], [1.68517716E12, 23153.513513513513], [1.68517686E12, 9580.016129032256], [1.6851768E12, 12269.764705882353], [1.6851765E12, 13258.307692307691], [1.6851771E12, 21765.94], [1.68517644E12, 7366.0], [1.68517704E12, 16430.44], [1.68517674E12, 14818.459459459456], [1.68517734E12, 49771.59999999999], [1.68517668E12, 7353.09756097561], [1.68517698E12, 14195.359999999999], [1.68517728E12, 43746.34285714285]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68517692E12, 14955.019999999993], [1.68517662E12, 6512.920000000003], [1.68517722E12, 26018.880952380954], [1.68517656E12, 20944.866666666665], [1.68517716E12, 19821.631578947367], [1.68517686E12, 9375.833333333334], [1.6851768E12, 12027.352941176472], [1.6851765E12, 11292.400000000001], [1.6851771E12, 20295.199999999997], [1.68517644E12, 7053.0], [1.68517704E12, 16173.431372549023], [1.68517674E12, 16055.750000000004], [1.68517734E12, 49558.50000000001], [1.68517668E12, 4985.375000000002], [1.68517698E12, 13933.999999999998], [1.68517728E12, 46845.38235294118]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68517692E12, 247.28], [1.68517662E12, 240.29629629629628], [1.68517722E12, 249.95555555555552], [1.68517656E12, 272.9333333333334], [1.68517716E12, 249.04999999999998], [1.68517686E12, 239.25396825396822], [1.6851768E12, 239.72222222222226], [1.6851765E12, 241.84615384615387], [1.6851771E12, 246.23913043478262], [1.68517644E12, 272.0], [1.68517704E12, 240.77358490566039], [1.68517674E12, 297.6], [1.68517668E12, 234.55813953488376], [1.68517698E12, 242.37735849056605], [1.68517728E12, 245.74074074074076]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68517734E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 234.37209302325581, "minX": 1.68517644E12, "maxY": 49771.4, "series": [{"data": [[1.68517692E12, 15211.94230769231], [1.68517662E12, 6738.703703703704], [1.68517722E12, 24915.42105263158], [1.68517656E12, 21773.0], [1.68517716E12, 23153.189189189194], [1.68517686E12, 9579.677419354837], [1.6851768E12, 12269.382352941177], [1.6851765E12, 13257.76923076923], [1.6851771E12, 21765.600000000002], [1.68517644E12, 7362.0], [1.68517704E12, 16429.940000000002], [1.68517674E12, 14818.027027027027], [1.68517734E12, 49771.4], [1.68517668E12, 7352.780487804877], [1.68517698E12, 14194.52], [1.68517728E12, 43746.02857142857]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68517692E12, 14954.84], [1.68517662E12, 6512.720000000001], [1.68517722E12, 26018.595238095233], [1.68517656E12, 20944.733333333334], [1.68517716E12, 19821.44736842105], [1.68517686E12, 9375.649999999998], [1.6851768E12, 12027.294117647058], [1.6851765E12, 11291.9], [1.6851771E12, 20295.08888888889], [1.68517644E12, 7052.0], [1.68517704E12, 16173.294117647056], [1.68517674E12, 16055.525], [1.68517734E12, 49558.31250000001], [1.68517668E12, 4985.225000000002], [1.68517698E12, 13933.52941176471], [1.68517728E12, 46845.26470588235]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68517692E12, 246.93999999999997], [1.68517662E12, 239.92592592592595], [1.68517722E12, 249.66666666666663], [1.68517656E12, 271.93333333333334], [1.68517716E12, 248.85000000000005], [1.68517686E12, 239.09523809523807], [1.6851768E12, 239.52777777777774], [1.6851765E12, 241.61538461538464], [1.6851771E12, 246.00000000000006], [1.68517644E12, 271.0], [1.68517704E12, 240.566037735849], [1.68517674E12, 297.32499999999993], [1.68517668E12, 234.37209302325581], [1.68517698E12, 242.00000000000006], [1.68517728E12, 245.7037037037037]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68517734E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68517644E12, "maxY": 180.0, "series": [{"data": [[1.68517692E12, 122.75], [1.68517662E12, 120.07407407407406], [1.68517722E12, 115.52631578947367], [1.68517656E12, 157.08333333333331], [1.68517716E12, 113.91891891891893], [1.68517686E12, 115.14516129032256], [1.6851768E12, 117.11764705882356], [1.6851765E12, 115.46153846153847], [1.6851771E12, 115.59999999999997], [1.68517644E12, 180.0], [1.68517704E12, 114.5], [1.68517674E12, 121.13513513513513], [1.68517734E12, 114.13333333333335], [1.68517668E12, 115.60975609756099], [1.68517698E12, 116.42], [1.68517728E12, 115.62857142857143]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68517692E12, 0.0], [1.68517662E12, 0.0], [1.68517722E12, 0.0], [1.68517656E12, 0.0], [1.68517716E12, 0.0], [1.68517686E12, 0.0], [1.6851768E12, 0.0], [1.6851765E12, 0.0], [1.6851771E12, 0.0], [1.68517644E12, 0.0], [1.68517704E12, 0.0], [1.68517674E12, 0.0], [1.68517734E12, 0.0], [1.68517668E12, 0.0], [1.68517698E12, 0.0], [1.68517728E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68517692E12, 122.46], [1.68517662E12, 119.62962962962965], [1.68517722E12, 114.42222222222222], [1.68517656E12, 149.13333333333335], [1.68517716E12, 114.84999999999997], [1.68517686E12, 115.44444444444446], [1.6851768E12, 116.86111111111111], [1.6851765E12, 115.07692307692308], [1.6851771E12, 115.52173913043477], [1.68517644E12, 138.33333333333334], [1.68517704E12, 114.54716981132073], [1.68517674E12, 121.09999999999997], [1.68517668E12, 115.46511627906979], [1.68517698E12, 116.35849056603774], [1.68517728E12, 116.25925925925927]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68517734E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 221.0, "minX": 1.68517644E12, "maxY": 59115.0, "series": [{"data": [[1.68517692E12, 39387.0], [1.68517662E12, 24578.0], [1.68517722E12, 57051.0], [1.68517656E12, 22395.0], [1.68517716E12, 55853.0], [1.68517686E12, 24400.0], [1.6851768E12, 24881.0], [1.6851765E12, 17762.0], [1.6851771E12, 33362.0], [1.68517644E12, 7053.0], [1.68517704E12, 26118.0], [1.68517674E12, 36666.0], [1.68517734E12, 59115.0], [1.68517668E12, 29718.0], [1.68517698E12, 29064.0], [1.68517728E12, 59001.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68517692E12, 27011.4], [1.68517662E12, 24394.8], [1.68517722E12, 47482.8], [1.68517656E12, 22062.9], [1.68517716E12, 28407.500000000015], [1.68517686E12, 21631.8], [1.6851768E12, 20706.399999999998], [1.6851765E12, 17089.2], [1.6851771E12, 28698.999999999996], [1.68517644E12, 7053.0], [1.68517704E12, 22127.0], [1.68517674E12, 32774.0], [1.68517734E12, 58810.5], [1.68517668E12, 25825.5], [1.68517698E12, 21185.0], [1.68517728E12, 50504.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68517692E12, 39387.0], [1.68517662E12, 24578.0], [1.68517722E12, 57051.0], [1.68517656E12, 22395.0], [1.68517716E12, 55853.0], [1.68517686E12, 24400.0], [1.6851768E12, 24881.0], [1.6851765E12, 17762.0], [1.6851771E12, 33362.0], [1.68517644E12, 7053.0], [1.68517704E12, 26096.850000000002], [1.68517674E12, 36666.0], [1.68517734E12, 59115.0], [1.68517668E12, 29718.0], [1.68517698E12, 28964.500000000007], [1.68517728E12, 59001.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68517692E12, 31248.24999999999], [1.68517662E12, 24560.7], [1.68517722E12, 55035.45], [1.68517656E12, 22342.75], [1.68517716E12, 34166.45], [1.68517686E12, 22374.999999999996], [1.6851768E12, 21731.8], [1.6851765E12, 17667.199999999997], [1.6851771E12, 30756.799999999992], [1.68517644E12, 7053.0], [1.68517704E12, 23500.75], [1.68517674E12, 34829.0], [1.68517734E12, 59115.0], [1.68517668E12, 28837.5], [1.68517698E12, 25269.0], [1.68517728E12, 55866.399999999994]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68517692E12, 224.0], [1.68517662E12, 227.0], [1.68517722E12, 224.0], [1.68517656E12, 229.0], [1.68517716E12, 224.0], [1.68517686E12, 226.0], [1.6851768E12, 228.0], [1.6851765E12, 233.0], [1.6851771E12, 221.0], [1.68517644E12, 236.0], [1.68517704E12, 224.0], [1.68517674E12, 226.0], [1.68517734E12, 31623.0], [1.68517668E12, 228.0], [1.68517698E12, 226.0], [1.68517728E12, 224.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68517692E12, 346.0], [1.68517662E12, 276.0], [1.68517722E12, 260.5], [1.68517656E12, 8437.0], [1.68517716E12, 326.5], [1.68517686E12, 288.5], [1.6851768E12, 4649.0], [1.6851765E12, 249.0], [1.6851771E12, 356.0], [1.68517644E12, 290.0], [1.68517704E12, 293.0], [1.68517674E12, 357.0], [1.68517734E12, 50663.0], [1.68517668E12, 253.0], [1.68517698E12, 298.5], [1.68517728E12, 18636.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68517734E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 125.0, "minX": 1.0, "maxY": 14058.0, "series": [{"data": [[1.0, 275.5], [2.0, 272.5], [4.0, 268.0], [8.0, 352.0], [9.0, 8580.0], [5.0, 7043.5], [10.0, 14058.0], [11.0, 294.0], [3.0, 356.0], [6.0, 5285.0], [7.0, 276.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 225.5], [4.0, 125.0], [1.0, 225.0], [8.0, 224.0], [9.0, 231.0], [10.0, 234.0], [5.0, 1237.0], [3.0, 225.0], [6.0, 236.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 124.5, "minX": 1.0, "maxY": 14058.0, "series": [{"data": [[1.0, 275.0], [2.0, 272.5], [4.0, 268.0], [8.0, 352.0], [9.0, 8580.0], [5.0, 7038.5], [10.0, 14058.0], [11.0, 294.0], [3.0, 356.0], [6.0, 5281.0], [7.0, 276.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 225.5], [4.0, 124.5], [1.0, 225.0], [8.0, 224.0], [9.0, 230.0], [10.0, 234.0], [5.0, 1237.0], [3.0, 225.0], [6.0, 236.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.68517644E12, "maxY": 2.1166666666666667, "series": [{"data": [[1.68517692E12, 1.65], [1.68517662E12, 0.9333333333333333], [1.68517722E12, 1.5166666666666666], [1.68517656E12, 0.4166666666666667], [1.68517716E12, 1.3833333333333333], [1.68517686E12, 2.1166666666666667], [1.6851768E12, 1.25], [1.6851765E12, 0.45], [1.6851771E12, 1.55], [1.68517644E12, 0.08333333333333333], [1.68517704E12, 1.7166666666666666], [1.68517674E12, 1.2666666666666666], [1.68517668E12, 1.4666666666666666], [1.68517698E12, 1.75], [1.68517728E12, 0.8833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68517728E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68517644E12, "maxY": 1.7333333333333334, "series": [{"data": [[1.68517692E12, 1.5333333333333334], [1.68517662E12, 0.35], [1.68517722E12, 1.1], [1.68517656E12, 0.5], [1.68517716E12, 1.3], [1.68517686E12, 1.2], [1.6851768E12, 1.0], [1.6851765E12, 0.38333333333333336], [1.6851771E12, 1.5166666666666666], [1.68517644E12, 0.06666666666666667], [1.68517704E12, 1.7333333333333334], [1.68517674E12, 0.9833333333333333], [1.68517734E12, 0.23333333333333334], [1.68517668E12, 0.4], [1.68517698E12, 1.7333333333333334], [1.68517728E12, 0.9166666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68517722E12, 0.21666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68517692E12, 0.13333333333333333], [1.68517662E12, 0.5166666666666667], [1.68517674E12, 0.35], [1.68517668E12, 0.9833333333333333], [1.68517686E12, 0.85], [1.6851768E12, 0.16666666666666666]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68517722E12, 0.13333333333333333], [1.68517734E12, 0.03333333333333333], [1.68517728E12, 0.1]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68517734E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68517644E12, "maxY": 0.8833333333333333, "series": [{"data": [[1.68517692E12, 0.7833333333333333], [1.68517662E12, 0.2], [1.68517722E12, 0.75], [1.68517656E12, 0.25], [1.68517716E12, 0.6666666666666666], [1.68517686E12, 0.6166666666666667], [1.6851768E12, 0.48333333333333334], [1.6851765E12, 0.21666666666666667], [1.6851771E12, 0.7666666666666667], [1.68517644E12, 0.05], [1.68517704E12, 0.8833333333333333], [1.68517674E12, 0.5], [1.68517668E12, 0.25], [1.68517698E12, 0.8833333333333333], [1.68517728E12, 0.45]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68517692E12, 0.05], [1.68517662E12, 0.25], [1.68517674E12, 0.16666666666666666], [1.68517668E12, 0.4666666666666667], [1.68517686E12, 0.43333333333333335], [1.6851768E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68517692E12, 0.08333333333333333], [1.68517662E12, 0.26666666666666666], [1.68517722E12, 0.35], [1.68517674E12, 0.18333333333333332], [1.68517734E12, 0.03333333333333333], [1.68517668E12, 0.5166666666666667], [1.68517686E12, 0.4166666666666667], [1.6851768E12, 0.05], [1.68517728E12, 0.1]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68517692E12, 0.6166666666666667], [1.68517662E12, 0.11666666666666667], [1.68517722E12, 0.26666666666666666], [1.68517656E12, 0.2], [1.68517716E12, 0.6], [1.68517686E12, 0.4166666666666667], [1.6851768E12, 0.5], [1.6851765E12, 0.21666666666666667], [1.6851771E12, 0.8333333333333334], [1.68517644E12, 0.016666666666666666], [1.68517704E12, 0.8333333333333334], [1.68517674E12, 0.23333333333333334], [1.68517734E12, 0.21666666666666667], [1.68517668E12, 0.06666666666666667], [1.68517698E12, 0.8333333333333334], [1.68517728E12, 0.5166666666666667]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68517692E12, 0.25], [1.68517662E12, 0.3333333333333333], [1.68517722E12, 0.36666666666666664], [1.68517674E12, 0.38333333333333336], [1.68517734E12, 0.03333333333333333], [1.68517668E12, 0.6166666666666667], [1.68517716E12, 0.016666666666666666], [1.68517686E12, 0.6166666666666667], [1.6851768E12, 0.06666666666666667], [1.68517728E12, 0.06666666666666667]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68517692E12, 0.75], [1.68517662E12, 0.15], [1.68517722E12, 0.35], [1.68517656E12, 0.25], [1.68517716E12, 0.6333333333333333], [1.68517686E12, 0.5833333333333334], [1.6851768E12, 0.5166666666666667], [1.6851765E12, 0.16666666666666666], [1.6851771E12, 0.75], [1.68517644E12, 0.016666666666666666], [1.68517704E12, 0.85], [1.68517674E12, 0.48333333333333334], [1.68517734E12, 0.23333333333333334], [1.68517668E12, 0.15], [1.68517698E12, 0.85], [1.68517728E12, 0.4666666666666667]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68517734E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68517644E12, "maxY": 2.566666666666667, "series": [{"data": [[1.68517692E12, 2.15], [1.68517662E12, 0.4666666666666667], [1.68517722E12, 1.3666666666666667], [1.68517656E12, 0.7], [1.68517716E12, 1.9], [1.68517686E12, 1.6166666666666667], [1.6851768E12, 1.5], [1.6851765E12, 0.6], [1.6851771E12, 2.35], [1.68517644E12, 0.08333333333333333], [1.68517704E12, 2.566666666666667], [1.68517674E12, 1.2166666666666666], [1.68517734E12, 0.45], [1.68517668E12, 0.4666666666666667], [1.68517698E12, 2.566666666666667], [1.68517728E12, 1.4333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68517692E12, 0.38333333333333336], [1.68517662E12, 0.85], [1.68517722E12, 0.7166666666666667], [1.68517674E12, 0.7333333333333333], [1.68517734E12, 0.06666666666666667], [1.68517668E12, 1.6], [1.68517716E12, 0.016666666666666666], [1.68517686E12, 1.4666666666666666], [1.6851768E12, 0.23333333333333334], [1.68517728E12, 0.16666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68517734E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

