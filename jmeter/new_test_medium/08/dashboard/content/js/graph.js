/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 101.0, "minX": 0.0, "maxY": 60716.0, "series": [{"data": [[0.0, 204.0], [0.1, 206.0], [0.2, 207.0], [0.3, 208.0], [0.4, 209.0], [0.5, 306.0], [0.6, 306.0], [0.7, 307.0], [0.8, 307.0], [0.9, 307.0], [1.0, 307.0], [1.1, 307.0], [1.2, 307.0], [1.3, 307.0], [1.4, 307.0], [1.5, 307.0], [1.6, 307.0], [1.7, 307.0], [1.8, 307.0], [1.9, 307.0], [2.0, 307.0], [2.1, 308.0], [2.2, 308.0], [2.3, 308.0], [2.4, 308.0], [2.5, 308.0], [2.6, 308.0], [2.7, 308.0], [2.8, 308.0], [2.9, 308.0], [3.0, 308.0], [3.1, 308.0], [3.2, 308.0], [3.3, 308.0], [3.4, 308.0], [3.5, 308.0], [3.6, 308.0], [3.7, 308.0], [3.8, 308.0], [3.9, 308.0], [4.0, 308.0], [4.1, 308.0], [4.2, 308.0], [4.3, 308.0], [4.4, 308.0], [4.5, 308.0], [4.6, 308.0], [4.7, 308.0], [4.8, 308.0], [4.9, 308.0], [5.0, 308.0], [5.1, 308.0], [5.2, 308.0], [5.3, 308.0], [5.4, 308.0], [5.5, 308.0], [5.6, 308.0], [5.7, 308.0], [5.8, 308.0], [5.9, 309.0], [6.0, 309.0], [6.1, 309.0], [6.2, 309.0], [6.3, 309.0], [6.4, 309.0], [6.5, 309.0], [6.6, 309.0], [6.7, 309.0], [6.8, 309.0], [6.9, 309.0], [7.0, 309.0], [7.1, 309.0], [7.2, 309.0], [7.3, 309.0], [7.4, 309.0], [7.5, 309.0], [7.6, 309.0], [7.7, 309.0], [7.8, 309.0], [7.9, 309.0], [8.0, 309.0], [8.1, 309.0], [8.2, 309.0], [8.3, 309.0], [8.4, 309.0], [8.5, 309.0], [8.6, 309.0], [8.7, 309.0], [8.8, 309.0], [8.9, 309.0], [9.0, 309.0], [9.1, 309.0], [9.2, 309.0], [9.3, 309.0], [9.4, 309.0], [9.5, 309.0], [9.6, 309.0], [9.7, 309.0], [9.8, 309.0], [9.9, 309.0], [10.0, 309.0], [10.1, 309.0], [10.2, 309.0], [10.3, 309.0], [10.4, 309.0], [10.5, 309.0], [10.6, 309.0], [10.7, 309.0], [10.8, 309.0], [10.9, 309.0], [11.0, 309.0], [11.1, 309.0], [11.2, 309.0], [11.3, 309.0], [11.4, 309.0], [11.5, 309.0], [11.6, 309.0], [11.7, 309.0], [11.8, 309.0], [11.9, 309.0], [12.0, 309.0], [12.1, 309.0], [12.2, 309.0], [12.3, 309.0], [12.4, 309.0], [12.5, 309.0], [12.6, 309.0], [12.7, 309.0], [12.8, 309.0], [12.9, 309.0], [13.0, 310.0], [13.1, 310.0], [13.2, 310.0], [13.3, 310.0], [13.4, 310.0], [13.5, 310.0], [13.6, 310.0], [13.7, 310.0], [13.8, 310.0], [13.9, 310.0], [14.0, 310.0], [14.1, 310.0], [14.2, 310.0], [14.3, 310.0], [14.4, 310.0], [14.5, 310.0], [14.6, 310.0], [14.7, 310.0], [14.8, 310.0], [14.9, 310.0], [15.0, 310.0], [15.1, 310.0], [15.2, 310.0], [15.3, 310.0], [15.4, 310.0], [15.5, 310.0], [15.6, 310.0], [15.7, 310.0], [15.8, 310.0], [15.9, 310.0], [16.0, 310.0], [16.1, 310.0], [16.2, 310.0], [16.3, 310.0], [16.4, 310.0], [16.5, 310.0], [16.6, 310.0], [16.7, 310.0], [16.8, 310.0], [16.9, 310.0], [17.0, 310.0], [17.1, 310.0], [17.2, 310.0], [17.3, 310.0], [17.4, 310.0], [17.5, 310.0], [17.6, 310.0], [17.7, 310.0], [17.8, 310.0], [17.9, 310.0], [18.0, 310.0], [18.1, 310.0], [18.2, 310.0], [18.3, 310.0], [18.4, 310.0], [18.5, 310.0], [18.6, 310.0], [18.7, 310.0], [18.8, 310.0], [18.9, 310.0], [19.0, 310.0], [19.1, 310.0], [19.2, 310.0], [19.3, 310.0], [19.4, 310.0], [19.5, 310.0], [19.6, 310.0], [19.7, 310.0], [19.8, 310.0], [19.9, 310.0], [20.0, 310.0], [20.1, 310.0], [20.2, 310.0], [20.3, 310.0], [20.4, 310.0], [20.5, 310.0], [20.6, 310.0], [20.7, 310.0], [20.8, 310.0], [20.9, 310.0], [21.0, 310.0], [21.1, 310.0], [21.2, 310.0], [21.3, 310.0], [21.4, 310.0], [21.5, 310.0], [21.6, 310.0], [21.7, 310.0], [21.8, 310.0], [21.9, 310.0], [22.0, 310.0], [22.1, 310.0], [22.2, 310.0], [22.3, 310.0], [22.4, 310.0], [22.5, 310.0], [22.6, 310.0], [22.7, 310.0], [22.8, 310.0], [22.9, 310.0], [23.0, 310.0], [23.1, 310.0], [23.2, 310.0], [23.3, 310.0], [23.4, 310.0], [23.5, 310.0], [23.6, 310.0], [23.7, 310.0], [23.8, 310.0], [23.9, 310.0], [24.0, 310.0], [24.1, 310.0], [24.2, 310.0], [24.3, 310.0], [24.4, 310.0], [24.5, 310.0], [24.6, 310.0], [24.7, 310.0], [24.8, 310.0], [24.9, 310.0], [25.0, 310.0], [25.1, 310.0], [25.2, 310.0], [25.3, 310.0], [25.4, 310.0], [25.5, 310.0], [25.6, 310.0], [25.7, 310.0], [25.8, 310.0], [25.9, 310.0], [26.0, 311.0], [26.1, 311.0], [26.2, 311.0], [26.3, 311.0], [26.4, 311.0], [26.5, 311.0], [26.6, 311.0], [26.7, 311.0], [26.8, 311.0], [26.9, 311.0], [27.0, 311.0], [27.1, 311.0], [27.2, 311.0], [27.3, 311.0], [27.4, 311.0], [27.5, 311.0], [27.6, 311.0], [27.7, 311.0], [27.8, 311.0], [27.9, 311.0], [28.0, 311.0], [28.1, 311.0], [28.2, 311.0], [28.3, 311.0], [28.4, 311.0], [28.5, 311.0], [28.6, 311.0], [28.7, 311.0], [28.8, 311.0], [28.9, 311.0], [29.0, 311.0], [29.1, 311.0], [29.2, 311.0], [29.3, 311.0], [29.4, 311.0], [29.5, 311.0], [29.6, 311.0], [29.7, 311.0], [29.8, 311.0], [29.9, 311.0], [30.0, 311.0], [30.1, 311.0], [30.2, 311.0], [30.3, 311.0], [30.4, 311.0], [30.5, 311.0], [30.6, 311.0], [30.7, 311.0], [30.8, 311.0], [30.9, 311.0], [31.0, 311.0], [31.1, 311.0], [31.2, 311.0], [31.3, 311.0], [31.4, 311.0], [31.5, 311.0], [31.6, 311.0], [31.7, 311.0], [31.8, 311.0], [31.9, 311.0], [32.0, 311.0], [32.1, 311.0], [32.2, 311.0], [32.3, 311.0], [32.4, 311.0], [32.5, 311.0], [32.6, 311.0], [32.7, 311.0], [32.8, 311.0], [32.9, 311.0], [33.0, 311.0], [33.1, 311.0], [33.2, 311.0], [33.3, 311.0], [33.4, 311.0], [33.5, 311.0], [33.6, 311.0], [33.7, 311.0], [33.8, 311.0], [33.9, 311.0], [34.0, 311.0], [34.1, 311.0], [34.2, 311.0], [34.3, 311.0], [34.4, 311.0], [34.5, 311.0], [34.6, 311.0], [34.7, 311.0], [34.8, 311.0], [34.9, 311.0], [35.0, 311.0], [35.1, 311.0], [35.2, 311.0], [35.3, 311.0], [35.4, 311.0], [35.5, 311.0], [35.6, 311.0], [35.7, 311.0], [35.8, 311.0], [35.9, 311.0], [36.0, 311.0], [36.1, 311.0], [36.2, 311.0], [36.3, 311.0], [36.4, 311.0], [36.5, 311.0], [36.6, 311.0], [36.7, 311.0], [36.8, 311.0], [36.9, 311.0], [37.0, 311.0], [37.1, 311.0], [37.2, 311.0], [37.3, 311.0], [37.4, 311.0], [37.5, 311.0], [37.6, 311.0], [37.7, 311.0], [37.8, 311.0], [37.9, 311.0], [38.0, 311.0], [38.1, 311.0], [38.2, 311.0], [38.3, 311.0], [38.4, 311.0], [38.5, 311.0], [38.6, 311.0], [38.7, 311.0], [38.8, 311.0], [38.9, 311.0], [39.0, 311.0], [39.1, 311.0], [39.2, 311.0], [39.3, 311.0], [39.4, 311.0], [39.5, 311.0], [39.6, 311.0], [39.7, 311.0], [39.8, 311.0], [39.9, 311.0], [40.0, 311.0], [40.1, 311.0], [40.2, 311.0], [40.3, 311.0], [40.4, 311.0], [40.5, 312.0], [40.6, 312.0], [40.7, 312.0], [40.8, 312.0], [40.9, 312.0], [41.0, 312.0], [41.1, 312.0], [41.2, 312.0], [41.3, 312.0], [41.4, 312.0], [41.5, 312.0], [41.6, 312.0], [41.7, 312.0], [41.8, 312.0], [41.9, 312.0], [42.0, 312.0], [42.1, 312.0], [42.2, 312.0], [42.3, 312.0], [42.4, 312.0], [42.5, 312.0], [42.6, 312.0], [42.7, 312.0], [42.8, 312.0], [42.9, 312.0], [43.0, 312.0], [43.1, 312.0], [43.2, 312.0], [43.3, 312.0], [43.4, 312.0], [43.5, 312.0], [43.6, 312.0], [43.7, 312.0], [43.8, 312.0], [43.9, 312.0], [44.0, 312.0], [44.1, 312.0], [44.2, 312.0], [44.3, 312.0], [44.4, 312.0], [44.5, 312.0], [44.6, 312.0], [44.7, 312.0], [44.8, 312.0], [44.9, 312.0], [45.0, 312.0], [45.1, 312.0], [45.2, 312.0], [45.3, 312.0], [45.4, 312.0], [45.5, 312.0], [45.6, 312.0], [45.7, 312.0], [45.8, 312.0], [45.9, 312.0], [46.0, 312.0], [46.1, 312.0], [46.2, 312.0], [46.3, 312.0], [46.4, 312.0], [46.5, 312.0], [46.6, 312.0], [46.7, 312.0], [46.8, 312.0], [46.9, 312.0], [47.0, 312.0], [47.1, 312.0], [47.2, 312.0], [47.3, 312.0], [47.4, 312.0], [47.5, 312.0], [47.6, 312.0], [47.7, 312.0], [47.8, 312.0], [47.9, 312.0], [48.0, 312.0], [48.1, 312.0], [48.2, 312.0], [48.3, 312.0], [48.4, 312.0], [48.5, 312.0], [48.6, 312.0], [48.7, 312.0], [48.8, 312.0], [48.9, 312.0], [49.0, 312.0], [49.1, 312.0], [49.2, 312.0], [49.3, 312.0], [49.4, 312.0], [49.5, 312.0], [49.6, 312.0], [49.7, 312.0], [49.8, 312.0], [49.9, 312.0], [50.0, 312.0], [50.1, 312.0], [50.2, 312.0], [50.3, 312.0], [50.4, 312.0], [50.5, 312.0], [50.6, 312.0], [50.7, 312.0], [50.8, 312.0], [50.9, 312.0], [51.0, 312.0], [51.1, 312.0], [51.2, 312.0], [51.3, 312.0], [51.4, 312.0], [51.5, 312.0], [51.6, 312.0], [51.7, 312.0], [51.8, 312.0], [51.9, 312.0], [52.0, 312.0], [52.1, 312.0], [52.2, 312.0], [52.3, 312.0], [52.4, 312.0], [52.5, 312.0], [52.6, 312.0], [52.7, 312.0], [52.8, 312.0], [52.9, 312.0], [53.0, 312.0], [53.1, 312.0], [53.2, 312.0], [53.3, 312.0], [53.4, 312.0], [53.5, 312.0], [53.6, 313.0], [53.7, 313.0], [53.8, 313.0], [53.9, 313.0], [54.0, 313.0], [54.1, 313.0], [54.2, 313.0], [54.3, 313.0], [54.4, 313.0], [54.5, 313.0], [54.6, 313.0], [54.7, 313.0], [54.8, 313.0], [54.9, 313.0], [55.0, 313.0], [55.1, 313.0], [55.2, 313.0], [55.3, 313.0], [55.4, 313.0], [55.5, 313.0], [55.6, 313.0], [55.7, 313.0], [55.8, 313.0], [55.9, 313.0], [56.0, 313.0], [56.1, 313.0], [56.2, 313.0], [56.3, 313.0], [56.4, 313.0], [56.5, 313.0], [56.6, 313.0], [56.7, 313.0], [56.8, 313.0], [56.9, 313.0], [57.0, 313.0], [57.1, 313.0], [57.2, 313.0], [57.3, 313.0], [57.4, 313.0], [57.5, 313.0], [57.6, 313.0], [57.7, 313.0], [57.8, 313.0], [57.9, 313.0], [58.0, 313.0], [58.1, 313.0], [58.2, 313.0], [58.3, 313.0], [58.4, 313.0], [58.5, 313.0], [58.6, 313.0], [58.7, 313.0], [58.8, 313.0], [58.9, 313.0], [59.0, 313.0], [59.1, 313.0], [59.2, 313.0], [59.3, 313.0], [59.4, 313.0], [59.5, 313.0], [59.6, 313.0], [59.7, 313.0], [59.8, 313.0], [59.9, 313.0], [60.0, 313.0], [60.1, 313.0], [60.2, 313.0], [60.3, 313.0], [60.4, 313.0], [60.5, 313.0], [60.6, 313.0], [60.7, 313.0], [60.8, 313.0], [60.9, 313.0], [61.0, 313.0], [61.1, 313.0], [61.2, 313.0], [61.3, 313.0], [61.4, 313.0], [61.5, 313.0], [61.6, 313.0], [61.7, 313.0], [61.8, 313.0], [61.9, 313.0], [62.0, 313.0], [62.1, 313.0], [62.2, 313.0], [62.3, 313.0], [62.4, 313.0], [62.5, 313.0], [62.6, 313.0], [62.7, 313.0], [62.8, 313.0], [62.9, 313.0], [63.0, 313.0], [63.1, 313.0], [63.2, 313.0], [63.3, 313.0], [63.4, 313.0], [63.5, 313.0], [63.6, 313.0], [63.7, 313.0], [63.8, 313.0], [63.9, 313.0], [64.0, 313.0], [64.1, 313.0], [64.2, 313.0], [64.3, 313.0], [64.4, 313.0], [64.5, 313.0], [64.6, 313.0], [64.7, 313.0], [64.8, 314.0], [64.9, 314.0], [65.0, 314.0], [65.1, 314.0], [65.2, 314.0], [65.3, 314.0], [65.4, 314.0], [65.5, 314.0], [65.6, 314.0], [65.7, 314.0], [65.8, 314.0], [65.9, 314.0], [66.0, 314.0], [66.1, 314.0], [66.2, 314.0], [66.3, 314.0], [66.4, 314.0], [66.5, 314.0], [66.6, 314.0], [66.7, 314.0], [66.8, 314.0], [66.9, 314.0], [67.0, 314.0], [67.1, 314.0], [67.2, 314.0], [67.3, 314.0], [67.4, 314.0], [67.5, 314.0], [67.6, 314.0], [67.7, 314.0], [67.8, 314.0], [67.9, 314.0], [68.0, 314.0], [68.1, 314.0], [68.2, 314.0], [68.3, 314.0], [68.4, 314.0], [68.5, 314.0], [68.6, 314.0], [68.7, 314.0], [68.8, 314.0], [68.9, 314.0], [69.0, 314.0], [69.1, 314.0], [69.2, 314.0], [69.3, 314.0], [69.4, 314.0], [69.5, 314.0], [69.6, 314.0], [69.7, 314.0], [69.8, 314.0], [69.9, 314.0], [70.0, 314.0], [70.1, 314.0], [70.2, 314.0], [70.3, 314.0], [70.4, 314.0], [70.5, 314.0], [70.6, 314.0], [70.7, 314.0], [70.8, 314.0], [70.9, 314.0], [71.0, 314.0], [71.1, 314.0], [71.2, 314.0], [71.3, 314.0], [71.4, 314.0], [71.5, 314.0], [71.6, 314.0], [71.7, 314.0], [71.8, 314.0], [71.9, 314.0], [72.0, 314.0], [72.1, 314.0], [72.2, 314.0], [72.3, 314.0], [72.4, 314.0], [72.5, 314.0], [72.6, 314.0], [72.7, 315.0], [72.8, 315.0], [72.9, 315.0], [73.0, 315.0], [73.1, 315.0], [73.2, 315.0], [73.3, 315.0], [73.4, 315.0], [73.5, 315.0], [73.6, 315.0], [73.7, 315.0], [73.8, 315.0], [73.9, 315.0], [74.0, 315.0], [74.1, 315.0], [74.2, 315.0], [74.3, 315.0], [74.4, 315.0], [74.5, 315.0], [74.6, 315.0], [74.7, 315.0], [74.8, 315.0], [74.9, 315.0], [75.0, 315.0], [75.1, 315.0], [75.2, 315.0], [75.3, 315.0], [75.4, 315.0], [75.5, 315.0], [75.6, 315.0], [75.7, 315.0], [75.8, 315.0], [75.9, 315.0], [76.0, 315.0], [76.1, 315.0], [76.2, 315.0], [76.3, 315.0], [76.4, 315.0], [76.5, 315.0], [76.6, 315.0], [76.7, 315.0], [76.8, 315.0], [76.9, 315.0], [77.0, 315.0], [77.1, 315.0], [77.2, 315.0], [77.3, 315.0], [77.4, 315.0], [77.5, 315.0], [77.6, 315.0], [77.7, 315.0], [77.8, 315.0], [77.9, 316.0], [78.0, 316.0], [78.1, 316.0], [78.2, 316.0], [78.3, 316.0], [78.4, 316.0], [78.5, 316.0], [78.6, 316.0], [78.7, 316.0], [78.8, 316.0], [78.9, 316.0], [79.0, 316.0], [79.1, 316.0], [79.2, 316.0], [79.3, 316.0], [79.4, 316.0], [79.5, 316.0], [79.6, 316.0], [79.7, 316.0], [79.8, 316.0], [79.9, 316.0], [80.0, 316.0], [80.1, 316.0], [80.2, 316.0], [80.3, 316.0], [80.4, 316.0], [80.5, 316.0], [80.6, 316.0], [80.7, 316.0], [80.8, 316.0], [80.9, 316.0], [81.0, 316.0], [81.1, 316.0], [81.2, 316.0], [81.3, 317.0], [81.4, 317.0], [81.5, 317.0], [81.6, 317.0], [81.7, 317.0], [81.8, 317.0], [81.9, 317.0], [82.0, 317.0], [82.1, 317.0], [82.2, 317.0], [82.3, 317.0], [82.4, 317.0], [82.5, 317.0], [82.6, 317.0], [82.7, 317.0], [82.8, 317.0], [82.9, 317.0], [83.0, 317.0], [83.1, 318.0], [83.2, 318.0], [83.3, 318.0], [83.4, 318.0], [83.5, 318.0], [83.6, 318.0], [83.7, 318.0], [83.8, 318.0], [83.9, 319.0], [84.0, 319.0], [84.1, 319.0], [84.2, 319.0], [84.3, 319.0], [84.4, 319.0], [84.5, 320.0], [84.6, 320.0], [84.7, 320.0], [84.8, 320.0], [84.9, 320.0], [85.0, 320.0], [85.1, 321.0], [85.2, 321.0], [85.3, 321.0], [85.4, 321.0], [85.5, 321.0], [85.6, 322.0], [85.7, 322.0], [85.8, 323.0], [85.9, 323.0], [86.0, 324.0], [86.1, 324.0], [86.2, 324.0], [86.3, 325.0], [86.4, 329.0], [86.5, 330.0], [86.6, 333.0], [86.7, 334.0], [86.8, 335.0], [86.9, 336.0], [87.0, 339.0], [87.1, 342.0], [87.2, 344.0], [87.3, 347.0], [87.4, 350.0], [87.5, 351.0], [87.6, 353.0], [87.7, 355.0], [87.8, 357.0], [87.9, 361.0], [88.0, 369.0], [88.1, 374.0], [88.2, 381.0], [88.3, 386.0], [88.4, 388.0], [88.5, 394.0], [88.6, 394.0], [88.7, 397.0], [88.8, 400.0], [88.9, 405.0], [89.0, 408.0], [89.1, 409.0], [89.2, 410.0], [89.3, 411.0], [89.4, 412.0], [89.5, 413.0], [89.6, 414.0], [89.7, 416.0], [89.8, 418.0], [89.9, 419.0], [90.0, 421.0], [90.1, 424.0], [90.2, 428.0], [90.3, 431.0], [90.4, 436.0], [90.5, 438.0], [90.6, 446.0], [90.7, 450.0], [90.8, 458.0], [90.9, 466.0], [91.0, 473.0], [91.1, 476.0], [91.2, 477.0], [91.3, 477.0], [91.4, 479.0], [91.5, 481.0], [91.6, 484.0], [91.7, 487.0], [91.8, 489.0], [91.9, 498.0], [92.0, 507.0], [92.1, 512.0], [92.2, 514.0], [92.3, 516.0], [92.4, 517.0], [92.5, 518.0], [92.6, 522.0], [92.7, 524.0], [92.8, 526.0], [92.9, 527.0], [93.0, 533.0], [93.1, 534.0], [93.2, 539.0], [93.3, 542.0], [93.4, 547.0], [93.5, 548.0], [93.6, 551.0], [93.7, 554.0], [93.8, 561.0], [93.9, 567.0], [94.0, 572.0], [94.1, 577.0], [94.2, 580.0], [94.3, 585.0], [94.4, 593.0], [94.5, 597.0], [94.6, 600.0], [94.7, 605.0], [94.8, 610.0], [94.9, 615.0], [95.0, 618.0], [95.1, 636.0], [95.2, 681.0], [95.3, 691.0], [95.4, 727.0], [95.5, 747.0], [95.6, 794.0], [95.7, 913.0], [95.8, 1012.0], [95.9, 1176.0], [96.0, 3112.0], [96.1, 5230.0], [96.2, 5578.0], [96.3, 5919.0], [96.4, 7063.0], [96.5, 7607.0], [96.6, 8533.0], [96.7, 9712.0], [96.8, 11128.0], [96.9, 12304.0], [97.0, 12852.0], [97.1, 14159.0], [97.2, 15071.0], [97.3, 17383.0], [97.4, 17942.0], [97.5, 18894.0], [97.6, 19259.0], [97.7, 19865.0], [97.8, 20132.0], [97.9, 21118.0], [98.0, 22383.0], [98.1, 23307.0], [98.2, 24849.0], [98.3, 26110.0], [98.4, 27080.0], [98.5, 29477.0], [98.6, 30582.0], [98.7, 32019.0], [98.8, 34940.0], [98.9, 40062.0], [99.0, 42999.0], [99.1, 44109.0], [99.2, 46251.0], [99.3, 48983.0], [99.4, 50517.0], [99.5, 60331.0], [99.6, 60402.0], [99.7, 60510.0], [99.8, 60551.0], [99.9, 60603.0], [100.0, 60716.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 101.0], [0.1, 102.0], [0.2, 102.0], [0.3, 102.0], [0.4, 102.0], [0.5, 102.0], [0.6, 102.0], [0.7, 102.0], [0.8, 102.0], [0.9, 102.0], [1.0, 102.0], [1.1, 102.0], [1.2, 102.0], [1.3, 102.0], [1.4, 103.0], [1.5, 103.0], [1.6, 103.0], [1.7, 103.0], [1.8, 103.0], [1.9, 103.0], [2.0, 103.0], [2.1, 103.0], [2.2, 103.0], [2.3, 103.0], [2.4, 103.0], [2.5, 103.0], [2.6, 103.0], [2.7, 103.0], [2.8, 103.0], [2.9, 103.0], [3.0, 103.0], [3.1, 103.0], [3.2, 103.0], [3.3, 103.0], [3.4, 103.0], [3.5, 103.0], [3.6, 103.0], [3.7, 103.0], [3.8, 103.0], [3.9, 103.0], [4.0, 103.0], [4.1, 103.0], [4.2, 103.0], [4.3, 103.0], [4.4, 103.0], [4.5, 103.0], [4.6, 103.0], [4.7, 103.0], [4.8, 103.0], [4.9, 103.0], [5.0, 103.0], [5.1, 103.0], [5.2, 103.0], [5.3, 103.0], [5.4, 103.0], [5.5, 103.0], [5.6, 103.0], [5.7, 103.0], [5.8, 103.0], [5.9, 103.0], [6.0, 103.0], [6.1, 103.0], [6.2, 103.0], [6.3, 103.0], [6.4, 103.0], [6.5, 103.0], [6.6, 103.0], [6.7, 103.0], [6.8, 103.0], [6.9, 103.0], [7.0, 103.0], [7.1, 103.0], [7.2, 103.0], [7.3, 103.0], [7.4, 103.0], [7.5, 103.0], [7.6, 103.0], [7.7, 103.0], [7.8, 103.0], [7.9, 103.0], [8.0, 103.0], [8.1, 103.0], [8.2, 103.0], [8.3, 103.0], [8.4, 103.0], [8.5, 103.0], [8.6, 103.0], [8.7, 103.0], [8.8, 103.0], [8.9, 103.0], [9.0, 103.0], [9.1, 103.0], [9.2, 103.0], [9.3, 103.0], [9.4, 103.0], [9.5, 103.0], [9.6, 103.0], [9.7, 103.0], [9.8, 103.0], [9.9, 103.0], [10.0, 104.0], [10.1, 104.0], [10.2, 104.0], [10.3, 104.0], [10.4, 104.0], [10.5, 104.0], [10.6, 104.0], [10.7, 104.0], [10.8, 104.0], [10.9, 104.0], [11.0, 104.0], [11.1, 104.0], [11.2, 104.0], [11.3, 104.0], [11.4, 104.0], [11.5, 104.0], [11.6, 104.0], [11.7, 104.0], [11.8, 104.0], [11.9, 104.0], [12.0, 104.0], [12.1, 104.0], [12.2, 104.0], [12.3, 104.0], [12.4, 104.0], [12.5, 104.0], [12.6, 104.0], [12.7, 104.0], [12.8, 104.0], [12.9, 104.0], [13.0, 104.0], [13.1, 104.0], [13.2, 104.0], [13.3, 104.0], [13.4, 104.0], [13.5, 104.0], [13.6, 104.0], [13.7, 104.0], [13.8, 104.0], [13.9, 104.0], [14.0, 104.0], [14.1, 104.0], [14.2, 104.0], [14.3, 104.0], [14.4, 104.0], [14.5, 104.0], [14.6, 104.0], [14.7, 104.0], [14.8, 104.0], [14.9, 104.0], [15.0, 104.0], [15.1, 104.0], [15.2, 104.0], [15.3, 104.0], [15.4, 104.0], [15.5, 104.0], [15.6, 104.0], [15.7, 104.0], [15.8, 104.0], [15.9, 104.0], [16.0, 104.0], [16.1, 104.0], [16.2, 104.0], [16.3, 104.0], [16.4, 104.0], [16.5, 104.0], [16.6, 104.0], [16.7, 104.0], [16.8, 104.0], [16.9, 104.0], [17.0, 104.0], [17.1, 104.0], [17.2, 104.0], [17.3, 104.0], [17.4, 104.0], [17.5, 104.0], [17.6, 104.0], [17.7, 104.0], [17.8, 104.0], [17.9, 104.0], [18.0, 104.0], [18.1, 104.0], [18.2, 104.0], [18.3, 104.0], [18.4, 104.0], [18.5, 104.0], [18.6, 104.0], [18.7, 104.0], [18.8, 104.0], [18.9, 104.0], [19.0, 104.0], [19.1, 104.0], [19.2, 104.0], [19.3, 104.0], [19.4, 104.0], [19.5, 104.0], [19.6, 104.0], [19.7, 104.0], [19.8, 104.0], [19.9, 104.0], [20.0, 104.0], [20.1, 104.0], [20.2, 104.0], [20.3, 104.0], [20.4, 104.0], [20.5, 104.0], [20.6, 104.0], [20.7, 104.0], [20.8, 104.0], [20.9, 104.0], [21.0, 104.0], [21.1, 104.0], [21.2, 104.0], [21.3, 104.0], [21.4, 104.0], [21.5, 104.0], [21.6, 104.0], [21.7, 104.0], [21.8, 104.0], [21.9, 104.0], [22.0, 104.0], [22.1, 104.0], [22.2, 104.0], [22.3, 104.0], [22.4, 104.0], [22.5, 104.0], [22.6, 104.0], [22.7, 104.0], [22.8, 104.0], [22.9, 104.0], [23.0, 104.0], [23.1, 104.0], [23.2, 104.0], [23.3, 104.0], [23.4, 104.0], [23.5, 104.0], [23.6, 104.0], [23.7, 104.0], [23.8, 104.0], [23.9, 104.0], [24.0, 104.0], [24.1, 104.0], [24.2, 104.0], [24.3, 104.0], [24.4, 104.0], [24.5, 104.0], [24.6, 104.0], [24.7, 104.0], [24.8, 104.0], [24.9, 104.0], [25.0, 104.0], [25.1, 104.0], [25.2, 104.0], [25.3, 104.0], [25.4, 104.0], [25.5, 104.0], [25.6, 104.0], [25.7, 104.0], [25.8, 104.0], [25.9, 104.0], [26.0, 104.0], [26.1, 104.0], [26.2, 104.0], [26.3, 104.0], [26.4, 104.0], [26.5, 104.0], [26.6, 104.0], [26.7, 104.0], [26.8, 104.0], [26.9, 104.0], [27.0, 104.0], [27.1, 104.0], [27.2, 104.0], [27.3, 104.0], [27.4, 104.0], [27.5, 104.0], [27.6, 104.0], [27.7, 104.0], [27.8, 104.0], [27.9, 104.0], [28.0, 104.0], [28.1, 104.0], [28.2, 104.0], [28.3, 104.0], [28.4, 104.0], [28.5, 104.0], [28.6, 104.0], [28.7, 104.0], [28.8, 104.0], [28.9, 104.0], [29.0, 104.0], [29.1, 104.0], [29.2, 104.0], [29.3, 104.0], [29.4, 104.0], [29.5, 104.0], [29.6, 104.0], [29.7, 104.0], [29.8, 104.0], [29.9, 104.0], [30.0, 104.0], [30.1, 104.0], [30.2, 104.0], [30.3, 104.0], [30.4, 104.0], [30.5, 104.0], [30.6, 104.0], [30.7, 104.0], [30.8, 104.0], [30.9, 104.0], [31.0, 104.0], [31.1, 104.0], [31.2, 104.0], [31.3, 104.0], [31.4, 104.0], [31.5, 104.0], [31.6, 104.0], [31.7, 105.0], [31.8, 105.0], [31.9, 105.0], [32.0, 105.0], [32.1, 105.0], [32.2, 105.0], [32.3, 105.0], [32.4, 105.0], [32.5, 105.0], [32.6, 105.0], [32.7, 105.0], [32.8, 105.0], [32.9, 105.0], [33.0, 105.0], [33.1, 105.0], [33.2, 105.0], [33.3, 105.0], [33.4, 105.0], [33.5, 105.0], [33.6, 105.0], [33.7, 105.0], [33.8, 105.0], [33.9, 105.0], [34.0, 105.0], [34.1, 105.0], [34.2, 105.0], [34.3, 105.0], [34.4, 105.0], [34.5, 105.0], [34.6, 105.0], [34.7, 105.0], [34.8, 105.0], [34.9, 105.0], [35.0, 105.0], [35.1, 105.0], [35.2, 105.0], [35.3, 105.0], [35.4, 105.0], [35.5, 105.0], [35.6, 105.0], [35.7, 105.0], [35.8, 105.0], [35.9, 105.0], [36.0, 105.0], [36.1, 105.0], [36.2, 105.0], [36.3, 105.0], [36.4, 105.0], [36.5, 105.0], [36.6, 105.0], [36.7, 105.0], [36.8, 105.0], [36.9, 105.0], [37.0, 105.0], [37.1, 105.0], [37.2, 105.0], [37.3, 105.0], [37.4, 105.0], [37.5, 105.0], [37.6, 105.0], [37.7, 105.0], [37.8, 105.0], [37.9, 105.0], [38.0, 105.0], [38.1, 105.0], [38.2, 105.0], [38.3, 105.0], [38.4, 105.0], [38.5, 105.0], [38.6, 105.0], [38.7, 105.0], [38.8, 105.0], [38.9, 105.0], [39.0, 105.0], [39.1, 105.0], [39.2, 105.0], [39.3, 105.0], [39.4, 105.0], [39.5, 105.0], [39.6, 105.0], [39.7, 105.0], [39.8, 105.0], [39.9, 105.0], [40.0, 105.0], [40.1, 105.0], [40.2, 105.0], [40.3, 105.0], [40.4, 105.0], [40.5, 105.0], [40.6, 105.0], [40.7, 105.0], [40.8, 105.0], [40.9, 105.0], [41.0, 105.0], [41.1, 105.0], [41.2, 105.0], [41.3, 105.0], [41.4, 105.0], [41.5, 105.0], [41.6, 105.0], [41.7, 105.0], [41.8, 105.0], [41.9, 105.0], [42.0, 105.0], [42.1, 105.0], [42.2, 105.0], [42.3, 105.0], [42.4, 105.0], [42.5, 105.0], [42.6, 105.0], [42.7, 105.0], [42.8, 105.0], [42.9, 105.0], [43.0, 105.0], [43.1, 105.0], [43.2, 105.0], [43.3, 105.0], [43.4, 105.0], [43.5, 105.0], [43.6, 105.0], [43.7, 105.0], [43.8, 105.0], [43.9, 105.0], [44.0, 105.0], [44.1, 105.0], [44.2, 105.0], [44.3, 105.0], [44.4, 105.0], [44.5, 105.0], [44.6, 105.0], [44.7, 105.0], [44.8, 105.0], [44.9, 105.0], [45.0, 105.0], [45.1, 105.0], [45.2, 105.0], [45.3, 105.0], [45.4, 105.0], [45.5, 105.0], [45.6, 105.0], [45.7, 105.0], [45.8, 105.0], [45.9, 105.0], [46.0, 105.0], [46.1, 105.0], [46.2, 105.0], [46.3, 105.0], [46.4, 105.0], [46.5, 105.0], [46.6, 105.0], [46.7, 105.0], [46.8, 105.0], [46.9, 105.0], [47.0, 105.0], [47.1, 105.0], [47.2, 105.0], [47.3, 105.0], [47.4, 105.0], [47.5, 105.0], [47.6, 105.0], [47.7, 105.0], [47.8, 105.0], [47.9, 105.0], [48.0, 105.0], [48.1, 105.0], [48.2, 105.0], [48.3, 105.0], [48.4, 105.0], [48.5, 105.0], [48.6, 105.0], [48.7, 105.0], [48.8, 105.0], [48.9, 105.0], [49.0, 105.0], [49.1, 105.0], [49.2, 105.0], [49.3, 105.0], [49.4, 105.0], [49.5, 105.0], [49.6, 105.0], [49.7, 105.0], [49.8, 105.0], [49.9, 105.0], [50.0, 105.0], [50.1, 105.0], [50.2, 105.0], [50.3, 105.0], [50.4, 105.0], [50.5, 105.0], [50.6, 105.0], [50.7, 105.0], [50.8, 105.0], [50.9, 105.0], [51.0, 105.0], [51.1, 105.0], [51.2, 105.0], [51.3, 105.0], [51.4, 105.0], [51.5, 105.0], [51.6, 105.0], [51.7, 105.0], [51.8, 105.0], [51.9, 105.0], [52.0, 105.0], [52.1, 105.0], [52.2, 105.0], [52.3, 105.0], [52.4, 105.0], [52.5, 105.0], [52.6, 105.0], [52.7, 105.0], [52.8, 105.0], [52.9, 105.0], [53.0, 105.0], [53.1, 105.0], [53.2, 105.0], [53.3, 105.0], [53.4, 105.0], [53.5, 105.0], [53.6, 105.0], [53.7, 105.0], [53.8, 105.0], [53.9, 105.0], [54.0, 105.0], [54.1, 105.0], [54.2, 105.0], [54.3, 105.0], [54.4, 105.0], [54.5, 105.0], [54.6, 105.0], [54.7, 105.0], [54.8, 105.0], [54.9, 105.0], [55.0, 105.0], [55.1, 105.0], [55.2, 105.0], [55.3, 105.0], [55.4, 105.0], [55.5, 106.0], [55.6, 106.0], [55.7, 106.0], [55.8, 106.0], [55.9, 106.0], [56.0, 106.0], [56.1, 106.0], [56.2, 106.0], [56.3, 106.0], [56.4, 106.0], [56.5, 106.0], [56.6, 106.0], [56.7, 106.0], [56.8, 106.0], [56.9, 106.0], [57.0, 106.0], [57.1, 106.0], [57.2, 106.0], [57.3, 106.0], [57.4, 106.0], [57.5, 106.0], [57.6, 106.0], [57.7, 106.0], [57.8, 106.0], [57.9, 106.0], [58.0, 106.0], [58.1, 106.0], [58.2, 106.0], [58.3, 106.0], [58.4, 106.0], [58.5, 106.0], [58.6, 106.0], [58.7, 106.0], [58.8, 106.0], [58.9, 106.0], [59.0, 106.0], [59.1, 106.0], [59.2, 106.0], [59.3, 106.0], [59.4, 106.0], [59.5, 106.0], [59.6, 106.0], [59.7, 106.0], [59.8, 106.0], [59.9, 106.0], [60.0, 106.0], [60.1, 106.0], [60.2, 106.0], [60.3, 106.0], [60.4, 106.0], [60.5, 106.0], [60.6, 106.0], [60.7, 106.0], [60.8, 106.0], [60.9, 106.0], [61.0, 106.0], [61.1, 106.0], [61.2, 106.0], [61.3, 106.0], [61.4, 106.0], [61.5, 106.0], [61.6, 106.0], [61.7, 106.0], [61.8, 106.0], [61.9, 106.0], [62.0, 106.0], [62.1, 106.0], [62.2, 106.0], [62.3, 106.0], [62.4, 106.0], [62.5, 106.0], [62.6, 106.0], [62.7, 106.0], [62.8, 106.0], [62.9, 106.0], [63.0, 106.0], [63.1, 106.0], [63.2, 106.0], [63.3, 106.0], [63.4, 106.0], [63.5, 106.0], [63.6, 106.0], [63.7, 106.0], [63.8, 106.0], [63.9, 106.0], [64.0, 106.0], [64.1, 106.0], [64.2, 106.0], [64.3, 106.0], [64.4, 106.0], [64.5, 106.0], [64.6, 106.0], [64.7, 106.0], [64.8, 106.0], [64.9, 106.0], [65.0, 106.0], [65.1, 106.0], [65.2, 106.0], [65.3, 106.0], [65.4, 106.0], [65.5, 106.0], [65.6, 106.0], [65.7, 106.0], [65.8, 106.0], [65.9, 106.0], [66.0, 106.0], [66.1, 106.0], [66.2, 106.0], [66.3, 106.0], [66.4, 106.0], [66.5, 106.0], [66.6, 106.0], [66.7, 106.0], [66.8, 106.0], [66.9, 106.0], [67.0, 106.0], [67.1, 106.0], [67.2, 106.0], [67.3, 106.0], [67.4, 106.0], [67.5, 106.0], [67.6, 106.0], [67.7, 106.0], [67.8, 106.0], [67.9, 106.0], [68.0, 106.0], [68.1, 106.0], [68.2, 106.0], [68.3, 106.0], [68.4, 106.0], [68.5, 106.0], [68.6, 106.0], [68.7, 106.0], [68.8, 106.0], [68.9, 106.0], [69.0, 106.0], [69.1, 106.0], [69.2, 106.0], [69.3, 106.0], [69.4, 106.0], [69.5, 106.0], [69.6, 106.0], [69.7, 106.0], [69.8, 106.0], [69.9, 106.0], [70.0, 106.0], [70.1, 106.0], [70.2, 106.0], [70.3, 106.0], [70.4, 106.0], [70.5, 106.0], [70.6, 106.0], [70.7, 106.0], [70.8, 106.0], [70.9, 106.0], [71.0, 106.0], [71.1, 106.0], [71.2, 106.0], [71.3, 106.0], [71.4, 106.0], [71.5, 106.0], [71.6, 106.0], [71.7, 106.0], [71.8, 106.0], [71.9, 106.0], [72.0, 106.0], [72.1, 106.0], [72.2, 106.0], [72.3, 106.0], [72.4, 106.0], [72.5, 106.0], [72.6, 106.0], [72.7, 106.0], [72.8, 106.0], [72.9, 106.0], [73.0, 106.0], [73.1, 106.0], [73.2, 106.0], [73.3, 106.0], [73.4, 106.0], [73.5, 107.0], [73.6, 107.0], [73.7, 107.0], [73.8, 107.0], [73.9, 107.0], [74.0, 107.0], [74.1, 107.0], [74.2, 107.0], [74.3, 107.0], [74.4, 107.0], [74.5, 107.0], [74.6, 107.0], [74.7, 107.0], [74.8, 107.0], [74.9, 107.0], [75.0, 107.0], [75.1, 107.0], [75.2, 107.0], [75.3, 107.0], [75.4, 107.0], [75.5, 107.0], [75.6, 107.0], [75.7, 107.0], [75.8, 107.0], [75.9, 107.0], [76.0, 107.0], [76.1, 107.0], [76.2, 107.0], [76.3, 107.0], [76.4, 107.0], [76.5, 107.0], [76.6, 107.0], [76.7, 107.0], [76.8, 107.0], [76.9, 107.0], [77.0, 107.0], [77.1, 107.0], [77.2, 107.0], [77.3, 107.0], [77.4, 107.0], [77.5, 107.0], [77.6, 107.0], [77.7, 107.0], [77.8, 107.0], [77.9, 107.0], [78.0, 107.0], [78.1, 107.0], [78.2, 107.0], [78.3, 107.0], [78.4, 107.0], [78.5, 107.0], [78.6, 107.0], [78.7, 107.0], [78.8, 107.0], [78.9, 107.0], [79.0, 107.0], [79.1, 107.0], [79.2, 107.0], [79.3, 107.0], [79.4, 107.0], [79.5, 107.0], [79.6, 107.0], [79.7, 107.0], [79.8, 107.0], [79.9, 107.0], [80.0, 107.0], [80.1, 107.0], [80.2, 107.0], [80.3, 107.0], [80.4, 107.0], [80.5, 107.0], [80.6, 107.0], [80.7, 107.0], [80.8, 107.0], [80.9, 107.0], [81.0, 107.0], [81.1, 107.0], [81.2, 107.0], [81.3, 107.0], [81.4, 107.0], [81.5, 107.0], [81.6, 107.0], [81.7, 107.0], [81.8, 107.0], [81.9, 107.0], [82.0, 107.0], [82.1, 107.0], [82.2, 107.0], [82.3, 107.0], [82.4, 108.0], [82.5, 108.0], [82.6, 108.0], [82.7, 108.0], [82.8, 108.0], [82.9, 108.0], [83.0, 108.0], [83.1, 108.0], [83.2, 108.0], [83.3, 108.0], [83.4, 108.0], [83.5, 108.0], [83.6, 108.0], [83.7, 108.0], [83.8, 108.0], [83.9, 108.0], [84.0, 108.0], [84.1, 108.0], [84.2, 108.0], [84.3, 108.0], [84.4, 108.0], [84.5, 108.0], [84.6, 108.0], [84.7, 108.0], [84.8, 108.0], [84.9, 108.0], [85.0, 108.0], [85.1, 108.0], [85.2, 108.0], [85.3, 108.0], [85.4, 108.0], [85.5, 108.0], [85.6, 109.0], [85.7, 109.0], [85.8, 109.0], [85.9, 109.0], [86.0, 109.0], [86.1, 109.0], [86.2, 109.0], [86.3, 109.0], [86.4, 109.0], [86.5, 109.0], [86.6, 109.0], [86.7, 109.0], [86.8, 109.0], [86.9, 109.0], [87.0, 109.0], [87.1, 109.0], [87.2, 110.0], [87.3, 110.0], [87.4, 110.0], [87.5, 110.0], [87.6, 110.0], [87.7, 110.0], [87.8, 110.0], [87.9, 110.0], [88.0, 110.0], [88.1, 111.0], [88.2, 111.0], [88.3, 111.0], [88.4, 111.0], [88.5, 111.0], [88.6, 112.0], [88.7, 112.0], [88.8, 112.0], [88.9, 112.0], [89.0, 112.0], [89.1, 113.0], [89.2, 113.0], [89.3, 113.0], [89.4, 114.0], [89.5, 114.0], [89.6, 115.0], [89.7, 115.0], [89.8, 115.0], [89.9, 116.0], [90.0, 116.0], [90.1, 117.0], [90.2, 118.0], [90.3, 119.0], [90.4, 120.0], [90.5, 122.0], [90.6, 124.0], [90.7, 125.0], [90.8, 126.0], [90.9, 127.0], [91.0, 128.0], [91.1, 130.0], [91.2, 133.0], [91.3, 134.0], [91.4, 136.0], [91.5, 139.0], [91.6, 140.0], [91.7, 142.0], [91.8, 143.0], [91.9, 145.0], [92.0, 146.0], [92.1, 147.0], [92.2, 147.0], [92.3, 149.0], [92.4, 155.0], [92.5, 158.0], [92.6, 159.0], [92.7, 163.0], [92.8, 164.0], [92.9, 166.0], [93.0, 168.0], [93.1, 170.0], [93.2, 171.0], [93.3, 175.0], [93.4, 176.0], [93.5, 177.0], [93.6, 179.0], [93.7, 180.0], [93.8, 184.0], [93.9, 186.0], [94.0, 189.0], [94.1, 193.0], [94.2, 197.0], [94.3, 200.0], [94.4, 202.0], [94.5, 203.0], [94.6, 207.0], [94.7, 208.0], [94.8, 210.0], [94.9, 226.0], [95.0, 280.0], [95.1, 313.0], [95.2, 379.0], [95.3, 383.0], [95.4, 397.0], [95.5, 414.0], [95.6, 511.0], [95.7, 530.0], [95.8, 594.0], [95.9, 622.0], [96.0, 2702.0], [96.1, 5122.0], [96.2, 5176.0], [96.3, 6179.0], [96.4, 6753.0], [96.5, 7280.0], [96.6, 8234.0], [96.7, 9541.0], [96.8, 10902.0], [96.9, 12039.0], [97.0, 12585.0], [97.1, 13789.0], [97.2, 16238.0], [97.3, 16879.0], [97.4, 17624.0], [97.5, 18490.0], [97.6, 18887.0], [97.7, 19570.0], [97.8, 19776.0], [97.9, 20960.0], [98.0, 21979.0], [98.1, 23191.0], [98.2, 24443.0], [98.3, 25703.0], [98.4, 27468.0], [98.5, 29068.0], [98.6, 30479.0], [98.7, 31637.0], [98.8, 34539.0], [98.9, 39655.0], [99.0, 42676.0], [99.1, 43702.0], [99.2, 45781.0], [99.3, 49382.0], [99.4, 50109.0], [99.5, 60106.0], [99.6, 60131.0], [99.7, 60150.0], [99.8, 60171.0], [99.9, 60194.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 203.0], [0.1, 203.0], [0.2, 203.0], [0.3, 203.0], [0.4, 204.0], [0.5, 204.0], [0.6, 204.0], [0.7, 204.0], [0.8, 204.0], [0.9, 204.0], [1.0, 204.0], [1.1, 204.0], [1.2, 204.0], [1.3, 204.0], [1.4, 204.0], [1.5, 204.0], [1.6, 204.0], [1.7, 204.0], [1.8, 204.0], [1.9, 204.0], [2.0, 204.0], [2.1, 204.0], [2.2, 204.0], [2.3, 204.0], [2.4, 204.0], [2.5, 204.0], [2.6, 204.0], [2.7, 204.0], [2.8, 204.0], [2.9, 204.0], [3.0, 204.0], [3.1, 204.0], [3.2, 204.0], [3.3, 204.0], [3.4, 204.0], [3.5, 204.0], [3.6, 204.0], [3.7, 204.0], [3.8, 204.0], [3.9, 204.0], [4.0, 204.0], [4.1, 204.0], [4.2, 204.0], [4.3, 204.0], [4.4, 204.0], [4.5, 204.0], [4.6, 204.0], [4.7, 204.0], [4.8, 204.0], [4.9, 204.0], [5.0, 204.0], [5.1, 204.0], [5.2, 205.0], [5.3, 205.0], [5.4, 205.0], [5.5, 205.0], [5.6, 205.0], [5.7, 205.0], [5.8, 205.0], [5.9, 205.0], [6.0, 205.0], [6.1, 205.0], [6.2, 205.0], [6.3, 205.0], [6.4, 205.0], [6.5, 205.0], [6.6, 205.0], [6.7, 205.0], [6.8, 205.0], [6.9, 205.0], [7.0, 205.0], [7.1, 205.0], [7.2, 205.0], [7.3, 205.0], [7.4, 205.0], [7.5, 205.0], [7.6, 205.0], [7.7, 205.0], [7.8, 205.0], [7.9, 205.0], [8.0, 205.0], [8.1, 205.0], [8.2, 205.0], [8.3, 205.0], [8.4, 205.0], [8.5, 205.0], [8.6, 205.0], [8.7, 205.0], [8.8, 205.0], [8.9, 205.0], [9.0, 205.0], [9.1, 205.0], [9.2, 205.0], [9.3, 205.0], [9.4, 205.0], [9.5, 205.0], [9.6, 205.0], [9.7, 205.0], [9.8, 205.0], [9.9, 205.0], [10.0, 205.0], [10.1, 205.0], [10.2, 205.0], [10.3, 205.0], [10.4, 205.0], [10.5, 205.0], [10.6, 205.0], [10.7, 205.0], [10.8, 205.0], [10.9, 205.0], [11.0, 205.0], [11.1, 205.0], [11.2, 205.0], [11.3, 205.0], [11.4, 205.0], [11.5, 205.0], [11.6, 205.0], [11.7, 205.0], [11.8, 205.0], [11.9, 205.0], [12.0, 205.0], [12.1, 205.0], [12.2, 205.0], [12.3, 205.0], [12.4, 205.0], [12.5, 205.0], [12.6, 205.0], [12.7, 205.0], [12.8, 205.0], [12.9, 205.0], [13.0, 205.0], [13.1, 205.0], [13.2, 205.0], [13.3, 205.0], [13.4, 205.0], [13.5, 205.0], [13.6, 205.0], [13.7, 205.0], [13.8, 205.0], [13.9, 205.0], [14.0, 205.0], [14.1, 205.0], [14.2, 205.0], [14.3, 205.0], [14.4, 205.0], [14.5, 205.0], [14.6, 205.0], [14.7, 205.0], [14.8, 205.0], [14.9, 205.0], [15.0, 205.0], [15.1, 205.0], [15.2, 205.0], [15.3, 205.0], [15.4, 205.0], [15.5, 205.0], [15.6, 205.0], [15.7, 205.0], [15.8, 205.0], [15.9, 205.0], [16.0, 205.0], [16.1, 205.0], [16.2, 205.0], [16.3, 205.0], [16.4, 205.0], [16.5, 205.0], [16.6, 205.0], [16.7, 205.0], [16.8, 205.0], [16.9, 205.0], [17.0, 205.0], [17.1, 205.0], [17.2, 205.0], [17.3, 205.0], [17.4, 205.0], [17.5, 205.0], [17.6, 205.0], [17.7, 205.0], [17.8, 205.0], [17.9, 205.0], [18.0, 205.0], [18.1, 205.0], [18.2, 205.0], [18.3, 205.0], [18.4, 205.0], [18.5, 205.0], [18.6, 205.0], [18.7, 205.0], [18.8, 205.0], [18.9, 205.0], [19.0, 205.0], [19.1, 205.0], [19.2, 205.0], [19.3, 205.0], [19.4, 205.0], [19.5, 205.0], [19.6, 205.0], [19.7, 205.0], [19.8, 205.0], [19.9, 205.0], [20.0, 205.0], [20.1, 205.0], [20.2, 205.0], [20.3, 205.0], [20.4, 205.0], [20.5, 205.0], [20.6, 205.0], [20.7, 205.0], [20.8, 205.0], [20.9, 205.0], [21.0, 205.0], [21.1, 205.0], [21.2, 205.0], [21.3, 205.0], [21.4, 205.0], [21.5, 205.0], [21.6, 205.0], [21.7, 205.0], [21.8, 205.0], [21.9, 205.0], [22.0, 205.0], [22.1, 205.0], [22.2, 206.0], [22.3, 206.0], [22.4, 206.0], [22.5, 206.0], [22.6, 206.0], [22.7, 206.0], [22.8, 206.0], [22.9, 206.0], [23.0, 206.0], [23.1, 206.0], [23.2, 206.0], [23.3, 206.0], [23.4, 206.0], [23.5, 206.0], [23.6, 206.0], [23.7, 206.0], [23.8, 206.0], [23.9, 206.0], [24.0, 206.0], [24.1, 206.0], [24.2, 206.0], [24.3, 206.0], [24.4, 206.0], [24.5, 206.0], [24.6, 206.0], [24.7, 206.0], [24.8, 206.0], [24.9, 206.0], [25.0, 206.0], [25.1, 206.0], [25.2, 206.0], [25.3, 206.0], [25.4, 206.0], [25.5, 206.0], [25.6, 206.0], [25.7, 206.0], [25.8, 206.0], [25.9, 206.0], [26.0, 206.0], [26.1, 206.0], [26.2, 206.0], [26.3, 206.0], [26.4, 206.0], [26.5, 206.0], [26.6, 206.0], [26.7, 206.0], [26.8, 206.0], [26.9, 206.0], [27.0, 206.0], [27.1, 206.0], [27.2, 206.0], [27.3, 206.0], [27.4, 206.0], [27.5, 206.0], [27.6, 206.0], [27.7, 206.0], [27.8, 206.0], [27.9, 206.0], [28.0, 206.0], [28.1, 206.0], [28.2, 206.0], [28.3, 206.0], [28.4, 206.0], [28.5, 206.0], [28.6, 206.0], [28.7, 206.0], [28.8, 206.0], [28.9, 206.0], [29.0, 206.0], [29.1, 206.0], [29.2, 206.0], [29.3, 206.0], [29.4, 206.0], [29.5, 206.0], [29.6, 206.0], [29.7, 206.0], [29.8, 206.0], [29.9, 206.0], [30.0, 206.0], [30.1, 206.0], [30.2, 206.0], [30.3, 206.0], [30.4, 206.0], [30.5, 206.0], [30.6, 206.0], [30.7, 206.0], [30.8, 206.0], [30.9, 206.0], [31.0, 206.0], [31.1, 206.0], [31.2, 206.0], [31.3, 206.0], [31.4, 206.0], [31.5, 206.0], [31.6, 206.0], [31.7, 206.0], [31.8, 206.0], [31.9, 206.0], [32.0, 206.0], [32.1, 206.0], [32.2, 206.0], [32.3, 206.0], [32.4, 206.0], [32.5, 206.0], [32.6, 206.0], [32.7, 206.0], [32.8, 206.0], [32.9, 206.0], [33.0, 206.0], [33.1, 206.0], [33.2, 206.0], [33.3, 206.0], [33.4, 206.0], [33.5, 206.0], [33.6, 206.0], [33.7, 206.0], [33.8, 206.0], [33.9, 206.0], [34.0, 206.0], [34.1, 206.0], [34.2, 206.0], [34.3, 206.0], [34.4, 206.0], [34.5, 206.0], [34.6, 206.0], [34.7, 206.0], [34.8, 206.0], [34.9, 206.0], [35.0, 206.0], [35.1, 206.0], [35.2, 206.0], [35.3, 206.0], [35.4, 206.0], [35.5, 206.0], [35.6, 206.0], [35.7, 206.0], [35.8, 206.0], [35.9, 206.0], [36.0, 206.0], [36.1, 206.0], [36.2, 206.0], [36.3, 206.0], [36.4, 206.0], [36.5, 206.0], [36.6, 206.0], [36.7, 206.0], [36.8, 206.0], [36.9, 206.0], [37.0, 206.0], [37.1, 206.0], [37.2, 206.0], [37.3, 206.0], [37.4, 206.0], [37.5, 206.0], [37.6, 206.0], [37.7, 206.0], [37.8, 206.0], [37.9, 206.0], [38.0, 206.0], [38.1, 206.0], [38.2, 206.0], [38.3, 206.0], [38.4, 206.0], [38.5, 206.0], [38.6, 206.0], [38.7, 206.0], [38.8, 206.0], [38.9, 206.0], [39.0, 206.0], [39.1, 206.0], [39.2, 206.0], [39.3, 206.0], [39.4, 206.0], [39.5, 206.0], [39.6, 206.0], [39.7, 206.0], [39.8, 206.0], [39.9, 206.0], [40.0, 206.0], [40.1, 206.0], [40.2, 206.0], [40.3, 206.0], [40.4, 206.0], [40.5, 206.0], [40.6, 206.0], [40.7, 206.0], [40.8, 206.0], [40.9, 206.0], [41.0, 206.0], [41.1, 206.0], [41.2, 206.0], [41.3, 206.0], [41.4, 206.0], [41.5, 206.0], [41.6, 206.0], [41.7, 206.0], [41.8, 206.0], [41.9, 206.0], [42.0, 206.0], [42.1, 206.0], [42.2, 206.0], [42.3, 206.0], [42.4, 206.0], [42.5, 206.0], [42.6, 206.0], [42.7, 206.0], [42.8, 206.0], [42.9, 206.0], [43.0, 206.0], [43.1, 206.0], [43.2, 206.0], [43.3, 206.0], [43.4, 206.0], [43.5, 206.0], [43.6, 206.0], [43.7, 206.0], [43.8, 206.0], [43.9, 206.0], [44.0, 206.0], [44.1, 206.0], [44.2, 206.0], [44.3, 206.0], [44.4, 207.0], [44.5, 207.0], [44.6, 207.0], [44.7, 207.0], [44.8, 207.0], [44.9, 207.0], [45.0, 207.0], [45.1, 207.0], [45.2, 207.0], [45.3, 207.0], [45.4, 207.0], [45.5, 207.0], [45.6, 207.0], [45.7, 207.0], [45.8, 207.0], [45.9, 207.0], [46.0, 207.0], [46.1, 207.0], [46.2, 207.0], [46.3, 207.0], [46.4, 207.0], [46.5, 207.0], [46.6, 207.0], [46.7, 207.0], [46.8, 207.0], [46.9, 207.0], [47.0, 207.0], [47.1, 207.0], [47.2, 207.0], [47.3, 207.0], [47.4, 207.0], [47.5, 207.0], [47.6, 207.0], [47.7, 207.0], [47.8, 207.0], [47.9, 207.0], [48.0, 207.0], [48.1, 207.0], [48.2, 207.0], [48.3, 207.0], [48.4, 207.0], [48.5, 207.0], [48.6, 207.0], [48.7, 207.0], [48.8, 207.0], [48.9, 207.0], [49.0, 207.0], [49.1, 207.0], [49.2, 207.0], [49.3, 207.0], [49.4, 207.0], [49.5, 207.0], [49.6, 207.0], [49.7, 207.0], [49.8, 207.0], [49.9, 207.0], [50.0, 207.0], [50.1, 207.0], [50.2, 207.0], [50.3, 207.0], [50.4, 207.0], [50.5, 207.0], [50.6, 207.0], [50.7, 207.0], [50.8, 207.0], [50.9, 207.0], [51.0, 207.0], [51.1, 207.0], [51.2, 207.0], [51.3, 207.0], [51.4, 207.0], [51.5, 207.0], [51.6, 207.0], [51.7, 207.0], [51.8, 207.0], [51.9, 207.0], [52.0, 207.0], [52.1, 207.0], [52.2, 207.0], [52.3, 207.0], [52.4, 207.0], [52.5, 207.0], [52.6, 207.0], [52.7, 207.0], [52.8, 207.0], [52.9, 207.0], [53.0, 207.0], [53.1, 207.0], [53.2, 207.0], [53.3, 207.0], [53.4, 207.0], [53.5, 207.0], [53.6, 207.0], [53.7, 207.0], [53.8, 207.0], [53.9, 207.0], [54.0, 207.0], [54.1, 207.0], [54.2, 207.0], [54.3, 207.0], [54.4, 207.0], [54.5, 207.0], [54.6, 207.0], [54.7, 207.0], [54.8, 207.0], [54.9, 207.0], [55.0, 207.0], [55.1, 207.0], [55.2, 207.0], [55.3, 207.0], [55.4, 207.0], [55.5, 207.0], [55.6, 207.0], [55.7, 207.0], [55.8, 207.0], [55.9, 207.0], [56.0, 207.0], [56.1, 207.0], [56.2, 207.0], [56.3, 207.0], [56.4, 207.0], [56.5, 207.0], [56.6, 207.0], [56.7, 207.0], [56.8, 207.0], [56.9, 207.0], [57.0, 207.0], [57.1, 207.0], [57.2, 207.0], [57.3, 207.0], [57.4, 207.0], [57.5, 207.0], [57.6, 207.0], [57.7, 207.0], [57.8, 207.0], [57.9, 207.0], [58.0, 207.0], [58.1, 207.0], [58.2, 207.0], [58.3, 207.0], [58.4, 207.0], [58.5, 207.0], [58.6, 207.0], [58.7, 207.0], [58.8, 207.0], [58.9, 207.0], [59.0, 207.0], [59.1, 207.0], [59.2, 207.0], [59.3, 207.0], [59.4, 207.0], [59.5, 207.0], [59.6, 207.0], [59.7, 207.0], [59.8, 207.0], [59.9, 207.0], [60.0, 207.0], [60.1, 207.0], [60.2, 207.0], [60.3, 207.0], [60.4, 207.0], [60.5, 207.0], [60.6, 207.0], [60.7, 207.0], [60.8, 207.0], [60.9, 207.0], [61.0, 207.0], [61.1, 207.0], [61.2, 207.0], [61.3, 207.0], [61.4, 207.0], [61.5, 207.0], [61.6, 207.0], [61.7, 207.0], [61.8, 207.0], [61.9, 207.0], [62.0, 208.0], [62.1, 208.0], [62.2, 208.0], [62.3, 208.0], [62.4, 208.0], [62.5, 208.0], [62.6, 208.0], [62.7, 208.0], [62.8, 208.0], [62.9, 208.0], [63.0, 208.0], [63.1, 208.0], [63.2, 208.0], [63.3, 208.0], [63.4, 208.0], [63.5, 208.0], [63.6, 208.0], [63.7, 208.0], [63.8, 208.0], [63.9, 208.0], [64.0, 208.0], [64.1, 208.0], [64.2, 208.0], [64.3, 208.0], [64.4, 208.0], [64.5, 208.0], [64.6, 208.0], [64.7, 208.0], [64.8, 208.0], [64.9, 208.0], [65.0, 208.0], [65.1, 208.0], [65.2, 208.0], [65.3, 208.0], [65.4, 208.0], [65.5, 208.0], [65.6, 208.0], [65.7, 208.0], [65.8, 208.0], [65.9, 208.0], [66.0, 208.0], [66.1, 208.0], [66.2, 208.0], [66.3, 208.0], [66.4, 208.0], [66.5, 208.0], [66.6, 208.0], [66.7, 208.0], [66.8, 208.0], [66.9, 208.0], [67.0, 208.0], [67.1, 208.0], [67.2, 208.0], [67.3, 208.0], [67.4, 208.0], [67.5, 208.0], [67.6, 208.0], [67.7, 208.0], [67.8, 208.0], [67.9, 208.0], [68.0, 208.0], [68.1, 208.0], [68.2, 208.0], [68.3, 208.0], [68.4, 208.0], [68.5, 208.0], [68.6, 208.0], [68.7, 208.0], [68.8, 208.0], [68.9, 208.0], [69.0, 208.0], [69.1, 208.0], [69.2, 208.0], [69.3, 208.0], [69.4, 208.0], [69.5, 208.0], [69.6, 208.0], [69.7, 208.0], [69.8, 208.0], [69.9, 208.0], [70.0, 208.0], [70.1, 208.0], [70.2, 208.0], [70.3, 208.0], [70.4, 208.0], [70.5, 208.0], [70.6, 208.0], [70.7, 208.0], [70.8, 208.0], [70.9, 208.0], [71.0, 208.0], [71.1, 208.0], [71.2, 208.0], [71.3, 208.0], [71.4, 208.0], [71.5, 208.0], [71.6, 208.0], [71.7, 208.0], [71.8, 208.0], [71.9, 208.0], [72.0, 208.0], [72.1, 208.0], [72.2, 208.0], [72.3, 208.0], [72.4, 208.0], [72.5, 208.0], [72.6, 208.0], [72.7, 208.0], [72.8, 208.0], [72.9, 208.0], [73.0, 208.0], [73.1, 208.0], [73.2, 208.0], [73.3, 208.0], [73.4, 208.0], [73.5, 208.0], [73.6, 208.0], [73.7, 208.0], [73.8, 208.0], [73.9, 208.0], [74.0, 208.0], [74.1, 208.0], [74.2, 209.0], [74.3, 209.0], [74.4, 209.0], [74.5, 209.0], [74.6, 209.0], [74.7, 209.0], [74.8, 209.0], [74.9, 209.0], [75.0, 209.0], [75.1, 209.0], [75.2, 209.0], [75.3, 209.0], [75.4, 209.0], [75.5, 209.0], [75.6, 209.0], [75.7, 209.0], [75.8, 209.0], [75.9, 209.0], [76.0, 209.0], [76.1, 209.0], [76.2, 209.0], [76.3, 209.0], [76.4, 209.0], [76.5, 209.0], [76.6, 209.0], [76.7, 209.0], [76.8, 209.0], [76.9, 209.0], [77.0, 209.0], [77.1, 209.0], [77.2, 209.0], [77.3, 209.0], [77.4, 209.0], [77.5, 209.0], [77.6, 209.0], [77.7, 209.0], [77.8, 209.0], [77.9, 209.0], [78.0, 209.0], [78.1, 209.0], [78.2, 209.0], [78.3, 209.0], [78.4, 209.0], [78.5, 209.0], [78.6, 209.0], [78.7, 209.0], [78.8, 209.0], [78.9, 209.0], [79.0, 209.0], [79.1, 209.0], [79.2, 209.0], [79.3, 209.0], [79.4, 209.0], [79.5, 209.0], [79.6, 209.0], [79.7, 209.0], [79.8, 209.0], [79.9, 209.0], [80.0, 209.0], [80.1, 209.0], [80.2, 209.0], [80.3, 209.0], [80.4, 209.0], [80.5, 209.0], [80.6, 209.0], [80.7, 209.0], [80.8, 209.0], [80.9, 209.0], [81.0, 209.0], [81.1, 209.0], [81.2, 209.0], [81.3, 209.0], [81.4, 209.0], [81.5, 209.0], [81.6, 210.0], [81.7, 210.0], [81.8, 210.0], [81.9, 210.0], [82.0, 210.0], [82.1, 210.0], [82.2, 210.0], [82.3, 210.0], [82.4, 210.0], [82.5, 210.0], [82.6, 210.0], [82.7, 210.0], [82.8, 210.0], [82.9, 210.0], [83.0, 210.0], [83.1, 210.0], [83.2, 210.0], [83.3, 210.0], [83.4, 210.0], [83.5, 210.0], [83.6, 210.0], [83.7, 210.0], [83.8, 210.0], [83.9, 210.0], [84.0, 210.0], [84.1, 210.0], [84.2, 210.0], [84.3, 210.0], [84.4, 210.0], [84.5, 210.0], [84.6, 210.0], [84.7, 211.0], [84.8, 211.0], [84.9, 211.0], [85.0, 211.0], [85.1, 211.0], [85.2, 211.0], [85.3, 211.0], [85.4, 211.0], [85.5, 211.0], [85.6, 211.0], [85.7, 211.0], [85.8, 211.0], [85.9, 211.0], [86.0, 211.0], [86.1, 211.0], [86.2, 211.0], [86.3, 211.0], [86.4, 212.0], [86.5, 212.0], [86.6, 212.0], [86.7, 212.0], [86.8, 212.0], [86.9, 212.0], [87.0, 212.0], [87.1, 212.0], [87.2, 212.0], [87.3, 212.0], [87.4, 213.0], [87.5, 213.0], [87.6, 213.0], [87.7, 213.0], [87.8, 214.0], [87.9, 214.0], [88.0, 214.0], [88.1, 215.0], [88.2, 215.0], [88.3, 215.0], [88.4, 215.0], [88.5, 216.0], [88.6, 216.0], [88.7, 218.0], [88.8, 222.0], [88.9, 224.0], [89.0, 226.0], [89.1, 229.0], [89.2, 231.0], [89.3, 232.0], [89.4, 234.0], [89.5, 237.0], [89.6, 240.0], [89.7, 243.0], [89.8, 249.0], [89.9, 255.0], [90.0, 268.0], [90.1, 273.0], [90.2, 279.0], [90.3, 290.0], [90.4, 293.0], [90.5, 299.0], [90.6, 301.0], [90.7, 303.0], [90.8, 303.0], [90.9, 304.0], [91.0, 305.0], [91.1, 305.0], [91.2, 305.0], [91.3, 306.0], [91.4, 306.0], [91.5, 306.0], [91.6, 306.0], [91.7, 307.0], [91.8, 307.0], [91.9, 307.0], [92.0, 308.0], [92.1, 309.0], [92.2, 310.0], [92.3, 311.0], [92.4, 312.0], [92.5, 314.0], [92.6, 315.0], [92.7, 322.0], [92.8, 323.0], [92.9, 327.0], [93.0, 327.0], [93.1, 338.0], [93.2, 339.0], [93.3, 343.0], [93.4, 349.0], [93.5, 356.0], [93.6, 363.0], [93.7, 369.0], [93.8, 369.0], [93.9, 370.0], [94.0, 371.0], [94.1, 374.0], [94.2, 378.0], [94.3, 382.0], [94.4, 391.0], [94.5, 397.0], [94.6, 399.0], [94.7, 400.0], [94.8, 401.0], [94.9, 403.0], [95.0, 403.0], [95.1, 404.0], [95.2, 404.0], [95.3, 404.0], [95.4, 405.0], [95.5, 406.0], [95.6, 406.0], [95.7, 406.0], [95.8, 406.0], [95.9, 407.0], [96.0, 407.0], [96.1, 407.0], [96.2, 407.0], [96.3, 407.0], [96.4, 407.0], [96.5, 407.0], [96.6, 407.0], [96.7, 407.0], [96.8, 408.0], [96.9, 408.0], [97.0, 408.0], [97.1, 408.0], [97.2, 408.0], [97.3, 408.0], [97.4, 409.0], [97.5, 409.0], [97.6, 409.0], [97.7, 409.0], [97.8, 409.0], [97.9, 409.0], [98.0, 410.0], [98.1, 410.0], [98.2, 410.0], [98.3, 410.0], [98.4, 411.0], [98.5, 411.0], [98.6, 414.0], [98.7, 415.0], [98.8, 418.0], [98.9, 427.0], [99.0, 438.0], [99.1, 473.0], [99.2, 488.0], [99.3, 494.0], [99.4, 498.0], [99.5, 502.0], [99.6, 505.0], [99.7, 517.0], [99.8, 610.0], [99.9, 621.0], [100.0, 1334.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 3358.0, "series": [{"data": [[33900.0, 1.0], [34900.0, 1.0], [42900.0, 1.0], [42700.0, 1.0], [43900.0, 1.0], [44100.0, 1.0], [45100.0, 1.0], [45900.0, 1.0], [48900.0, 1.0], [47500.0, 1.0], [49700.0, 1.0], [50500.0, 1.0], [200.0, 17.0], [53300.0, 1.0], [54900.0, 1.0], [60500.0, 7.0], [60700.0, 2.0], [60300.0, 3.0], [300.0, 3162.0], [400.0, 113.0], [500.0, 95.0], [600.0, 27.0], [700.0, 10.0], [800.0, 3.0], [900.0, 3.0], [1000.0, 3.0], [1100.0, 2.0], [1300.0, 1.0], [1700.0, 1.0], [3100.0, 2.0], [4100.0, 1.0], [4900.0, 1.0], [5200.0, 1.0], [5500.0, 4.0], [5800.0, 2.0], [5900.0, 1.0], [6400.0, 1.0], [6600.0, 1.0], [6900.0, 1.0], [7000.0, 2.0], [7300.0, 1.0], [7600.0, 1.0], [7800.0, 1.0], [7700.0, 1.0], [8100.0, 1.0], [8500.0, 1.0], [8700.0, 1.0], [9000.0, 1.0], [9700.0, 1.0], [9900.0, 1.0], [10300.0, 1.0], [11100.0, 1.0], [10900.0, 1.0], [11500.0, 1.0], [11300.0, 1.0], [12300.0, 2.0], [12600.0, 1.0], [12400.0, 1.0], [13000.0, 1.0], [12800.0, 1.0], [12900.0, 1.0], [13800.0, 1.0], [14200.0, 1.0], [14100.0, 1.0], [14700.0, 1.0], [15000.0, 1.0], [16700.0, 1.0], [17300.0, 1.0], [16400.0, 1.0], [16600.0, 1.0], [17800.0, 2.0], [18000.0, 1.0], [17900.0, 1.0], [18100.0, 1.0], [18600.0, 1.0], [19000.0, 2.0], [19200.0, 2.0], [18800.0, 1.0], [19800.0, 3.0], [20000.0, 2.0], [20100.0, 1.0], [20400.0, 1.0], [19500.0, 1.0], [21200.0, 1.0], [21100.0, 1.0], [20700.0, 1.0], [22300.0, 1.0], [22000.0, 1.0], [22200.0, 1.0], [23300.0, 1.0], [23000.0, 1.0], [23200.0, 1.0], [23600.0, 1.0], [23800.0, 1.0], [23900.0, 1.0], [24800.0, 1.0], [25500.0, 1.0], [25800.0, 1.0], [26300.0, 1.0], [25900.0, 1.0], [26100.0, 1.0], [27000.0, 2.0], [27800.0, 2.0], [28500.0, 1.0], [29400.0, 1.0], [30000.0, 1.0], [29700.0, 1.0], [30500.0, 1.0], [30700.0, 1.0], [31400.0, 1.0], [31200.0, 1.0], [32100.0, 1.0], [32000.0, 2.0], [35000.0, 1.0], [40000.0, 1.0], [39800.0, 1.0], [42000.0, 1.0], [41000.0, 1.0], [43200.0, 1.0], [46200.0, 1.0], [47000.0, 1.0], [45400.0, 1.0], [49800.0, 1.0], [50000.0, 1.0], [54600.0, 1.0], [60600.0, 2.0], [60400.0, 4.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 3358.0], [33500.0, 1.0], [34500.0, 1.0], [40700.0, 1.0], [39500.0, 1.0], [42300.0, 1.0], [44700.0, 1.0], [43700.0, 1.0], [45700.0, 1.0], [45100.0, 1.0], [47100.0, 1.0], [48500.0, 1.0], [49300.0, 1.0], [50100.0, 1.0], [200.0, 28.0], [52900.0, 1.0], [60100.0, 15.0], [60300.0, 2.0], [300.0, 12.0], [400.0, 6.0], [500.0, 9.0], [600.0, 2.0], [700.0, 2.0], [2500.0, 1.0], [2700.0, 1.0], [3700.0, 1.0], [4600.0, 1.0], [4800.0, 1.0], [5100.0, 4.0], [5500.0, 1.0], [5600.0, 1.0], [5400.0, 1.0], [6100.0, 1.0], [6200.0, 1.0], [6600.0, 1.0], [6800.0, 1.0], [6700.0, 1.0], [6900.0, 1.0], [7100.0, 1.0], [7400.0, 1.0], [7200.0, 2.0], [8600.0, 1.0], [8200.0, 1.0], [8300.0, 1.0], [9400.0, 1.0], [9500.0, 1.0], [9800.0, 1.0], [10500.0, 1.0], [10800.0, 1.0], [10900.0, 1.0], [11300.0, 1.0], [11900.0, 1.0], [12000.0, 1.0], [12200.0, 1.0], [12100.0, 1.0], [12600.0, 1.0], [12500.0, 2.0], [13700.0, 1.0], [13400.0, 1.0], [13800.0, 1.0], [14300.0, 1.0], [14600.0, 1.0], [16300.0, 1.0], [16200.0, 1.0], [16800.0, 1.0], [16400.0, 1.0], [18200.0, 1.0], [17500.0, 3.0], [17600.0, 1.0], [17800.0, 1.0], [18400.0, 1.0], [18500.0, 1.0], [18800.0, 3.0], [19400.0, 1.0], [19100.0, 1.0], [19500.0, 2.0], [19600.0, 2.0], [19700.0, 1.0], [20200.0, 1.0], [20400.0, 1.0], [20900.0, 1.0], [20700.0, 1.0], [21900.0, 1.0], [21600.0, 1.0], [21800.0, 1.0], [23100.0, 1.0], [22800.0, 1.0], [22600.0, 1.0], [22900.0, 1.0], [23500.0, 2.0], [24400.0, 1.0], [25500.0, 1.0], [25000.0, 1.0], [26600.0, 1.0], [25800.0, 1.0], [26500.0, 1.0], [25600.0, 1.0], [25700.0, 1.0], [27500.0, 1.0], [27400.0, 1.0], [28100.0, 1.0], [29600.0, 1.0], [29000.0, 1.0], [29300.0, 1.0], [30200.0, 1.0], [30400.0, 1.0], [31600.0, 1.0], [31000.0, 1.0], [31700.0, 1.0], [30800.0, 1.0], [31800.0, 1.0], [34600.0, 1.0], [39600.0, 1.0], [41600.0, 1.0], [42600.0, 1.0], [42800.0, 1.0], [43600.0, 1.0], [45600.0, 1.0], [46600.0, 1.0], [49400.0, 1.0], [49800.0, 1.0], [54400.0, 1.0], [54600.0, 1.0], [60200.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 148.0], [600.0, 5.0], [1200.0, 1.0], [1300.0, 1.0], [200.0, 3246.0], [400.0, 172.0], [800.0, 1.0], [500.0, 12.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6897.0, "series": [{"data": [[0.0, 138.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 105.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 6897.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.6854759E12, "maxY": 25.0, "series": [{"data": [[1.68547674E12, 25.0], [1.6854771E12, 7.657407407407395], [1.68547608E12, 6.999999999999998], [1.68547704E12, 10.0], [1.68547614E12, 10.0], [1.68547644E12, 17.313700384122896], [1.68547602E12, 5.0], [1.68547632E12, 15.0], [1.68547638E12, 15.0], [1.68547698E12, 13.870279146141211], [1.68547668E12, 25.0], [1.68547692E12, 15.723809523809521], [1.68547626E12, 12.024096385542169], [1.68547656E12, 20.0], [1.68547662E12, 22.303517587939652], [1.68547596E12, 5.0], [1.68547716E12, 4.833333333333335], [1.6854765E12, 20.0], [1.6854768E12, 22.867366412213727], [1.6854759E12, 3.0], [1.68547686E12, 20.0], [1.6854762E12, 10.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547716E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 105.0, "minX": 1.0, "maxY": 17515.222222222226, "series": [{"data": [[2.0, 4382.5], [3.0, 497.0], [4.0, 6059.0], [5.0, 4316.266187050362], [6.0, 416.0], [7.0, 6892.0], [8.0, 16070.5], [9.0, 396.8333333333333], [10.0, 3406.996904024767], [11.0, 15082.727272727272], [12.0, 8292.0], [13.0, 12734.8], [14.0, 15074.125000000004], [15.0, 4078.738297872341], [1.0, 6931.0], [16.0, 311.5918367346938], [17.0, 311.71698113207555], [18.0, 311.19642857142856], [19.0, 310.1000000000001], [20.0, 312.2752457551387], [21.0, 546.2459016393443], [22.0, 401.6052631578947], [23.0, 312.38028169014086], [24.0, 309.7674418604653], [25.0, 311.5868644067796]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[19.045518011728596, 1423.2231220329506]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 4082.75], [3.0, 176.0], [4.0, 6730.0], [5.0, 4012.963768115939], [6.0, 208.0], [7.0, 9947.0], [8.0, 17515.222222222226], [9.0, 105.0], [10.0, 3163.928571428571], [11.0, 16253.6], [12.0, 9561.6], [13.0, 15515.75], [14.0, 16845.85714285714], [15.0, 3845.115138592749], [1.0, 6666.0], [16.0, 106.0], [17.0, 106.2307692307692], [18.0, 105.69090909090909], [19.0, 105.14492753623189], [20.0, 105.37656529516995], [21.0, 237.5737704918033], [22.0, 146.85526315789477], [23.0, 105.08450704225352], [24.0, 105.20238095238096], [25.0, 105.11028632025445]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[19.07554057848918, 1204.8972198820495]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 302.0], [3.0, 377.0], [4.0, 398.0], [5.0, 331.0357142857142], [6.0, 355.5], [7.0, 331.0], [8.0, 361.8888888888889], [9.0, 230.33333333333331], [10.0, 254.76234567901227], [11.0, 352.5999999999999], [12.0, 361.5], [13.0, 324.4], [14.0, 371.42857142857144], [15.0, 236.62845010615726], [1.0, 356.6666666666667], [16.0, 208.1], [17.0, 207.3653846153847], [18.0, 207.0178571428572], [19.0, 206.34782608695656], [20.0, 207.0455357142855], [21.0, 327.28125], [22.0, 235.59210526315792], [23.0, 206.43661971830986], [24.0, 206.9166666666666], [25.0, 206.6359788359788]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[19.03151143335201, 225.17791411042984]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 695.1, "minX": 1.6854759E12, "maxY": 56519.28333333333, "series": [{"data": [[1.68547674E12, 8645.933333333332], [1.6854771E12, 2455.7166666666667], [1.68547608E12, 963.6666666666666], [1.68547704E12, 3338.4166666666665], [1.68547614E12, 1406.0666666666666], [1.68547644E12, 5873.6], [1.68547602E12, 1027.3666666666666], [1.68547632E12, 1568.3666666666666], [1.68547638E12, 1444.8333333333333], [1.68547698E12, 4605.883333333333], [1.68547668E12, 8204.583333333334], [1.68547692E12, 5545.166666666667], [1.68547626E12, 1984.7333333333333], [1.68547656E12, 6767.366666666667], [1.68547662E12, 7491.633333333333], [1.68547596E12, 807.2166666666667], [1.68547716E12, 1550.3833333333334], [1.6854765E12, 6427.866666666667], [1.6854768E12, 7910.35], [1.6854759E12, 695.1], [1.68547686E12, 7061.6], [1.6854762E12, 1436.2833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68547674E12, 56519.28333333333], [1.6854771E12, 15694.1], [1.68547608E12, 1360.9166666666667], [1.68547704E12, 22812.0], [1.68547614E12, 5247.083333333333], [1.68547644E12, 39241.25], [1.68547602E12, 1809.1833333333334], [1.68547632E12, 5677.233333333334], [1.68547638E12, 4310.783333333334], [1.68547698E12, 28859.9], [1.68547668E12, 51812.316666666666], [1.68547692E12, 37404.1], [1.68547626E12, 4244.716666666666], [1.68547656E12, 43512.316666666666], [1.68547662E12, 47943.51666666667], [1.68547596E12, 1635.4166666666667], [1.68547716E12, 9803.083333333334], [1.6854765E12, 43579.11666666667], [1.6854768E12, 52855.916666666664], [1.6854759E12, 946.2666666666667], [1.68547686E12, 45512.76666666667], [1.6854762E12, 5518.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547716E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 104.9117647058824, "minX": 1.6854759E12, "maxY": 25036.727272727272, "series": [{"data": [[1.68547674E12, 311.6194225721783], [1.6854771E12, 393.822429906542], [1.68547608E12, 25036.727272727272], [1.68547704E12, 348.5637583892617], [1.68547614E12, 13601.777777777776], [1.68547644E12, 326.4236641221374], [1.68547602E12, 18945.0625], [1.68547632E12, 24419.13513513513], [1.68547638E12, 20080.84090909091], [1.68547698E12, 308.82673267326703], [1.68547668E12, 311.48618784530396], [1.68547692E12, 311.2693877551018], [1.68547626E12, 16832.291666666668], [1.68547656E12, 311.5233333333333], [1.68547662E12, 375.5555555555556], [1.68547596E12, 19500.363636363636], [1.68547716E12, 441.0895522388058], [1.6854765E12, 312.4275618374561], [1.6854768E12, 311.44985673352465], [1.6854759E12, 9278.57142857143], [1.68547686E12, 312.92012779552704], [1.6854762E12, 11072.023809523813]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68547674E12, 105.00523560209433], [1.6854771E12, 124.05504587155961], [1.68547608E12, 23192.636363636364], [1.68547704E12, 114.12244897959185], [1.68547614E12, 15449.628571428566], [1.68547644E12, 1009.3073929961099], [1.68547602E12, 17889.07142857143], [1.68547632E12, 24178.7027027027], [1.68547638E12, 20463.41935483871], [1.68547698E12, 104.9117647058824], [1.68547668E12, 105.03030303030307], [1.68547692E12, 105.5428571428571], [1.68547626E12, 15807.7037037037], [1.68547656E12, 105.05369127516776], [1.68547662E12, 139.44207317073165], [1.68547596E12, 19102.909090909096], [1.68547716E12, 140.85294117647055], [1.6854765E12, 105.57543859649114], [1.6854768E12, 105.37999999999992], [1.6854759E12, 8963.714285714286], [1.68547686E12, 105.39228295819937], [1.6854762E12, 10100.341463414632]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68547674E12, 206.58638743455487], [1.6854771E12, 274.7592592592594], [1.68547608E12, 383.0], [1.68547704E12, 233.99324324324317], [1.68547614E12, 296.31428571428575], [1.68547644E12, 220.4656488549619], [1.68547602E12, 385.2142857142857], [1.68547632E12, 339.8108108108107], [1.68547638E12, 377.86666666666656], [1.68547698E12, 206.4581280788178], [1.68547668E12, 206.45856353591174], [1.68547692E12, 208.0285714285714], [1.68547626E12, 383.9687499999999], [1.68547656E12, 206.4666666666665], [1.68547662E12, 236.52694610778457], [1.68547596E12, 379.2727272727273], [1.68547716E12, 307.81159420289845], [1.6854765E12, 206.8586572438162], [1.6854768E12, 207.00859598853862], [1.6854759E12, 354.6666666666667], [1.68547686E12, 207.43769968051117], [1.6854762E12, 353.1463414634146]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547716E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 104.88725490196082, "minX": 1.6854759E12, "maxY": 25036.545454545456, "series": [{"data": [[1.68547674E12, 311.5616797900263], [1.6854771E12, 393.8037383177571], [1.68547608E12, 25036.545454545456], [1.68547704E12, 348.55033557046994], [1.68547614E12, 13601.555555555557], [1.68547644E12, 326.3167938931298], [1.68547602E12, 18944.6875], [1.68547632E12, 24418.567567567567], [1.68547638E12, 20080.68181818182], [1.68547698E12, 308.7920792079208], [1.68547668E12, 311.4254143646408], [1.68547692E12, 311.2408163265306], [1.68547626E12, 16831.75], [1.68547656E12, 311.4600000000001], [1.68547662E12, 375.49249249249243], [1.68547596E12, 19499.636363636364], [1.68547716E12, 441.05970149253716], [1.6854765E12, 312.34628975265036], [1.6854768E12, 311.3868194842408], [1.6854759E12, 9276.714285714286], [1.68547686E12, 312.8722044728436], [1.6854762E12, 11071.761904761908]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68547674E12, 104.97120418848169], [1.6854771E12, 124.03669724770639], [1.68547608E12, 23192.545454545456], [1.68547704E12, 114.12244897959185], [1.68547614E12, 15449.485714285716], [1.68547644E12, 1009.2723735408556], [1.68547602E12, 17888.785714285717], [1.68547632E12, 24178.567567567567], [1.68547638E12, 20463.41935483871], [1.68547698E12, 104.88725490196082], [1.68547668E12, 105.00550964187326], [1.68547692E12, 105.53061224489797], [1.68547626E12, 15807.407407407407], [1.68547656E12, 105.03691275167786], [1.68547662E12, 139.41768292682926], [1.68547596E12, 19102.818181818184], [1.68547716E12, 140.82352941176475], [1.6854765E12, 105.5333333333333], [1.6854768E12, 105.35142857142861], [1.6854759E12, 8963.285714285716], [1.68547686E12, 105.36334405144693], [1.6854762E12, 10100.243902439024]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68547674E12, 206.56020942408384], [1.6854771E12, 274.7592592592594], [1.68547608E12, 382.875], [1.68547704E12, 233.97972972972968], [1.68547614E12, 296.2], [1.68547644E12, 220.39694656488544], [1.68547602E12, 385.14285714285717], [1.68547632E12, 339.51351351351354], [1.68547638E12, 377.6666666666667], [1.68547698E12, 206.44334975369472], [1.68547668E12, 206.4254143646409], [1.68547692E12, 208.01632653061228], [1.68547626E12, 383.68750000000006], [1.68547656E12, 206.42666666666673], [1.68547662E12, 236.48203592814372], [1.68547596E12, 378.9090909090909], [1.68547716E12, 307.81159420289845], [1.6854765E12, 206.81978798586564], [1.6854768E12, 206.97421203438407], [1.6854759E12, 353.49999999999994], [1.68547686E12, 207.41853035143777], [1.6854762E12, 352.9756097560976]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547716E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6854759E12, "maxY": 192.63636363636363, "series": [{"data": [[1.68547674E12, 103.0367454068242], [1.6854771E12, 137.56074766355133], [1.68547608E12, 175.36363636363635], [1.68547704E12, 116.02684563758388], [1.68547614E12, 148.30555555555557], [1.68547644E12, 109.29770992366414], [1.68547602E12, 187.1875], [1.68547632E12, 169.10810810810813], [1.68547638E12, 165.8181818181818], [1.68547698E12, 103.07425742574264], [1.68547668E12, 103.01104972375683], [1.68547692E12, 103.60408163265315], [1.68547626E12, 186.04166666666666], [1.68547656E12, 103.07666666666668], [1.68547662E12, 113.21921921921924], [1.68547596E12, 192.63636363636363], [1.68547716E12, 151.044776119403], [1.6854765E12, 103.16607773851591], [1.6854768E12, 103.16332378223497], [1.6854759E12, 135.14285714285714], [1.68547686E12, 103.26837060702881], [1.6854762E12, 175.7619047619047]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68547674E12, 0.0], [1.6854771E12, 0.0], [1.68547608E12, 0.0], [1.68547704E12, 0.0], [1.68547614E12, 0.0], [1.68547644E12, 0.0], [1.68547602E12, 0.0], [1.68547632E12, 0.0], [1.68547638E12, 0.0], [1.68547698E12, 0.0], [1.68547668E12, 0.0], [1.68547692E12, 0.0], [1.68547626E12, 0.0], [1.68547656E12, 0.0], [1.68547662E12, 0.0], [1.68547596E12, 0.0], [1.68547716E12, 0.0], [1.6854765E12, 0.0], [1.6854768E12, 0.0], [1.6854759E12, 0.0], [1.68547686E12, 0.0], [1.6854762E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68547674E12, 103.03141361256546], [1.6854771E12, 138.1851851851852], [1.68547608E12, 179.18749999999997], [1.68547704E12, 116.12162162162161], [1.68547614E12, 146.34285714285713], [1.68547644E12, 109.29770992366412], [1.68547602E12, 185.64285714285717], [1.68547632E12, 153.78378378378375], [1.68547638E12, 176.76666666666665], [1.68547698E12, 103.06896551724131], [1.68547668E12, 103.01104972375694], [1.68547692E12, 103.60408163265313], [1.68547626E12, 188.0], [1.68547656E12, 103.0766666666667], [1.68547662E12, 113.19161676646702], [1.68547596E12, 182.0909090909091], [1.68547716E12, 151.5652173913044], [1.6854765E12, 103.16607773851592], [1.6854768E12, 103.16332378223487], [1.6854759E12, 163.0], [1.68547686E12, 103.26837060702874], [1.6854762E12, 174.9268292682927]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547716E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 207.0, "minX": 1.6854759E12, "maxY": 54473.0, "series": [{"data": [[1.68547626E12, 42676.0], [1.68547608E12, 34539.0], [1.68547614E12, 45781.0], [1.68547596E12, 23191.0], [1.68547602E12, 24443.0], [1.68547632E12, 9879.0], [1.6854759E12, 11959.0], [1.68547638E12, 30479.0], [1.6854762E12, 54473.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68547626E12, 27910.4], [1.68547608E12, 32334.5], [1.68547614E12, 44225.5], [1.68547596E12, 22618.1], [1.68547602E12, 21753.4], [1.68547632E12, 7103.0], [1.6854759E12, 11343.0], [1.68547638E12, 20149.300000000003], [1.6854762E12, 49828.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68547626E12, 42676.0], [1.68547608E12, 34539.0], [1.68547614E12, 45781.0], [1.68547596E12, 23191.0], [1.68547602E12, 24443.0], [1.68547632E12, 9879.0], [1.6854759E12, 11959.0], [1.68547638E12, 30479.0], [1.6854762E12, 54473.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68547626E12, 29654.999999999996], [1.68547608E12, 34182.7], [1.68547614E12, 45523.0], [1.68547596E12, 23146.149999999998], [1.68547602E12, 23614.999999999996], [1.68547632E12, 8584.5], [1.6854759E12, 11959.0], [1.68547638E12, 24985.049999999992], [1.6854762E12, 54243.049999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68547626E12, 296.0], [1.68547608E12, 303.0], [1.68547614E12, 207.0], [1.68547596E12, 296.0], [1.68547602E12, 303.0], [1.68547632E12, 223.0], [1.6854759E12, 209.0], [1.68547638E12, 209.0], [1.6854762E12, 249.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68547626E12, 410.5], [1.68547608E12, 407.5], [1.68547614E12, 24510.5], [1.68547596E12, 5668.5], [1.68547602E12, 5503.5], [1.68547632E12, 404.0], [1.6854759E12, 411.0], [1.68547638E12, 402.0], [1.6854762E12, 13525.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547638E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 106.0, "minX": 1.0, "maxY": 31032.0, "series": [{"data": [[1.0, 404.5], [2.0, 407.0], [4.0, 415.0], [8.0, 10469.5], [5.0, 12039.0], [3.0, 503.0], [6.0, 31032.0], [25.0, 268.5], [7.0, 407.0], [14.0, 26671.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 203.0], [8.0, 204.0], [9.0, 204.0], [10.0, 204.0], [11.0, 204.0], [3.0, 204.5], [12.0, 204.0], [13.0, 204.0], [14.0, 205.0], [15.0, 204.0], [1.0, 194.0], [4.0, 204.0], [16.0, 204.0], [17.0, 110.0], [18.0, 111.5], [19.0, 108.5], [5.0, 202.0], [20.0, 107.0], [21.0, 205.0], [22.0, 106.0], [6.0, 204.0], [25.0, 12242.0], [7.0, 204.0], [29.0, 597.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 106.0, "minX": 1.0, "maxY": 31032.0, "series": [{"data": [[1.0, 404.0], [2.0, 407.0], [4.0, 412.5], [8.0, 10469.5], [5.0, 12039.0], [3.0, 503.0], [6.0, 31032.0], [25.0, 268.0], [7.0, 407.0], [14.0, 26671.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 203.0], [8.0, 204.0], [9.0, 204.0], [10.0, 204.0], [11.0, 204.0], [3.0, 204.5], [12.0, 204.0], [13.0, 204.0], [14.0, 205.0], [15.0, 204.0], [1.0, 194.0], [4.0, 204.0], [16.0, 204.0], [17.0, 110.0], [18.0, 111.0], [19.0, 108.5], [5.0, 202.0], [20.0, 107.0], [21.0, 205.0], [22.0, 106.0], [6.0, 204.0], [25.0, 12242.0], [7.0, 204.0], [29.0, 597.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.6854759E12, "maxY": 12.7, "series": [{"data": [[1.68547674E12, 12.7], [1.6854771E12, 3.6333333333333333], [1.68547608E12, 0.5333333333333333], [1.68547704E12, 4.9], [1.68547614E12, 1.1166666666666667], [1.68547644E12, 8.433333333333334], [1.68547602E12, 0.45], [1.68547632E12, 1.25], [1.68547638E12, 1.0333333333333334], [1.68547698E12, 6.8], [1.68547668E12, 12.15], [1.68547692E12, 8.15], [1.68547626E12, 1.0833333333333333], [1.68547656E12, 9.933333333333334], [1.68547662E12, 11.016666666666667], [1.68547596E12, 0.38333333333333336], [1.68547716E12, 2.2666666666666666], [1.6854765E12, 9.483333333333333], [1.6854768E12, 11.666666666666666], [1.6854759E12, 0.38333333333333336], [1.68547686E12, 10.366666666666667], [1.6854762E12, 1.3833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547716E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6854759E12, "maxY": 12.733333333333333, "series": [{"data": [[1.68547626E12, 0.8666666666666667], [1.68547608E12, 0.43333333333333335], [1.68547614E12, 0.4], [1.68547596E12, 0.36666666666666664], [1.68547602E12, 0.4666666666666667], [1.68547632E12, 0.48333333333333334], [1.6854759E12, 0.31666666666666665], [1.68547638E12, 0.5], [1.6854762E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68547674E12, 12.733333333333333], [1.6854771E12, 3.6166666666666667], [1.68547608E12, 0.016666666666666666], [1.68547704E12, 4.916666666666667], [1.68547614E12, 0.7666666666666667], [1.68547644E12, 8.633333333333333], [1.68547632E12, 0.6166666666666667], [1.68547638E12, 0.36666666666666664], [1.68547698E12, 6.783333333333333], [1.68547668E12, 12.083333333333334], [1.68547692E12, 8.166666666666666], [1.68547626E12, 0.11666666666666667], [1.68547656E12, 9.966666666666667], [1.68547662E12, 11.033333333333333], [1.68547716E12, 2.283333333333333], [1.6854765E12, 9.466666666666667], [1.6854768E12, 11.65], [1.68547686E12, 10.4], [1.6854762E12, 1.0333333333333334]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68547644E12, 0.016666666666666666], [1.68547632E12, 0.13333333333333333], [1.68547638E12, 0.15]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547716E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6854759E12, "maxY": 6.366666666666666, "series": [{"data": [[1.68547626E12, 0.48333333333333334], [1.68547608E12, 0.25], [1.68547614E12, 0.1], [1.68547596E12, 0.18333333333333332], [1.68547602E12, 0.23333333333333334], [1.68547632E12, 0.38333333333333336], [1.6854759E12, 0.2], [1.68547638E12, 0.43333333333333335], [1.6854762E12, 0.15]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68547674E12, 6.366666666666666], [1.6854771E12, 1.8], [1.68547608E12, 0.016666666666666666], [1.68547704E12, 2.466666666666667], [1.68547614E12, 0.48333333333333334], [1.68547644E12, 4.366666666666666], [1.68547632E12, 0.23333333333333334], [1.68547638E12, 0.06666666666666667], [1.68547698E12, 3.3833333333333333], [1.68547668E12, 6.033333333333333], [1.68547692E12, 4.083333333333333], [1.68547626E12, 0.05], [1.68547656E12, 5.0], [1.68547662E12, 5.566666666666666], [1.68547716E12, 1.15], [1.6854765E12, 4.716666666666667], [1.6854768E12, 5.816666666666666], [1.68547686E12, 5.216666666666667], [1.6854762E12, 0.5333333333333333]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68547674E12, 6.366666666666666], [1.6854771E12, 1.8166666666666667], [1.68547704E12, 2.45], [1.68547614E12, 0.2833333333333333], [1.68547644E12, 4.283333333333333], [1.68547632E12, 0.5166666666666667], [1.68547638E12, 0.45], [1.68547698E12, 3.4], [1.68547668E12, 6.05], [1.68547692E12, 4.083333333333333], [1.68547626E12, 0.06666666666666667], [1.68547656E12, 4.966666666666667], [1.68547662E12, 5.466666666666667], [1.68547716E12, 1.1333333333333333], [1.6854765E12, 4.75], [1.6854768E12, 5.833333333333333], [1.68547686E12, 5.183333333333334], [1.6854762E12, 0.5]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68547626E12, 0.26666666666666666], [1.68547608E12, 0.18333333333333332], [1.68547614E12, 0.13333333333333333], [1.68547596E12, 0.18333333333333332], [1.68547602E12, 0.26666666666666666], [1.68547632E12, 0.08333333333333333], [1.6854759E12, 0.11666666666666667], [1.68547638E12, 0.03333333333333333], [1.6854762E12, 0.016666666666666666]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68547674E12, 6.35], [1.6854771E12, 1.7833333333333334], [1.68547704E12, 2.4833333333333334], [1.68547614E12, 0.4666666666666667], [1.68547644E12, 4.366666666666666], [1.68547632E12, 0.5333333333333333], [1.68547638E12, 0.7], [1.68547698E12, 3.3666666666666667], [1.68547668E12, 6.033333333333333], [1.68547692E12, 4.083333333333333], [1.68547626E12, 0.13333333333333333], [1.68547656E12, 5.0], [1.68547662E12, 5.55], [1.68547716E12, 1.1166666666666667], [1.6854765E12, 4.716666666666667], [1.6854768E12, 5.816666666666666], [1.68547686E12, 5.216666666666667], [1.6854762E12, 0.6833333333333333]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68547626E12, 0.38333333333333336], [1.68547608E12, 0.18333333333333332], [1.68547614E12, 0.3], [1.68547596E12, 0.18333333333333332], [1.68547602E12, 0.23333333333333334], [1.68547632E12, 0.1], [1.6854759E12, 0.11666666666666667], [1.68547638E12, 0.06666666666666667], [1.6854762E12, 0.18333333333333332]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547716E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6854759E12, "maxY": 19.083333333333332, "series": [{"data": [[1.68547626E12, 1.1333333333333333], [1.68547608E12, 0.6166666666666667], [1.68547614E12, 0.5333333333333333], [1.68547596E12, 0.55], [1.68547602E12, 0.7333333333333333], [1.68547632E12, 0.5666666666666667], [1.6854759E12, 0.43333333333333335], [1.68547638E12, 0.5333333333333333], [1.6854762E12, 0.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68547674E12, 19.083333333333332], [1.6854771E12, 5.4], [1.68547608E12, 0.016666666666666666], [1.68547704E12, 7.4], [1.68547614E12, 1.2333333333333334], [1.68547644E12, 13.016666666666667], [1.68547632E12, 1.2833333333333334], [1.68547638E12, 1.2166666666666666], [1.68547698E12, 10.15], [1.68547668E12, 18.116666666666667], [1.68547692E12, 12.25], [1.68547626E12, 0.25], [1.68547656E12, 14.966666666666667], [1.68547662E12, 16.583333333333332], [1.68547716E12, 3.4], [1.6854765E12, 14.183333333333334], [1.6854768E12, 17.466666666666665], [1.68547686E12, 15.616666666666667], [1.6854762E12, 1.7166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68547716E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

