/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 102.0, "minX": 0.0, "maxY": 60801.0, "series": [{"data": [[0.0, 205.0], [0.1, 205.0], [0.2, 206.0], [0.3, 207.0], [0.4, 208.0], [0.5, 209.0], [0.6, 223.0], [0.7, 307.0], [0.8, 307.0], [0.9, 307.0], [1.0, 307.0], [1.1, 308.0], [1.2, 308.0], [1.3, 308.0], [1.4, 308.0], [1.5, 308.0], [1.6, 308.0], [1.7, 308.0], [1.8, 308.0], [1.9, 308.0], [2.0, 308.0], [2.1, 308.0], [2.2, 309.0], [2.3, 309.0], [2.4, 309.0], [2.5, 309.0], [2.6, 309.0], [2.7, 309.0], [2.8, 309.0], [2.9, 309.0], [3.0, 309.0], [3.1, 309.0], [3.2, 309.0], [3.3, 309.0], [3.4, 309.0], [3.5, 309.0], [3.6, 309.0], [3.7, 309.0], [3.8, 309.0], [3.9, 309.0], [4.0, 309.0], [4.1, 309.0], [4.2, 309.0], [4.3, 309.0], [4.4, 309.0], [4.5, 309.0], [4.6, 309.0], [4.7, 309.0], [4.8, 309.0], [4.9, 309.0], [5.0, 309.0], [5.1, 309.0], [5.2, 309.0], [5.3, 309.0], [5.4, 309.0], [5.5, 309.0], [5.6, 309.0], [5.7, 309.0], [5.8, 309.0], [5.9, 309.0], [6.0, 309.0], [6.1, 309.0], [6.2, 309.0], [6.3, 310.0], [6.4, 310.0], [6.5, 310.0], [6.6, 310.0], [6.7, 310.0], [6.8, 310.0], [6.9, 310.0], [7.0, 310.0], [7.1, 310.0], [7.2, 310.0], [7.3, 310.0], [7.4, 310.0], [7.5, 310.0], [7.6, 310.0], [7.7, 310.0], [7.8, 310.0], [7.9, 310.0], [8.0, 310.0], [8.1, 310.0], [8.2, 310.0], [8.3, 310.0], [8.4, 310.0], [8.5, 310.0], [8.6, 310.0], [8.7, 310.0], [8.8, 310.0], [8.9, 310.0], [9.0, 310.0], [9.1, 310.0], [9.2, 310.0], [9.3, 310.0], [9.4, 310.0], [9.5, 310.0], [9.6, 310.0], [9.7, 310.0], [9.8, 310.0], [9.9, 310.0], [10.0, 310.0], [10.1, 310.0], [10.2, 310.0], [10.3, 310.0], [10.4, 310.0], [10.5, 310.0], [10.6, 310.0], [10.7, 310.0], [10.8, 310.0], [10.9, 310.0], [11.0, 310.0], [11.1, 310.0], [11.2, 310.0], [11.3, 310.0], [11.4, 310.0], [11.5, 310.0], [11.6, 310.0], [11.7, 310.0], [11.8, 310.0], [11.9, 310.0], [12.0, 310.0], [12.1, 310.0], [12.2, 310.0], [12.3, 310.0], [12.4, 310.0], [12.5, 310.0], [12.6, 310.0], [12.7, 310.0], [12.8, 310.0], [12.9, 310.0], [13.0, 310.0], [13.1, 310.0], [13.2, 310.0], [13.3, 310.0], [13.4, 310.0], [13.5, 310.0], [13.6, 310.0], [13.7, 310.0], [13.8, 311.0], [13.9, 311.0], [14.0, 311.0], [14.1, 311.0], [14.2, 311.0], [14.3, 311.0], [14.4, 311.0], [14.5, 311.0], [14.6, 311.0], [14.7, 311.0], [14.8, 311.0], [14.9, 311.0], [15.0, 311.0], [15.1, 311.0], [15.2, 311.0], [15.3, 311.0], [15.4, 311.0], [15.5, 311.0], [15.6, 311.0], [15.7, 311.0], [15.8, 311.0], [15.9, 311.0], [16.0, 311.0], [16.1, 311.0], [16.2, 311.0], [16.3, 311.0], [16.4, 311.0], [16.5, 311.0], [16.6, 311.0], [16.7, 311.0], [16.8, 311.0], [16.9, 311.0], [17.0, 311.0], [17.1, 311.0], [17.2, 311.0], [17.3, 311.0], [17.4, 311.0], [17.5, 311.0], [17.6, 311.0], [17.7, 311.0], [17.8, 311.0], [17.9, 311.0], [18.0, 311.0], [18.1, 311.0], [18.2, 311.0], [18.3, 311.0], [18.4, 311.0], [18.5, 311.0], [18.6, 311.0], [18.7, 311.0], [18.8, 311.0], [18.9, 311.0], [19.0, 311.0], [19.1, 311.0], [19.2, 311.0], [19.3, 311.0], [19.4, 311.0], [19.5, 311.0], [19.6, 311.0], [19.7, 311.0], [19.8, 311.0], [19.9, 311.0], [20.0, 311.0], [20.1, 311.0], [20.2, 311.0], [20.3, 311.0], [20.4, 311.0], [20.5, 311.0], [20.6, 311.0], [20.7, 311.0], [20.8, 311.0], [20.9, 311.0], [21.0, 311.0], [21.1, 311.0], [21.2, 311.0], [21.3, 311.0], [21.4, 311.0], [21.5, 311.0], [21.6, 311.0], [21.7, 311.0], [21.8, 311.0], [21.9, 311.0], [22.0, 311.0], [22.1, 311.0], [22.2, 311.0], [22.3, 311.0], [22.4, 311.0], [22.5, 311.0], [22.6, 311.0], [22.7, 311.0], [22.8, 311.0], [22.9, 311.0], [23.0, 311.0], [23.1, 311.0], [23.2, 311.0], [23.3, 311.0], [23.4, 311.0], [23.5, 312.0], [23.6, 312.0], [23.7, 312.0], [23.8, 312.0], [23.9, 312.0], [24.0, 312.0], [24.1, 312.0], [24.2, 312.0], [24.3, 312.0], [24.4, 312.0], [24.5, 312.0], [24.6, 312.0], [24.7, 312.0], [24.8, 312.0], [24.9, 312.0], [25.0, 312.0], [25.1, 312.0], [25.2, 312.0], [25.3, 312.0], [25.4, 312.0], [25.5, 312.0], [25.6, 312.0], [25.7, 312.0], [25.8, 312.0], [25.9, 312.0], [26.0, 312.0], [26.1, 312.0], [26.2, 312.0], [26.3, 312.0], [26.4, 312.0], [26.5, 312.0], [26.6, 312.0], [26.7, 312.0], [26.8, 312.0], [26.9, 312.0], [27.0, 312.0], [27.1, 312.0], [27.2, 312.0], [27.3, 312.0], [27.4, 312.0], [27.5, 312.0], [27.6, 312.0], [27.7, 312.0], [27.8, 312.0], [27.9, 312.0], [28.0, 312.0], [28.1, 312.0], [28.2, 312.0], [28.3, 312.0], [28.4, 312.0], [28.5, 312.0], [28.6, 312.0], [28.7, 312.0], [28.8, 312.0], [28.9, 312.0], [29.0, 312.0], [29.1, 312.0], [29.2, 312.0], [29.3, 312.0], [29.4, 312.0], [29.5, 312.0], [29.6, 312.0], [29.7, 312.0], [29.8, 312.0], [29.9, 312.0], [30.0, 312.0], [30.1, 312.0], [30.2, 312.0], [30.3, 312.0], [30.4, 312.0], [30.5, 312.0], [30.6, 312.0], [30.7, 312.0], [30.8, 312.0], [30.9, 312.0], [31.0, 312.0], [31.1, 312.0], [31.2, 312.0], [31.3, 312.0], [31.4, 312.0], [31.5, 312.0], [31.6, 312.0], [31.7, 312.0], [31.8, 312.0], [31.9, 312.0], [32.0, 312.0], [32.1, 312.0], [32.2, 312.0], [32.3, 312.0], [32.4, 312.0], [32.5, 312.0], [32.6, 312.0], [32.7, 312.0], [32.8, 312.0], [32.9, 312.0], [33.0, 312.0], [33.1, 312.0], [33.2, 312.0], [33.3, 312.0], [33.4, 312.0], [33.5, 312.0], [33.6, 312.0], [33.7, 312.0], [33.8, 312.0], [33.9, 312.0], [34.0, 312.0], [34.1, 312.0], [34.2, 312.0], [34.3, 312.0], [34.4, 312.0], [34.5, 312.0], [34.6, 312.0], [34.7, 313.0], [34.8, 313.0], [34.9, 313.0], [35.0, 313.0], [35.1, 313.0], [35.2, 313.0], [35.3, 313.0], [35.4, 313.0], [35.5, 313.0], [35.6, 313.0], [35.7, 313.0], [35.8, 313.0], [35.9, 313.0], [36.0, 313.0], [36.1, 313.0], [36.2, 313.0], [36.3, 313.0], [36.4, 313.0], [36.5, 313.0], [36.6, 313.0], [36.7, 313.0], [36.8, 313.0], [36.9, 313.0], [37.0, 313.0], [37.1, 313.0], [37.2, 313.0], [37.3, 313.0], [37.4, 313.0], [37.5, 313.0], [37.6, 313.0], [37.7, 313.0], [37.8, 313.0], [37.9, 313.0], [38.0, 313.0], [38.1, 313.0], [38.2, 313.0], [38.3, 313.0], [38.4, 313.0], [38.5, 313.0], [38.6, 313.0], [38.7, 313.0], [38.8, 313.0], [38.9, 313.0], [39.0, 313.0], [39.1, 313.0], [39.2, 313.0], [39.3, 313.0], [39.4, 313.0], [39.5, 313.0], [39.6, 313.0], [39.7, 313.0], [39.8, 313.0], [39.9, 313.0], [40.0, 313.0], [40.1, 313.0], [40.2, 313.0], [40.3, 313.0], [40.4, 313.0], [40.5, 313.0], [40.6, 313.0], [40.7, 313.0], [40.8, 313.0], [40.9, 313.0], [41.0, 313.0], [41.1, 313.0], [41.2, 313.0], [41.3, 313.0], [41.4, 313.0], [41.5, 313.0], [41.6, 313.0], [41.7, 313.0], [41.8, 313.0], [41.9, 313.0], [42.0, 313.0], [42.1, 313.0], [42.2, 313.0], [42.3, 313.0], [42.4, 313.0], [42.5, 313.0], [42.6, 313.0], [42.7, 313.0], [42.8, 313.0], [42.9, 313.0], [43.0, 313.0], [43.1, 313.0], [43.2, 313.0], [43.3, 313.0], [43.4, 313.0], [43.5, 313.0], [43.6, 313.0], [43.7, 313.0], [43.8, 313.0], [43.9, 313.0], [44.0, 313.0], [44.1, 313.0], [44.2, 313.0], [44.3, 313.0], [44.4, 313.0], [44.5, 313.0], [44.6, 313.0], [44.7, 313.0], [44.8, 313.0], [44.9, 313.0], [45.0, 313.0], [45.1, 313.0], [45.2, 313.0], [45.3, 313.0], [45.4, 313.0], [45.5, 313.0], [45.6, 314.0], [45.7, 314.0], [45.8, 314.0], [45.9, 314.0], [46.0, 314.0], [46.1, 314.0], [46.2, 314.0], [46.3, 314.0], [46.4, 314.0], [46.5, 314.0], [46.6, 314.0], [46.7, 314.0], [46.8, 314.0], [46.9, 314.0], [47.0, 314.0], [47.1, 314.0], [47.2, 314.0], [47.3, 314.0], [47.4, 314.0], [47.5, 314.0], [47.6, 314.0], [47.7, 314.0], [47.8, 314.0], [47.9, 314.0], [48.0, 314.0], [48.1, 314.0], [48.2, 314.0], [48.3, 314.0], [48.4, 314.0], [48.5, 314.0], [48.6, 314.0], [48.7, 314.0], [48.8, 314.0], [48.9, 314.0], [49.0, 314.0], [49.1, 314.0], [49.2, 314.0], [49.3, 314.0], [49.4, 314.0], [49.5, 314.0], [49.6, 314.0], [49.7, 314.0], [49.8, 314.0], [49.9, 314.0], [50.0, 314.0], [50.1, 314.0], [50.2, 314.0], [50.3, 314.0], [50.4, 314.0], [50.5, 314.0], [50.6, 314.0], [50.7, 314.0], [50.8, 314.0], [50.9, 314.0], [51.0, 314.0], [51.1, 314.0], [51.2, 314.0], [51.3, 314.0], [51.4, 314.0], [51.5, 314.0], [51.6, 314.0], [51.7, 314.0], [51.8, 314.0], [51.9, 314.0], [52.0, 314.0], [52.1, 314.0], [52.2, 314.0], [52.3, 314.0], [52.4, 314.0], [52.5, 314.0], [52.6, 314.0], [52.7, 314.0], [52.8, 314.0], [52.9, 314.0], [53.0, 314.0], [53.1, 314.0], [53.2, 314.0], [53.3, 314.0], [53.4, 314.0], [53.5, 314.0], [53.6, 314.0], [53.7, 314.0], [53.8, 314.0], [53.9, 314.0], [54.0, 314.0], [54.1, 315.0], [54.2, 315.0], [54.3, 315.0], [54.4, 315.0], [54.5, 315.0], [54.6, 315.0], [54.7, 315.0], [54.8, 315.0], [54.9, 315.0], [55.0, 315.0], [55.1, 315.0], [55.2, 315.0], [55.3, 315.0], [55.4, 315.0], [55.5, 315.0], [55.6, 315.0], [55.7, 315.0], [55.8, 315.0], [55.9, 315.0], [56.0, 315.0], [56.1, 315.0], [56.2, 315.0], [56.3, 315.0], [56.4, 315.0], [56.5, 315.0], [56.6, 315.0], [56.7, 315.0], [56.8, 315.0], [56.9, 315.0], [57.0, 315.0], [57.1, 315.0], [57.2, 315.0], [57.3, 315.0], [57.4, 315.0], [57.5, 315.0], [57.6, 315.0], [57.7, 315.0], [57.8, 315.0], [57.9, 315.0], [58.0, 315.0], [58.1, 315.0], [58.2, 315.0], [58.3, 315.0], [58.4, 315.0], [58.5, 315.0], [58.6, 315.0], [58.7, 315.0], [58.8, 315.0], [58.9, 315.0], [59.0, 315.0], [59.1, 315.0], [59.2, 315.0], [59.3, 315.0], [59.4, 315.0], [59.5, 315.0], [59.6, 315.0], [59.7, 315.0], [59.8, 315.0], [59.9, 315.0], [60.0, 315.0], [60.1, 315.0], [60.2, 315.0], [60.3, 315.0], [60.4, 315.0], [60.5, 315.0], [60.6, 315.0], [60.7, 316.0], [60.8, 316.0], [60.9, 316.0], [61.0, 316.0], [61.1, 316.0], [61.2, 316.0], [61.3, 316.0], [61.4, 316.0], [61.5, 316.0], [61.6, 316.0], [61.7, 316.0], [61.8, 316.0], [61.9, 316.0], [62.0, 316.0], [62.1, 316.0], [62.2, 316.0], [62.3, 316.0], [62.4, 316.0], [62.5, 316.0], [62.6, 316.0], [62.7, 316.0], [62.8, 316.0], [62.9, 316.0], [63.0, 316.0], [63.1, 316.0], [63.2, 316.0], [63.3, 316.0], [63.4, 316.0], [63.5, 316.0], [63.6, 316.0], [63.7, 316.0], [63.8, 316.0], [63.9, 316.0], [64.0, 316.0], [64.1, 316.0], [64.2, 316.0], [64.3, 316.0], [64.4, 316.0], [64.5, 316.0], [64.6, 316.0], [64.7, 316.0], [64.8, 316.0], [64.9, 316.0], [65.0, 316.0], [65.1, 317.0], [65.2, 317.0], [65.3, 317.0], [65.4, 317.0], [65.5, 317.0], [65.6, 317.0], [65.7, 317.0], [65.8, 317.0], [65.9, 317.0], [66.0, 317.0], [66.1, 317.0], [66.2, 317.0], [66.3, 317.0], [66.4, 317.0], [66.5, 317.0], [66.6, 317.0], [66.7, 317.0], [66.8, 317.0], [66.9, 317.0], [67.0, 317.0], [67.1, 317.0], [67.2, 317.0], [67.3, 317.0], [67.4, 317.0], [67.5, 317.0], [67.6, 317.0], [67.7, 317.0], [67.8, 317.0], [67.9, 317.0], [68.0, 317.0], [68.1, 318.0], [68.2, 318.0], [68.3, 318.0], [68.4, 318.0], [68.5, 318.0], [68.6, 318.0], [68.7, 318.0], [68.8, 318.0], [68.9, 318.0], [69.0, 318.0], [69.1, 318.0], [69.2, 318.0], [69.3, 318.0], [69.4, 318.0], [69.5, 318.0], [69.6, 318.0], [69.7, 318.0], [69.8, 318.0], [69.9, 318.0], [70.0, 318.0], [70.1, 318.0], [70.2, 319.0], [70.3, 319.0], [70.4, 319.0], [70.5, 319.0], [70.6, 319.0], [70.7, 319.0], [70.8, 319.0], [70.9, 319.0], [71.0, 319.0], [71.1, 319.0], [71.2, 319.0], [71.3, 319.0], [71.4, 319.0], [71.5, 319.0], [71.6, 319.0], [71.7, 320.0], [71.8, 320.0], [71.9, 320.0], [72.0, 320.0], [72.1, 320.0], [72.2, 320.0], [72.3, 320.0], [72.4, 320.0], [72.5, 320.0], [72.6, 320.0], [72.7, 320.0], [72.8, 320.0], [72.9, 320.0], [73.0, 321.0], [73.1, 321.0], [73.2, 321.0], [73.3, 321.0], [73.4, 321.0], [73.5, 321.0], [73.6, 321.0], [73.7, 321.0], [73.8, 321.0], [73.9, 321.0], [74.0, 321.0], [74.1, 321.0], [74.2, 322.0], [74.3, 322.0], [74.4, 322.0], [74.5, 322.0], [74.6, 322.0], [74.7, 322.0], [74.8, 322.0], [74.9, 322.0], [75.0, 322.0], [75.1, 323.0], [75.2, 323.0], [75.3, 323.0], [75.4, 323.0], [75.5, 323.0], [75.6, 323.0], [75.7, 323.0], [75.8, 324.0], [75.9, 324.0], [76.0, 324.0], [76.1, 324.0], [76.2, 324.0], [76.3, 324.0], [76.4, 324.0], [76.5, 325.0], [76.6, 325.0], [76.7, 325.0], [76.8, 326.0], [76.9, 326.0], [77.0, 326.0], [77.1, 327.0], [77.2, 327.0], [77.3, 328.0], [77.4, 328.0], [77.5, 329.0], [77.6, 329.0], [77.7, 329.0], [77.8, 330.0], [77.9, 331.0], [78.0, 331.0], [78.1, 331.0], [78.2, 332.0], [78.3, 333.0], [78.4, 334.0], [78.5, 334.0], [78.6, 335.0], [78.7, 335.0], [78.8, 336.0], [78.9, 337.0], [79.0, 337.0], [79.1, 338.0], [79.2, 338.0], [79.3, 339.0], [79.4, 340.0], [79.5, 341.0], [79.6, 342.0], [79.7, 342.0], [79.8, 343.0], [79.9, 343.0], [80.0, 345.0], [80.1, 346.0], [80.2, 347.0], [80.3, 348.0], [80.4, 348.0], [80.5, 350.0], [80.6, 351.0], [80.7, 353.0], [80.8, 354.0], [80.9, 355.0], [81.0, 356.0], [81.1, 359.0], [81.2, 363.0], [81.3, 364.0], [81.4, 365.0], [81.5, 368.0], [81.6, 370.0], [81.7, 371.0], [81.8, 376.0], [81.9, 379.0], [82.0, 384.0], [82.1, 386.0], [82.2, 387.0], [82.3, 387.0], [82.4, 391.0], [82.5, 393.0], [82.6, 396.0], [82.7, 398.0], [82.8, 399.0], [82.9, 400.0], [83.0, 405.0], [83.1, 406.0], [83.2, 407.0], [83.3, 409.0], [83.4, 410.0], [83.5, 410.0], [83.6, 410.0], [83.7, 411.0], [83.8, 412.0], [83.9, 413.0], [84.0, 415.0], [84.1, 416.0], [84.2, 416.0], [84.3, 417.0], [84.4, 419.0], [84.5, 420.0], [84.6, 421.0], [84.7, 422.0], [84.8, 424.0], [84.9, 427.0], [85.0, 430.0], [85.1, 432.0], [85.2, 435.0], [85.3, 436.0], [85.4, 437.0], [85.5, 440.0], [85.6, 442.0], [85.7, 443.0], [85.8, 444.0], [85.9, 446.0], [86.0, 449.0], [86.1, 454.0], [86.2, 456.0], [86.3, 463.0], [86.4, 465.0], [86.5, 468.0], [86.6, 469.0], [86.7, 470.0], [86.8, 473.0], [86.9, 477.0], [87.0, 481.0], [87.1, 485.0], [87.2, 490.0], [87.3, 494.0], [87.4, 497.0], [87.5, 499.0], [87.6, 507.0], [87.7, 510.0], [87.8, 511.0], [87.9, 511.0], [88.0, 512.0], [88.1, 512.0], [88.2, 513.0], [88.3, 514.0], [88.4, 514.0], [88.5, 514.0], [88.6, 515.0], [88.7, 515.0], [88.8, 516.0], [88.9, 517.0], [89.0, 518.0], [89.1, 520.0], [89.2, 521.0], [89.3, 525.0], [89.4, 527.0], [89.5, 533.0], [89.6, 534.0], [89.7, 535.0], [89.8, 537.0], [89.9, 538.0], [90.0, 541.0], [90.1, 545.0], [90.2, 548.0], [90.3, 550.0], [90.4, 558.0], [90.5, 559.0], [90.6, 562.0], [90.7, 565.0], [90.8, 569.0], [90.9, 571.0], [91.0, 572.0], [91.1, 575.0], [91.2, 580.0], [91.3, 588.0], [91.4, 588.0], [91.5, 591.0], [91.6, 597.0], [91.7, 600.0], [91.8, 605.0], [91.9, 607.0], [92.0, 610.0], [92.1, 618.0], [92.2, 637.0], [92.3, 697.0], [92.4, 709.0], [92.5, 824.0], [92.6, 1041.0], [92.7, 1319.0], [92.8, 1416.0], [92.9, 1791.0], [93.0, 2372.0], [93.1, 3084.0], [93.2, 3671.0], [93.3, 5414.0], [93.4, 5524.0], [93.5, 5662.0], [93.6, 6037.0], [93.7, 6719.0], [93.8, 7779.0], [93.9, 8991.0], [94.0, 9403.0], [94.1, 10284.0], [94.2, 10600.0], [94.3, 14442.0], [94.4, 14793.0], [94.5, 15590.0], [94.6, 18445.0], [94.7, 19134.0], [94.8, 20470.0], [94.9, 21760.0], [95.0, 22154.0], [95.1, 22888.0], [95.2, 23556.0], [95.3, 23890.0], [95.4, 24312.0], [95.5, 24668.0], [95.6, 25572.0], [95.7, 29126.0], [95.8, 31424.0], [95.9, 32025.0], [96.0, 32632.0], [96.1, 33477.0], [96.2, 33991.0], [96.3, 34739.0], [96.4, 36767.0], [96.5, 37578.0], [96.6, 39176.0], [96.7, 40294.0], [96.8, 41336.0], [96.9, 42610.0], [97.0, 42736.0], [97.1, 43979.0], [97.2, 45348.0], [97.3, 46270.0], [97.4, 47033.0], [97.5, 47572.0], [97.6, 48032.0], [97.7, 48750.0], [97.8, 50507.0], [97.9, 53214.0], [98.0, 53947.0], [98.1, 54576.0], [98.2, 55527.0], [98.3, 56824.0], [98.4, 60315.0], [98.5, 60320.0], [98.6, 60334.0], [98.7, 60364.0], [98.8, 60369.0], [98.9, 60383.0], [99.0, 60395.0], [99.1, 60426.0], [99.2, 60439.0], [99.3, 60460.0], [99.4, 60466.0], [99.5, 60487.0], [99.6, 60506.0], [99.7, 60573.0], [99.8, 60601.0], [99.9, 60625.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 102.0], [0.1, 102.0], [0.2, 102.0], [0.3, 102.0], [0.4, 102.0], [0.5, 102.0], [0.6, 103.0], [0.7, 103.0], [0.8, 103.0], [0.9, 103.0], [1.0, 103.0], [1.1, 103.0], [1.2, 103.0], [1.3, 103.0], [1.4, 103.0], [1.5, 103.0], [1.6, 103.0], [1.7, 103.0], [1.8, 103.0], [1.9, 103.0], [2.0, 103.0], [2.1, 103.0], [2.2, 103.0], [2.3, 103.0], [2.4, 103.0], [2.5, 103.0], [2.6, 103.0], [2.7, 103.0], [2.8, 103.0], [2.9, 103.0], [3.0, 103.0], [3.1, 103.0], [3.2, 103.0], [3.3, 103.0], [3.4, 103.0], [3.5, 103.0], [3.6, 103.0], [3.7, 103.0], [3.8, 103.0], [3.9, 103.0], [4.0, 103.0], [4.1, 103.0], [4.2, 103.0], [4.3, 103.0], [4.4, 103.0], [4.5, 103.0], [4.6, 103.0], [4.7, 103.0], [4.8, 103.0], [4.9, 103.0], [5.0, 103.0], [5.1, 103.0], [5.2, 103.0], [5.3, 103.0], [5.4, 103.0], [5.5, 104.0], [5.6, 104.0], [5.7, 104.0], [5.8, 104.0], [5.9, 104.0], [6.0, 104.0], [6.1, 104.0], [6.2, 104.0], [6.3, 104.0], [6.4, 104.0], [6.5, 104.0], [6.6, 104.0], [6.7, 104.0], [6.8, 104.0], [6.9, 104.0], [7.0, 104.0], [7.1, 104.0], [7.2, 104.0], [7.3, 104.0], [7.4, 104.0], [7.5, 104.0], [7.6, 104.0], [7.7, 104.0], [7.8, 104.0], [7.9, 104.0], [8.0, 104.0], [8.1, 104.0], [8.2, 104.0], [8.3, 104.0], [8.4, 104.0], [8.5, 104.0], [8.6, 104.0], [8.7, 104.0], [8.8, 104.0], [8.9, 104.0], [9.0, 104.0], [9.1, 104.0], [9.2, 104.0], [9.3, 104.0], [9.4, 104.0], [9.5, 104.0], [9.6, 104.0], [9.7, 104.0], [9.8, 104.0], [9.9, 104.0], [10.0, 104.0], [10.1, 104.0], [10.2, 104.0], [10.3, 104.0], [10.4, 104.0], [10.5, 104.0], [10.6, 104.0], [10.7, 104.0], [10.8, 104.0], [10.9, 104.0], [11.0, 104.0], [11.1, 104.0], [11.2, 104.0], [11.3, 104.0], [11.4, 104.0], [11.5, 104.0], [11.6, 104.0], [11.7, 104.0], [11.8, 104.0], [11.9, 104.0], [12.0, 104.0], [12.1, 104.0], [12.2, 104.0], [12.3, 104.0], [12.4, 104.0], [12.5, 104.0], [12.6, 104.0], [12.7, 104.0], [12.8, 104.0], [12.9, 104.0], [13.0, 104.0], [13.1, 104.0], [13.2, 104.0], [13.3, 104.0], [13.4, 104.0], [13.5, 104.0], [13.6, 104.0], [13.7, 104.0], [13.8, 104.0], [13.9, 104.0], [14.0, 104.0], [14.1, 104.0], [14.2, 104.0], [14.3, 104.0], [14.4, 104.0], [14.5, 104.0], [14.6, 104.0], [14.7, 104.0], [14.8, 104.0], [14.9, 104.0], [15.0, 104.0], [15.1, 104.0], [15.2, 104.0], [15.3, 104.0], [15.4, 104.0], [15.5, 104.0], [15.6, 104.0], [15.7, 104.0], [15.8, 104.0], [15.9, 104.0], [16.0, 104.0], [16.1, 104.0], [16.2, 104.0], [16.3, 104.0], [16.4, 104.0], [16.5, 104.0], [16.6, 104.0], [16.7, 104.0], [16.8, 104.0], [16.9, 104.0], [17.0, 104.0], [17.1, 104.0], [17.2, 104.0], [17.3, 104.0], [17.4, 104.0], [17.5, 104.0], [17.6, 104.0], [17.7, 104.0], [17.8, 104.0], [17.9, 104.0], [18.0, 104.0], [18.1, 104.0], [18.2, 104.0], [18.3, 104.0], [18.4, 104.0], [18.5, 104.0], [18.6, 104.0], [18.7, 104.0], [18.8, 104.0], [18.9, 104.0], [19.0, 104.0], [19.1, 104.0], [19.2, 104.0], [19.3, 104.0], [19.4, 104.0], [19.5, 104.0], [19.6, 105.0], [19.7, 105.0], [19.8, 105.0], [19.9, 105.0], [20.0, 105.0], [20.1, 105.0], [20.2, 105.0], [20.3, 105.0], [20.4, 105.0], [20.5, 105.0], [20.6, 105.0], [20.7, 105.0], [20.8, 105.0], [20.9, 105.0], [21.0, 105.0], [21.1, 105.0], [21.2, 105.0], [21.3, 105.0], [21.4, 105.0], [21.5, 105.0], [21.6, 105.0], [21.7, 105.0], [21.8, 105.0], [21.9, 105.0], [22.0, 105.0], [22.1, 105.0], [22.2, 105.0], [22.3, 105.0], [22.4, 105.0], [22.5, 105.0], [22.6, 105.0], [22.7, 105.0], [22.8, 105.0], [22.9, 105.0], [23.0, 105.0], [23.1, 105.0], [23.2, 105.0], [23.3, 105.0], [23.4, 105.0], [23.5, 105.0], [23.6, 105.0], [23.7, 105.0], [23.8, 105.0], [23.9, 105.0], [24.0, 105.0], [24.1, 105.0], [24.2, 105.0], [24.3, 105.0], [24.4, 105.0], [24.5, 105.0], [24.6, 105.0], [24.7, 105.0], [24.8, 105.0], [24.9, 105.0], [25.0, 105.0], [25.1, 105.0], [25.2, 105.0], [25.3, 105.0], [25.4, 105.0], [25.5, 105.0], [25.6, 105.0], [25.7, 105.0], [25.8, 105.0], [25.9, 105.0], [26.0, 105.0], [26.1, 105.0], [26.2, 105.0], [26.3, 105.0], [26.4, 105.0], [26.5, 105.0], [26.6, 105.0], [26.7, 105.0], [26.8, 105.0], [26.9, 105.0], [27.0, 105.0], [27.1, 105.0], [27.2, 105.0], [27.3, 105.0], [27.4, 105.0], [27.5, 105.0], [27.6, 105.0], [27.7, 105.0], [27.8, 105.0], [27.9, 105.0], [28.0, 105.0], [28.1, 105.0], [28.2, 105.0], [28.3, 105.0], [28.4, 105.0], [28.5, 105.0], [28.6, 105.0], [28.7, 105.0], [28.8, 105.0], [28.9, 105.0], [29.0, 105.0], [29.1, 105.0], [29.2, 105.0], [29.3, 105.0], [29.4, 105.0], [29.5, 105.0], [29.6, 105.0], [29.7, 105.0], [29.8, 105.0], [29.9, 105.0], [30.0, 105.0], [30.1, 105.0], [30.2, 105.0], [30.3, 105.0], [30.4, 105.0], [30.5, 105.0], [30.6, 105.0], [30.7, 105.0], [30.8, 105.0], [30.9, 105.0], [31.0, 105.0], [31.1, 105.0], [31.2, 105.0], [31.3, 105.0], [31.4, 105.0], [31.5, 105.0], [31.6, 105.0], [31.7, 105.0], [31.8, 105.0], [31.9, 105.0], [32.0, 105.0], [32.1, 105.0], [32.2, 105.0], [32.3, 105.0], [32.4, 105.0], [32.5, 105.0], [32.6, 105.0], [32.7, 105.0], [32.8, 105.0], [32.9, 105.0], [33.0, 105.0], [33.1, 105.0], [33.2, 105.0], [33.3, 105.0], [33.4, 105.0], [33.5, 105.0], [33.6, 105.0], [33.7, 105.0], [33.8, 105.0], [33.9, 105.0], [34.0, 105.0], [34.1, 105.0], [34.2, 105.0], [34.3, 105.0], [34.4, 105.0], [34.5, 105.0], [34.6, 105.0], [34.7, 105.0], [34.8, 105.0], [34.9, 105.0], [35.0, 105.0], [35.1, 105.0], [35.2, 105.0], [35.3, 105.0], [35.4, 105.0], [35.5, 105.0], [35.6, 105.0], [35.7, 105.0], [35.8, 105.0], [35.9, 105.0], [36.0, 105.0], [36.1, 105.0], [36.2, 105.0], [36.3, 105.0], [36.4, 105.0], [36.5, 105.0], [36.6, 105.0], [36.7, 105.0], [36.8, 105.0], [36.9, 105.0], [37.0, 105.0], [37.1, 105.0], [37.2, 105.0], [37.3, 105.0], [37.4, 105.0], [37.5, 105.0], [37.6, 105.0], [37.7, 105.0], [37.8, 105.0], [37.9, 105.0], [38.0, 105.0], [38.1, 105.0], [38.2, 105.0], [38.3, 105.0], [38.4, 105.0], [38.5, 105.0], [38.6, 105.0], [38.7, 105.0], [38.8, 105.0], [38.9, 105.0], [39.0, 105.0], [39.1, 105.0], [39.2, 105.0], [39.3, 105.0], [39.4, 105.0], [39.5, 105.0], [39.6, 105.0], [39.7, 105.0], [39.8, 105.0], [39.9, 105.0], [40.0, 105.0], [40.1, 105.0], [40.2, 105.0], [40.3, 105.0], [40.4, 105.0], [40.5, 105.0], [40.6, 105.0], [40.7, 105.0], [40.8, 105.0], [40.9, 105.0], [41.0, 105.0], [41.1, 105.0], [41.2, 105.0], [41.3, 105.0], [41.4, 105.0], [41.5, 105.0], [41.6, 105.0], [41.7, 105.0], [41.8, 105.0], [41.9, 105.0], [42.0, 105.0], [42.1, 105.0], [42.2, 105.0], [42.3, 105.0], [42.4, 105.0], [42.5, 105.0], [42.6, 105.0], [42.7, 105.0], [42.8, 106.0], [42.9, 106.0], [43.0, 106.0], [43.1, 106.0], [43.2, 106.0], [43.3, 106.0], [43.4, 106.0], [43.5, 106.0], [43.6, 106.0], [43.7, 106.0], [43.8, 106.0], [43.9, 106.0], [44.0, 106.0], [44.1, 106.0], [44.2, 106.0], [44.3, 106.0], [44.4, 106.0], [44.5, 106.0], [44.6, 106.0], [44.7, 106.0], [44.8, 106.0], [44.9, 106.0], [45.0, 106.0], [45.1, 106.0], [45.2, 106.0], [45.3, 106.0], [45.4, 106.0], [45.5, 106.0], [45.6, 106.0], [45.7, 106.0], [45.8, 106.0], [45.9, 106.0], [46.0, 106.0], [46.1, 106.0], [46.2, 106.0], [46.3, 106.0], [46.4, 106.0], [46.5, 106.0], [46.6, 106.0], [46.7, 106.0], [46.8, 106.0], [46.9, 106.0], [47.0, 106.0], [47.1, 106.0], [47.2, 106.0], [47.3, 106.0], [47.4, 106.0], [47.5, 106.0], [47.6, 106.0], [47.7, 106.0], [47.8, 106.0], [47.9, 106.0], [48.0, 106.0], [48.1, 106.0], [48.2, 106.0], [48.3, 106.0], [48.4, 106.0], [48.5, 106.0], [48.6, 106.0], [48.7, 106.0], [48.8, 106.0], [48.9, 106.0], [49.0, 106.0], [49.1, 106.0], [49.2, 106.0], [49.3, 106.0], [49.4, 106.0], [49.5, 106.0], [49.6, 106.0], [49.7, 106.0], [49.8, 106.0], [49.9, 106.0], [50.0, 106.0], [50.1, 106.0], [50.2, 106.0], [50.3, 106.0], [50.4, 106.0], [50.5, 106.0], [50.6, 106.0], [50.7, 106.0], [50.8, 106.0], [50.9, 106.0], [51.0, 106.0], [51.1, 106.0], [51.2, 106.0], [51.3, 106.0], [51.4, 106.0], [51.5, 106.0], [51.6, 106.0], [51.7, 106.0], [51.8, 106.0], [51.9, 106.0], [52.0, 106.0], [52.1, 106.0], [52.2, 106.0], [52.3, 106.0], [52.4, 106.0], [52.5, 106.0], [52.6, 106.0], [52.7, 106.0], [52.8, 106.0], [52.9, 106.0], [53.0, 106.0], [53.1, 106.0], [53.2, 106.0], [53.3, 106.0], [53.4, 106.0], [53.5, 106.0], [53.6, 106.0], [53.7, 106.0], [53.8, 106.0], [53.9, 106.0], [54.0, 106.0], [54.1, 106.0], [54.2, 106.0], [54.3, 106.0], [54.4, 106.0], [54.5, 106.0], [54.6, 106.0], [54.7, 106.0], [54.8, 106.0], [54.9, 106.0], [55.0, 106.0], [55.1, 106.0], [55.2, 106.0], [55.3, 106.0], [55.4, 106.0], [55.5, 106.0], [55.6, 106.0], [55.7, 106.0], [55.8, 106.0], [55.9, 106.0], [56.0, 106.0], [56.1, 106.0], [56.2, 106.0], [56.3, 106.0], [56.4, 106.0], [56.5, 106.0], [56.6, 106.0], [56.7, 106.0], [56.8, 106.0], [56.9, 106.0], [57.0, 106.0], [57.1, 106.0], [57.2, 106.0], [57.3, 106.0], [57.4, 106.0], [57.5, 106.0], [57.6, 106.0], [57.7, 106.0], [57.8, 106.0], [57.9, 106.0], [58.0, 106.0], [58.1, 106.0], [58.2, 106.0], [58.3, 106.0], [58.4, 106.0], [58.5, 106.0], [58.6, 106.0], [58.7, 106.0], [58.8, 106.0], [58.9, 106.0], [59.0, 106.0], [59.1, 106.0], [59.2, 106.0], [59.3, 106.0], [59.4, 106.0], [59.5, 106.0], [59.6, 106.0], [59.7, 106.0], [59.8, 106.0], [59.9, 106.0], [60.0, 106.0], [60.1, 106.0], [60.2, 106.0], [60.3, 106.0], [60.4, 106.0], [60.5, 106.0], [60.6, 107.0], [60.7, 107.0], [60.8, 107.0], [60.9, 107.0], [61.0, 107.0], [61.1, 107.0], [61.2, 107.0], [61.3, 107.0], [61.4, 107.0], [61.5, 107.0], [61.6, 107.0], [61.7, 107.0], [61.8, 107.0], [61.9, 107.0], [62.0, 107.0], [62.1, 107.0], [62.2, 107.0], [62.3, 107.0], [62.4, 107.0], [62.5, 107.0], [62.6, 107.0], [62.7, 107.0], [62.8, 107.0], [62.9, 107.0], [63.0, 107.0], [63.1, 107.0], [63.2, 107.0], [63.3, 107.0], [63.4, 107.0], [63.5, 107.0], [63.6, 107.0], [63.7, 107.0], [63.8, 107.0], [63.9, 107.0], [64.0, 107.0], [64.1, 107.0], [64.2, 107.0], [64.3, 107.0], [64.4, 107.0], [64.5, 107.0], [64.6, 107.0], [64.7, 107.0], [64.8, 107.0], [64.9, 107.0], [65.0, 107.0], [65.1, 107.0], [65.2, 107.0], [65.3, 107.0], [65.4, 107.0], [65.5, 107.0], [65.6, 107.0], [65.7, 107.0], [65.8, 107.0], [65.9, 107.0], [66.0, 107.0], [66.1, 107.0], [66.2, 107.0], [66.3, 107.0], [66.4, 107.0], [66.5, 107.0], [66.6, 107.0], [66.7, 107.0], [66.8, 107.0], [66.9, 107.0], [67.0, 107.0], [67.1, 107.0], [67.2, 107.0], [67.3, 107.0], [67.4, 107.0], [67.5, 107.0], [67.6, 107.0], [67.7, 107.0], [67.8, 107.0], [67.9, 107.0], [68.0, 107.0], [68.1, 107.0], [68.2, 107.0], [68.3, 107.0], [68.4, 107.0], [68.5, 107.0], [68.6, 107.0], [68.7, 107.0], [68.8, 107.0], [68.9, 107.0], [69.0, 107.0], [69.1, 107.0], [69.2, 107.0], [69.3, 107.0], [69.4, 107.0], [69.5, 107.0], [69.6, 107.0], [69.7, 107.0], [69.8, 107.0], [69.9, 107.0], [70.0, 107.0], [70.1, 107.0], [70.2, 107.0], [70.3, 107.0], [70.4, 107.0], [70.5, 107.0], [70.6, 107.0], [70.7, 107.0], [70.8, 107.0], [70.9, 107.0], [71.0, 107.0], [71.1, 107.0], [71.2, 107.0], [71.3, 107.0], [71.4, 108.0], [71.5, 108.0], [71.6, 108.0], [71.7, 108.0], [71.8, 108.0], [71.9, 108.0], [72.0, 108.0], [72.1, 108.0], [72.2, 108.0], [72.3, 108.0], [72.4, 108.0], [72.5, 108.0], [72.6, 108.0], [72.7, 108.0], [72.8, 108.0], [72.9, 108.0], [73.0, 108.0], [73.1, 108.0], [73.2, 108.0], [73.3, 108.0], [73.4, 108.0], [73.5, 108.0], [73.6, 108.0], [73.7, 108.0], [73.8, 108.0], [73.9, 108.0], [74.0, 108.0], [74.1, 108.0], [74.2, 108.0], [74.3, 108.0], [74.4, 108.0], [74.5, 108.0], [74.6, 108.0], [74.7, 108.0], [74.8, 108.0], [74.9, 108.0], [75.0, 108.0], [75.1, 108.0], [75.2, 108.0], [75.3, 108.0], [75.4, 108.0], [75.5, 108.0], [75.6, 108.0], [75.7, 108.0], [75.8, 108.0], [75.9, 108.0], [76.0, 108.0], [76.1, 109.0], [76.2, 109.0], [76.3, 109.0], [76.4, 109.0], [76.5, 109.0], [76.6, 109.0], [76.7, 109.0], [76.8, 109.0], [76.9, 109.0], [77.0, 109.0], [77.1, 109.0], [77.2, 109.0], [77.3, 109.0], [77.4, 109.0], [77.5, 109.0], [77.6, 109.0], [77.7, 109.0], [77.8, 109.0], [77.9, 109.0], [78.0, 109.0], [78.1, 109.0], [78.2, 109.0], [78.3, 110.0], [78.4, 110.0], [78.5, 110.0], [78.6, 110.0], [78.7, 110.0], [78.8, 110.0], [78.9, 110.0], [79.0, 110.0], [79.1, 110.0], [79.2, 110.0], [79.3, 110.0], [79.4, 110.0], [79.5, 111.0], [79.6, 111.0], [79.7, 111.0], [79.8, 111.0], [79.9, 111.0], [80.0, 111.0], [80.1, 111.0], [80.2, 111.0], [80.3, 111.0], [80.4, 112.0], [80.5, 112.0], [80.6, 112.0], [80.7, 112.0], [80.8, 112.0], [80.9, 112.0], [81.0, 112.0], [81.1, 112.0], [81.2, 112.0], [81.3, 112.0], [81.4, 113.0], [81.5, 113.0], [81.6, 113.0], [81.7, 113.0], [81.8, 113.0], [81.9, 114.0], [82.0, 114.0], [82.1, 114.0], [82.2, 114.0], [82.3, 115.0], [82.4, 115.0], [82.5, 115.0], [82.6, 116.0], [82.7, 116.0], [82.8, 117.0], [82.9, 117.0], [83.0, 117.0], [83.1, 117.0], [83.2, 118.0], [83.3, 118.0], [83.4, 119.0], [83.5, 120.0], [83.6, 121.0], [83.7, 122.0], [83.8, 123.0], [83.9, 123.0], [84.0, 124.0], [84.1, 124.0], [84.2, 125.0], [84.3, 125.0], [84.4, 126.0], [84.5, 127.0], [84.6, 127.0], [84.7, 128.0], [84.8, 128.0], [84.9, 129.0], [85.0, 129.0], [85.1, 130.0], [85.2, 130.0], [85.3, 131.0], [85.4, 131.0], [85.5, 132.0], [85.6, 133.0], [85.7, 134.0], [85.8, 135.0], [85.9, 136.0], [86.0, 137.0], [86.1, 137.0], [86.2, 138.0], [86.3, 139.0], [86.4, 139.0], [86.5, 139.0], [86.6, 140.0], [86.7, 141.0], [86.8, 142.0], [86.9, 142.0], [87.0, 143.0], [87.1, 144.0], [87.2, 144.0], [87.3, 146.0], [87.4, 149.0], [87.5, 150.0], [87.6, 150.0], [87.7, 152.0], [87.8, 152.0], [87.9, 155.0], [88.0, 156.0], [88.1, 157.0], [88.2, 158.0], [88.3, 158.0], [88.4, 159.0], [88.5, 160.0], [88.6, 161.0], [88.7, 161.0], [88.8, 162.0], [88.9, 162.0], [89.0, 164.0], [89.1, 165.0], [89.2, 165.0], [89.3, 166.0], [89.4, 167.0], [89.5, 169.0], [89.6, 171.0], [89.7, 171.0], [89.8, 174.0], [89.9, 175.0], [90.0, 176.0], [90.1, 176.0], [90.2, 178.0], [90.3, 179.0], [90.4, 181.0], [90.5, 181.0], [90.6, 183.0], [90.7, 184.0], [90.8, 184.0], [90.9, 185.0], [91.0, 186.0], [91.1, 188.0], [91.2, 189.0], [91.3, 191.0], [91.4, 191.0], [91.5, 191.0], [91.6, 193.0], [91.7, 193.0], [91.8, 194.0], [91.9, 198.0], [92.0, 200.0], [92.1, 202.0], [92.2, 203.0], [92.3, 204.0], [92.4, 205.0], [92.5, 209.0], [92.6, 212.0], [92.7, 212.0], [92.8, 218.0], [92.9, 264.0], [93.0, 1112.0], [93.1, 1870.0], [93.2, 2583.0], [93.3, 3619.0], [93.4, 5121.0], [93.5, 5253.0], [93.6, 5799.0], [93.7, 7192.0], [93.8, 7560.0], [93.9, 8763.0], [94.0, 9586.0], [94.1, 10031.0], [94.2, 11435.0], [94.3, 14119.0], [94.4, 15127.0], [94.5, 16924.0], [94.6, 18272.0], [94.7, 19566.0], [94.8, 20517.0], [94.9, 21596.0], [95.0, 21882.0], [95.1, 22626.0], [95.2, 23254.0], [95.3, 23599.0], [95.4, 23993.0], [95.5, 25069.0], [95.6, 26555.0], [95.7, 29175.0], [95.8, 31096.0], [95.9, 31713.0], [96.0, 32419.0], [96.1, 33504.0], [96.2, 33955.0], [96.3, 36193.0], [96.4, 36437.0], [96.5, 37251.0], [96.6, 39210.0], [96.7, 39953.0], [96.8, 42174.0], [96.9, 42205.0], [97.0, 42952.0], [97.1, 44087.0], [97.2, 45778.0], [97.3, 45940.0], [97.4, 46791.0], [97.5, 47184.0], [97.6, 48143.0], [97.7, 48862.0], [97.8, 49997.0], [97.9, 52852.0], [98.0, 53605.0], [98.1, 54266.0], [98.2, 55322.0], [98.3, 56617.0], [98.4, 60107.0], [98.5, 60109.0], [98.6, 60126.0], [98.7, 60135.0], [98.8, 60149.0], [98.9, 60158.0], [99.0, 60162.0], [99.1, 60175.0], [99.2, 60189.0], [99.3, 60213.0], [99.4, 60220.0], [99.5, 60237.0], [99.6, 60250.0], [99.7, 60259.0], [99.8, 60268.0], [99.9, 60294.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 203.0], [0.1, 204.0], [0.2, 204.0], [0.3, 204.0], [0.4, 204.0], [0.5, 204.0], [0.6, 204.0], [0.7, 204.0], [0.8, 204.0], [0.9, 204.0], [1.0, 204.0], [1.1, 204.0], [1.2, 204.0], [1.3, 204.0], [1.4, 204.0], [1.5, 204.0], [1.6, 204.0], [1.7, 204.0], [1.8, 205.0], [1.9, 205.0], [2.0, 205.0], [2.1, 205.0], [2.2, 205.0], [2.3, 205.0], [2.4, 205.0], [2.5, 205.0], [2.6, 205.0], [2.7, 205.0], [2.8, 205.0], [2.9, 205.0], [3.0, 205.0], [3.1, 205.0], [3.2, 205.0], [3.3, 205.0], [3.4, 205.0], [3.5, 205.0], [3.6, 205.0], [3.7, 205.0], [3.8, 205.0], [3.9, 205.0], [4.0, 205.0], [4.1, 205.0], [4.2, 205.0], [4.3, 205.0], [4.4, 205.0], [4.5, 205.0], [4.6, 205.0], [4.7, 205.0], [4.8, 205.0], [4.9, 205.0], [5.0, 205.0], [5.1, 205.0], [5.2, 205.0], [5.3, 205.0], [5.4, 205.0], [5.5, 205.0], [5.6, 205.0], [5.7, 205.0], [5.8, 205.0], [5.9, 205.0], [6.0, 205.0], [6.1, 205.0], [6.2, 205.0], [6.3, 205.0], [6.4, 205.0], [6.5, 205.0], [6.6, 205.0], [6.7, 205.0], [6.8, 205.0], [6.9, 205.0], [7.0, 205.0], [7.1, 205.0], [7.2, 205.0], [7.3, 205.0], [7.4, 205.0], [7.5, 205.0], [7.6, 205.0], [7.7, 205.0], [7.8, 205.0], [7.9, 205.0], [8.0, 205.0], [8.1, 205.0], [8.2, 205.0], [8.3, 205.0], [8.4, 205.0], [8.5, 205.0], [8.6, 205.0], [8.7, 205.0], [8.8, 205.0], [8.9, 205.0], [9.0, 205.0], [9.1, 205.0], [9.2, 205.0], [9.3, 205.0], [9.4, 205.0], [9.5, 205.0], [9.6, 205.0], [9.7, 205.0], [9.8, 205.0], [9.9, 205.0], [10.0, 205.0], [10.1, 205.0], [10.2, 205.0], [10.3, 205.0], [10.4, 205.0], [10.5, 205.0], [10.6, 205.0], [10.7, 205.0], [10.8, 205.0], [10.9, 205.0], [11.0, 205.0], [11.1, 205.0], [11.2, 205.0], [11.3, 205.0], [11.4, 205.0], [11.5, 205.0], [11.6, 205.0], [11.7, 205.0], [11.8, 205.0], [11.9, 205.0], [12.0, 205.0], [12.1, 205.0], [12.2, 205.0], [12.3, 205.0], [12.4, 205.0], [12.5, 205.0], [12.6, 205.0], [12.7, 205.0], [12.8, 205.0], [12.9, 206.0], [13.0, 206.0], [13.1, 206.0], [13.2, 206.0], [13.3, 206.0], [13.4, 206.0], [13.5, 206.0], [13.6, 206.0], [13.7, 206.0], [13.8, 206.0], [13.9, 206.0], [14.0, 206.0], [14.1, 206.0], [14.2, 206.0], [14.3, 206.0], [14.4, 206.0], [14.5, 206.0], [14.6, 206.0], [14.7, 206.0], [14.8, 206.0], [14.9, 206.0], [15.0, 206.0], [15.1, 206.0], [15.2, 206.0], [15.3, 206.0], [15.4, 206.0], [15.5, 206.0], [15.6, 206.0], [15.7, 206.0], [15.8, 206.0], [15.9, 206.0], [16.0, 206.0], [16.1, 206.0], [16.2, 206.0], [16.3, 206.0], [16.4, 206.0], [16.5, 206.0], [16.6, 206.0], [16.7, 206.0], [16.8, 206.0], [16.9, 206.0], [17.0, 206.0], [17.1, 206.0], [17.2, 206.0], [17.3, 206.0], [17.4, 206.0], [17.5, 206.0], [17.6, 206.0], [17.7, 206.0], [17.8, 206.0], [17.9, 206.0], [18.0, 206.0], [18.1, 206.0], [18.2, 206.0], [18.3, 206.0], [18.4, 206.0], [18.5, 206.0], [18.6, 206.0], [18.7, 206.0], [18.8, 206.0], [18.9, 206.0], [19.0, 206.0], [19.1, 206.0], [19.2, 206.0], [19.3, 206.0], [19.4, 206.0], [19.5, 206.0], [19.6, 206.0], [19.7, 206.0], [19.8, 206.0], [19.9, 206.0], [20.0, 206.0], [20.1, 206.0], [20.2, 206.0], [20.3, 206.0], [20.4, 206.0], [20.5, 206.0], [20.6, 206.0], [20.7, 206.0], [20.8, 206.0], [20.9, 206.0], [21.0, 206.0], [21.1, 206.0], [21.2, 206.0], [21.3, 206.0], [21.4, 206.0], [21.5, 206.0], [21.6, 206.0], [21.7, 206.0], [21.8, 206.0], [21.9, 206.0], [22.0, 206.0], [22.1, 206.0], [22.2, 206.0], [22.3, 206.0], [22.4, 206.0], [22.5, 206.0], [22.6, 206.0], [22.7, 206.0], [22.8, 206.0], [22.9, 206.0], [23.0, 206.0], [23.1, 206.0], [23.2, 206.0], [23.3, 206.0], [23.4, 206.0], [23.5, 206.0], [23.6, 206.0], [23.7, 206.0], [23.8, 206.0], [23.9, 206.0], [24.0, 206.0], [24.1, 206.0], [24.2, 206.0], [24.3, 206.0], [24.4, 206.0], [24.5, 206.0], [24.6, 206.0], [24.7, 206.0], [24.8, 206.0], [24.9, 206.0], [25.0, 206.0], [25.1, 206.0], [25.2, 206.0], [25.3, 206.0], [25.4, 206.0], [25.5, 206.0], [25.6, 206.0], [25.7, 206.0], [25.8, 206.0], [25.9, 206.0], [26.0, 206.0], [26.1, 206.0], [26.2, 206.0], [26.3, 206.0], [26.4, 206.0], [26.5, 206.0], [26.6, 206.0], [26.7, 206.0], [26.8, 206.0], [26.9, 206.0], [27.0, 206.0], [27.1, 206.0], [27.2, 206.0], [27.3, 206.0], [27.4, 206.0], [27.5, 206.0], [27.6, 206.0], [27.7, 206.0], [27.8, 206.0], [27.9, 206.0], [28.0, 206.0], [28.1, 206.0], [28.2, 206.0], [28.3, 206.0], [28.4, 206.0], [28.5, 206.0], [28.6, 206.0], [28.7, 206.0], [28.8, 206.0], [28.9, 206.0], [29.0, 206.0], [29.1, 206.0], [29.2, 206.0], [29.3, 206.0], [29.4, 206.0], [29.5, 206.0], [29.6, 206.0], [29.7, 206.0], [29.8, 206.0], [29.9, 206.0], [30.0, 206.0], [30.1, 206.0], [30.2, 206.0], [30.3, 206.0], [30.4, 206.0], [30.5, 206.0], [30.6, 206.0], [30.7, 206.0], [30.8, 206.0], [30.9, 206.0], [31.0, 207.0], [31.1, 207.0], [31.2, 207.0], [31.3, 207.0], [31.4, 207.0], [31.5, 207.0], [31.6, 207.0], [31.7, 207.0], [31.8, 207.0], [31.9, 207.0], [32.0, 207.0], [32.1, 207.0], [32.2, 207.0], [32.3, 207.0], [32.4, 207.0], [32.5, 207.0], [32.6, 207.0], [32.7, 207.0], [32.8, 207.0], [32.9, 207.0], [33.0, 207.0], [33.1, 207.0], [33.2, 207.0], [33.3, 207.0], [33.4, 207.0], [33.5, 207.0], [33.6, 207.0], [33.7, 207.0], [33.8, 207.0], [33.9, 207.0], [34.0, 207.0], [34.1, 207.0], [34.2, 207.0], [34.3, 207.0], [34.4, 207.0], [34.5, 207.0], [34.6, 207.0], [34.7, 207.0], [34.8, 207.0], [34.9, 207.0], [35.0, 207.0], [35.1, 207.0], [35.2, 207.0], [35.3, 207.0], [35.4, 207.0], [35.5, 207.0], [35.6, 207.0], [35.7, 207.0], [35.8, 207.0], [35.9, 207.0], [36.0, 207.0], [36.1, 207.0], [36.2, 207.0], [36.3, 207.0], [36.4, 207.0], [36.5, 207.0], [36.6, 207.0], [36.7, 207.0], [36.8, 207.0], [36.9, 207.0], [37.0, 207.0], [37.1, 207.0], [37.2, 207.0], [37.3, 207.0], [37.4, 207.0], [37.5, 207.0], [37.6, 207.0], [37.7, 207.0], [37.8, 207.0], [37.9, 207.0], [38.0, 207.0], [38.1, 207.0], [38.2, 207.0], [38.3, 207.0], [38.4, 207.0], [38.5, 207.0], [38.6, 207.0], [38.7, 207.0], [38.8, 207.0], [38.9, 207.0], [39.0, 207.0], [39.1, 207.0], [39.2, 207.0], [39.3, 207.0], [39.4, 207.0], [39.5, 207.0], [39.6, 207.0], [39.7, 207.0], [39.8, 207.0], [39.9, 207.0], [40.0, 207.0], [40.1, 207.0], [40.2, 207.0], [40.3, 207.0], [40.4, 207.0], [40.5, 207.0], [40.6, 207.0], [40.7, 207.0], [40.8, 207.0], [40.9, 207.0], [41.0, 207.0], [41.1, 207.0], [41.2, 207.0], [41.3, 207.0], [41.4, 207.0], [41.5, 207.0], [41.6, 207.0], [41.7, 207.0], [41.8, 207.0], [41.9, 207.0], [42.0, 207.0], [42.1, 207.0], [42.2, 207.0], [42.3, 207.0], [42.4, 207.0], [42.5, 207.0], [42.6, 207.0], [42.7, 207.0], [42.8, 207.0], [42.9, 207.0], [43.0, 207.0], [43.1, 207.0], [43.2, 207.0], [43.3, 207.0], [43.4, 207.0], [43.5, 207.0], [43.6, 207.0], [43.7, 207.0], [43.8, 207.0], [43.9, 207.0], [44.0, 207.0], [44.1, 207.0], [44.2, 207.0], [44.3, 207.0], [44.4, 207.0], [44.5, 207.0], [44.6, 207.0], [44.7, 207.0], [44.8, 207.0], [44.9, 207.0], [45.0, 207.0], [45.1, 207.0], [45.2, 207.0], [45.3, 207.0], [45.4, 207.0], [45.5, 207.0], [45.6, 207.0], [45.7, 207.0], [45.8, 207.0], [45.9, 207.0], [46.0, 207.0], [46.1, 207.0], [46.2, 207.0], [46.3, 207.0], [46.4, 207.0], [46.5, 207.0], [46.6, 207.0], [46.7, 207.0], [46.8, 207.0], [46.9, 207.0], [47.0, 207.0], [47.1, 207.0], [47.2, 207.0], [47.3, 207.0], [47.4, 207.0], [47.5, 207.0], [47.6, 207.0], [47.7, 207.0], [47.8, 208.0], [47.9, 208.0], [48.0, 208.0], [48.1, 208.0], [48.2, 208.0], [48.3, 208.0], [48.4, 208.0], [48.5, 208.0], [48.6, 208.0], [48.7, 208.0], [48.8, 208.0], [48.9, 208.0], [49.0, 208.0], [49.1, 208.0], [49.2, 208.0], [49.3, 208.0], [49.4, 208.0], [49.5, 208.0], [49.6, 208.0], [49.7, 208.0], [49.8, 208.0], [49.9, 208.0], [50.0, 208.0], [50.1, 208.0], [50.2, 208.0], [50.3, 208.0], [50.4, 208.0], [50.5, 208.0], [50.6, 208.0], [50.7, 208.0], [50.8, 208.0], [50.9, 208.0], [51.0, 208.0], [51.1, 208.0], [51.2, 208.0], [51.3, 208.0], [51.4, 208.0], [51.5, 208.0], [51.6, 208.0], [51.7, 208.0], [51.8, 208.0], [51.9, 208.0], [52.0, 208.0], [52.1, 208.0], [52.2, 208.0], [52.3, 208.0], [52.4, 208.0], [52.5, 208.0], [52.6, 208.0], [52.7, 208.0], [52.8, 208.0], [52.9, 208.0], [53.0, 208.0], [53.1, 208.0], [53.2, 208.0], [53.3, 208.0], [53.4, 208.0], [53.5, 208.0], [53.6, 208.0], [53.7, 208.0], [53.8, 208.0], [53.9, 208.0], [54.0, 208.0], [54.1, 208.0], [54.2, 208.0], [54.3, 208.0], [54.4, 208.0], [54.5, 208.0], [54.6, 208.0], [54.7, 208.0], [54.8, 208.0], [54.9, 208.0], [55.0, 208.0], [55.1, 208.0], [55.2, 208.0], [55.3, 208.0], [55.4, 208.0], [55.5, 208.0], [55.6, 208.0], [55.7, 208.0], [55.8, 208.0], [55.9, 208.0], [56.0, 208.0], [56.1, 208.0], [56.2, 208.0], [56.3, 208.0], [56.4, 208.0], [56.5, 208.0], [56.6, 208.0], [56.7, 208.0], [56.8, 208.0], [56.9, 208.0], [57.0, 208.0], [57.1, 208.0], [57.2, 208.0], [57.3, 208.0], [57.4, 208.0], [57.5, 208.0], [57.6, 208.0], [57.7, 208.0], [57.8, 208.0], [57.9, 208.0], [58.0, 208.0], [58.1, 208.0], [58.2, 208.0], [58.3, 208.0], [58.4, 208.0], [58.5, 208.0], [58.6, 208.0], [58.7, 208.0], [58.8, 208.0], [58.9, 208.0], [59.0, 208.0], [59.1, 208.0], [59.2, 208.0], [59.3, 208.0], [59.4, 208.0], [59.5, 208.0], [59.6, 208.0], [59.7, 209.0], [59.8, 209.0], [59.9, 209.0], [60.0, 209.0], [60.1, 209.0], [60.2, 209.0], [60.3, 209.0], [60.4, 209.0], [60.5, 209.0], [60.6, 209.0], [60.7, 209.0], [60.8, 209.0], [60.9, 209.0], [61.0, 209.0], [61.1, 209.0], [61.2, 209.0], [61.3, 209.0], [61.4, 209.0], [61.5, 209.0], [61.6, 209.0], [61.7, 209.0], [61.8, 209.0], [61.9, 209.0], [62.0, 209.0], [62.1, 209.0], [62.2, 209.0], [62.3, 209.0], [62.4, 209.0], [62.5, 209.0], [62.6, 209.0], [62.7, 209.0], [62.8, 209.0], [62.9, 209.0], [63.0, 209.0], [63.1, 209.0], [63.2, 209.0], [63.3, 209.0], [63.4, 209.0], [63.5, 209.0], [63.6, 209.0], [63.7, 209.0], [63.8, 209.0], [63.9, 209.0], [64.0, 209.0], [64.1, 209.0], [64.2, 209.0], [64.3, 209.0], [64.4, 209.0], [64.5, 209.0], [64.6, 209.0], [64.7, 209.0], [64.8, 209.0], [64.9, 209.0], [65.0, 209.0], [65.1, 209.0], [65.2, 209.0], [65.3, 209.0], [65.4, 209.0], [65.5, 209.0], [65.6, 209.0], [65.7, 209.0], [65.8, 209.0], [65.9, 209.0], [66.0, 209.0], [66.1, 209.0], [66.2, 209.0], [66.3, 209.0], [66.4, 209.0], [66.5, 209.0], [66.6, 209.0], [66.7, 209.0], [66.8, 209.0], [66.9, 209.0], [67.0, 209.0], [67.1, 209.0], [67.2, 209.0], [67.3, 209.0], [67.4, 209.0], [67.5, 209.0], [67.6, 209.0], [67.7, 209.0], [67.8, 209.0], [67.9, 209.0], [68.0, 209.0], [68.1, 209.0], [68.2, 209.0], [68.3, 209.0], [68.4, 209.0], [68.5, 209.0], [68.6, 209.0], [68.7, 209.0], [68.8, 210.0], [68.9, 210.0], [69.0, 210.0], [69.1, 210.0], [69.2, 210.0], [69.3, 210.0], [69.4, 210.0], [69.5, 210.0], [69.6, 210.0], [69.7, 210.0], [69.8, 210.0], [69.9, 210.0], [70.0, 210.0], [70.1, 210.0], [70.2, 210.0], [70.3, 210.0], [70.4, 210.0], [70.5, 210.0], [70.6, 210.0], [70.7, 210.0], [70.8, 210.0], [70.9, 210.0], [71.0, 210.0], [71.1, 210.0], [71.2, 210.0], [71.3, 210.0], [71.4, 210.0], [71.5, 210.0], [71.6, 210.0], [71.7, 210.0], [71.8, 210.0], [71.9, 210.0], [72.0, 210.0], [72.1, 210.0], [72.2, 210.0], [72.3, 210.0], [72.4, 210.0], [72.5, 210.0], [72.6, 210.0], [72.7, 210.0], [72.8, 210.0], [72.9, 210.0], [73.0, 210.0], [73.1, 210.0], [73.2, 210.0], [73.3, 210.0], [73.4, 210.0], [73.5, 210.0], [73.6, 210.0], [73.7, 210.0], [73.8, 211.0], [73.9, 211.0], [74.0, 211.0], [74.1, 211.0], [74.2, 211.0], [74.3, 211.0], [74.4, 211.0], [74.5, 211.0], [74.6, 211.0], [74.7, 211.0], [74.8, 211.0], [74.9, 211.0], [75.0, 211.0], [75.1, 211.0], [75.2, 211.0], [75.3, 211.0], [75.4, 211.0], [75.5, 211.0], [75.6, 211.0], [75.7, 211.0], [75.8, 211.0], [75.9, 211.0], [76.0, 211.0], [76.1, 212.0], [76.2, 212.0], [76.3, 212.0], [76.4, 212.0], [76.5, 212.0], [76.6, 212.0], [76.7, 212.0], [76.8, 212.0], [76.9, 212.0], [77.0, 212.0], [77.1, 212.0], [77.2, 212.0], [77.3, 212.0], [77.4, 212.0], [77.5, 212.0], [77.6, 212.0], [77.7, 212.0], [77.8, 212.0], [77.9, 213.0], [78.0, 213.0], [78.1, 213.0], [78.2, 213.0], [78.3, 213.0], [78.4, 213.0], [78.5, 213.0], [78.6, 213.0], [78.7, 213.0], [78.8, 213.0], [78.9, 214.0], [79.0, 214.0], [79.1, 214.0], [79.2, 214.0], [79.3, 214.0], [79.4, 214.0], [79.5, 214.0], [79.6, 214.0], [79.7, 214.0], [79.8, 214.0], [79.9, 214.0], [80.0, 215.0], [80.1, 215.0], [80.2, 215.0], [80.3, 215.0], [80.4, 215.0], [80.5, 216.0], [80.6, 216.0], [80.7, 216.0], [80.8, 216.0], [80.9, 216.0], [81.0, 216.0], [81.1, 217.0], [81.2, 217.0], [81.3, 217.0], [81.4, 217.0], [81.5, 217.0], [81.6, 218.0], [81.7, 218.0], [81.8, 218.0], [81.9, 218.0], [82.0, 218.0], [82.1, 219.0], [82.2, 219.0], [82.3, 219.0], [82.4, 220.0], [82.5, 220.0], [82.6, 221.0], [82.7, 222.0], [82.8, 222.0], [82.9, 223.0], [83.0, 224.0], [83.1, 224.0], [83.2, 225.0], [83.3, 226.0], [83.4, 226.0], [83.5, 227.0], [83.6, 228.0], [83.7, 228.0], [83.8, 229.0], [83.9, 231.0], [84.0, 232.0], [84.1, 234.0], [84.2, 234.0], [84.3, 235.0], [84.4, 237.0], [84.5, 237.0], [84.6, 239.0], [84.7, 240.0], [84.8, 242.0], [84.9, 244.0], [85.0, 250.0], [85.1, 257.0], [85.2, 258.0], [85.3, 263.0], [85.4, 272.0], [85.5, 277.0], [85.6, 280.0], [85.7, 281.0], [85.8, 285.0], [85.9, 289.0], [86.0, 291.0], [86.1, 297.0], [86.2, 300.0], [86.3, 302.0], [86.4, 303.0], [86.5, 304.0], [86.6, 305.0], [86.7, 305.0], [86.8, 305.0], [86.9, 305.0], [87.0, 305.0], [87.1, 306.0], [87.2, 306.0], [87.3, 306.0], [87.4, 307.0], [87.5, 307.0], [87.6, 307.0], [87.7, 307.0], [87.8, 307.0], [87.9, 308.0], [88.0, 308.0], [88.1, 308.0], [88.2, 309.0], [88.3, 309.0], [88.4, 310.0], [88.5, 311.0], [88.6, 312.0], [88.7, 313.0], [88.8, 315.0], [88.9, 316.0], [89.0, 319.0], [89.1, 323.0], [89.2, 326.0], [89.3, 327.0], [89.4, 327.0], [89.5, 329.0], [89.6, 330.0], [89.7, 335.0], [89.8, 336.0], [89.9, 337.0], [90.0, 338.0], [90.1, 339.0], [90.2, 341.0], [90.3, 343.0], [90.4, 346.0], [90.5, 350.0], [90.6, 359.0], [90.7, 360.0], [90.8, 362.0], [90.9, 362.0], [91.0, 365.0], [91.1, 369.0], [91.2, 371.0], [91.3, 373.0], [91.4, 375.0], [91.5, 382.0], [91.6, 384.0], [91.7, 385.0], [91.8, 386.0], [91.9, 386.0], [92.0, 390.0], [92.1, 392.0], [92.2, 394.0], [92.3, 397.0], [92.4, 398.0], [92.5, 400.0], [92.6, 401.0], [92.7, 402.0], [92.8, 403.0], [92.9, 403.0], [93.0, 404.0], [93.1, 404.0], [93.2, 404.0], [93.3, 405.0], [93.4, 405.0], [93.5, 405.0], [93.6, 406.0], [93.7, 406.0], [93.8, 406.0], [93.9, 406.0], [94.0, 406.0], [94.1, 407.0], [94.2, 407.0], [94.3, 407.0], [94.4, 407.0], [94.5, 407.0], [94.6, 407.0], [94.7, 407.0], [94.8, 407.0], [94.9, 407.0], [95.0, 407.0], [95.1, 407.0], [95.2, 408.0], [95.3, 408.0], [95.4, 408.0], [95.5, 408.0], [95.6, 408.0], [95.7, 408.0], [95.8, 408.0], [95.9, 408.0], [96.0, 409.0], [96.1, 409.0], [96.2, 409.0], [96.3, 409.0], [96.4, 409.0], [96.5, 409.0], [96.6, 409.0], [96.7, 409.0], [96.8, 409.0], [96.9, 409.0], [97.0, 409.0], [97.1, 409.0], [97.2, 409.0], [97.3, 409.0], [97.4, 410.0], [97.5, 410.0], [97.6, 410.0], [97.7, 410.0], [97.8, 410.0], [97.9, 410.0], [98.0, 410.0], [98.1, 411.0], [98.2, 411.0], [98.3, 412.0], [98.4, 415.0], [98.5, 417.0], [98.6, 425.0], [98.7, 427.0], [98.8, 427.0], [98.9, 430.0], [99.0, 439.0], [99.1, 500.0], [99.2, 510.0], [99.3, 593.0], [99.4, 613.0], [99.5, 717.0], [99.6, 973.0], [99.7, 1309.0], [99.8, 2369.0], [99.9, 5342.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 2558.0, "series": [{"data": [[33900.0, 1.0], [34300.0, 1.0], [34700.0, 1.0], [34500.0, 1.0], [36500.0, 1.0], [36700.0, 1.0], [38300.0, 1.0], [37500.0, 1.0], [40300.0, 1.0], [40900.0, 1.0], [39100.0, 1.0], [39700.0, 1.0], [42500.0, 1.0], [42700.0, 1.0], [41300.0, 1.0], [42300.0, 1.0], [43900.0, 1.0], [43300.0, 1.0], [43700.0, 1.0], [45300.0, 1.0], [46100.0, 1.0], [46700.0, 1.0], [47500.0, 2.0], [48700.0, 1.0], [47900.0, 1.0], [50500.0, 1.0], [50900.0, 1.0], [200.0, 17.0], [53900.0, 1.0], [54500.0, 1.0], [55500.0, 1.0], [60300.0, 19.0], [60500.0, 6.0], [300.0, 2306.0], [400.0, 130.0], [500.0, 117.0], [600.0, 18.0], [700.0, 4.0], [800.0, 1.0], [900.0, 1.0], [1000.0, 2.0], [1100.0, 1.0], [1200.0, 1.0], [1300.0, 3.0], [1400.0, 1.0], [1700.0, 2.0], [2000.0, 2.0], [2300.0, 1.0], [2400.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3100.0, 1.0], [3400.0, 1.0], [3600.0, 1.0], [3900.0, 1.0], [4500.0, 1.0], [5400.0, 3.0], [5600.0, 1.0], [5500.0, 2.0], [5700.0, 2.0], [6100.0, 1.0], [6000.0, 2.0], [6700.0, 1.0], [7500.0, 1.0], [7700.0, 2.0], [7900.0, 1.0], [8000.0, 1.0], [9100.0, 1.0], [8900.0, 1.0], [9400.0, 2.0], [10200.0, 1.0], [9900.0, 1.0], [10600.0, 1.0], [10400.0, 2.0], [11700.0, 1.0], [13700.0, 1.0], [14500.0, 2.0], [14700.0, 1.0], [14400.0, 1.0], [15500.0, 2.0], [15900.0, 1.0], [17100.0, 1.0], [18400.0, 1.0], [19100.0, 1.0], [18600.0, 2.0], [19900.0, 1.0], [20300.0, 1.0], [20400.0, 1.0], [21000.0, 1.0], [20900.0, 1.0], [22200.0, 1.0], [21700.0, 1.0], [22100.0, 2.0], [21900.0, 1.0], [22800.0, 1.0], [23500.0, 2.0], [23400.0, 1.0], [23000.0, 1.0], [23900.0, 2.0], [23800.0, 1.0], [24300.0, 2.0], [23700.0, 1.0], [25500.0, 2.0], [25400.0, 1.0], [24600.0, 1.0], [26800.0, 1.0], [27100.0, 1.0], [29100.0, 1.0], [29500.0, 1.0], [31400.0, 3.0], [30800.0, 1.0], [32400.0, 1.0], [32000.0, 1.0], [32700.0, 2.0], [32600.0, 1.0], [33400.0, 1.0], [33800.0, 2.0], [36600.0, 1.0], [37600.0, 1.0], [37200.0, 1.0], [40200.0, 1.0], [39600.0, 1.0], [42600.0, 2.0], [44400.0, 1.0], [44600.0, 1.0], [46200.0, 2.0], [47000.0, 1.0], [46800.0, 1.0], [48000.0, 1.0], [48400.0, 1.0], [48600.0, 1.0], [47200.0, 1.0], [50200.0, 1.0], [49200.0, 1.0], [53200.0, 1.0], [52200.0, 1.0], [53400.0, 1.0], [54600.0, 1.0], [54000.0, 2.0], [54800.0, 1.0], [56400.0, 1.0], [56600.0, 1.0], [56800.0, 1.0], [57600.0, 1.0], [60600.0, 5.0], [60400.0, 15.0], [60800.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 2558.0], [33500.0, 2.0], [33900.0, 1.0], [34100.0, 1.0], [36300.0, 1.0], [36100.0, 1.0], [37900.0, 1.0], [37100.0, 1.0], [39900.0, 1.0], [40500.0, 1.0], [40900.0, 1.0], [39300.0, 1.0], [42100.0, 2.0], [42900.0, 1.0], [44900.0, 1.0], [43300.0, 1.0], [45700.0, 1.0], [47100.0, 2.0], [45900.0, 1.0], [46300.0, 1.0], [46700.0, 1.0], [48100.0, 1.0], [49900.0, 2.0], [50500.0, 1.0], [52900.0, 1.0], [200.0, 27.0], [53500.0, 1.0], [53700.0, 1.0], [54100.0, 1.0], [56100.0, 1.0], [55300.0, 1.0], [60100.0, 25.0], [60300.0, 2.0], [500.0, 1.0], [1100.0, 2.0], [1700.0, 1.0], [1800.0, 1.0], [2000.0, 1.0], [2500.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [3600.0, 1.0], [4100.0, 1.0], [5100.0, 3.0], [5200.0, 2.0], [5600.0, 2.0], [5700.0, 1.0], [6300.0, 1.0], [7100.0, 1.0], [7200.0, 1.0], [7600.0, 1.0], [7500.0, 2.0], [8700.0, 1.0], [8400.0, 1.0], [9000.0, 1.0], [8900.0, 1.0], [9500.0, 1.0], [9900.0, 1.0], [10100.0, 1.0], [10200.0, 1.0], [10000.0, 1.0], [11400.0, 1.0], [13400.0, 1.0], [14100.0, 1.0], [14000.0, 1.0], [14300.0, 1.0], [14400.0, 1.0], [15100.0, 2.0], [15500.0, 1.0], [16900.0, 1.0], [18200.0, 2.0], [17900.0, 1.0], [18700.0, 1.0], [19500.0, 1.0], [20100.0, 1.0], [20000.0, 1.0], [20600.0, 1.0], [21300.0, 1.0], [21500.0, 1.0], [20500.0, 1.0], [22500.0, 1.0], [21800.0, 2.0], [21900.0, 1.0], [23100.0, 2.0], [23200.0, 1.0], [23500.0, 2.0], [23400.0, 1.0], [22600.0, 1.0], [23600.0, 1.0], [23900.0, 2.0], [24200.0, 1.0], [25200.0, 1.0], [25000.0, 1.0], [25100.0, 1.0], [26500.0, 1.0], [26900.0, 1.0], [28800.0, 1.0], [29100.0, 1.0], [30400.0, 1.0], [31000.0, 3.0], [31700.0, 1.0], [32100.0, 1.0], [32300.0, 1.0], [32400.0, 1.0], [32500.0, 1.0], [33600.0, 1.0], [33000.0, 1.0], [34400.0, 1.0], [36400.0, 1.0], [36800.0, 1.0], [37200.0, 1.0], [38800.0, 1.0], [39800.0, 1.0], [39200.0, 1.0], [42400.0, 1.0], [42200.0, 2.0], [43600.0, 1.0], [44000.0, 1.0], [44200.0, 1.0], [45800.0, 1.0], [46800.0, 1.0], [46600.0, 1.0], [47600.0, 2.0], [48800.0, 1.0], [48200.0, 2.0], [52800.0, 1.0], [51800.0, 1.0], [54200.0, 1.0], [53600.0, 1.0], [54400.0, 1.0], [57200.0, 1.0], [56200.0, 1.0], [56600.0, 1.0], [60200.0, 19.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[2300.0, 1.0], [600.0, 4.0], [700.0, 1.0], [200.0, 2416.0], [3200.0, 1.0], [800.0, 1.0], [3500.0, 1.0], [900.0, 2.0], [1100.0, 1.0], [300.0, 178.0], [1200.0, 1.0], [1300.0, 1.0], [5300.0, 1.0], [5600.0, 2.0], [1500.0, 1.0], [400.0, 185.0], [1600.0, 1.0], [500.0, 7.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5298.0, "series": [{"data": [[0.0, 176.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 104.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5298.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.68544722E12, "maxY": 25.0, "series": [{"data": [[1.68544752E12, 10.0], [1.68544848E12, 5.613821138211383], [1.68544734E12, 5.0], [1.68544818E12, 21.75078864353314], [1.68544788E12, 20.0], [1.68544758E12, 10.03225806451613], [1.68544854E12, 4.700680272108843], [1.68544728E12, 3.44], [1.68544824E12, 19.33444075304541], [1.68544794E12, 20.1140250855188], [1.68544764E12, 14.005181347150259], [1.68544722E12, 1.0], [1.6854483E12, 15.0], [1.685448E12, 23.42911153119091], [1.6854477E12, 15.0], [1.68544836E12, 12.861940298507456], [1.68544746E12, 8.210526315789474], [1.68544806E12, 25.0], [1.68544776E12, 15.05], [1.68544842E12, 10.0], [1.6854474E12, 5.057142857142857], [1.68544812E12, 25.0], [1.68544782E12, 17.52293577981651]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68544854E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 105.49382716049386, "minX": 1.0, "maxY": 28783.230769230773, "series": [{"data": [[2.0, 363.5], [3.0, 4273.6], [4.0, 10834.75], [5.0, 3989.058823529412], [6.0, 7212.666666666667], [7.0, 19267.666666666668], [8.0, 400.5], [9.0, 19320.333333333336], [10.0, 4994.542635658915], [11.0, 260.0], [12.0, 9400.5], [13.0, 9910.11111111111], [14.0, 11461.900000000001], [15.0, 2571.74193548387], [1.0, 2907.666666666667], [16.0, 27005.285714285714], [17.0, 19552.899999999998], [18.0, 421.6666666666667], [19.0, 300.5555555555555], [20.0, 1739.104347826086], [21.0, 314.33823529411757], [22.0, 313.65151515151524], [23.0, 314.8481012658227], [24.0, 330.207317073171], [25.0, 2729.2209106239493]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[18.506956831965724, 2848.635033892263]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 157.0], [3.0, 4943.25], [4.0, 13992.333333333334], [5.0, 3686.2888888888906], [6.0, 8346.2], [7.0, 22758.8], [8.0, 184.0], [9.0, 28419.0], [10.0, 4754.237354085609], [11.0, 107.0], [12.0, 10837.6], [13.0, 10204.117647058823], [14.0, 11553.517241379308], [15.0, 2325.70043103448], [1.0, 3728.0], [16.0, 28783.230769230773], [17.0, 20204.631578947363], [18.0, 146.2], [19.0, 105.5], [20.0, 1506.3460282916262], [21.0, 107.11764705882352], [22.0, 105.86363636363637], [23.0, 105.55696202531647], [24.0, 105.49382716049386], [25.0, 2505.530405405405]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[18.560230133045675, 2625.5828838547386]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 341.0], [3.0, 394.4], [4.0, 365.0], [5.0, 329.0437956204379], [6.0, 327.75], [7.0, 339.5], [8.0, 376.0], [9.0, 369.0], [10.0, 261.4124513618677], [11.0, 256.5], [12.0, 345.8571428571429], [13.0, 281.31250000000006], [14.0, 269.86206896551727], [15.0, 251.57725321888404], [1.0, 395.0], [16.0, 337.23076923076917], [17.0, 350.0909090909091], [18.0, 244.0], [19.0, 226.875], [20.0, 231.91721132897612], [21.0, 206.95652173913047], [22.0, 207.86764705882356], [23.0, 209.51315789473685], [24.0, 225.09302325581388], [25.0, 227.9037162162163]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[18.50481283422462, 243.63315508021392]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6.95, "minX": 1.68544722E12, "maxY": 49080.9, "series": [{"data": [[1.68544752E12, 1100.75], [1.68544848E12, 1855.9333333333334], [1.68544734E12, 880.6], [1.68544818E12, 7197.4], [1.68544788E12, 4494.3], [1.68544758E12, 770.1166666666667], [1.68544854E12, 1109.0333333333333], [1.68544728E12, 658.8166666666667], [1.68544824E12, 6801.316666666667], [1.68544794E12, 6620.25], [1.68544764E12, 2433.9166666666665], [1.68544722E12, 36.28333333333333], [1.6854483E12, 5194.35], [1.685448E12, 7966.933333333333], [1.6854477E12, 1714.7], [1.68544836E12, 4040.05], [1.68544746E12, 952.35], [1.68544806E12, 7328.416666666667], [1.68544776E12, 1324.9833333333333], [1.68544842E12, 3395.0], [1.6854474E12, 843.5], [1.68544812E12, 2183.8], [1.68544782E12, 1593.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68544752E12, 1810.8166666666666], [1.68544848E12, 11412.966666666667], [1.68544734E12, 1757.1666666666667], [1.68544818E12, 46205.96666666667], [1.68544788E12, 27345.05], [1.68544758E12, 1640.0833333333333], [1.68544854E12, 7537.016666666666], [1.68544728E12, 957.2666666666667], [1.68544824E12, 43025.416666666664], [1.68544794E12, 41980.35], [1.68544764E12, 9035.366666666667], [1.68544722E12, 6.95], [1.6854483E12, 31570.316666666666], [1.685448E12, 49080.9], [1.6854477E12, 8461.516666666666], [1.68544836E12, 27986.683333333334], [1.68544746E12, 1829.8333333333333], [1.68544806E12, 43640.316666666666], [1.68544776E12, 4268.666666666667], [1.68544842E12, 20457.683333333334], [1.6854474E12, 1658.25], [1.68544812E12, 12916.15], [1.68544782E12, 6570.283333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68544854E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 105.86609686609681, "minX": 1.68544722E12, "maxY": 44498.30769230769, "series": [{"data": [[1.68544752E12, 44498.30769230769], [1.68544848E12, 433.9878048780487], [1.68544734E12, 20309.0], [1.68544818E12, 314.07619047619073], [1.68544788E12, 5485.173708920191], [1.68544758E12, 43560.200000000004], [1.68544854E12, 465.5510204081632], [1.68544728E12, 11301.857142857143], [1.68544824E12, 312.49337748344374], [1.68544794E12, 316.3321917808219], [1.68544764E12, 9842.892307692311], [1.6854483E12, 315.061135371179], [1.685448E12, 318.50282485875726], [1.6854477E12, 12960.303030303028], [1.68544836E12, 344.262569832402], [1.68544746E12, 32174.25], [1.68544806E12, 396.3066202090593], [1.68544776E12, 13800.285714285714], [1.68544842E12, 353.5733333333335], [1.6854474E12, 21570.249999999996], [1.68544812E12, 14400.900000000001], [1.68544782E12, 25821.515151515152]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68544752E12, 43606.33333333333], [1.68544848E12, 137.90243902439022], [1.68544734E12, 19941.499999999996], [1.68544818E12, 106.4119496855346], [1.68544788E12, 5638.523076923076], [1.68544758E12, 43169.700000000004], [1.68544854E12, 147.67346938775506], [1.68544728E12, 10920.285714285714], [1.68544824E12, 106.04666666666662], [1.68544794E12, 108.0034246575343], [1.68544764E12, 9965.000000000002], [1.6854483E12, 106.41739130434783], [1.685448E12, 105.86609686609681], [1.6854477E12, 14263.379310344826], [1.68544836E12, 114.30898876404495], [1.68544746E12, 29170.090909090908], [1.68544806E12, 167.108910891089], [1.68544776E12, 5435.793103448276], [1.68544842E12, 115.84666666666666], [1.6854474E12, 21324.81818181818], [1.68544812E12, 17203.65853658536], [1.68544782E12, 26835.75]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68544752E12, 385.80000000000007], [1.68544848E12, 301.06097560975604], [1.68544734E12, 368.0], [1.68544818E12, 208.39622641509436], [1.68544788E12, 312.02072538860085], [1.68544758E12, 406.7272727272728], [1.68544854E12, 332.22448979591826], [1.68544728E12, 375.8181818181818], [1.68544824E12, 208.18604651162784], [1.68544794E12, 208.38907849829363], [1.68544764E12, 301.1363636363636], [1.68544722E12, 448.0], [1.6854483E12, 208.70742358078604], [1.685448E12, 212.49858356940496], [1.6854477E12, 437.1896551724138], [1.68544836E12, 232.72625698324018], [1.68544746E12, 372.1333333333333], [1.68544806E12, 225.92833876221488], [1.68544776E12, 350.1666666666667], [1.68544842E12, 237.57999999999998], [1.6854474E12, 374.33333333333337], [1.68544812E12, 286.93749999999994], [1.68544782E12, 368.17500000000007]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68544854E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 105.80911680911684, "minX": 1.68544722E12, "maxY": 44497.769230769234, "series": [{"data": [[1.68544752E12, 44497.769230769234], [1.68544848E12, 433.9756097560976], [1.68544734E12, 20308.666666666668], [1.68544818E12, 314.00952380952424], [1.68544788E12, 5485.0281690140855], [1.68544758E12, 43559.299999999996], [1.68544854E12, 465.46938775510193], [1.68544728E12, 11299.57142857143], [1.68544824E12, 312.4569536423841], [1.68544794E12, 316.2397260273971], [1.68544764E12, 9841.938461538462], [1.6854483E12, 314.9956331877728], [1.685448E12, 318.40395480225976], [1.6854477E12, 12959.742424242428], [1.68544836E12, 344.217877094972], [1.68544746E12, 32173.75], [1.68544806E12, 394.2613240418118], [1.68544776E12, 13799.047619047618], [1.68544842E12, 353.46000000000026], [1.6854474E12, 21569.666666666668], [1.68544812E12, 14400.019999999991], [1.68544782E12, 25821.212121212124]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68544752E12, 43606.200000000004], [1.68544848E12, 137.87804878048786], [1.68544734E12, 19941.333333333332], [1.68544818E12, 106.37735849056607], [1.68544788E12, 5638.471794871795], [1.68544758E12, 43168.8], [1.68544854E12, 147.67346938775506], [1.68544728E12, 10920.142857142857], [1.68544824E12, 106.02666666666666], [1.68544794E12, 107.95205479452058], [1.68544764E12, 9964.661290322585], [1.6854483E12, 106.37826086956524], [1.685448E12, 105.80911680911684], [1.6854477E12, 14263.258620689658], [1.68544836E12, 114.26966292134827], [1.68544746E12, 29169.81818181818], [1.68544806E12, 166.99669966996703], [1.68544776E12, 5435.620689655172], [1.68544842E12, 115.8066666666666], [1.6854474E12, 21324.727272727272], [1.68544812E12, 17203.609756097558], [1.68544782E12, 26835.666666666668]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68544752E12, 385.66666666666663], [1.68544848E12, 301.06097560975604], [1.68544734E12, 367.75000000000006], [1.68544818E12, 208.3647798742137], [1.68544788E12, 311.9844559585493], [1.68544758E12, 406.45454545454544], [1.68544854E12, 332.1428571428572], [1.68544728E12, 375.27272727272725], [1.68544824E12, 208.16943521594686], [1.68544794E12, 208.34470989761087], [1.68544764E12, 300.5606060606062], [1.68544722E12, 438.0], [1.6854483E12, 208.68558951965062], [1.685448E12, 212.45892351274793], [1.6854477E12, 436.68965517241367], [1.68544836E12, 232.709497206704], [1.68544746E12, 371.93333333333334], [1.68544806E12, 224.0846905537461], [1.68544776E12, 349.3333333333334], [1.68544842E12, 237.51333333333332], [1.6854474E12, 373.75], [1.68544812E12, 286.0499999999999], [1.68544782E12, 367.75000000000006]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68544854E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68544722E12, "maxY": 215.0, "series": [{"data": [[1.68544752E12, 181.53846153846152], [1.68544848E12, 145.6219512195121], [1.68544734E12, 174.66666666666663], [1.68544818E12, 103.51428571428575], [1.68544788E12, 114.8028169014085], [1.68544758E12, 197.5], [1.68544854E12, 161.22448979591837], [1.68544728E12, 193.28571428571428], [1.68544824E12, 103.42384105960257], [1.68544794E12, 103.32191780821918], [1.68544764E12, 149.66153846153844], [1.6854483E12, 103.44978165938862], [1.685448E12, 103.3700564971752], [1.6854477E12, 147.1515151515151], [1.68544836E12, 115.82122905027933], [1.68544746E12, 178.33333333333334], [1.68544806E12, 105.01742160278744], [1.68544776E12, 131.52380952380955], [1.68544842E12, 116.60666666666671], [1.6854474E12, 185.66666666666666], [1.68544812E12, 123.49999999999999], [1.68544782E12, 184.09090909090912]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68544752E12, 0.0], [1.68544848E12, 0.0], [1.68544734E12, 0.0], [1.68544818E12, 0.0], [1.68544788E12, 0.0], [1.68544758E12, 0.0], [1.68544854E12, 0.0], [1.68544728E12, 0.0], [1.68544824E12, 0.0], [1.68544794E12, 0.0], [1.68544764E12, 0.0], [1.6854483E12, 0.0], [1.685448E12, 0.0], [1.6854477E12, 0.0], [1.68544836E12, 0.0], [1.68544746E12, 0.0], [1.68544806E12, 0.0], [1.68544776E12, 0.0], [1.68544842E12, 0.0], [1.6854474E12, 0.0], [1.68544812E12, 0.0], [1.68544782E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68544752E12, 190.99999999999997], [1.68544848E12, 145.62195121951217], [1.68544734E12, 167.16666666666669], [1.68544818E12, 103.51257861635222], [1.68544788E12, 110.32642487046643], [1.68544758E12, 185.63636363636365], [1.68544854E12, 161.22448979591834], [1.68544728E12, 192.0909090909091], [1.68544824E12, 103.42192691029902], [1.68544794E12, 103.31740614334467], [1.68544764E12, 137.39393939393946], [1.68544722E12, 215.0], [1.6854483E12, 103.44978165938865], [1.685448E12, 103.37393767705385], [1.6854477E12, 152.7241379310345], [1.68544836E12, 115.82122905027931], [1.68544746E12, 188.73333333333335], [1.68544806E12, 105.24429967426711], [1.68544776E12, 145.33333333333331], [1.68544842E12, 116.60666666666664], [1.6854474E12, 176.83333333333334], [1.68544812E12, 127.25000000000001], [1.68544782E12, 177.72499999999994]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68544854E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 206.0, "minX": 1.68544722E12, "maxY": 57221.0, "series": [{"data": [[1.68544752E12, 52998.0], [1.68544734E12, 23606.0], [1.68544788E12, 47145.0], [1.68544758E12, 50544.0], [1.68544728E12, 14429.0], [1.68544764E12, 57221.0], [1.68544722E12, 448.0], [1.6854477E12, 615.0], [1.68544746E12, 36437.0], [1.68544806E12, 16924.0], [1.68544776E12, 32561.0], [1.6854474E12, 25201.0], [1.68544812E12, 26944.0], [1.68544782E12, 40910.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68544752E12, 49732.4], [1.68544734E12, 23426.5], [1.68544788E12, 47145.0], [1.68544758E12, 48526.4], [1.68544728E12, 14150.0], [1.68544764E12, 53605.0], [1.68544722E12, 448.0], [1.6854477E12, 498.10000000000014], [1.68544746E12, 36225.4], [1.68544806E12, 4666.399999999989], [1.68544776E12, 28314.200000000004], [1.6854474E12, 24760.2], [1.68544812E12, 14266.0], [1.68544782E12, 34133.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68544752E12, 52998.0], [1.68544734E12, 23606.0], [1.68544788E12, 47145.0], [1.68544758E12, 50544.0], [1.68544728E12, 14429.0], [1.68544764E12, 57221.0], [1.68544722E12, 448.0], [1.6854477E12, 615.0], [1.68544746E12, 36437.0], [1.68544806E12, 16924.0], [1.68544776E12, 32561.0], [1.6854474E12, 25201.0], [1.68544812E12, 26944.0], [1.68544782E12, 40910.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68544752E12, 51347.45], [1.68544734E12, 23604.25], [1.68544788E12, 47145.0], [1.68544758E12, 50375.799999999996], [1.68544728E12, 14429.0], [1.68544764E12, 54266.0], [1.68544722E12, 448.0], [1.6854477E12, 615.0], [1.68544746E12, 36389.4], [1.68544806E12, 16924.0], [1.68544776E12, 32511.3], [1.6854474E12, 25174.6], [1.68544812E12, 26944.0], [1.68544782E12, 37661.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68544752E12, 308.0], [1.68544734E12, 286.0], [1.68544788E12, 216.0], [1.68544758E12, 304.0], [1.68544728E12, 309.0], [1.68544764E12, 206.0], [1.68544722E12, 448.0], [1.6854477E12, 225.0], [1.68544746E12, 255.0], [1.68544806E12, 213.0], [1.68544776E12, 242.0], [1.6854474E12, 303.0], [1.68544812E12, 241.0], [1.68544782E12, 225.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68544752E12, 16389.0], [1.68544734E12, 4495.5], [1.68544788E12, 369.5], [1.68544758E12, 500.0], [1.68544728E12, 405.0], [1.68544764E12, 407.0], [1.68544722E12, 448.0], [1.6854477E12, 335.5], [1.68544746E12, 407.5], [1.68544806E12, 272.0], [1.68544776E12, 408.0], [1.6854474E12, 408.0], [1.68544812E12, 408.0], [1.68544782E12, 409.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68544812E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 116.0, "minX": 1.0, "maxY": 36139.0, "series": [{"data": [[2.0, 411.0], [8.0, 315.0], [9.0, 251.5], [10.0, 233.0], [3.0, 407.0], [12.0, 236.0], [14.0, 213.0], [15.0, 36139.0], [1.0, 408.0], [4.0, 408.0], [5.0, 316.0], [20.0, 429.5], [6.0, 408.0], [7.0, 783.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 205.0], [8.0, 157.0], [32.0, 2204.5], [9.0, 136.5], [10.0, 193.0], [11.0, 205.0], [3.0, 200.0], [12.0, 205.0], [13.0, 137.0], [14.0, 204.0], [15.0, 116.0], [1.0, 207.0], [4.0, 206.0], [16.0, 200.0], [17.0, 205.0], [18.0, 205.0], [19.0, 206.0], [5.0, 205.0], [20.0, 207.0], [21.0, 205.0], [22.0, 212.0], [6.0, 204.0], [7.0, 205.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 115.5, "minX": 1.0, "maxY": 36138.5, "series": [{"data": [[2.0, 411.0], [8.0, 302.0], [9.0, 250.5], [10.0, 223.0], [3.0, 407.0], [12.0, 234.0], [14.0, 212.0], [15.0, 36138.5], [1.0, 408.0], [4.0, 408.0], [5.0, 314.0], [20.0, 429.5], [6.0, 407.0], [7.0, 783.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 205.0], [8.0, 157.0], [32.0, 2204.5], [9.0, 136.0], [10.0, 193.0], [11.0, 205.0], [3.0, 200.0], [12.0, 204.0], [13.0, 137.0], [14.0, 204.0], [15.0, 115.5], [1.0, 207.0], [4.0, 205.0], [16.0, 200.0], [17.0, 205.0], [18.0, 205.0], [19.0, 206.0], [5.0, 205.0], [20.0, 206.5], [21.0, 205.0], [22.0, 212.0], [6.0, 204.0], [7.0, 205.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68544722E12, "maxY": 11.733333333333333, "series": [{"data": [[1.68544752E12, 0.48333333333333334], [1.68544848E12, 2.7333333333333334], [1.68544734E12, 0.4], [1.68544818E12, 10.566666666666666], [1.68544788E12, 6.166666666666667], [1.68544758E12, 0.38333333333333336], [1.68544854E12, 1.6333333333333333], [1.68544728E12, 0.36666666666666664], [1.68544824E12, 10.0], [1.68544794E12, 9.8], [1.68544764E12, 2.1166666666666667], [1.68544722E12, 0.03333333333333333], [1.6854483E12, 7.7], [1.685448E12, 11.733333333333333], [1.6854477E12, 1.7833333333333334], [1.68544836E12, 5.916666666666667], [1.68544746E12, 0.5], [1.68544806E12, 10.383333333333333], [1.68544776E12, 1.2333333333333334], [1.68544842E12, 4.983333333333333], [1.6854474E12, 0.4], [1.68544812E12, 2.45], [1.68544782E12, 1.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68544854E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68544722E12, "maxY": 11.733333333333333, "series": [{"data": [[1.68544752E12, 0.5], [1.68544734E12, 0.4], [1.68544788E12, 0.06666666666666667], [1.68544758E12, 0.35], [1.68544728E12, 0.3], [1.68544764E12, 0.65], [1.68544722E12, 0.016666666666666666], [1.6854477E12, 0.26666666666666666], [1.68544746E12, 0.43333333333333335], [1.68544806E12, 0.2833333333333333], [1.68544776E12, 0.43333333333333335], [1.6854474E12, 0.38333333333333336], [1.68544812E12, 0.23333333333333334], [1.68544782E12, 0.48333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68544812E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68544848E12, 2.7333333333333334], [1.68544818E12, 10.6], [1.68544788E12, 6.216666666666667], [1.68544854E12, 1.6333333333333333], [1.68544824E12, 10.016666666666667], [1.68544794E12, 9.75], [1.68544764E12, 1.4666666666666666], [1.6854483E12, 7.65], [1.685448E12, 11.733333333333333], [1.6854477E12, 1.5], [1.68544836E12, 5.95], [1.68544806E12, 9.883333333333333], [1.68544776E12, 0.55], [1.68544842E12, 5.0], [1.68544812E12, 2.2], [1.68544782E12, 0.6333333333333333]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.6854477E12, 0.16666666666666666], [1.68544788E12, 0.18333333333333332], [1.68544764E12, 0.016666666666666666], [1.68544812E12, 0.25], [1.68544782E12, 0.15]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68544854E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68544722E12, "maxY": 5.9, "series": [{"data": [[1.68544752E12, 0.25], [1.68544734E12, 0.2], [1.68544788E12, 0.05], [1.68544758E12, 0.18333333333333332], [1.68544728E12, 0.18333333333333332], [1.68544764E12, 0.4166666666666667], [1.68544722E12, 0.016666666666666666], [1.6854477E12, 0.26666666666666666], [1.68544746E12, 0.25], [1.68544806E12, 0.26666666666666666], [1.68544776E12, 0.26666666666666666], [1.6854474E12, 0.2], [1.68544812E12, 0.21666666666666667], [1.68544782E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68544848E12, 1.3666666666666667], [1.68544818E12, 5.3], [1.68544788E12, 3.1666666666666665], [1.68544854E12, 0.8166666666666667], [1.68544824E12, 5.016666666666667], [1.68544794E12, 4.883333333333334], [1.68544764E12, 0.6833333333333333], [1.6854483E12, 3.816666666666667], [1.685448E12, 5.883333333333334], [1.6854477E12, 0.7], [1.68544836E12, 2.9833333333333334], [1.68544806E12, 4.85], [1.68544776E12, 0.23333333333333334], [1.68544842E12, 2.5], [1.68544812E12, 1.1166666666666667], [1.68544782E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68544848E12, 1.3666666666666667], [1.68544818E12, 5.3], [1.68544788E12, 3.2333333333333334], [1.68544854E12, 0.8166666666666667], [1.68544824E12, 5.0], [1.68544794E12, 4.866666666666666], [1.68544764E12, 0.8], [1.6854483E12, 3.8333333333333335], [1.685448E12, 5.85], [1.6854477E12, 0.9666666666666667], [1.68544836E12, 2.966666666666667], [1.68544806E12, 5.033333333333333], [1.68544776E12, 0.31666666666666665], [1.68544842E12, 2.5], [1.68544812E12, 1.35], [1.68544782E12, 0.45]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68544752E12, 0.21666666666666667], [1.68544734E12, 0.2], [1.68544746E12, 0.2], [1.68544758E12, 0.16666666666666666], [1.68544728E12, 0.11666666666666667], [1.68544776E12, 0.1], [1.6854474E12, 0.2], [1.68544764E12, 0.18333333333333332], [1.68544782E12, 0.11666666666666667]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68544848E12, 1.3666666666666667], [1.68544818E12, 5.25], [1.68544788E12, 3.55], [1.68544854E12, 0.8166666666666667], [1.68544824E12, 5.033333333333333], [1.68544794E12, 4.866666666666666], [1.68544764E12, 0.9], [1.6854483E12, 3.816666666666667], [1.685448E12, 5.9], [1.6854477E12, 1.1], [1.68544836E12, 2.9833333333333334], [1.68544806E12, 4.783333333333333], [1.68544776E12, 0.25], [1.68544842E12, 2.5], [1.68544812E12, 1.6666666666666667], [1.68544782E12, 0.43333333333333335]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68544752E12, 0.25], [1.68544734E12, 0.2], [1.68544788E12, 0.016666666666666666], [1.68544746E12, 0.18333333333333332], [1.68544758E12, 0.16666666666666666], [1.68544806E12, 0.016666666666666666], [1.68544728E12, 0.11666666666666667], [1.68544776E12, 0.16666666666666666], [1.6854474E12, 0.18333333333333332], [1.68544764E12, 0.23333333333333334], [1.68544812E12, 0.016666666666666666], [1.68544782E12, 0.15]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68544854E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68544722E12, "maxY": 17.633333333333333, "series": [{"data": [[1.68544752E12, 0.7166666666666667], [1.68544734E12, 0.6], [1.68544788E12, 0.06666666666666667], [1.68544758E12, 0.5166666666666667], [1.68544728E12, 0.4166666666666667], [1.68544764E12, 0.8333333333333334], [1.68544722E12, 0.016666666666666666], [1.6854477E12, 0.26666666666666666], [1.68544746E12, 0.6333333333333333], [1.68544806E12, 0.2833333333333333], [1.68544776E12, 0.5333333333333333], [1.6854474E12, 0.5833333333333334], [1.68544812E12, 0.23333333333333334], [1.68544782E12, 0.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68544848E12, 4.1], [1.68544818E12, 15.85], [1.68544788E12, 9.95], [1.68544854E12, 2.45], [1.68544824E12, 15.05], [1.68544794E12, 14.616666666666667], [1.68544764E12, 2.3833333333333333], [1.6854483E12, 11.466666666666667], [1.685448E12, 17.633333333333333], [1.6854477E12, 2.7666666666666666], [1.68544836E12, 8.933333333333334], [1.68544806E12, 14.666666666666666], [1.68544776E12, 0.8], [1.68544842E12, 7.5], [1.68544812E12, 4.133333333333334], [1.68544782E12, 1.2166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68544854E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

