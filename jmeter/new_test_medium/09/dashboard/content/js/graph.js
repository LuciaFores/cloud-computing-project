/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 102.0, "minX": 0.0, "maxY": 60827.0, "series": [{"data": [[0.0, 204.0], [0.1, 205.0], [0.2, 206.0], [0.3, 207.0], [0.4, 207.0], [0.5, 208.0], [0.6, 208.0], [0.7, 209.0], [0.8, 211.0], [0.9, 308.0], [1.0, 308.0], [1.1, 308.0], [1.2, 308.0], [1.3, 308.0], [1.4, 308.0], [1.5, 308.0], [1.6, 308.0], [1.7, 308.0], [1.8, 309.0], [1.9, 309.0], [2.0, 309.0], [2.1, 309.0], [2.2, 309.0], [2.3, 309.0], [2.4, 309.0], [2.5, 309.0], [2.6, 309.0], [2.7, 309.0], [2.8, 309.0], [2.9, 309.0], [3.0, 309.0], [3.1, 309.0], [3.2, 309.0], [3.3, 309.0], [3.4, 309.0], [3.5, 309.0], [3.6, 309.0], [3.7, 309.0], [3.8, 309.0], [3.9, 309.0], [4.0, 310.0], [4.1, 310.0], [4.2, 310.0], [4.3, 310.0], [4.4, 310.0], [4.5, 310.0], [4.6, 310.0], [4.7, 310.0], [4.8, 310.0], [4.9, 310.0], [5.0, 310.0], [5.1, 310.0], [5.2, 310.0], [5.3, 310.0], [5.4, 310.0], [5.5, 310.0], [5.6, 310.0], [5.7, 310.0], [5.8, 310.0], [5.9, 310.0], [6.0, 310.0], [6.1, 310.0], [6.2, 310.0], [6.3, 310.0], [6.4, 310.0], [6.5, 310.0], [6.6, 310.0], [6.7, 310.0], [6.8, 310.0], [6.9, 310.0], [7.0, 310.0], [7.1, 310.0], [7.2, 310.0], [7.3, 310.0], [7.4, 310.0], [7.5, 310.0], [7.6, 310.0], [7.7, 310.0], [7.8, 310.0], [7.9, 310.0], [8.0, 310.0], [8.1, 310.0], [8.2, 310.0], [8.3, 311.0], [8.4, 311.0], [8.5, 311.0], [8.6, 311.0], [8.7, 311.0], [8.8, 311.0], [8.9, 311.0], [9.0, 311.0], [9.1, 311.0], [9.2, 311.0], [9.3, 311.0], [9.4, 311.0], [9.5, 311.0], [9.6, 311.0], [9.7, 311.0], [9.8, 311.0], [9.9, 311.0], [10.0, 311.0], [10.1, 311.0], [10.2, 311.0], [10.3, 311.0], [10.4, 311.0], [10.5, 311.0], [10.6, 311.0], [10.7, 311.0], [10.8, 311.0], [10.9, 311.0], [11.0, 311.0], [11.1, 311.0], [11.2, 311.0], [11.3, 311.0], [11.4, 311.0], [11.5, 311.0], [11.6, 311.0], [11.7, 311.0], [11.8, 311.0], [11.9, 311.0], [12.0, 311.0], [12.1, 311.0], [12.2, 311.0], [12.3, 311.0], [12.4, 311.0], [12.5, 311.0], [12.6, 311.0], [12.7, 311.0], [12.8, 311.0], [12.9, 311.0], [13.0, 311.0], [13.1, 311.0], [13.2, 311.0], [13.3, 311.0], [13.4, 311.0], [13.5, 311.0], [13.6, 311.0], [13.7, 311.0], [13.8, 311.0], [13.9, 311.0], [14.0, 311.0], [14.1, 311.0], [14.2, 311.0], [14.3, 311.0], [14.4, 311.0], [14.5, 311.0], [14.6, 311.0], [14.7, 311.0], [14.8, 311.0], [14.9, 311.0], [15.0, 311.0], [15.1, 312.0], [15.2, 312.0], [15.3, 312.0], [15.4, 312.0], [15.5, 312.0], [15.6, 312.0], [15.7, 312.0], [15.8, 312.0], [15.9, 312.0], [16.0, 312.0], [16.1, 312.0], [16.2, 312.0], [16.3, 312.0], [16.4, 312.0], [16.5, 312.0], [16.6, 312.0], [16.7, 312.0], [16.8, 312.0], [16.9, 312.0], [17.0, 312.0], [17.1, 312.0], [17.2, 312.0], [17.3, 312.0], [17.4, 312.0], [17.5, 312.0], [17.6, 312.0], [17.7, 312.0], [17.8, 312.0], [17.9, 312.0], [18.0, 312.0], [18.1, 312.0], [18.2, 312.0], [18.3, 312.0], [18.4, 312.0], [18.5, 312.0], [18.6, 312.0], [18.7, 312.0], [18.8, 312.0], [18.9, 312.0], [19.0, 312.0], [19.1, 312.0], [19.2, 312.0], [19.3, 312.0], [19.4, 312.0], [19.5, 312.0], [19.6, 312.0], [19.7, 312.0], [19.8, 312.0], [19.9, 312.0], [20.0, 312.0], [20.1, 312.0], [20.2, 312.0], [20.3, 312.0], [20.4, 312.0], [20.5, 312.0], [20.6, 312.0], [20.7, 312.0], [20.8, 312.0], [20.9, 312.0], [21.0, 312.0], [21.1, 312.0], [21.2, 312.0], [21.3, 312.0], [21.4, 312.0], [21.5, 312.0], [21.6, 312.0], [21.7, 312.0], [21.8, 312.0], [21.9, 312.0], [22.0, 312.0], [22.1, 312.0], [22.2, 312.0], [22.3, 312.0], [22.4, 312.0], [22.5, 312.0], [22.6, 312.0], [22.7, 312.0], [22.8, 312.0], [22.9, 312.0], [23.0, 312.0], [23.1, 312.0], [23.2, 312.0], [23.3, 312.0], [23.4, 312.0], [23.5, 312.0], [23.6, 312.0], [23.7, 312.0], [23.8, 313.0], [23.9, 313.0], [24.0, 313.0], [24.1, 313.0], [24.2, 313.0], [24.3, 313.0], [24.4, 313.0], [24.5, 313.0], [24.6, 313.0], [24.7, 313.0], [24.8, 313.0], [24.9, 313.0], [25.0, 313.0], [25.1, 313.0], [25.2, 313.0], [25.3, 313.0], [25.4, 313.0], [25.5, 313.0], [25.6, 313.0], [25.7, 313.0], [25.8, 313.0], [25.9, 313.0], [26.0, 313.0], [26.1, 313.0], [26.2, 313.0], [26.3, 313.0], [26.4, 313.0], [26.5, 313.0], [26.6, 313.0], [26.7, 313.0], [26.8, 313.0], [26.9, 313.0], [27.0, 313.0], [27.1, 313.0], [27.2, 313.0], [27.3, 313.0], [27.4, 313.0], [27.5, 313.0], [27.6, 313.0], [27.7, 313.0], [27.8, 313.0], [27.9, 313.0], [28.0, 313.0], [28.1, 313.0], [28.2, 313.0], [28.3, 313.0], [28.4, 313.0], [28.5, 313.0], [28.6, 313.0], [28.7, 313.0], [28.8, 313.0], [28.9, 313.0], [29.0, 313.0], [29.1, 313.0], [29.2, 313.0], [29.3, 313.0], [29.4, 313.0], [29.5, 313.0], [29.6, 313.0], [29.7, 313.0], [29.8, 313.0], [29.9, 313.0], [30.0, 313.0], [30.1, 313.0], [30.2, 313.0], [30.3, 313.0], [30.4, 313.0], [30.5, 313.0], [30.6, 313.0], [30.7, 313.0], [30.8, 313.0], [30.9, 313.0], [31.0, 313.0], [31.1, 313.0], [31.2, 313.0], [31.3, 313.0], [31.4, 313.0], [31.5, 313.0], [31.6, 313.0], [31.7, 313.0], [31.8, 313.0], [31.9, 313.0], [32.0, 313.0], [32.1, 313.0], [32.2, 313.0], [32.3, 313.0], [32.4, 313.0], [32.5, 313.0], [32.6, 313.0], [32.7, 313.0], [32.8, 313.0], [32.9, 313.0], [33.0, 313.0], [33.1, 313.0], [33.2, 313.0], [33.3, 313.0], [33.4, 313.0], [33.5, 313.0], [33.6, 313.0], [33.7, 314.0], [33.8, 314.0], [33.9, 314.0], [34.0, 314.0], [34.1, 314.0], [34.2, 314.0], [34.3, 314.0], [34.4, 314.0], [34.5, 314.0], [34.6, 314.0], [34.7, 314.0], [34.8, 314.0], [34.9, 314.0], [35.0, 314.0], [35.1, 314.0], [35.2, 314.0], [35.3, 314.0], [35.4, 314.0], [35.5, 314.0], [35.6, 314.0], [35.7, 314.0], [35.8, 314.0], [35.9, 314.0], [36.0, 314.0], [36.1, 314.0], [36.2, 314.0], [36.3, 314.0], [36.4, 314.0], [36.5, 314.0], [36.6, 314.0], [36.7, 314.0], [36.8, 314.0], [36.9, 314.0], [37.0, 314.0], [37.1, 314.0], [37.2, 314.0], [37.3, 314.0], [37.4, 314.0], [37.5, 314.0], [37.6, 314.0], [37.7, 314.0], [37.8, 314.0], [37.9, 314.0], [38.0, 314.0], [38.1, 314.0], [38.2, 314.0], [38.3, 314.0], [38.4, 314.0], [38.5, 314.0], [38.6, 314.0], [38.7, 314.0], [38.8, 314.0], [38.9, 314.0], [39.0, 314.0], [39.1, 314.0], [39.2, 314.0], [39.3, 314.0], [39.4, 314.0], [39.5, 314.0], [39.6, 314.0], [39.7, 314.0], [39.8, 314.0], [39.9, 314.0], [40.0, 314.0], [40.1, 314.0], [40.2, 314.0], [40.3, 314.0], [40.4, 314.0], [40.5, 314.0], [40.6, 314.0], [40.7, 314.0], [40.8, 314.0], [40.9, 314.0], [41.0, 314.0], [41.1, 314.0], [41.2, 314.0], [41.3, 314.0], [41.4, 314.0], [41.5, 314.0], [41.6, 314.0], [41.7, 314.0], [41.8, 314.0], [41.9, 314.0], [42.0, 314.0], [42.1, 314.0], [42.2, 314.0], [42.3, 314.0], [42.4, 314.0], [42.5, 314.0], [42.6, 314.0], [42.7, 314.0], [42.8, 314.0], [42.9, 314.0], [43.0, 314.0], [43.1, 314.0], [43.2, 314.0], [43.3, 315.0], [43.4, 315.0], [43.5, 315.0], [43.6, 315.0], [43.7, 315.0], [43.8, 315.0], [43.9, 315.0], [44.0, 315.0], [44.1, 315.0], [44.2, 315.0], [44.3, 315.0], [44.4, 315.0], [44.5, 315.0], [44.6, 315.0], [44.7, 315.0], [44.8, 315.0], [44.9, 315.0], [45.0, 315.0], [45.1, 315.0], [45.2, 315.0], [45.3, 315.0], [45.4, 315.0], [45.5, 315.0], [45.6, 315.0], [45.7, 315.0], [45.8, 315.0], [45.9, 315.0], [46.0, 315.0], [46.1, 315.0], [46.2, 315.0], [46.3, 315.0], [46.4, 315.0], [46.5, 315.0], [46.6, 315.0], [46.7, 315.0], [46.8, 315.0], [46.9, 315.0], [47.0, 315.0], [47.1, 315.0], [47.2, 315.0], [47.3, 315.0], [47.4, 315.0], [47.5, 315.0], [47.6, 315.0], [47.7, 315.0], [47.8, 315.0], [47.9, 315.0], [48.0, 315.0], [48.1, 315.0], [48.2, 315.0], [48.3, 315.0], [48.4, 315.0], [48.5, 315.0], [48.6, 315.0], [48.7, 315.0], [48.8, 315.0], [48.9, 315.0], [49.0, 315.0], [49.1, 315.0], [49.2, 315.0], [49.3, 315.0], [49.4, 315.0], [49.5, 315.0], [49.6, 315.0], [49.7, 315.0], [49.8, 315.0], [49.9, 315.0], [50.0, 315.0], [50.1, 315.0], [50.2, 315.0], [50.3, 315.0], [50.4, 315.0], [50.5, 315.0], [50.6, 315.0], [50.7, 315.0], [50.8, 315.0], [50.9, 316.0], [51.0, 316.0], [51.1, 316.0], [51.2, 316.0], [51.3, 316.0], [51.4, 316.0], [51.5, 316.0], [51.6, 316.0], [51.7, 316.0], [51.8, 316.0], [51.9, 316.0], [52.0, 316.0], [52.1, 316.0], [52.2, 316.0], [52.3, 316.0], [52.4, 316.0], [52.5, 316.0], [52.6, 316.0], [52.7, 316.0], [52.8, 316.0], [52.9, 316.0], [53.0, 316.0], [53.1, 316.0], [53.2, 316.0], [53.3, 316.0], [53.4, 316.0], [53.5, 316.0], [53.6, 316.0], [53.7, 316.0], [53.8, 316.0], [53.9, 316.0], [54.0, 316.0], [54.1, 316.0], [54.2, 316.0], [54.3, 316.0], [54.4, 316.0], [54.5, 316.0], [54.6, 316.0], [54.7, 316.0], [54.8, 316.0], [54.9, 316.0], [55.0, 316.0], [55.1, 316.0], [55.2, 316.0], [55.3, 316.0], [55.4, 316.0], [55.5, 316.0], [55.6, 316.0], [55.7, 316.0], [55.8, 316.0], [55.9, 316.0], [56.0, 316.0], [56.1, 316.0], [56.2, 316.0], [56.3, 316.0], [56.4, 316.0], [56.5, 316.0], [56.6, 316.0], [56.7, 317.0], [56.8, 317.0], [56.9, 317.0], [57.0, 317.0], [57.1, 317.0], [57.2, 317.0], [57.3, 317.0], [57.4, 317.0], [57.5, 317.0], [57.6, 317.0], [57.7, 317.0], [57.8, 317.0], [57.9, 317.0], [58.0, 317.0], [58.1, 317.0], [58.2, 317.0], [58.3, 317.0], [58.4, 317.0], [58.5, 317.0], [58.6, 317.0], [58.7, 317.0], [58.8, 317.0], [58.9, 317.0], [59.0, 317.0], [59.1, 317.0], [59.2, 317.0], [59.3, 317.0], [59.4, 317.0], [59.5, 317.0], [59.6, 317.0], [59.7, 317.0], [59.8, 317.0], [59.9, 317.0], [60.0, 317.0], [60.1, 317.0], [60.2, 317.0], [60.3, 317.0], [60.4, 317.0], [60.5, 317.0], [60.6, 318.0], [60.7, 318.0], [60.8, 318.0], [60.9, 318.0], [61.0, 318.0], [61.1, 318.0], [61.2, 318.0], [61.3, 318.0], [61.4, 318.0], [61.5, 318.0], [61.6, 318.0], [61.7, 318.0], [61.8, 318.0], [61.9, 318.0], [62.0, 318.0], [62.1, 318.0], [62.2, 318.0], [62.3, 318.0], [62.4, 318.0], [62.5, 318.0], [62.6, 318.0], [62.7, 318.0], [62.8, 318.0], [62.9, 318.0], [63.0, 318.0], [63.1, 318.0], [63.2, 318.0], [63.3, 318.0], [63.4, 319.0], [63.5, 319.0], [63.6, 319.0], [63.7, 319.0], [63.8, 319.0], [63.9, 319.0], [64.0, 319.0], [64.1, 319.0], [64.2, 319.0], [64.3, 319.0], [64.4, 319.0], [64.5, 319.0], [64.6, 319.0], [64.7, 319.0], [64.8, 319.0], [64.9, 319.0], [65.0, 319.0], [65.1, 319.0], [65.2, 319.0], [65.3, 320.0], [65.4, 320.0], [65.5, 320.0], [65.6, 320.0], [65.7, 320.0], [65.8, 320.0], [65.9, 320.0], [66.0, 320.0], [66.1, 321.0], [66.2, 321.0], [66.3, 321.0], [66.4, 321.0], [66.5, 321.0], [66.6, 321.0], [66.7, 321.0], [66.8, 321.0], [66.9, 321.0], [67.0, 322.0], [67.1, 322.0], [67.2, 322.0], [67.3, 323.0], [67.4, 323.0], [67.5, 323.0], [67.6, 323.0], [67.7, 323.0], [67.8, 323.0], [67.9, 324.0], [68.0, 324.0], [68.1, 324.0], [68.2, 325.0], [68.3, 325.0], [68.4, 325.0], [68.5, 326.0], [68.6, 326.0], [68.7, 326.0], [68.8, 327.0], [68.9, 327.0], [69.0, 328.0], [69.1, 329.0], [69.2, 329.0], [69.3, 330.0], [69.4, 330.0], [69.5, 332.0], [69.6, 332.0], [69.7, 332.0], [69.8, 334.0], [69.9, 335.0], [70.0, 336.0], [70.1, 337.0], [70.2, 337.0], [70.3, 338.0], [70.4, 339.0], [70.5, 339.0], [70.6, 340.0], [70.7, 340.0], [70.8, 341.0], [70.9, 346.0], [71.0, 348.0], [71.1, 349.0], [71.2, 351.0], [71.3, 351.0], [71.4, 353.0], [71.5, 353.0], [71.6, 354.0], [71.7, 356.0], [71.8, 357.0], [71.9, 359.0], [72.0, 360.0], [72.1, 362.0], [72.2, 363.0], [72.3, 363.0], [72.4, 364.0], [72.5, 364.0], [72.6, 365.0], [72.7, 366.0], [72.8, 368.0], [72.9, 370.0], [73.0, 370.0], [73.1, 370.0], [73.2, 371.0], [73.3, 372.0], [73.4, 375.0], [73.5, 376.0], [73.6, 377.0], [73.7, 378.0], [73.8, 379.0], [73.9, 382.0], [74.0, 383.0], [74.1, 386.0], [74.2, 387.0], [74.3, 388.0], [74.4, 391.0], [74.5, 392.0], [74.6, 396.0], [74.7, 399.0], [74.8, 402.0], [74.9, 403.0], [75.0, 404.0], [75.1, 405.0], [75.2, 408.0], [75.3, 409.0], [75.4, 410.0], [75.5, 411.0], [75.6, 412.0], [75.7, 413.0], [75.8, 413.0], [75.9, 413.0], [76.0, 414.0], [76.1, 414.0], [76.2, 414.0], [76.3, 416.0], [76.4, 417.0], [76.5, 419.0], [76.6, 420.0], [76.7, 423.0], [76.8, 427.0], [76.9, 428.0], [77.0, 428.0], [77.1, 429.0], [77.2, 430.0], [77.3, 432.0], [77.4, 434.0], [77.5, 434.0], [77.6, 436.0], [77.7, 437.0], [77.8, 442.0], [77.9, 444.0], [78.0, 445.0], [78.1, 446.0], [78.2, 450.0], [78.3, 450.0], [78.4, 453.0], [78.5, 454.0], [78.6, 456.0], [78.7, 457.0], [78.8, 457.0], [78.9, 459.0], [79.0, 463.0], [79.1, 463.0], [79.2, 465.0], [79.3, 465.0], [79.4, 466.0], [79.5, 470.0], [79.6, 472.0], [79.7, 473.0], [79.8, 475.0], [79.9, 476.0], [80.0, 476.0], [80.1, 481.0], [80.2, 486.0], [80.3, 491.0], [80.4, 492.0], [80.5, 496.0], [80.6, 500.0], [80.7, 502.0], [80.8, 505.0], [80.9, 507.0], [81.0, 509.0], [81.1, 511.0], [81.2, 511.0], [81.3, 511.0], [81.4, 513.0], [81.5, 513.0], [81.6, 513.0], [81.7, 513.0], [81.8, 513.0], [81.9, 514.0], [82.0, 514.0], [82.1, 515.0], [82.2, 515.0], [82.3, 515.0], [82.4, 515.0], [82.5, 516.0], [82.6, 516.0], [82.7, 516.0], [82.8, 517.0], [82.9, 517.0], [83.0, 518.0], [83.1, 518.0], [83.2, 519.0], [83.3, 521.0], [83.4, 522.0], [83.5, 523.0], [83.6, 525.0], [83.7, 529.0], [83.8, 533.0], [83.9, 534.0], [84.0, 536.0], [84.1, 545.0], [84.2, 546.0], [84.3, 547.0], [84.4, 548.0], [84.5, 550.0], [84.6, 553.0], [84.7, 556.0], [84.8, 562.0], [84.9, 563.0], [85.0, 566.0], [85.1, 567.0], [85.2, 568.0], [85.3, 570.0], [85.4, 570.0], [85.5, 575.0], [85.6, 578.0], [85.7, 584.0], [85.8, 585.0], [85.9, 586.0], [86.0, 593.0], [86.1, 596.0], [86.2, 602.0], [86.3, 606.0], [86.4, 616.0], [86.5, 620.0], [86.6, 622.0], [86.7, 653.0], [86.8, 672.0], [86.9, 680.0], [87.0, 684.0], [87.1, 695.0], [87.2, 719.0], [87.3, 733.0], [87.4, 758.0], [87.5, 815.0], [87.6, 901.0], [87.7, 930.0], [87.8, 984.0], [87.9, 1144.0], [88.0, 1219.0], [88.1, 1469.0], [88.2, 1784.0], [88.3, 2002.0], [88.4, 3429.0], [88.5, 4769.0], [88.6, 5202.0], [88.7, 5584.0], [88.8, 6064.0], [88.9, 6984.0], [89.0, 8460.0], [89.1, 8865.0], [89.2, 9376.0], [89.3, 10101.0], [89.4, 10490.0], [89.5, 11048.0], [89.6, 12086.0], [89.7, 12683.0], [89.8, 13351.0], [89.9, 13405.0], [90.0, 13758.0], [90.1, 14093.0], [90.2, 14423.0], [90.3, 14837.0], [90.4, 15307.0], [90.5, 15454.0], [90.6, 15699.0], [90.7, 16293.0], [90.8, 16512.0], [90.9, 17247.0], [91.0, 17511.0], [91.1, 17799.0], [91.2, 18616.0], [91.3, 19005.0], [91.4, 19584.0], [91.5, 19656.0], [91.6, 20008.0], [91.7, 20268.0], [91.8, 20463.0], [91.9, 20717.0], [92.0, 20952.0], [92.1, 21047.0], [92.2, 21446.0], [92.3, 21770.0], [92.4, 21831.0], [92.5, 22294.0], [92.6, 22638.0], [92.7, 22881.0], [92.8, 23403.0], [92.9, 23647.0], [93.0, 23850.0], [93.1, 23869.0], [93.2, 24253.0], [93.3, 24773.0], [93.4, 24849.0], [93.5, 25094.0], [93.6, 25520.0], [93.7, 25775.0], [93.8, 26140.0], [93.9, 27267.0], [94.0, 27377.0], [94.1, 28345.0], [94.2, 28806.0], [94.3, 28983.0], [94.4, 29270.0], [94.5, 29839.0], [94.6, 30048.0], [94.7, 30191.0], [94.8, 30304.0], [94.9, 30570.0], [95.0, 30896.0], [95.1, 31112.0], [95.2, 31510.0], [95.3, 31758.0], [95.4, 32058.0], [95.5, 32378.0], [95.6, 32763.0], [95.7, 33558.0], [95.8, 33749.0], [95.9, 34008.0], [96.0, 35440.0], [96.1, 36735.0], [96.2, 36982.0], [96.3, 38149.0], [96.4, 39203.0], [96.5, 40612.0], [96.6, 41964.0], [96.7, 43064.0], [96.8, 44279.0], [96.9, 45098.0], [97.0, 45734.0], [97.1, 48552.0], [97.2, 49981.0], [97.3, 50439.0], [97.4, 50652.0], [97.5, 51092.0], [97.6, 52172.0], [97.7, 53192.0], [97.8, 53451.0], [97.9, 56695.0], [98.0, 59332.0], [98.1, 60296.0], [98.2, 60315.0], [98.3, 60315.0], [98.4, 60321.0], [98.5, 60334.0], [98.6, 60338.0], [98.7, 60353.0], [98.8, 60413.0], [98.9, 60415.0], [99.0, 60419.0], [99.1, 60439.0], [99.2, 60456.0], [99.3, 60512.0], [99.4, 60515.0], [99.5, 60535.0], [99.6, 60566.0], [99.7, 60581.0], [99.8, 60616.0], [99.9, 60654.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 102.0], [0.1, 102.0], [0.2, 102.0], [0.3, 102.0], [0.4, 103.0], [0.5, 103.0], [0.6, 103.0], [0.7, 103.0], [0.8, 103.0], [0.9, 103.0], [1.0, 103.0], [1.1, 103.0], [1.2, 103.0], [1.3, 103.0], [1.4, 103.0], [1.5, 103.0], [1.6, 103.0], [1.7, 103.0], [1.8, 103.0], [1.9, 103.0], [2.0, 103.0], [2.1, 103.0], [2.2, 103.0], [2.3, 103.0], [2.4, 103.0], [2.5, 103.0], [2.6, 103.0], [2.7, 103.0], [2.8, 103.0], [2.9, 103.0], [3.0, 103.0], [3.1, 103.0], [3.2, 103.0], [3.3, 103.0], [3.4, 104.0], [3.5, 104.0], [3.6, 104.0], [3.7, 104.0], [3.8, 104.0], [3.9, 104.0], [4.0, 104.0], [4.1, 104.0], [4.2, 104.0], [4.3, 104.0], [4.4, 104.0], [4.5, 104.0], [4.6, 104.0], [4.7, 104.0], [4.8, 104.0], [4.9, 104.0], [5.0, 104.0], [5.1, 104.0], [5.2, 104.0], [5.3, 104.0], [5.4, 104.0], [5.5, 104.0], [5.6, 104.0], [5.7, 104.0], [5.8, 104.0], [5.9, 104.0], [6.0, 104.0], [6.1, 104.0], [6.2, 104.0], [6.3, 104.0], [6.4, 104.0], [6.5, 104.0], [6.6, 104.0], [6.7, 104.0], [6.8, 104.0], [6.9, 104.0], [7.0, 104.0], [7.1, 104.0], [7.2, 104.0], [7.3, 104.0], [7.4, 104.0], [7.5, 104.0], [7.6, 104.0], [7.7, 104.0], [7.8, 104.0], [7.9, 104.0], [8.0, 104.0], [8.1, 104.0], [8.2, 104.0], [8.3, 104.0], [8.4, 104.0], [8.5, 104.0], [8.6, 104.0], [8.7, 104.0], [8.8, 104.0], [8.9, 104.0], [9.0, 104.0], [9.1, 104.0], [9.2, 104.0], [9.3, 104.0], [9.4, 104.0], [9.5, 104.0], [9.6, 104.0], [9.7, 104.0], [9.8, 104.0], [9.9, 104.0], [10.0, 104.0], [10.1, 104.0], [10.2, 104.0], [10.3, 104.0], [10.4, 104.0], [10.5, 104.0], [10.6, 104.0], [10.7, 104.0], [10.8, 104.0], [10.9, 104.0], [11.0, 104.0], [11.1, 104.0], [11.2, 104.0], [11.3, 104.0], [11.4, 104.0], [11.5, 104.0], [11.6, 104.0], [11.7, 104.0], [11.8, 104.0], [11.9, 104.0], [12.0, 104.0], [12.1, 104.0], [12.2, 104.0], [12.3, 104.0], [12.4, 104.0], [12.5, 104.0], [12.6, 104.0], [12.7, 104.0], [12.8, 104.0], [12.9, 104.0], [13.0, 104.0], [13.1, 104.0], [13.2, 104.0], [13.3, 104.0], [13.4, 104.0], [13.5, 104.0], [13.6, 104.0], [13.7, 104.0], [13.8, 104.0], [13.9, 104.0], [14.0, 105.0], [14.1, 105.0], [14.2, 105.0], [14.3, 105.0], [14.4, 105.0], [14.5, 105.0], [14.6, 105.0], [14.7, 105.0], [14.8, 105.0], [14.9, 105.0], [15.0, 105.0], [15.1, 105.0], [15.2, 105.0], [15.3, 105.0], [15.4, 105.0], [15.5, 105.0], [15.6, 105.0], [15.7, 105.0], [15.8, 105.0], [15.9, 105.0], [16.0, 105.0], [16.1, 105.0], [16.2, 105.0], [16.3, 105.0], [16.4, 105.0], [16.5, 105.0], [16.6, 105.0], [16.7, 105.0], [16.8, 105.0], [16.9, 105.0], [17.0, 105.0], [17.1, 105.0], [17.2, 105.0], [17.3, 105.0], [17.4, 105.0], [17.5, 105.0], [17.6, 105.0], [17.7, 105.0], [17.8, 105.0], [17.9, 105.0], [18.0, 105.0], [18.1, 105.0], [18.2, 105.0], [18.3, 105.0], [18.4, 105.0], [18.5, 105.0], [18.6, 105.0], [18.7, 105.0], [18.8, 105.0], [18.9, 105.0], [19.0, 105.0], [19.1, 105.0], [19.2, 105.0], [19.3, 105.0], [19.4, 105.0], [19.5, 105.0], [19.6, 105.0], [19.7, 105.0], [19.8, 105.0], [19.9, 105.0], [20.0, 105.0], [20.1, 105.0], [20.2, 105.0], [20.3, 105.0], [20.4, 105.0], [20.5, 105.0], [20.6, 105.0], [20.7, 105.0], [20.8, 105.0], [20.9, 105.0], [21.0, 105.0], [21.1, 105.0], [21.2, 105.0], [21.3, 105.0], [21.4, 105.0], [21.5, 105.0], [21.6, 105.0], [21.7, 105.0], [21.8, 105.0], [21.9, 105.0], [22.0, 105.0], [22.1, 105.0], [22.2, 105.0], [22.3, 105.0], [22.4, 105.0], [22.5, 105.0], [22.6, 105.0], [22.7, 105.0], [22.8, 105.0], [22.9, 105.0], [23.0, 105.0], [23.1, 105.0], [23.2, 105.0], [23.3, 105.0], [23.4, 105.0], [23.5, 105.0], [23.6, 105.0], [23.7, 105.0], [23.8, 105.0], [23.9, 105.0], [24.0, 105.0], [24.1, 105.0], [24.2, 105.0], [24.3, 105.0], [24.4, 105.0], [24.5, 105.0], [24.6, 105.0], [24.7, 105.0], [24.8, 105.0], [24.9, 105.0], [25.0, 105.0], [25.1, 105.0], [25.2, 105.0], [25.3, 105.0], [25.4, 105.0], [25.5, 105.0], [25.6, 105.0], [25.7, 105.0], [25.8, 105.0], [25.9, 105.0], [26.0, 105.0], [26.1, 105.0], [26.2, 105.0], [26.3, 105.0], [26.4, 105.0], [26.5, 105.0], [26.6, 105.0], [26.7, 105.0], [26.8, 105.0], [26.9, 105.0], [27.0, 105.0], [27.1, 105.0], [27.2, 105.0], [27.3, 105.0], [27.4, 105.0], [27.5, 105.0], [27.6, 105.0], [27.7, 105.0], [27.8, 105.0], [27.9, 105.0], [28.0, 105.0], [28.1, 105.0], [28.2, 105.0], [28.3, 105.0], [28.4, 105.0], [28.5, 105.0], [28.6, 105.0], [28.7, 105.0], [28.8, 105.0], [28.9, 105.0], [29.0, 105.0], [29.1, 105.0], [29.2, 105.0], [29.3, 105.0], [29.4, 105.0], [29.5, 105.0], [29.6, 105.0], [29.7, 105.0], [29.8, 105.0], [29.9, 106.0], [30.0, 106.0], [30.1, 106.0], [30.2, 106.0], [30.3, 106.0], [30.4, 106.0], [30.5, 106.0], [30.6, 106.0], [30.7, 106.0], [30.8, 106.0], [30.9, 106.0], [31.0, 106.0], [31.1, 106.0], [31.2, 106.0], [31.3, 106.0], [31.4, 106.0], [31.5, 106.0], [31.6, 106.0], [31.7, 106.0], [31.8, 106.0], [31.9, 106.0], [32.0, 106.0], [32.1, 106.0], [32.2, 106.0], [32.3, 106.0], [32.4, 106.0], [32.5, 106.0], [32.6, 106.0], [32.7, 106.0], [32.8, 106.0], [32.9, 106.0], [33.0, 106.0], [33.1, 106.0], [33.2, 106.0], [33.3, 106.0], [33.4, 106.0], [33.5, 106.0], [33.6, 106.0], [33.7, 106.0], [33.8, 106.0], [33.9, 106.0], [34.0, 106.0], [34.1, 106.0], [34.2, 106.0], [34.3, 106.0], [34.4, 106.0], [34.5, 106.0], [34.6, 106.0], [34.7, 106.0], [34.8, 106.0], [34.9, 106.0], [35.0, 106.0], [35.1, 106.0], [35.2, 106.0], [35.3, 106.0], [35.4, 106.0], [35.5, 106.0], [35.6, 106.0], [35.7, 106.0], [35.8, 106.0], [35.9, 106.0], [36.0, 106.0], [36.1, 106.0], [36.2, 106.0], [36.3, 106.0], [36.4, 106.0], [36.5, 106.0], [36.6, 106.0], [36.7, 106.0], [36.8, 106.0], [36.9, 106.0], [37.0, 106.0], [37.1, 106.0], [37.2, 106.0], [37.3, 106.0], [37.4, 106.0], [37.5, 106.0], [37.6, 106.0], [37.7, 106.0], [37.8, 106.0], [37.9, 106.0], [38.0, 106.0], [38.1, 106.0], [38.2, 106.0], [38.3, 106.0], [38.4, 106.0], [38.5, 106.0], [38.6, 106.0], [38.7, 106.0], [38.8, 106.0], [38.9, 106.0], [39.0, 106.0], [39.1, 106.0], [39.2, 106.0], [39.3, 106.0], [39.4, 106.0], [39.5, 106.0], [39.6, 106.0], [39.7, 106.0], [39.8, 106.0], [39.9, 106.0], [40.0, 106.0], [40.1, 106.0], [40.2, 106.0], [40.3, 106.0], [40.4, 106.0], [40.5, 106.0], [40.6, 106.0], [40.7, 106.0], [40.8, 106.0], [40.9, 106.0], [41.0, 106.0], [41.1, 106.0], [41.2, 106.0], [41.3, 106.0], [41.4, 106.0], [41.5, 106.0], [41.6, 106.0], [41.7, 106.0], [41.8, 106.0], [41.9, 106.0], [42.0, 106.0], [42.1, 106.0], [42.2, 106.0], [42.3, 106.0], [42.4, 106.0], [42.5, 106.0], [42.6, 106.0], [42.7, 106.0], [42.8, 106.0], [42.9, 106.0], [43.0, 106.0], [43.1, 106.0], [43.2, 106.0], [43.3, 106.0], [43.4, 106.0], [43.5, 106.0], [43.6, 106.0], [43.7, 106.0], [43.8, 106.0], [43.9, 106.0], [44.0, 106.0], [44.1, 106.0], [44.2, 106.0], [44.3, 106.0], [44.4, 106.0], [44.5, 106.0], [44.6, 106.0], [44.7, 106.0], [44.8, 106.0], [44.9, 106.0], [45.0, 106.0], [45.1, 106.0], [45.2, 106.0], [45.3, 106.0], [45.4, 106.0], [45.5, 106.0], [45.6, 106.0], [45.7, 106.0], [45.8, 106.0], [45.9, 106.0], [46.0, 106.0], [46.1, 106.0], [46.2, 106.0], [46.3, 106.0], [46.4, 106.0], [46.5, 106.0], [46.6, 106.0], [46.7, 106.0], [46.8, 106.0], [46.9, 107.0], [47.0, 107.0], [47.1, 107.0], [47.2, 107.0], [47.3, 107.0], [47.4, 107.0], [47.5, 107.0], [47.6, 107.0], [47.7, 107.0], [47.8, 107.0], [47.9, 107.0], [48.0, 107.0], [48.1, 107.0], [48.2, 107.0], [48.3, 107.0], [48.4, 107.0], [48.5, 107.0], [48.6, 107.0], [48.7, 107.0], [48.8, 107.0], [48.9, 107.0], [49.0, 107.0], [49.1, 107.0], [49.2, 107.0], [49.3, 107.0], [49.4, 107.0], [49.5, 107.0], [49.6, 107.0], [49.7, 107.0], [49.8, 107.0], [49.9, 107.0], [50.0, 107.0], [50.1, 107.0], [50.2, 107.0], [50.3, 107.0], [50.4, 107.0], [50.5, 107.0], [50.6, 107.0], [50.7, 107.0], [50.8, 107.0], [50.9, 107.0], [51.0, 107.0], [51.1, 107.0], [51.2, 107.0], [51.3, 107.0], [51.4, 107.0], [51.5, 107.0], [51.6, 107.0], [51.7, 107.0], [51.8, 107.0], [51.9, 107.0], [52.0, 107.0], [52.1, 107.0], [52.2, 107.0], [52.3, 107.0], [52.4, 107.0], [52.5, 107.0], [52.6, 107.0], [52.7, 107.0], [52.8, 107.0], [52.9, 107.0], [53.0, 107.0], [53.1, 107.0], [53.2, 107.0], [53.3, 107.0], [53.4, 107.0], [53.5, 107.0], [53.6, 107.0], [53.7, 107.0], [53.8, 107.0], [53.9, 107.0], [54.0, 107.0], [54.1, 107.0], [54.2, 107.0], [54.3, 107.0], [54.4, 107.0], [54.5, 107.0], [54.6, 107.0], [54.7, 107.0], [54.8, 107.0], [54.9, 107.0], [55.0, 107.0], [55.1, 107.0], [55.2, 107.0], [55.3, 107.0], [55.4, 107.0], [55.5, 107.0], [55.6, 107.0], [55.7, 107.0], [55.8, 107.0], [55.9, 107.0], [56.0, 107.0], [56.1, 107.0], [56.2, 107.0], [56.3, 107.0], [56.4, 107.0], [56.5, 107.0], [56.6, 107.0], [56.7, 107.0], [56.8, 107.0], [56.9, 107.0], [57.0, 107.0], [57.1, 107.0], [57.2, 107.0], [57.3, 107.0], [57.4, 107.0], [57.5, 107.0], [57.6, 107.0], [57.7, 107.0], [57.8, 107.0], [57.9, 107.0], [58.0, 107.0], [58.1, 107.0], [58.2, 107.0], [58.3, 107.0], [58.4, 107.0], [58.5, 107.0], [58.6, 107.0], [58.7, 107.0], [58.8, 107.0], [58.9, 107.0], [59.0, 107.0], [59.1, 107.0], [59.2, 107.0], [59.3, 107.0], [59.4, 107.0], [59.5, 107.0], [59.6, 107.0], [59.7, 107.0], [59.8, 107.0], [59.9, 107.0], [60.0, 107.0], [60.1, 107.0], [60.2, 107.0], [60.3, 107.0], [60.4, 108.0], [60.5, 108.0], [60.6, 108.0], [60.7, 108.0], [60.8, 108.0], [60.9, 108.0], [61.0, 108.0], [61.1, 108.0], [61.2, 108.0], [61.3, 108.0], [61.4, 108.0], [61.5, 108.0], [61.6, 108.0], [61.7, 108.0], [61.8, 108.0], [61.9, 108.0], [62.0, 108.0], [62.1, 108.0], [62.2, 108.0], [62.3, 108.0], [62.4, 108.0], [62.5, 108.0], [62.6, 108.0], [62.7, 108.0], [62.8, 108.0], [62.9, 108.0], [63.0, 108.0], [63.1, 108.0], [63.2, 108.0], [63.3, 108.0], [63.4, 108.0], [63.5, 108.0], [63.6, 108.0], [63.7, 108.0], [63.8, 108.0], [63.9, 108.0], [64.0, 108.0], [64.1, 108.0], [64.2, 108.0], [64.3, 108.0], [64.4, 108.0], [64.5, 108.0], [64.6, 108.0], [64.7, 108.0], [64.8, 108.0], [64.9, 108.0], [65.0, 108.0], [65.1, 108.0], [65.2, 108.0], [65.3, 108.0], [65.4, 108.0], [65.5, 108.0], [65.6, 108.0], [65.7, 108.0], [65.8, 108.0], [65.9, 108.0], [66.0, 108.0], [66.1, 108.0], [66.2, 108.0], [66.3, 108.0], [66.4, 108.0], [66.5, 108.0], [66.6, 108.0], [66.7, 108.0], [66.8, 108.0], [66.9, 108.0], [67.0, 108.0], [67.1, 108.0], [67.2, 108.0], [67.3, 108.0], [67.4, 108.0], [67.5, 108.0], [67.6, 108.0], [67.7, 108.0], [67.8, 108.0], [67.9, 109.0], [68.0, 109.0], [68.1, 109.0], [68.2, 109.0], [68.3, 109.0], [68.4, 109.0], [68.5, 109.0], [68.6, 109.0], [68.7, 109.0], [68.8, 109.0], [68.9, 109.0], [69.0, 109.0], [69.1, 109.0], [69.2, 109.0], [69.3, 109.0], [69.4, 109.0], [69.5, 109.0], [69.6, 109.0], [69.7, 109.0], [69.8, 109.0], [69.9, 109.0], [70.0, 109.0], [70.1, 109.0], [70.2, 109.0], [70.3, 109.0], [70.4, 109.0], [70.5, 109.0], [70.6, 109.0], [70.7, 109.0], [70.8, 109.0], [70.9, 109.0], [71.0, 109.0], [71.1, 109.0], [71.2, 109.0], [71.3, 110.0], [71.4, 110.0], [71.5, 110.0], [71.6, 110.0], [71.7, 110.0], [71.8, 110.0], [71.9, 110.0], [72.0, 110.0], [72.1, 110.0], [72.2, 110.0], [72.3, 110.0], [72.4, 110.0], [72.5, 110.0], [72.6, 111.0], [72.7, 111.0], [72.8, 111.0], [72.9, 111.0], [73.0, 111.0], [73.1, 111.0], [73.2, 111.0], [73.3, 111.0], [73.4, 111.0], [73.5, 111.0], [73.6, 111.0], [73.7, 111.0], [73.8, 111.0], [73.9, 111.0], [74.0, 111.0], [74.1, 112.0], [74.2, 112.0], [74.3, 112.0], [74.4, 112.0], [74.5, 112.0], [74.6, 112.0], [74.7, 113.0], [74.8, 113.0], [74.9, 113.0], [75.0, 114.0], [75.1, 114.0], [75.2, 114.0], [75.3, 114.0], [75.4, 115.0], [75.5, 115.0], [75.6, 115.0], [75.7, 116.0], [75.8, 116.0], [75.9, 117.0], [76.0, 118.0], [76.1, 119.0], [76.2, 119.0], [76.3, 119.0], [76.4, 120.0], [76.5, 121.0], [76.6, 121.0], [76.7, 121.0], [76.8, 122.0], [76.9, 123.0], [77.0, 123.0], [77.1, 124.0], [77.2, 124.0], [77.3, 125.0], [77.4, 125.0], [77.5, 125.0], [77.6, 125.0], [77.7, 126.0], [77.8, 127.0], [77.9, 127.0], [78.0, 128.0], [78.1, 129.0], [78.2, 130.0], [78.3, 130.0], [78.4, 130.0], [78.5, 131.0], [78.6, 133.0], [78.7, 134.0], [78.8, 135.0], [78.9, 136.0], [79.0, 137.0], [79.1, 138.0], [79.2, 140.0], [79.3, 140.0], [79.4, 140.0], [79.5, 141.0], [79.6, 141.0], [79.7, 142.0], [79.8, 142.0], [79.9, 142.0], [80.0, 143.0], [80.1, 143.0], [80.2, 145.0], [80.3, 145.0], [80.4, 145.0], [80.5, 146.0], [80.6, 148.0], [80.7, 148.0], [80.8, 149.0], [80.9, 149.0], [81.0, 149.0], [81.1, 151.0], [81.2, 153.0], [81.3, 153.0], [81.4, 154.0], [81.5, 155.0], [81.6, 156.0], [81.7, 157.0], [81.8, 158.0], [81.9, 158.0], [82.0, 158.0], [82.1, 159.0], [82.2, 159.0], [82.3, 159.0], [82.4, 159.0], [82.5, 160.0], [82.6, 161.0], [82.7, 161.0], [82.8, 162.0], [82.9, 163.0], [83.0, 165.0], [83.1, 166.0], [83.2, 167.0], [83.3, 167.0], [83.4, 169.0], [83.5, 169.0], [83.6, 169.0], [83.7, 170.0], [83.8, 171.0], [83.9, 174.0], [84.0, 174.0], [84.1, 175.0], [84.2, 176.0], [84.3, 177.0], [84.4, 178.0], [84.5, 179.0], [84.6, 179.0], [84.7, 180.0], [84.8, 181.0], [84.9, 182.0], [85.0, 184.0], [85.1, 185.0], [85.2, 185.0], [85.3, 187.0], [85.4, 188.0], [85.5, 193.0], [85.6, 193.0], [85.7, 195.0], [85.8, 196.0], [85.9, 197.0], [86.0, 197.0], [86.1, 199.0], [86.2, 200.0], [86.3, 202.0], [86.4, 204.0], [86.5, 206.0], [86.6, 207.0], [86.7, 208.0], [86.8, 210.0], [86.9, 211.0], [87.0, 212.0], [87.1, 219.0], [87.2, 220.0], [87.3, 233.0], [87.4, 244.0], [87.5, 253.0], [87.6, 288.0], [87.7, 336.0], [87.8, 361.0], [87.9, 412.0], [88.0, 591.0], [88.1, 702.0], [88.2, 1000.0], [88.3, 1718.0], [88.4, 3222.0], [88.5, 4440.0], [88.6, 4996.0], [88.7, 5664.0], [88.8, 6852.0], [88.9, 8252.0], [89.0, 8562.0], [89.1, 8909.0], [89.2, 9739.0], [89.3, 10185.0], [89.4, 10646.0], [89.5, 11680.0], [89.6, 12294.0], [89.7, 12979.0], [89.8, 13028.0], [89.9, 13454.0], [90.0, 13843.0], [90.1, 14102.0], [90.2, 14419.0], [90.3, 14992.0], [90.4, 15046.0], [90.5, 15254.0], [90.6, 16053.0], [90.7, 16280.0], [90.8, 16838.0], [90.9, 17164.0], [91.0, 17390.0], [91.1, 18209.0], [91.2, 18754.0], [91.3, 19078.0], [91.4, 19248.0], [91.5, 19599.0], [91.6, 19859.0], [91.7, 20055.0], [91.8, 20315.0], [91.9, 20412.0], [92.0, 20660.0], [92.1, 20839.0], [92.2, 21213.0], [92.3, 21621.0], [92.4, 21886.0], [92.5, 21990.0], [92.6, 22474.0], [92.7, 22811.0], [92.8, 23273.0], [92.9, 23430.0], [93.0, 23468.0], [93.1, 23789.0], [93.2, 24108.0], [93.3, 24415.0], [93.4, 24800.0], [93.5, 25112.0], [93.6, 25198.0], [93.7, 25767.0], [93.8, 26298.0], [93.9, 26944.0], [94.0, 27806.0], [94.1, 28329.0], [94.2, 28561.0], [94.3, 28954.0], [94.4, 29061.0], [94.5, 29538.0], [94.6, 29840.0], [94.7, 29888.0], [94.8, 30034.0], [94.9, 30434.0], [95.0, 30868.0], [95.1, 30976.0], [95.2, 31300.0], [95.3, 31563.0], [95.4, 31968.0], [95.5, 32145.0], [95.6, 32529.0], [95.7, 33319.0], [95.8, 33504.0], [95.9, 34069.0], [96.0, 36121.0], [96.1, 36474.0], [96.2, 36809.0], [96.3, 37846.0], [96.4, 38874.0], [96.5, 40380.0], [96.6, 42063.0], [96.7, 43066.0], [96.8, 43868.0], [96.9, 44763.0], [97.0, 47471.0], [97.1, 48343.0], [97.2, 49691.0], [97.3, 50033.0], [97.4, 50307.0], [97.5, 50902.0], [97.6, 51867.0], [97.7, 52808.0], [97.8, 53298.0], [97.9, 56487.0], [98.0, 59456.0], [98.1, 60103.0], [98.2, 60104.0], [98.3, 60106.0], [98.4, 60106.0], [98.5, 60107.0], [98.6, 60108.0], [98.7, 60115.0], [98.8, 60121.0], [98.9, 60140.0], [99.0, 60144.0], [99.1, 60146.0], [99.2, 60153.0], [99.3, 60175.0], [99.4, 60199.0], [99.5, 60206.0], [99.6, 60207.0], [99.7, 60209.0], [99.8, 60238.0], [99.9, 60256.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 204.0], [0.1, 204.0], [0.2, 204.0], [0.3, 204.0], [0.4, 204.0], [0.5, 204.0], [0.6, 204.0], [0.7, 204.0], [0.8, 204.0], [0.9, 204.0], [1.0, 204.0], [1.1, 204.0], [1.2, 204.0], [1.3, 204.0], [1.4, 204.0], [1.5, 204.0], [1.6, 204.0], [1.7, 204.0], [1.8, 204.0], [1.9, 204.0], [2.0, 205.0], [2.1, 205.0], [2.2, 205.0], [2.3, 205.0], [2.4, 205.0], [2.5, 205.0], [2.6, 205.0], [2.7, 205.0], [2.8, 205.0], [2.9, 205.0], [3.0, 205.0], [3.1, 205.0], [3.2, 205.0], [3.3, 205.0], [3.4, 205.0], [3.5, 205.0], [3.6, 205.0], [3.7, 205.0], [3.8, 205.0], [3.9, 205.0], [4.0, 205.0], [4.1, 205.0], [4.2, 205.0], [4.3, 205.0], [4.4, 205.0], [4.5, 205.0], [4.6, 205.0], [4.7, 205.0], [4.8, 205.0], [4.9, 205.0], [5.0, 205.0], [5.1, 205.0], [5.2, 205.0], [5.3, 205.0], [5.4, 205.0], [5.5, 205.0], [5.6, 205.0], [5.7, 205.0], [5.8, 205.0], [5.9, 205.0], [6.0, 205.0], [6.1, 205.0], [6.2, 205.0], [6.3, 205.0], [6.4, 205.0], [6.5, 205.0], [6.6, 205.0], [6.7, 205.0], [6.8, 205.0], [6.9, 205.0], [7.0, 205.0], [7.1, 205.0], [7.2, 205.0], [7.3, 205.0], [7.4, 205.0], [7.5, 205.0], [7.6, 205.0], [7.7, 205.0], [7.8, 205.0], [7.9, 205.0], [8.0, 205.0], [8.1, 205.0], [8.2, 205.0], [8.3, 205.0], [8.4, 205.0], [8.5, 205.0], [8.6, 205.0], [8.7, 205.0], [8.8, 205.0], [8.9, 205.0], [9.0, 205.0], [9.1, 205.0], [9.2, 205.0], [9.3, 205.0], [9.4, 205.0], [9.5, 205.0], [9.6, 205.0], [9.7, 206.0], [9.8, 206.0], [9.9, 206.0], [10.0, 206.0], [10.1, 206.0], [10.2, 206.0], [10.3, 206.0], [10.4, 206.0], [10.5, 206.0], [10.6, 206.0], [10.7, 206.0], [10.8, 206.0], [10.9, 206.0], [11.0, 206.0], [11.1, 206.0], [11.2, 206.0], [11.3, 206.0], [11.4, 206.0], [11.5, 206.0], [11.6, 206.0], [11.7, 206.0], [11.8, 206.0], [11.9, 206.0], [12.0, 206.0], [12.1, 206.0], [12.2, 206.0], [12.3, 206.0], [12.4, 206.0], [12.5, 206.0], [12.6, 206.0], [12.7, 206.0], [12.8, 206.0], [12.9, 206.0], [13.0, 206.0], [13.1, 206.0], [13.2, 206.0], [13.3, 206.0], [13.4, 206.0], [13.5, 206.0], [13.6, 206.0], [13.7, 206.0], [13.8, 206.0], [13.9, 206.0], [14.0, 206.0], [14.1, 206.0], [14.2, 206.0], [14.3, 206.0], [14.4, 206.0], [14.5, 206.0], [14.6, 206.0], [14.7, 206.0], [14.8, 206.0], [14.9, 206.0], [15.0, 206.0], [15.1, 206.0], [15.2, 206.0], [15.3, 206.0], [15.4, 206.0], [15.5, 206.0], [15.6, 206.0], [15.7, 206.0], [15.8, 206.0], [15.9, 206.0], [16.0, 206.0], [16.1, 206.0], [16.2, 206.0], [16.3, 206.0], [16.4, 206.0], [16.5, 206.0], [16.6, 206.0], [16.7, 206.0], [16.8, 206.0], [16.9, 206.0], [17.0, 206.0], [17.1, 206.0], [17.2, 206.0], [17.3, 206.0], [17.4, 206.0], [17.5, 206.0], [17.6, 206.0], [17.7, 206.0], [17.8, 206.0], [17.9, 206.0], [18.0, 206.0], [18.1, 206.0], [18.2, 206.0], [18.3, 206.0], [18.4, 206.0], [18.5, 206.0], [18.6, 206.0], [18.7, 206.0], [18.8, 206.0], [18.9, 206.0], [19.0, 206.0], [19.1, 206.0], [19.2, 206.0], [19.3, 206.0], [19.4, 206.0], [19.5, 206.0], [19.6, 206.0], [19.7, 206.0], [19.8, 206.0], [19.9, 206.0], [20.0, 206.0], [20.1, 206.0], [20.2, 206.0], [20.3, 206.0], [20.4, 206.0], [20.5, 206.0], [20.6, 206.0], [20.7, 206.0], [20.8, 206.0], [20.9, 206.0], [21.0, 206.0], [21.1, 206.0], [21.2, 206.0], [21.3, 206.0], [21.4, 206.0], [21.5, 206.0], [21.6, 206.0], [21.7, 206.0], [21.8, 206.0], [21.9, 206.0], [22.0, 206.0], [22.1, 206.0], [22.2, 206.0], [22.3, 207.0], [22.4, 207.0], [22.5, 207.0], [22.6, 207.0], [22.7, 207.0], [22.8, 207.0], [22.9, 207.0], [23.0, 207.0], [23.1, 207.0], [23.2, 207.0], [23.3, 207.0], [23.4, 207.0], [23.5, 207.0], [23.6, 207.0], [23.7, 207.0], [23.8, 207.0], [23.9, 207.0], [24.0, 207.0], [24.1, 207.0], [24.2, 207.0], [24.3, 207.0], [24.4, 207.0], [24.5, 207.0], [24.6, 207.0], [24.7, 207.0], [24.8, 207.0], [24.9, 207.0], [25.0, 207.0], [25.1, 207.0], [25.2, 207.0], [25.3, 207.0], [25.4, 207.0], [25.5, 207.0], [25.6, 207.0], [25.7, 207.0], [25.8, 207.0], [25.9, 207.0], [26.0, 207.0], [26.1, 207.0], [26.2, 207.0], [26.3, 207.0], [26.4, 207.0], [26.5, 207.0], [26.6, 207.0], [26.7, 207.0], [26.8, 207.0], [26.9, 207.0], [27.0, 207.0], [27.1, 207.0], [27.2, 207.0], [27.3, 207.0], [27.4, 207.0], [27.5, 207.0], [27.6, 207.0], [27.7, 207.0], [27.8, 207.0], [27.9, 207.0], [28.0, 207.0], [28.1, 207.0], [28.2, 207.0], [28.3, 207.0], [28.4, 207.0], [28.5, 207.0], [28.6, 207.0], [28.7, 207.0], [28.8, 207.0], [28.9, 207.0], [29.0, 207.0], [29.1, 207.0], [29.2, 207.0], [29.3, 207.0], [29.4, 207.0], [29.5, 207.0], [29.6, 207.0], [29.7, 207.0], [29.8, 207.0], [29.9, 207.0], [30.0, 207.0], [30.1, 207.0], [30.2, 207.0], [30.3, 207.0], [30.4, 207.0], [30.5, 207.0], [30.6, 207.0], [30.7, 207.0], [30.8, 207.0], [30.9, 207.0], [31.0, 207.0], [31.1, 207.0], [31.2, 207.0], [31.3, 207.0], [31.4, 207.0], [31.5, 207.0], [31.6, 207.0], [31.7, 207.0], [31.8, 207.0], [31.9, 207.0], [32.0, 207.0], [32.1, 207.0], [32.2, 207.0], [32.3, 207.0], [32.4, 207.0], [32.5, 207.0], [32.6, 207.0], [32.7, 207.0], [32.8, 207.0], [32.9, 207.0], [33.0, 207.0], [33.1, 207.0], [33.2, 207.0], [33.3, 207.0], [33.4, 207.0], [33.5, 207.0], [33.6, 207.0], [33.7, 207.0], [33.8, 207.0], [33.9, 207.0], [34.0, 207.0], [34.1, 207.0], [34.2, 207.0], [34.3, 207.0], [34.4, 207.0], [34.5, 207.0], [34.6, 207.0], [34.7, 207.0], [34.8, 207.0], [34.9, 207.0], [35.0, 207.0], [35.1, 207.0], [35.2, 207.0], [35.3, 207.0], [35.4, 207.0], [35.5, 207.0], [35.6, 207.0], [35.7, 207.0], [35.8, 207.0], [35.9, 207.0], [36.0, 207.0], [36.1, 207.0], [36.2, 207.0], [36.3, 207.0], [36.4, 207.0], [36.5, 207.0], [36.6, 207.0], [36.7, 207.0], [36.8, 207.0], [36.9, 207.0], [37.0, 207.0], [37.1, 207.0], [37.2, 207.0], [37.3, 207.0], [37.4, 207.0], [37.5, 208.0], [37.6, 208.0], [37.7, 208.0], [37.8, 208.0], [37.9, 208.0], [38.0, 208.0], [38.1, 208.0], [38.2, 208.0], [38.3, 208.0], [38.4, 208.0], [38.5, 208.0], [38.6, 208.0], [38.7, 208.0], [38.8, 208.0], [38.9, 208.0], [39.0, 208.0], [39.1, 208.0], [39.2, 208.0], [39.3, 208.0], [39.4, 208.0], [39.5, 208.0], [39.6, 208.0], [39.7, 208.0], [39.8, 208.0], [39.9, 208.0], [40.0, 208.0], [40.1, 208.0], [40.2, 208.0], [40.3, 208.0], [40.4, 208.0], [40.5, 208.0], [40.6, 208.0], [40.7, 208.0], [40.8, 208.0], [40.9, 208.0], [41.0, 208.0], [41.1, 208.0], [41.2, 208.0], [41.3, 208.0], [41.4, 208.0], [41.5, 208.0], [41.6, 208.0], [41.7, 208.0], [41.8, 208.0], [41.9, 208.0], [42.0, 208.0], [42.1, 208.0], [42.2, 208.0], [42.3, 208.0], [42.4, 208.0], [42.5, 208.0], [42.6, 208.0], [42.7, 208.0], [42.8, 208.0], [42.9, 208.0], [43.0, 208.0], [43.1, 208.0], [43.2, 208.0], [43.3, 208.0], [43.4, 208.0], [43.5, 208.0], [43.6, 208.0], [43.7, 208.0], [43.8, 208.0], [43.9, 208.0], [44.0, 208.0], [44.1, 208.0], [44.2, 208.0], [44.3, 208.0], [44.4, 208.0], [44.5, 208.0], [44.6, 208.0], [44.7, 208.0], [44.8, 208.0], [44.9, 208.0], [45.0, 208.0], [45.1, 208.0], [45.2, 208.0], [45.3, 208.0], [45.4, 208.0], [45.5, 208.0], [45.6, 208.0], [45.7, 208.0], [45.8, 208.0], [45.9, 208.0], [46.0, 208.0], [46.1, 208.0], [46.2, 208.0], [46.3, 208.0], [46.4, 208.0], [46.5, 208.0], [46.6, 208.0], [46.7, 208.0], [46.8, 208.0], [46.9, 208.0], [47.0, 208.0], [47.1, 208.0], [47.2, 208.0], [47.3, 208.0], [47.4, 208.0], [47.5, 208.0], [47.6, 208.0], [47.7, 208.0], [47.8, 208.0], [47.9, 208.0], [48.0, 208.0], [48.1, 208.0], [48.2, 208.0], [48.3, 208.0], [48.4, 208.0], [48.5, 208.0], [48.6, 208.0], [48.7, 208.0], [48.8, 208.0], [48.9, 208.0], [49.0, 208.0], [49.1, 208.0], [49.2, 208.0], [49.3, 208.0], [49.4, 208.0], [49.5, 208.0], [49.6, 208.0], [49.7, 208.0], [49.8, 208.0], [49.9, 208.0], [50.0, 208.0], [50.1, 208.0], [50.2, 208.0], [50.3, 208.0], [50.4, 208.0], [50.5, 208.0], [50.6, 208.0], [50.7, 208.0], [50.8, 208.0], [50.9, 208.0], [51.0, 208.0], [51.1, 208.0], [51.2, 208.0], [51.3, 208.0], [51.4, 208.0], [51.5, 208.0], [51.6, 209.0], [51.7, 209.0], [51.8, 209.0], [51.9, 209.0], [52.0, 209.0], [52.1, 209.0], [52.2, 209.0], [52.3, 209.0], [52.4, 209.0], [52.5, 209.0], [52.6, 209.0], [52.7, 209.0], [52.8, 209.0], [52.9, 209.0], [53.0, 209.0], [53.1, 209.0], [53.2, 209.0], [53.3, 209.0], [53.4, 209.0], [53.5, 209.0], [53.6, 209.0], [53.7, 209.0], [53.8, 209.0], [53.9, 209.0], [54.0, 209.0], [54.1, 209.0], [54.2, 209.0], [54.3, 209.0], [54.4, 209.0], [54.5, 209.0], [54.6, 209.0], [54.7, 209.0], [54.8, 209.0], [54.9, 209.0], [55.0, 209.0], [55.1, 209.0], [55.2, 209.0], [55.3, 209.0], [55.4, 209.0], [55.5, 209.0], [55.6, 209.0], [55.7, 209.0], [55.8, 209.0], [55.9, 209.0], [56.0, 209.0], [56.1, 209.0], [56.2, 209.0], [56.3, 209.0], [56.4, 209.0], [56.5, 209.0], [56.6, 209.0], [56.7, 209.0], [56.8, 209.0], [56.9, 209.0], [57.0, 209.0], [57.1, 209.0], [57.2, 209.0], [57.3, 209.0], [57.4, 209.0], [57.5, 209.0], [57.6, 209.0], [57.7, 209.0], [57.8, 209.0], [57.9, 209.0], [58.0, 209.0], [58.1, 209.0], [58.2, 209.0], [58.3, 209.0], [58.4, 209.0], [58.5, 209.0], [58.6, 209.0], [58.7, 209.0], [58.8, 209.0], [58.9, 209.0], [59.0, 209.0], [59.1, 209.0], [59.2, 209.0], [59.3, 209.0], [59.4, 209.0], [59.5, 209.0], [59.6, 209.0], [59.7, 209.0], [59.8, 209.0], [59.9, 209.0], [60.0, 209.0], [60.1, 209.0], [60.2, 209.0], [60.3, 209.0], [60.4, 209.0], [60.5, 209.0], [60.6, 209.0], [60.7, 209.0], [60.8, 209.0], [60.9, 209.0], [61.0, 209.0], [61.1, 209.0], [61.2, 209.0], [61.3, 209.0], [61.4, 209.0], [61.5, 209.0], [61.6, 209.0], [61.7, 210.0], [61.8, 210.0], [61.9, 210.0], [62.0, 210.0], [62.1, 210.0], [62.2, 210.0], [62.3, 210.0], [62.4, 210.0], [62.5, 210.0], [62.6, 210.0], [62.7, 210.0], [62.8, 210.0], [62.9, 210.0], [63.0, 210.0], [63.1, 210.0], [63.2, 210.0], [63.3, 210.0], [63.4, 210.0], [63.5, 210.0], [63.6, 210.0], [63.7, 210.0], [63.8, 210.0], [63.9, 210.0], [64.0, 210.0], [64.1, 210.0], [64.2, 210.0], [64.3, 210.0], [64.4, 210.0], [64.5, 210.0], [64.6, 210.0], [64.7, 210.0], [64.8, 210.0], [64.9, 210.0], [65.0, 210.0], [65.1, 210.0], [65.2, 210.0], [65.3, 210.0], [65.4, 210.0], [65.5, 210.0], [65.6, 210.0], [65.7, 210.0], [65.8, 210.0], [65.9, 210.0], [66.0, 210.0], [66.1, 210.0], [66.2, 210.0], [66.3, 210.0], [66.4, 210.0], [66.5, 210.0], [66.6, 210.0], [66.7, 210.0], [66.8, 210.0], [66.9, 210.0], [67.0, 210.0], [67.1, 211.0], [67.2, 211.0], [67.3, 211.0], [67.4, 211.0], [67.5, 211.0], [67.6, 211.0], [67.7, 211.0], [67.8, 211.0], [67.9, 211.0], [68.0, 211.0], [68.1, 211.0], [68.2, 211.0], [68.3, 211.0], [68.4, 211.0], [68.5, 211.0], [68.6, 211.0], [68.7, 211.0], [68.8, 211.0], [68.9, 211.0], [69.0, 211.0], [69.1, 211.0], [69.2, 211.0], [69.3, 211.0], [69.4, 211.0], [69.5, 211.0], [69.6, 211.0], [69.7, 211.0], [69.8, 211.0], [69.9, 211.0], [70.0, 211.0], [70.1, 211.0], [70.2, 211.0], [70.3, 211.0], [70.4, 211.0], [70.5, 211.0], [70.6, 212.0], [70.7, 212.0], [70.8, 212.0], [70.9, 212.0], [71.0, 212.0], [71.1, 212.0], [71.2, 212.0], [71.3, 212.0], [71.4, 212.0], [71.5, 212.0], [71.6, 212.0], [71.7, 212.0], [71.8, 212.0], [71.9, 212.0], [72.0, 212.0], [72.1, 212.0], [72.2, 212.0], [72.3, 212.0], [72.4, 213.0], [72.5, 213.0], [72.6, 213.0], [72.7, 213.0], [72.8, 213.0], [72.9, 213.0], [73.0, 213.0], [73.1, 213.0], [73.2, 213.0], [73.3, 213.0], [73.4, 213.0], [73.5, 214.0], [73.6, 214.0], [73.7, 214.0], [73.8, 214.0], [73.9, 214.0], [74.0, 214.0], [74.1, 214.0], [74.2, 215.0], [74.3, 215.0], [74.4, 215.0], [74.5, 215.0], [74.6, 215.0], [74.7, 215.0], [74.8, 215.0], [74.9, 216.0], [75.0, 216.0], [75.1, 216.0], [75.2, 216.0], [75.3, 217.0], [75.4, 217.0], [75.5, 218.0], [75.6, 218.0], [75.7, 218.0], [75.8, 218.0], [75.9, 219.0], [76.0, 220.0], [76.1, 221.0], [76.2, 222.0], [76.3, 223.0], [76.4, 224.0], [76.5, 226.0], [76.6, 228.0], [76.7, 229.0], [76.8, 230.0], [76.9, 230.0], [77.0, 231.0], [77.1, 232.0], [77.2, 232.0], [77.3, 234.0], [77.4, 234.0], [77.5, 235.0], [77.6, 236.0], [77.7, 240.0], [77.8, 242.0], [77.9, 245.0], [78.0, 246.0], [78.1, 248.0], [78.2, 249.0], [78.3, 249.0], [78.4, 250.0], [78.5, 251.0], [78.6, 252.0], [78.7, 255.0], [78.8, 256.0], [78.9, 258.0], [79.0, 258.0], [79.1, 261.0], [79.2, 263.0], [79.3, 265.0], [79.4, 266.0], [79.5, 267.0], [79.6, 273.0], [79.7, 275.0], [79.8, 284.0], [79.9, 285.0], [80.0, 288.0], [80.1, 290.0], [80.2, 292.0], [80.3, 293.0], [80.4, 294.0], [80.5, 295.0], [80.6, 297.0], [80.7, 301.0], [80.8, 302.0], [80.9, 302.0], [81.0, 303.0], [81.1, 303.0], [81.2, 304.0], [81.3, 304.0], [81.4, 304.0], [81.5, 304.0], [81.6, 305.0], [81.7, 305.0], [81.8, 305.0], [81.9, 305.0], [82.0, 305.0], [82.1, 305.0], [82.2, 305.0], [82.3, 305.0], [82.4, 306.0], [82.5, 306.0], [82.6, 306.0], [82.7, 306.0], [82.8, 306.0], [82.9, 306.0], [83.0, 306.0], [83.1, 306.0], [83.2, 306.0], [83.3, 307.0], [83.4, 307.0], [83.5, 307.0], [83.6, 307.0], [83.7, 307.0], [83.8, 307.0], [83.9, 307.0], [84.0, 307.0], [84.1, 308.0], [84.2, 308.0], [84.3, 308.0], [84.4, 308.0], [84.5, 309.0], [84.6, 309.0], [84.7, 310.0], [84.8, 311.0], [84.9, 311.0], [85.0, 312.0], [85.1, 314.0], [85.2, 314.0], [85.3, 315.0], [85.4, 316.0], [85.5, 317.0], [85.6, 318.0], [85.7, 321.0], [85.8, 322.0], [85.9, 323.0], [86.0, 329.0], [86.1, 332.0], [86.2, 332.0], [86.3, 334.0], [86.4, 335.0], [86.5, 335.0], [86.6, 338.0], [86.7, 341.0], [86.8, 342.0], [86.9, 344.0], [87.0, 345.0], [87.1, 349.0], [87.2, 349.0], [87.3, 351.0], [87.4, 358.0], [87.5, 360.0], [87.6, 360.0], [87.7, 361.0], [87.8, 362.0], [87.9, 366.0], [88.0, 369.0], [88.1, 370.0], [88.2, 372.0], [88.3, 372.0], [88.4, 373.0], [88.5, 377.0], [88.6, 378.0], [88.7, 382.0], [88.8, 384.0], [88.9, 387.0], [89.0, 390.0], [89.1, 391.0], [89.2, 392.0], [89.3, 394.0], [89.4, 397.0], [89.5, 397.0], [89.6, 400.0], [89.7, 401.0], [89.8, 401.0], [89.9, 402.0], [90.0, 402.0], [90.1, 403.0], [90.2, 404.0], [90.3, 404.0], [90.4, 404.0], [90.5, 405.0], [90.6, 405.0], [90.7, 405.0], [90.8, 405.0], [90.9, 406.0], [91.0, 406.0], [91.1, 406.0], [91.2, 406.0], [91.3, 406.0], [91.4, 406.0], [91.5, 406.0], [91.6, 406.0], [91.7, 407.0], [91.8, 407.0], [91.9, 407.0], [92.0, 407.0], [92.1, 407.0], [92.2, 407.0], [92.3, 407.0], [92.4, 407.0], [92.5, 407.0], [92.6, 407.0], [92.7, 408.0], [92.8, 408.0], [92.9, 408.0], [93.0, 408.0], [93.1, 408.0], [93.2, 408.0], [93.3, 408.0], [93.4, 408.0], [93.5, 408.0], [93.6, 408.0], [93.7, 408.0], [93.8, 408.0], [93.9, 408.0], [94.0, 408.0], [94.1, 408.0], [94.2, 408.0], [94.3, 408.0], [94.4, 408.0], [94.5, 409.0], [94.6, 409.0], [94.7, 409.0], [94.8, 409.0], [94.9, 409.0], [95.0, 409.0], [95.1, 409.0], [95.2, 409.0], [95.3, 409.0], [95.4, 409.0], [95.5, 409.0], [95.6, 409.0], [95.7, 409.0], [95.8, 409.0], [95.9, 409.0], [96.0, 409.0], [96.1, 409.0], [96.2, 409.0], [96.3, 409.0], [96.4, 409.0], [96.5, 410.0], [96.6, 410.0], [96.7, 410.0], [96.8, 410.0], [96.9, 410.0], [97.0, 410.0], [97.1, 410.0], [97.2, 411.0], [97.3, 411.0], [97.4, 411.0], [97.5, 411.0], [97.6, 411.0], [97.7, 411.0], [97.8, 412.0], [97.9, 413.0], [98.0, 413.0], [98.1, 419.0], [98.2, 440.0], [98.3, 475.0], [98.4, 495.0], [98.5, 505.0], [98.6, 507.0], [98.7, 510.0], [98.8, 510.0], [98.9, 510.0], [99.0, 526.0], [99.1, 554.0], [99.2, 572.0], [99.3, 601.0], [99.4, 620.0], [99.5, 687.0], [99.6, 866.0], [99.7, 1245.0], [99.8, 1547.0], [99.9, 1921.0], [100.0, 5478.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 2023.0, "series": [{"data": [[32900.0, 1.0], [33300.0, 1.0], [33700.0, 3.0], [36500.0, 1.0], [36900.0, 1.0], [38100.0, 1.0], [45700.0, 1.0], [48500.0, 1.0], [50100.0, 2.0], [50500.0, 1.0], [52100.0, 1.0], [51300.0, 1.0], [51700.0, 1.0], [200.0, 19.0], [54900.0, 1.0], [59300.0, 1.0], [58900.0, 1.0], [60500.0, 12.0], [59700.0, 1.0], [300.0, 1752.0], [400.0, 139.0], [500.0, 131.0], [600.0, 24.0], [700.0, 8.0], [800.0, 3.0], [900.0, 6.0], [1000.0, 1.0], [1100.0, 1.0], [1200.0, 2.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 1.0], [1600.0, 1.0], [1700.0, 1.0], [1900.0, 1.0], [2000.0, 2.0], [2900.0, 1.0], [3400.0, 1.0], [4200.0, 1.0], [4700.0, 1.0], [5100.0, 1.0], [5300.0, 1.0], [5200.0, 1.0], [5600.0, 1.0], [5400.0, 1.0], [5500.0, 1.0], [6000.0, 1.0], [6600.0, 1.0], [6900.0, 1.0], [7200.0, 1.0], [8100.0, 1.0], [8400.0, 1.0], [8800.0, 2.0], [9100.0, 1.0], [9000.0, 1.0], [9300.0, 1.0], [9400.0, 1.0], [10100.0, 2.0], [10400.0, 1.0], [10700.0, 1.0], [10800.0, 1.0], [11000.0, 2.0], [12000.0, 1.0], [12100.0, 1.0], [12600.0, 1.0], [12800.0, 1.0], [13300.0, 2.0], [12900.0, 1.0], [13400.0, 2.0], [13800.0, 1.0], [13700.0, 2.0], [14000.0, 1.0], [14400.0, 2.0], [14600.0, 2.0], [14800.0, 1.0], [15300.0, 1.0], [15100.0, 1.0], [15400.0, 3.0], [15500.0, 1.0], [15600.0, 1.0], [16100.0, 1.0], [16200.0, 1.0], [16400.0, 1.0], [17200.0, 2.0], [18400.0, 1.0], [19400.0, 1.0], [18600.0, 1.0], [19000.0, 1.0], [19600.0, 2.0], [20400.0, 1.0], [20000.0, 1.0], [20200.0, 2.0], [21000.0, 2.0], [21400.0, 1.0], [20600.0, 1.0], [21800.0, 2.0], [22200.0, 2.0], [21600.0, 1.0], [22800.0, 1.0], [23400.0, 2.0], [22600.0, 1.0], [23200.0, 1.0], [24200.0, 3.0], [23800.0, 3.0], [23600.0, 2.0], [25000.0, 1.0], [25400.0, 1.0], [24800.0, 1.0], [27200.0, 2.0], [28000.0, 1.0], [29000.0, 1.0], [29200.0, 3.0], [28800.0, 1.0], [30200.0, 1.0], [29800.0, 1.0], [30000.0, 3.0], [30600.0, 1.0], [30400.0, 1.0], [31200.0, 2.0], [31000.0, 1.0], [31600.0, 1.0], [30800.0, 1.0], [32200.0, 2.0], [32000.0, 1.0], [34000.0, 1.0], [36800.0, 1.0], [39200.0, 2.0], [40800.0, 1.0], [48800.0, 1.0], [50400.0, 1.0], [53200.0, 1.0], [60400.0, 11.0], [60800.0, 1.0], [33500.0, 1.0], [34700.0, 1.0], [36700.0, 1.0], [39500.0, 1.0], [41900.0, 1.0], [42300.0, 1.0], [45100.0, 1.0], [50700.0, 1.0], [49900.0, 1.0], [53100.0, 2.0], [53500.0, 1.0], [60300.0, 16.0], [60700.0, 1.0], [16700.0, 1.0], [16500.0, 1.0], [17100.0, 1.0], [17700.0, 2.0], [17500.0, 2.0], [18700.0, 1.0], [19300.0, 1.0], [19500.0, 1.0], [20100.0, 1.0], [19700.0, 1.0], [20300.0, 1.0], [20700.0, 2.0], [20900.0, 2.0], [21100.0, 1.0], [20500.0, 1.0], [21700.0, 1.0], [22300.0, 1.0], [22100.0, 1.0], [23100.0, 1.0], [22700.0, 1.0], [24300.0, 1.0], [23700.0, 1.0], [24700.0, 2.0], [24900.0, 1.0], [25500.0, 2.0], [25100.0, 1.0], [25700.0, 2.0], [26100.0, 2.0], [26700.0, 1.0], [27300.0, 1.0], [28300.0, 1.0], [28500.0, 1.0], [28100.0, 1.0], [28900.0, 2.0], [30300.0, 2.0], [29900.0, 1.0], [30100.0, 1.0], [30500.0, 1.0], [31500.0, 1.0], [31100.0, 1.0], [31700.0, 1.0], [32700.0, 1.0], [32300.0, 1.0], [32500.0, 1.0], [31900.0, 1.0], [34200.0, 1.0], [35400.0, 1.0], [37400.0, 1.0], [37000.0, 1.0], [38200.0, 1.0], [40600.0, 1.0], [43000.0, 1.0], [45000.0, 1.0], [43400.0, 2.0], [44200.0, 2.0], [47800.0, 2.0], [51000.0, 1.0], [50600.0, 1.0], [53400.0, 1.0], [56600.0, 1.0], [60600.0, 4.0], [60200.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 2023.0], [32900.0, 1.0], [33300.0, 1.0], [36100.0, 1.0], [37700.0, 1.0], [40500.0, 1.0], [41700.0, 1.0], [48500.0, 1.0], [50900.0, 1.0], [200.0, 35.0], [58900.0, 1.0], [60100.0, 31.0], [300.0, 5.0], [400.0, 2.0], [500.0, 2.0], [600.0, 1.0], [700.0, 2.0], [1000.0, 2.0], [1400.0, 1.0], [1700.0, 1.0], [2500.0, 1.0], [3200.0, 1.0], [3900.0, 1.0], [4400.0, 1.0], [4800.0, 1.0], [4900.0, 2.0], [5300.0, 1.0], [5600.0, 1.0], [6200.0, 1.0], [6600.0, 1.0], [6800.0, 1.0], [7900.0, 1.0], [8400.0, 1.0], [8500.0, 1.0], [8700.0, 1.0], [8200.0, 1.0], [8800.0, 1.0], [8900.0, 2.0], [9700.0, 2.0], [10100.0, 1.0], [10400.0, 1.0], [10600.0, 1.0], [10700.0, 1.0], [10300.0, 1.0], [11600.0, 1.0], [11700.0, 1.0], [12200.0, 1.0], [12400.0, 1.0], [12600.0, 1.0], [13000.0, 2.0], [12900.0, 1.0], [13100.0, 1.0], [13500.0, 1.0], [13400.0, 2.0], [13800.0, 1.0], [14100.0, 1.0], [14000.0, 1.0], [14400.0, 3.0], [14700.0, 1.0], [15000.0, 2.0], [14900.0, 1.0], [15200.0, 3.0], [15800.0, 1.0], [16000.0, 2.0], [16300.0, 1.0], [16200.0, 1.0], [16800.0, 3.0], [17400.0, 1.0], [18000.0, 1.0], [18200.0, 1.0], [19200.0, 2.0], [19000.0, 1.0], [20000.0, 1.0], [19800.0, 1.0], [20400.0, 1.0], [20600.0, 2.0], [21000.0, 1.0], [21400.0, 1.0], [20800.0, 1.0], [21200.0, 1.0], [22400.0, 1.0], [21600.0, 1.0], [21800.0, 1.0], [23400.0, 3.0], [23200.0, 2.0], [22800.0, 1.0], [24400.0, 2.0], [23600.0, 1.0], [24000.0, 2.0], [24800.0, 2.0], [24600.0, 1.0], [26200.0, 1.0], [25800.0, 1.0], [26800.0, 1.0], [27600.0, 1.0], [28600.0, 1.0], [28400.0, 1.0], [27800.0, 1.0], [29400.0, 1.0], [29600.0, 1.0], [29000.0, 2.0], [29800.0, 5.0], [30000.0, 1.0], [30400.0, 1.0], [30200.0, 1.0], [30800.0, 2.0], [31000.0, 1.0], [32000.0, 2.0], [31800.0, 1.0], [34400.0, 1.0], [34000.0, 1.0], [36400.0, 2.0], [36800.0, 1.0], [38800.0, 1.0], [42800.0, 1.0], [42000.0, 1.0], [43200.0, 1.0], [49600.0, 1.0], [50000.0, 1.0], [52800.0, 2.0], [53200.0, 1.0], [56400.0, 1.0], [60000.0, 1.0], [33100.0, 1.0], [33500.0, 2.0], [35100.0, 1.0], [38700.0, 1.0], [40300.0, 1.0], [44700.0, 2.0], [43900.0, 1.0], [47500.0, 1.0], [48300.0, 1.0], [49500.0, 1.0], [50300.0, 2.0], [52700.0, 1.0], [51500.0, 1.0], [58700.0, 1.0], [60300.0, 1.0], [17300.0, 2.0], [17100.0, 1.0], [18300.0, 1.0], [19100.0, 1.0], [18900.0, 1.0], [18700.0, 1.0], [20300.0, 3.0], [19700.0, 1.0], [19500.0, 2.0], [19900.0, 2.0], [21500.0, 1.0], [20700.0, 1.0], [20500.0, 1.0], [21700.0, 1.0], [21900.0, 2.0], [22300.0, 2.0], [22700.0, 1.0], [23100.0, 1.0], [23300.0, 1.0], [23700.0, 1.0], [24300.0, 1.0], [24100.0, 1.0], [25500.0, 2.0], [25100.0, 3.0], [25700.0, 1.0], [26900.0, 1.0], [27100.0, 1.0], [28100.0, 1.0], [28300.0, 1.0], [28500.0, 1.0], [28900.0, 1.0], [28700.0, 1.0], [29500.0, 1.0], [30500.0, 1.0], [30100.0, 1.0], [30900.0, 1.0], [31300.0, 2.0], [31100.0, 1.0], [31500.0, 1.0], [32500.0, 1.0], [32300.0, 1.0], [31900.0, 1.0], [32100.0, 1.0], [33400.0, 1.0], [36600.0, 1.0], [37000.0, 1.0], [37800.0, 1.0], [39000.0, 1.0], [43000.0, 1.0], [43800.0, 1.0], [45400.0, 1.0], [47400.0, 1.0], [50200.0, 1.0], [49800.0, 1.0], [50600.0, 1.0], [51800.0, 1.0], [53000.0, 1.0], [54600.0, 1.0], [60200.0, 13.0], [59400.0, 1.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[600.0, 6.0], [700.0, 1.0], [200.0, 1913.0], [800.0, 1.0], [1000.0, 1.0], [300.0, 211.0], [1200.0, 2.0], [5300.0, 1.0], [1400.0, 1.0], [5400.0, 1.0], [1500.0, 1.0], [400.0, 211.0], [1600.0, 1.0], [1900.0, 1.0], [500.0, 20.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 20.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4267.0, "series": [{"data": [[0.0, 260.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 20.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 173.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4267.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.307692307692308, "minX": 1.68547914E12, "maxY": 25.0, "series": [{"data": [[1.68547998E12, 25.0], [1.68547932E12, 6.105263157894736], [1.68548028E12, 10.235908141962428], [1.68547962E12, 15.0], [1.68547992E12, 24.845360824742272], [1.68547926E12, 5.0], [1.68548022E12, 14.954682779456192], [1.68547956E12, 14.701923076923077], [1.68547986E12, 20.65876777251185], [1.6854792E12, 4.744186046511627], [1.68548016E12, 17.573750000000004], [1.6854795E12, 10.677215189873422], [1.68548046E12, 4.3770491803278695], [1.6854798E12, 20.0], [1.68547914E12, 2.307692307692308], [1.6854801E12, 20.0], [1.68547944E12, 10.0], [1.6854804E12, 5.0], [1.68547974E12, 19.708333333333336], [1.68548004E12, 24.159563924677926], [1.68547938E12, 9.512195121951219], [1.68548034E12, 8.72872340425532], [1.68547968E12, 17.040816326530617]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68548046E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 118.94736842105263, "minX": 1.0, "maxY": 39554.90909090909, "series": [{"data": [[2.0, 455.0], [3.0, 9182.333333333334], [4.0, 2811.25], [5.0, 4013.11428571428], [6.0, 17418.5], [7.0, 2642.6666666666665], [8.0, 17419.571428571428], [9.0, 22620.25], [10.0, 3493.630434782608], [11.0, 2594.1052631578946], [12.0, 3736.181818181818], [13.0, 14776.100000000002], [14.0, 10928.5], [15.0, 3897.2878787878753], [1.0, 3728.0], [16.0, 20351.5], [17.0, 36580.58333333333], [18.0, 12807.88888888889], [19.0, 10031.0], [20.0, 1759.4541284403674], [21.0, 376.59999999999997], [22.0, 7561.823529411766], [23.0, 435.7307692307692], [24.0, 374.375], [25.0, 7271.511848341222]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[17.476371308016912, 4040.845991561196]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 193.0], [3.0, 8811.666666666666], [4.0, 3287.8333333333335], [5.0, 3721.956834532377], [6.0, 17063.25], [7.0, 2905.0000000000005], [8.0, 19965.666666666664], [9.0, 29728.333333333332], [10.0, 3250.2897196261674], [11.0, 2441.3333333333335], [12.0, 3858.400000000001], [13.0, 16132.666666666666], [14.0, 11664.09090909091], [15.0, 3678.3240506329166], [1.0, 3402.0], [16.0, 20139.333333333332], [17.0, 39554.90909090909], [18.0, 13067.176470588236], [19.0, 11122.5], [20.0, 1538.990815154992], [21.0, 118.94736842105263], [22.0, 7743.75], [23.0, 130.64000000000001], [24.0, 123.52173913043482], [25.0, 7006.285035629462]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[17.511073253833057, 3825.284071550267]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 335.0], [3.0, 363.75], [4.0, 367.8571428571429], [5.0, 322.95714285714286], [6.0, 382.75], [7.0, 251.83333333333334], [8.0, 277.8571428571429], [9.0, 353.2], [10.0, 252.9156250000002], [11.0, 243.76190476190473], [12.0, 283.1], [13.0, 285.00000000000006], [14.0, 303.83333333333337], [15.0, 228.88442211055283], [1.0, 367.6666666666667], [16.0, 259.0], [17.0, 341.61538461538464], [18.0, 436.94736842105266], [19.0, 500.0], [20.0, 219.71543778801833], [21.0, 285.04761904761904], [22.0, 310.95], [23.0, 312.45833333333337], [24.0, 273.6666666666667], [25.0, 276.5059382422805]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[17.46416526138286, 251.11762225969608]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 315.73333333333335, "minX": 1.68547914E12, "maxY": 49571.9, "series": [{"data": [[1.68547998E12, 2464.4166666666665], [1.68547932E12, 1062.8333333333333], [1.68548028E12, 3610.016666666667], [1.68547962E12, 1761.2], [1.68547992E12, 3190.133333333333], [1.68547926E12, 807.2166666666667], [1.68548022E12, 4979.333333333333], [1.68547956E12, 2640.983333333333], [1.68547986E12, 3893.2833333333333], [1.6854792E12, 1099.9333333333334], [1.68548016E12, 6043.1], [1.6854795E12, 2199.983333333333], [1.68548046E12, 463.98333333333335], [1.6854798E12, 6034.383333333333], [1.68547914E12, 329.0], [1.6854801E12, 6948.433333333333], [1.68547944E12, 1874.25], [1.6854804E12, 1573.0166666666667], [1.68547974E12, 1145.55], [1.68548004E12, 7469.5], [1.68547938E12, 875.1166666666667], [1.68548034E12, 2840.483333333333], [1.68547968E12, 1531.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68547998E12, 11204.433333333332], [1.68547932E12, 1630.6], [1.68548028E12, 24106.216666666667], [1.68547962E12, 3778.4666666666667], [1.68547992E12, 13773.066666666668], [1.68547926E12, 1589.7333333333333], [1.68548022E12, 30379.383333333335], [1.68547956E12, 4699.15], [1.68547986E12, 21925.783333333333], [1.6854792E12, 1937.8], [1.68548016E12, 40233.333333333336], [1.6854795E12, 7500.466666666666], [1.68548046E12, 2805.85], [1.6854798E12, 35446.416666666664], [1.68547914E12, 315.73333333333335], [1.6854801E12, 44507.933333333334], [1.68547944E12, 6566.633333333333], [1.6854804E12, 10122.066666666668], [1.68547974E12, 4317.966666666666], [1.68548004E12, 49571.9], [1.68547938E12, 1715.05], [1.68548034E12, 20117.416666666668], [1.68547968E12, 4207.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68548046E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 105.80597014925374, "minX": 1.68547914E12, "maxY": 33186.161290322576, "series": [{"data": [[1.68547998E12, 15788.039999999985], [1.68547932E12, 23905.666666666668], [1.68548028E12, 368.46250000000015], [1.68547962E12, 28553.318181818184], [1.68547992E12, 12825.87628865979], [1.68547926E12, 18042.125000000004], [1.68548022E12, 323.2207207207208], [1.68547956E12, 21294.28125], [1.68547986E12, 1327.3100775193802], [1.6854792E12, 15466.384615384613], [1.68548016E12, 311.62030075187965], [1.6854795E12, 8223.830188679245], [1.68548046E12, 417.49999999999994], [1.6854798E12, 2934.131386861312], [1.68547914E12, 8632.75], [1.6854801E12, 316.3672131147542], [1.68547944E12, 11737.9], [1.6854804E12, 471.3768115942029], [1.68547974E12, 18708.121212121212], [1.68548004E12, 1928.0802292263625], [1.68547938E12, 28884.230769230766], [1.68548034E12, 333.312], [1.68547968E12, 30684.000000000015]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68547998E12, 16164.75675675676], [1.68547932E12, 21004.846153846152], [1.68548028E12, 137.34591194968553], [1.68547962E12, 28407.250000000004], [1.68547992E12, 12295.60416666666], [1.68547926E12, 17098.090909090908], [1.68548022E12, 108.36986301369863], [1.68547956E12, 20425.342857142852], [1.68547986E12, 965.4965517241382], [1.6854792E12, 14452.285714285712], [1.68548016E12, 105.80597014925374], [1.6854795E12, 6751.215686274513], [1.68548046E12, 137.45], [1.6854798E12, 3751.835249042145], [1.68547914E12, 8956.666666666666], [1.6854801E12, 107.44951140065143], [1.68547944E12, 12391.458333333334], [1.6854804E12, 148.05714285714288], [1.68547974E12, 12124.433333333336], [1.68548004E12, 1763.869696969696], [1.68547938E12, 27027.30769230769], [1.68548034E12, 110.32539682539681], [1.68547968E12, 33186.161290322576]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68547998E12, 298.7397260273971], [1.68547932E12, 368.31249999999994], [1.68548028E12, 234.55624999999992], [1.68547962E12, 343.3333333333333], [1.68547992E12, 301.4795918367346], [1.68547926E12, 387.09090909090907], [1.68548022E12, 214.9592760180995], [1.68547956E12, 315.97297297297297], [1.68547986E12, 260.03378378378386], [1.6854792E12, 382.0], [1.68548016E12, 207.3947368421052], [1.6854795E12, 310.22222222222223], [1.68548046E12, 312.5238095238095], [1.6854798E12, 225.80842911877414], [1.68547914E12, 368.16666666666663], [1.6854801E12, 208.92508143322456], [1.68547944E12, 299.04166666666663], [1.6854804E12, 325.1594202898551], [1.68547974E12, 393.30303030303025], [1.68548004E12, 253.46363636363614], [1.68547938E12, 369.2666666666667], [1.68548034E12, 224.03199999999995], [1.68547968E12, 420.06060606060606]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68548046E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 105.76865671641784, "minX": 1.68547914E12, "maxY": 33186.161290322576, "series": [{"data": [[1.68547998E12, 15780.8], [1.68547932E12, 23905.55555555555], [1.68548028E12, 368.4312500000001], [1.68547962E12, 28552.36363636363], [1.68547992E12, 12823.989690721648], [1.68547926E12, 18041.9375], [1.68548022E12, 323.1891891891892], [1.68547956E12, 21293.781249999996], [1.68547986E12, 1327.1627906976746], [1.6854792E12, 15466.076923076922], [1.68548016E12, 311.5488721804511], [1.6854795E12, 8223.584905660377], [1.68548046E12, 417.45000000000005], [1.6854798E12, 2934.043795620437], [1.68547914E12, 8629.25], [1.6854801E12, 316.30819672131184], [1.68547944E12, 11737.42], [1.6854804E12, 471.304347826087], [1.68547974E12, 18708.060606060608], [1.68548004E12, 1927.9856733524364], [1.68547938E12, 28883.615384615383], [1.68548034E12, 333.2880000000001], [1.68547968E12, 30683.852941176458]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68547998E12, 16164.71621621622], [1.68547932E12, 21004.76923076923], [1.68548028E12, 137.3207547169811], [1.68547962E12, 28407.208333333332], [1.68547992E12, 12295.552083333328], [1.68547926E12, 17098.0], [1.68548022E12, 108.36073059360733], [1.68547956E12, 20424.97142857142], [1.68547986E12, 965.4206896551726], [1.6854792E12, 14452.142857142857], [1.68548016E12, 105.76865671641784], [1.6854795E12, 6751.058823529411], [1.68548046E12, 137.45], [1.6854798E12, 3751.7816091954023], [1.68547914E12, 8956.333333333334], [1.6854801E12, 107.42671009771992], [1.68547944E12, 12391.250000000002], [1.6854804E12, 147.99999999999994], [1.68547974E12, 12124.433333333336], [1.68548004E12, 1763.8333333333321], [1.68547938E12, 27026.923076923078], [1.68548034E12, 110.30952380952381], [1.68547968E12, 33186.161290322576]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68547998E12, 291.4520547945206], [1.68547932E12, 368.18749999999994], [1.68548028E12, 234.55], [1.68547962E12, 342.75000000000006], [1.68547992E12, 299.55102040816325], [1.68547926E12, 386.90909090909093], [1.68548022E12, 214.9366515837105], [1.68547956E12, 315.6486486486487], [1.68547986E12, 259.95945945945954], [1.6854792E12, 381.81250000000006], [1.68548016E12, 207.36466165413526], [1.6854795E12, 310.1296296296295], [1.68548046E12, 312.4761904761904], [1.6854798E12, 225.77011494252883], [1.68547914E12, 366.1666666666667], [1.6854801E12, 208.88599348534197], [1.68547944E12, 298.7499999999999], [1.6854804E12, 325.1449275362318], [1.68547974E12, 393.30303030303025], [1.68548004E12, 253.42121212121248], [1.68547938E12, 369.1333333333333], [1.68548034E12, 224.01600000000002], [1.68547968E12, 419.969696969697]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68548046E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68547914E12, "maxY": 205.0909090909091, "series": [{"data": [[1.68547998E12, 129.56000000000003], [1.68547932E12, 177.44444444444443], [1.68548028E12, 115.2375], [1.68547962E12, 142.9090909090909], [1.68547992E12, 130.30927835051546], [1.68547926E12, 198.1875], [1.68548022E12, 106.28828828828838], [1.68547956E12, 163.5], [1.68547986E12, 118.32558139534885], [1.6854792E12, 186.6923076923077], [1.68548016E12, 103.00751879699247], [1.6854795E12, 153.15094339622635], [1.68548046E12, 160.95], [1.6854798E12, 109.08394160583946], [1.68547914E12, 155.25], [1.6854801E12, 103.55409836065576], [1.68547944E12, 142.24000000000004], [1.6854804E12, 161.76811594202894], [1.68547974E12, 175.99999999999997], [1.68548004E12, 112.48137535816615], [1.68547938E12, 163.46153846153845], [1.68548034E12, 111.47999999999995], [1.68547968E12, 172.70588235294116]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68547998E12, 0.0], [1.68547932E12, 0.0], [1.68548028E12, 0.0], [1.68547962E12, 0.0], [1.68547992E12, 0.0], [1.68547926E12, 0.0], [1.68548022E12, 0.0], [1.68547956E12, 0.0], [1.68547986E12, 0.0], [1.6854792E12, 0.0], [1.68548016E12, 0.0], [1.6854795E12, 0.0], [1.68548046E12, 0.0], [1.6854798E12, 0.0], [1.68547914E12, 0.0], [1.6854801E12, 0.0], [1.68547944E12, 0.0], [1.6854804E12, 0.0], [1.68547974E12, 0.0], [1.68548004E12, 0.0], [1.68547938E12, 0.0], [1.68548034E12, 0.0], [1.68547968E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68547998E12, 138.64383561643834], [1.68547932E12, 176.93749999999997], [1.68548028E12, 115.23750000000001], [1.68547962E12, 163.83333333333334], [1.68547992E12, 128.0510204081632], [1.68547926E12, 205.0909090909091], [1.68548022E12, 106.29864253393663], [1.68547956E12, 154.8108108108108], [1.68547986E12, 119.95270270270267], [1.6854792E12, 184.18750000000003], [1.68548016E12, 103.01879699248121], [1.6854795E12, 151.74074074074073], [1.68548046E12, 162.95238095238093], [1.6854798E12, 106.36015325670503], [1.68547914E12, 169.33333333333331], [1.6854801E12, 103.54071661237782], [1.68547944E12, 134.06250000000003], [1.6854804E12, 161.7681159420289], [1.68547974E12, 172.06060606060603], [1.68548004E12, 110.15757575757576], [1.68547938E12, 181.6], [1.68548034E12, 111.47999999999998], [1.68547968E12, 173.2121212121212]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68548046E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 207.0, "minX": 1.68547914E12, "maxY": 52760.0, "series": [{"data": [[1.68547998E12, 51518.0], [1.68547932E12, 29441.0], [1.68547962E12, 50683.0], [1.68547992E12, 31563.0], [1.68547926E12, 22474.0], [1.68547956E12, 31968.0], [1.68547986E12, 31078.0], [1.6854792E12, 23789.0], [1.6854795E12, 32971.0], [1.6854798E12, 601.0], [1.68547914E12, 10439.0], [1.68547944E12, 52760.0], [1.68547974E12, 43868.0], [1.68547938E12, 44763.0], [1.68547968E12, 27806.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68547998E12, 33847.4], [1.68547932E12, 23468.0], [1.68547962E12, 41888.8], [1.68547992E12, 29698.6], [1.68547926E12, 21713.5], [1.68547956E12, 25968.000000000004], [1.68547986E12, 30713.0], [1.6854792E12, 19096.2], [1.6854795E12, 27793.39999999999], [1.6854798E12, 601.0], [1.68547914E12, 10439.0], [1.68547944E12, 49964.6], [1.68547974E12, 39808.799999999996], [1.68547938E12, 39934.2], [1.68547968E12, 24119.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68547998E12, 51518.0], [1.68547932E12, 29441.0], [1.68547962E12, 50683.0], [1.68547992E12, 31563.0], [1.68547926E12, 22474.0], [1.68547956E12, 31968.0], [1.68547986E12, 31078.0], [1.6854792E12, 23789.0], [1.6854795E12, 32971.0], [1.6854798E12, 601.0], [1.68547914E12, 10439.0], [1.68547944E12, 52760.0], [1.68547974E12, 43868.0], [1.68547938E12, 44763.0], [1.68547968E12, 27806.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68547998E12, 44899.49999999997], [1.68547932E12, 26951.0], [1.68547962E12, 49294.35], [1.68547992E12, 30272.35], [1.68547926E12, 22371.85], [1.68547956E12, 30199.799999999996], [1.68547986E12, 31042.2], [1.6854792E12, 22068.05], [1.6854795E12, 29055.649999999998], [1.6854798E12, 601.0], [1.68547914E12, 10439.0], [1.68547944E12, 51281.6], [1.68547974E12, 43868.0], [1.68547938E12, 44474.549999999996], [1.68547968E12, 26531.999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68547998E12, 213.0], [1.68547932E12, 294.0], [1.68547962E12, 210.0], [1.68547992E12, 214.0], [1.68547926E12, 304.0], [1.68547956E12, 207.0], [1.68547986E12, 208.0], [1.6854792E12, 302.0], [1.6854795E12, 210.0], [1.6854798E12, 250.0], [1.68547914E12, 292.0], [1.68547944E12, 216.0], [1.68547974E12, 224.0], [1.68547938E12, 224.0], [1.68547968E12, 217.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68547998E12, 308.0], [1.68547932E12, 409.0], [1.68547962E12, 4218.5], [1.68547992E12, 349.5], [1.68547926E12, 4611.0], [1.68547956E12, 409.5], [1.68547986E12, 371.0], [1.6854792E12, 458.0], [1.6854795E12, 407.5], [1.6854798E12, 495.0], [1.68547914E12, 402.0], [1.68547944E12, 19248.0], [1.68547974E12, 32145.0], [1.68547938E12, 12609.0], [1.68547968E12, 408.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68547998E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 1.0, "maxY": 8242.0, "series": [{"data": [[2.0, 409.0], [8.0, 343.5], [32.0, 254.0], [9.0, 372.0], [10.0, 8242.0], [11.0, 306.0], [3.0, 408.0], [12.0, 400.0], [15.0, 315.0], [1.0, 504.0], [4.0, 414.5], [5.0, 406.0], [6.0, 408.0], [7.0, 229.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 208.0], [8.0, 205.0], [32.0, 256.0], [9.0, 205.0], [10.0, 173.0], [11.0, 205.0], [3.0, 206.0], [12.0, 197.0], [13.0, 167.0], [14.0, 181.0], [15.0, 205.0], [1.0, 197.0], [4.0, 204.5], [16.0, 112.0], [17.0, 204.5], [18.0, 206.0], [19.0, 109.0], [5.0, 203.0], [20.0, 205.5], [22.0, 411.5], [6.0, 205.0], [7.0, 204.0], [30.0, 210.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 108.5, "minX": 1.0, "maxY": 8242.0, "series": [{"data": [[2.0, 409.0], [8.0, 343.5], [32.0, 251.5], [9.0, 372.0], [10.0, 8242.0], [11.0, 306.0], [3.0, 408.0], [12.0, 400.0], [15.0, 314.0], [1.0, 504.0], [4.0, 414.0], [5.0, 405.5], [6.0, 408.0], [7.0, 226.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 208.0], [8.0, 204.5], [32.0, 256.0], [9.0, 205.0], [10.0, 173.0], [11.0, 205.0], [3.0, 206.0], [12.0, 197.0], [13.0, 167.0], [14.0, 181.0], [15.0, 205.0], [1.0, 197.0], [4.0, 204.5], [16.0, 112.0], [17.0, 204.5], [18.0, 206.0], [19.0, 108.5], [5.0, 203.0], [20.0, 205.5], [22.0, 411.5], [6.0, 205.0], [7.0, 204.0], [30.0, 210.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.68547914E12, "maxY": 10.683333333333334, "series": [{"data": [[1.68547998E12, 2.4166666666666665], [1.68547932E12, 0.5166666666666667], [1.68548028E12, 5.3], [1.68547962E12, 0.7833333333333333], [1.68547992E12, 3.283333333333333], [1.68547926E12, 0.38333333333333336], [1.68548022E12, 7.3], [1.68547956E12, 1.2333333333333334], [1.68547986E12, 5.166666666666667], [1.6854792E12, 0.5333333333333333], [1.68548016E12, 8.933333333333334], [1.6854795E12, 1.85], [1.68548046E12, 0.6666666666666666], [1.6854798E12, 8.433333333333334], [1.68547914E12, 0.18333333333333332], [1.6854801E12, 10.233333333333333], [1.68547944E12, 1.55], [1.6854804E12, 2.3333333333333335], [1.68547974E12, 1.1666666666666667], [1.68548004E12, 10.683333333333334], [1.68547938E12, 0.5], [1.68548034E12, 4.183333333333334], [1.68547968E12, 1.0333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68548046E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68547914E12, "maxY": 10.966666666666667, "series": [{"data": [[1.68547998E12, 0.55], [1.68547932E12, 0.48333333333333334], [1.68547962E12, 0.8], [1.68547992E12, 0.6666666666666666], [1.68547926E12, 0.36666666666666664], [1.68547956E12, 1.2], [1.68547986E12, 0.38333333333333336], [1.6854792E12, 0.5], [1.6854795E12, 0.6666666666666666], [1.6854798E12, 0.08333333333333333], [1.68547914E12, 0.15], [1.68547944E12, 0.5166666666666667], [1.68547974E12, 0.2833333333333333], [1.68547938E12, 0.36666666666666664], [1.68547968E12, 0.5333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68547998E12, 0.13333333333333333], [1.68547992E12, 0.05]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68547998E12, 1.6], [1.68548028E12, 5.316666666666666], [1.68547992E12, 2.3333333333333335], [1.68548022E12, 7.333333333333333], [1.68547986E12, 4.5], [1.68548016E12, 8.9], [1.6854795E12, 1.0833333333333333], [1.68548046E12, 0.6833333333333333], [1.6854798E12, 8.466666666666667], [1.6854801E12, 10.233333333333333], [1.68547944E12, 1.0833333333333333], [1.6854804E12, 2.316666666666667], [1.68547974E12, 0.7666666666666667], [1.68548004E12, 10.966666666666667], [1.68547938E12, 0.1], [1.68548034E12, 4.183333333333334], [1.68547968E12, 0.31666666666666665]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68547998E12, 0.16666666666666666], [1.6854798E12, 0.15], [1.68547992E12, 0.18333333333333332], [1.68548004E12, 0.03333333333333333], [1.68547968E12, 0.21666666666666667]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68548046E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68547914E12, "maxY": 5.816666666666666, "series": [{"data": [[1.68547998E12, 0.48333333333333334], [1.68547932E12, 0.26666666666666666], [1.68547962E12, 0.4], [1.68547992E12, 0.5833333333333334], [1.68547926E12, 0.18333333333333332], [1.68547956E12, 0.6166666666666667], [1.68547986E12, 0.31666666666666665], [1.6854792E12, 0.26666666666666666], [1.6854795E12, 0.4], [1.6854798E12, 0.08333333333333333], [1.68547914E12, 0.1], [1.68547944E12, 0.23333333333333334], [1.68547974E12, 0.11666666666666667], [1.68547938E12, 0.18333333333333332], [1.68547968E12, 0.43333333333333335]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68547998E12, 0.7333333333333333], [1.68548028E12, 2.6666666666666665], [1.68547992E12, 1.05], [1.68548022E12, 3.683333333333333], [1.68547986E12, 2.15], [1.68548016E12, 4.433333333333334], [1.6854795E12, 0.5], [1.68548046E12, 0.35], [1.6854798E12, 4.266666666666667], [1.6854801E12, 5.116666666666666], [1.68547944E12, 0.5666666666666667], [1.6854804E12, 1.15], [1.68547974E12, 0.43333333333333335], [1.68548004E12, 5.5], [1.68547938E12, 0.06666666666666667], [1.68548034E12, 2.0833333333333335], [1.68547968E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68547998E12, 1.1666666666666667], [1.68548028E12, 2.65], [1.68547992E12, 1.5166666666666666], [1.68548022E12, 3.65], [1.68547986E12, 2.35], [1.68548016E12, 4.466666666666667], [1.6854795E12, 0.5833333333333334], [1.68548046E12, 0.3333333333333333], [1.6854798E12, 4.35], [1.6854801E12, 5.116666666666666], [1.68547944E12, 0.5166666666666667], [1.6854804E12, 1.1666666666666667], [1.68547974E12, 0.3333333333333333], [1.68548004E12, 5.5], [1.68547938E12, 0.03333333333333333], [1.68548034E12, 2.1], [1.68547968E12, 0.4166666666666667]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68547998E12, 0.016666666666666666], [1.68547932E12, 0.15], [1.68547962E12, 0.36666666666666664], [1.68547992E12, 0.08333333333333333], [1.68547926E12, 0.26666666666666666], [1.68547956E12, 0.48333333333333334], [1.6854792E12, 0.21666666666666667], [1.6854795E12, 0.11666666666666667], [1.68547914E12, 0.06666666666666667], [1.68547944E12, 0.15], [1.68547974E12, 0.13333333333333333], [1.68547938E12, 0.18333333333333332], [1.68547968E12, 0.1]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68547998E12, 1.2333333333333334], [1.68548028E12, 2.6666666666666665], [1.68547992E12, 1.5333333333333334], [1.68548022E12, 3.7], [1.68547956E12, 0.05], [1.68547986E12, 2.15], [1.68548016E12, 4.433333333333334], [1.6854795E12, 0.7666666666666667], [1.68548046E12, 0.3333333333333333], [1.6854798E12, 4.566666666666666], [1.6854801E12, 5.083333333333333], [1.68547944E12, 0.6833333333333333], [1.6854804E12, 1.15], [1.68547974E12, 0.4166666666666667], [1.68548004E12, 5.816666666666666], [1.68547938E12, 0.03333333333333333], [1.68548034E12, 2.0833333333333335], [1.68547968E12, 0.4666666666666667]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68547998E12, 0.06666666666666667], [1.68547932E12, 0.21666666666666667], [1.68547962E12, 0.4], [1.68547992E12, 0.08333333333333333], [1.68547926E12, 0.18333333333333332], [1.68547956E12, 0.5833333333333334], [1.68547986E12, 0.06666666666666667], [1.6854792E12, 0.23333333333333334], [1.6854795E12, 0.26666666666666666], [1.68547914E12, 0.05], [1.68547944E12, 0.2833333333333333], [1.68547974E12, 0.16666666666666666], [1.68547938E12, 0.18333333333333332], [1.68547968E12, 0.1]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68548046E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68547914E12, "maxY": 16.816666666666666, "series": [{"data": [[1.68547998E12, 0.5666666666666667], [1.68547932E12, 0.6333333333333333], [1.68547962E12, 1.1666666666666667], [1.68547992E12, 0.75], [1.68547926E12, 0.6333333333333333], [1.68547956E12, 1.6833333333333333], [1.68547986E12, 0.38333333333333336], [1.6854792E12, 0.7166666666666667], [1.6854795E12, 0.7833333333333333], [1.6854798E12, 0.08333333333333333], [1.68547914E12, 0.21666666666666667], [1.68547944E12, 0.6666666666666666], [1.68547974E12, 0.4166666666666667], [1.68547938E12, 0.55], [1.68547968E12, 0.6333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68547998E12, 3.1333333333333333], [1.68548028E12, 7.983333333333333], [1.68547992E12, 4.1], [1.68548022E12, 11.033333333333333], [1.68547956E12, 0.05], [1.68547986E12, 6.65], [1.68548016E12, 13.333333333333334], [1.6854795E12, 1.85], [1.68548046E12, 1.0166666666666666], [1.6854798E12, 13.183333333333334], [1.6854801E12, 15.316666666666666], [1.68547944E12, 1.7666666666666666], [1.6854804E12, 3.466666666666667], [1.68547974E12, 1.1833333333333333], [1.68548004E12, 16.816666666666666], [1.68547938E12, 0.13333333333333333], [1.68548034E12, 6.266666666666667], [1.68547968E12, 1.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68548046E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

