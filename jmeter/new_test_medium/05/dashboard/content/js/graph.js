/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 102.0, "minX": 0.0, "maxY": 60772.0, "series": [{"data": [[0.0, 205.0], [0.1, 206.0], [0.2, 206.0], [0.3, 208.0], [0.4, 211.0], [0.5, 217.0], [0.6, 306.0], [0.7, 307.0], [0.8, 307.0], [0.9, 307.0], [1.0, 307.0], [1.1, 308.0], [1.2, 308.0], [1.3, 308.0], [1.4, 308.0], [1.5, 308.0], [1.6, 308.0], [1.7, 308.0], [1.8, 308.0], [1.9, 308.0], [2.0, 308.0], [2.1, 308.0], [2.2, 308.0], [2.3, 308.0], [2.4, 308.0], [2.5, 309.0], [2.6, 309.0], [2.7, 309.0], [2.8, 309.0], [2.9, 309.0], [3.0, 309.0], [3.1, 309.0], [3.2, 309.0], [3.3, 309.0], [3.4, 309.0], [3.5, 309.0], [3.6, 309.0], [3.7, 309.0], [3.8, 309.0], [3.9, 309.0], [4.0, 309.0], [4.1, 309.0], [4.2, 309.0], [4.3, 309.0], [4.4, 309.0], [4.5, 309.0], [4.6, 309.0], [4.7, 309.0], [4.8, 309.0], [4.9, 309.0], [5.0, 309.0], [5.1, 309.0], [5.2, 309.0], [5.3, 309.0], [5.4, 309.0], [5.5, 309.0], [5.6, 309.0], [5.7, 309.0], [5.8, 309.0], [5.9, 309.0], [6.0, 309.0], [6.1, 309.0], [6.2, 309.0], [6.3, 309.0], [6.4, 309.0], [6.5, 309.0], [6.6, 309.0], [6.7, 310.0], [6.8, 310.0], [6.9, 310.0], [7.0, 310.0], [7.1, 310.0], [7.2, 310.0], [7.3, 310.0], [7.4, 310.0], [7.5, 310.0], [7.6, 310.0], [7.7, 310.0], [7.8, 310.0], [7.9, 310.0], [8.0, 310.0], [8.1, 310.0], [8.2, 310.0], [8.3, 310.0], [8.4, 310.0], [8.5, 310.0], [8.6, 310.0], [8.7, 310.0], [8.8, 310.0], [8.9, 310.0], [9.0, 310.0], [9.1, 310.0], [9.2, 310.0], [9.3, 310.0], [9.4, 310.0], [9.5, 310.0], [9.6, 310.0], [9.7, 310.0], [9.8, 310.0], [9.9, 310.0], [10.0, 310.0], [10.1, 310.0], [10.2, 310.0], [10.3, 310.0], [10.4, 310.0], [10.5, 310.0], [10.6, 310.0], [10.7, 310.0], [10.8, 310.0], [10.9, 310.0], [11.0, 310.0], [11.1, 310.0], [11.2, 310.0], [11.3, 310.0], [11.4, 310.0], [11.5, 310.0], [11.6, 310.0], [11.7, 310.0], [11.8, 310.0], [11.9, 310.0], [12.0, 310.0], [12.1, 310.0], [12.2, 310.0], [12.3, 310.0], [12.4, 310.0], [12.5, 310.0], [12.6, 310.0], [12.7, 310.0], [12.8, 310.0], [12.9, 310.0], [13.0, 310.0], [13.1, 310.0], [13.2, 310.0], [13.3, 310.0], [13.4, 310.0], [13.5, 310.0], [13.6, 310.0], [13.7, 310.0], [13.8, 310.0], [13.9, 310.0], [14.0, 310.0], [14.1, 310.0], [14.2, 310.0], [14.3, 310.0], [14.4, 310.0], [14.5, 310.0], [14.6, 311.0], [14.7, 311.0], [14.8, 311.0], [14.9, 311.0], [15.0, 311.0], [15.1, 311.0], [15.2, 311.0], [15.3, 311.0], [15.4, 311.0], [15.5, 311.0], [15.6, 311.0], [15.7, 311.0], [15.8, 311.0], [15.9, 311.0], [16.0, 311.0], [16.1, 311.0], [16.2, 311.0], [16.3, 311.0], [16.4, 311.0], [16.5, 311.0], [16.6, 311.0], [16.7, 311.0], [16.8, 311.0], [16.9, 311.0], [17.0, 311.0], [17.1, 311.0], [17.2, 311.0], [17.3, 311.0], [17.4, 311.0], [17.5, 311.0], [17.6, 311.0], [17.7, 311.0], [17.8, 311.0], [17.9, 311.0], [18.0, 311.0], [18.1, 311.0], [18.2, 311.0], [18.3, 311.0], [18.4, 311.0], [18.5, 311.0], [18.6, 311.0], [18.7, 311.0], [18.8, 311.0], [18.9, 311.0], [19.0, 311.0], [19.1, 311.0], [19.2, 311.0], [19.3, 311.0], [19.4, 311.0], [19.5, 311.0], [19.6, 311.0], [19.7, 311.0], [19.8, 311.0], [19.9, 311.0], [20.0, 311.0], [20.1, 311.0], [20.2, 311.0], [20.3, 311.0], [20.4, 311.0], [20.5, 311.0], [20.6, 311.0], [20.7, 311.0], [20.8, 311.0], [20.9, 311.0], [21.0, 311.0], [21.1, 311.0], [21.2, 311.0], [21.3, 311.0], [21.4, 311.0], [21.5, 311.0], [21.6, 311.0], [21.7, 311.0], [21.8, 311.0], [21.9, 311.0], [22.0, 311.0], [22.1, 311.0], [22.2, 311.0], [22.3, 311.0], [22.4, 311.0], [22.5, 311.0], [22.6, 311.0], [22.7, 311.0], [22.8, 311.0], [22.9, 311.0], [23.0, 311.0], [23.1, 311.0], [23.2, 311.0], [23.3, 311.0], [23.4, 311.0], [23.5, 311.0], [23.6, 311.0], [23.7, 311.0], [23.8, 311.0], [23.9, 311.0], [24.0, 311.0], [24.1, 311.0], [24.2, 311.0], [24.3, 311.0], [24.4, 311.0], [24.5, 311.0], [24.6, 311.0], [24.7, 312.0], [24.8, 312.0], [24.9, 312.0], [25.0, 312.0], [25.1, 312.0], [25.2, 312.0], [25.3, 312.0], [25.4, 312.0], [25.5, 312.0], [25.6, 312.0], [25.7, 312.0], [25.8, 312.0], [25.9, 312.0], [26.0, 312.0], [26.1, 312.0], [26.2, 312.0], [26.3, 312.0], [26.4, 312.0], [26.5, 312.0], [26.6, 312.0], [26.7, 312.0], [26.8, 312.0], [26.9, 312.0], [27.0, 312.0], [27.1, 312.0], [27.2, 312.0], [27.3, 312.0], [27.4, 312.0], [27.5, 312.0], [27.6, 312.0], [27.7, 312.0], [27.8, 312.0], [27.9, 312.0], [28.0, 312.0], [28.1, 312.0], [28.2, 312.0], [28.3, 312.0], [28.4, 312.0], [28.5, 312.0], [28.6, 312.0], [28.7, 312.0], [28.8, 312.0], [28.9, 312.0], [29.0, 312.0], [29.1, 312.0], [29.2, 312.0], [29.3, 312.0], [29.4, 312.0], [29.5, 312.0], [29.6, 312.0], [29.7, 312.0], [29.8, 312.0], [29.9, 312.0], [30.0, 312.0], [30.1, 312.0], [30.2, 312.0], [30.3, 312.0], [30.4, 312.0], [30.5, 312.0], [30.6, 312.0], [30.7, 312.0], [30.8, 312.0], [30.9, 312.0], [31.0, 312.0], [31.1, 312.0], [31.2, 312.0], [31.3, 312.0], [31.4, 312.0], [31.5, 312.0], [31.6, 312.0], [31.7, 312.0], [31.8, 312.0], [31.9, 312.0], [32.0, 312.0], [32.1, 312.0], [32.2, 312.0], [32.3, 312.0], [32.4, 312.0], [32.5, 312.0], [32.6, 312.0], [32.7, 312.0], [32.8, 312.0], [32.9, 312.0], [33.0, 312.0], [33.1, 312.0], [33.2, 312.0], [33.3, 312.0], [33.4, 312.0], [33.5, 312.0], [33.6, 312.0], [33.7, 312.0], [33.8, 312.0], [33.9, 312.0], [34.0, 312.0], [34.1, 312.0], [34.2, 312.0], [34.3, 312.0], [34.4, 312.0], [34.5, 312.0], [34.6, 312.0], [34.7, 312.0], [34.8, 312.0], [34.9, 312.0], [35.0, 312.0], [35.1, 312.0], [35.2, 312.0], [35.3, 312.0], [35.4, 312.0], [35.5, 312.0], [35.6, 312.0], [35.7, 312.0], [35.8, 312.0], [35.9, 312.0], [36.0, 312.0], [36.1, 312.0], [36.2, 312.0], [36.3, 312.0], [36.4, 312.0], [36.5, 312.0], [36.6, 312.0], [36.7, 312.0], [36.8, 312.0], [36.9, 312.0], [37.0, 313.0], [37.1, 313.0], [37.2, 313.0], [37.3, 313.0], [37.4, 313.0], [37.5, 313.0], [37.6, 313.0], [37.7, 313.0], [37.8, 313.0], [37.9, 313.0], [38.0, 313.0], [38.1, 313.0], [38.2, 313.0], [38.3, 313.0], [38.4, 313.0], [38.5, 313.0], [38.6, 313.0], [38.7, 313.0], [38.8, 313.0], [38.9, 313.0], [39.0, 313.0], [39.1, 313.0], [39.2, 313.0], [39.3, 313.0], [39.4, 313.0], [39.5, 313.0], [39.6, 313.0], [39.7, 313.0], [39.8, 313.0], [39.9, 313.0], [40.0, 313.0], [40.1, 313.0], [40.2, 313.0], [40.3, 313.0], [40.4, 313.0], [40.5, 313.0], [40.6, 313.0], [40.7, 313.0], [40.8, 313.0], [40.9, 313.0], [41.0, 313.0], [41.1, 313.0], [41.2, 313.0], [41.3, 313.0], [41.4, 313.0], [41.5, 313.0], [41.6, 313.0], [41.7, 313.0], [41.8, 313.0], [41.9, 313.0], [42.0, 313.0], [42.1, 313.0], [42.2, 313.0], [42.3, 313.0], [42.4, 313.0], [42.5, 313.0], [42.6, 313.0], [42.7, 313.0], [42.8, 313.0], [42.9, 313.0], [43.0, 313.0], [43.1, 313.0], [43.2, 313.0], [43.3, 313.0], [43.4, 313.0], [43.5, 313.0], [43.6, 313.0], [43.7, 313.0], [43.8, 313.0], [43.9, 313.0], [44.0, 313.0], [44.1, 313.0], [44.2, 313.0], [44.3, 313.0], [44.4, 313.0], [44.5, 313.0], [44.6, 313.0], [44.7, 313.0], [44.8, 313.0], [44.9, 313.0], [45.0, 313.0], [45.1, 313.0], [45.2, 313.0], [45.3, 313.0], [45.4, 313.0], [45.5, 313.0], [45.6, 313.0], [45.7, 313.0], [45.8, 313.0], [45.9, 313.0], [46.0, 313.0], [46.1, 313.0], [46.2, 313.0], [46.3, 313.0], [46.4, 313.0], [46.5, 313.0], [46.6, 313.0], [46.7, 313.0], [46.8, 313.0], [46.9, 313.0], [47.0, 313.0], [47.1, 313.0], [47.2, 313.0], [47.3, 313.0], [47.4, 313.0], [47.5, 314.0], [47.6, 314.0], [47.7, 314.0], [47.8, 314.0], [47.9, 314.0], [48.0, 314.0], [48.1, 314.0], [48.2, 314.0], [48.3, 314.0], [48.4, 314.0], [48.5, 314.0], [48.6, 314.0], [48.7, 314.0], [48.8, 314.0], [48.9, 314.0], [49.0, 314.0], [49.1, 314.0], [49.2, 314.0], [49.3, 314.0], [49.4, 314.0], [49.5, 314.0], [49.6, 314.0], [49.7, 314.0], [49.8, 314.0], [49.9, 314.0], [50.0, 314.0], [50.1, 314.0], [50.2, 314.0], [50.3, 314.0], [50.4, 314.0], [50.5, 314.0], [50.6, 314.0], [50.7, 314.0], [50.8, 314.0], [50.9, 314.0], [51.0, 314.0], [51.1, 314.0], [51.2, 314.0], [51.3, 314.0], [51.4, 314.0], [51.5, 314.0], [51.6, 314.0], [51.7, 314.0], [51.8, 314.0], [51.9, 314.0], [52.0, 314.0], [52.1, 314.0], [52.2, 314.0], [52.3, 314.0], [52.4, 314.0], [52.5, 314.0], [52.6, 314.0], [52.7, 314.0], [52.8, 314.0], [52.9, 314.0], [53.0, 314.0], [53.1, 314.0], [53.2, 314.0], [53.3, 314.0], [53.4, 314.0], [53.5, 314.0], [53.6, 314.0], [53.7, 314.0], [53.8, 314.0], [53.9, 314.0], [54.0, 314.0], [54.1, 314.0], [54.2, 314.0], [54.3, 314.0], [54.4, 314.0], [54.5, 314.0], [54.6, 314.0], [54.7, 314.0], [54.8, 314.0], [54.9, 314.0], [55.0, 314.0], [55.1, 314.0], [55.2, 314.0], [55.3, 314.0], [55.4, 314.0], [55.5, 314.0], [55.6, 314.0], [55.7, 314.0], [55.8, 314.0], [55.9, 314.0], [56.0, 314.0], [56.1, 314.0], [56.2, 314.0], [56.3, 314.0], [56.4, 314.0], [56.5, 314.0], [56.6, 314.0], [56.7, 314.0], [56.8, 314.0], [56.9, 314.0], [57.0, 314.0], [57.1, 315.0], [57.2, 315.0], [57.3, 315.0], [57.4, 315.0], [57.5, 315.0], [57.6, 315.0], [57.7, 315.0], [57.8, 315.0], [57.9, 315.0], [58.0, 315.0], [58.1, 315.0], [58.2, 315.0], [58.3, 315.0], [58.4, 315.0], [58.5, 315.0], [58.6, 315.0], [58.7, 315.0], [58.8, 315.0], [58.9, 315.0], [59.0, 315.0], [59.1, 315.0], [59.2, 315.0], [59.3, 315.0], [59.4, 315.0], [59.5, 315.0], [59.6, 315.0], [59.7, 315.0], [59.8, 315.0], [59.9, 315.0], [60.0, 315.0], [60.1, 315.0], [60.2, 315.0], [60.3, 315.0], [60.4, 315.0], [60.5, 315.0], [60.6, 315.0], [60.7, 315.0], [60.8, 315.0], [60.9, 315.0], [61.0, 315.0], [61.1, 315.0], [61.2, 315.0], [61.3, 315.0], [61.4, 315.0], [61.5, 315.0], [61.6, 315.0], [61.7, 315.0], [61.8, 315.0], [61.9, 315.0], [62.0, 315.0], [62.1, 315.0], [62.2, 315.0], [62.3, 315.0], [62.4, 315.0], [62.5, 315.0], [62.6, 315.0], [62.7, 315.0], [62.8, 315.0], [62.9, 315.0], [63.0, 315.0], [63.1, 315.0], [63.2, 315.0], [63.3, 315.0], [63.4, 315.0], [63.5, 315.0], [63.6, 315.0], [63.7, 315.0], [63.8, 315.0], [63.9, 315.0], [64.0, 315.0], [64.1, 316.0], [64.2, 316.0], [64.3, 316.0], [64.4, 316.0], [64.5, 316.0], [64.6, 316.0], [64.7, 316.0], [64.8, 316.0], [64.9, 316.0], [65.0, 316.0], [65.1, 316.0], [65.2, 316.0], [65.3, 316.0], [65.4, 316.0], [65.5, 316.0], [65.6, 316.0], [65.7, 316.0], [65.8, 316.0], [65.9, 316.0], [66.0, 316.0], [66.1, 316.0], [66.2, 316.0], [66.3, 316.0], [66.4, 316.0], [66.5, 316.0], [66.6, 316.0], [66.7, 316.0], [66.8, 316.0], [66.9, 316.0], [67.0, 316.0], [67.1, 316.0], [67.2, 316.0], [67.3, 316.0], [67.4, 316.0], [67.5, 316.0], [67.6, 316.0], [67.7, 316.0], [67.8, 316.0], [67.9, 316.0], [68.0, 316.0], [68.1, 316.0], [68.2, 316.0], [68.3, 316.0], [68.4, 316.0], [68.5, 316.0], [68.6, 317.0], [68.7, 317.0], [68.8, 317.0], [68.9, 317.0], [69.0, 317.0], [69.1, 317.0], [69.2, 317.0], [69.3, 317.0], [69.4, 317.0], [69.5, 317.0], [69.6, 317.0], [69.7, 317.0], [69.8, 317.0], [69.9, 317.0], [70.0, 317.0], [70.1, 317.0], [70.2, 317.0], [70.3, 317.0], [70.4, 317.0], [70.5, 317.0], [70.6, 317.0], [70.7, 317.0], [70.8, 317.0], [70.9, 317.0], [71.0, 317.0], [71.1, 317.0], [71.2, 317.0], [71.3, 317.0], [71.4, 317.0], [71.5, 317.0], [71.6, 317.0], [71.7, 317.0], [71.8, 317.0], [71.9, 317.0], [72.0, 317.0], [72.1, 318.0], [72.2, 318.0], [72.3, 318.0], [72.4, 318.0], [72.5, 318.0], [72.6, 318.0], [72.7, 318.0], [72.8, 318.0], [72.9, 318.0], [73.0, 318.0], [73.1, 318.0], [73.2, 318.0], [73.3, 318.0], [73.4, 318.0], [73.5, 318.0], [73.6, 318.0], [73.7, 318.0], [73.8, 318.0], [73.9, 318.0], [74.0, 318.0], [74.1, 318.0], [74.2, 319.0], [74.3, 319.0], [74.4, 319.0], [74.5, 319.0], [74.6, 319.0], [74.7, 319.0], [74.8, 319.0], [74.9, 319.0], [75.0, 319.0], [75.1, 319.0], [75.2, 319.0], [75.3, 319.0], [75.4, 319.0], [75.5, 319.0], [75.6, 319.0], [75.7, 319.0], [75.8, 319.0], [75.9, 320.0], [76.0, 320.0], [76.1, 320.0], [76.2, 320.0], [76.3, 320.0], [76.4, 320.0], [76.5, 320.0], [76.6, 320.0], [76.7, 320.0], [76.8, 320.0], [76.9, 320.0], [77.0, 320.0], [77.1, 320.0], [77.2, 321.0], [77.3, 321.0], [77.4, 321.0], [77.5, 321.0], [77.6, 321.0], [77.7, 321.0], [77.8, 321.0], [77.9, 321.0], [78.0, 321.0], [78.1, 321.0], [78.2, 321.0], [78.3, 321.0], [78.4, 322.0], [78.5, 322.0], [78.6, 322.0], [78.7, 322.0], [78.8, 322.0], [78.9, 322.0], [79.0, 323.0], [79.1, 323.0], [79.2, 323.0], [79.3, 323.0], [79.4, 323.0], [79.5, 324.0], [79.6, 324.0], [79.7, 324.0], [79.8, 324.0], [79.9, 325.0], [80.0, 325.0], [80.1, 325.0], [80.2, 325.0], [80.3, 325.0], [80.4, 326.0], [80.5, 326.0], [80.6, 326.0], [80.7, 327.0], [80.8, 327.0], [80.9, 327.0], [81.0, 328.0], [81.1, 328.0], [81.2, 329.0], [81.3, 329.0], [81.4, 330.0], [81.5, 330.0], [81.6, 331.0], [81.7, 331.0], [81.8, 332.0], [81.9, 332.0], [82.0, 333.0], [82.1, 333.0], [82.2, 334.0], [82.3, 334.0], [82.4, 334.0], [82.5, 335.0], [82.6, 335.0], [82.7, 336.0], [82.8, 336.0], [82.9, 337.0], [83.0, 338.0], [83.1, 338.0], [83.2, 339.0], [83.3, 339.0], [83.4, 340.0], [83.5, 341.0], [83.6, 342.0], [83.7, 343.0], [83.8, 344.0], [83.9, 346.0], [84.0, 347.0], [84.1, 348.0], [84.2, 350.0], [84.3, 352.0], [84.4, 352.0], [84.5, 353.0], [84.6, 354.0], [84.7, 355.0], [84.8, 358.0], [84.9, 362.0], [85.0, 363.0], [85.1, 365.0], [85.2, 365.0], [85.3, 366.0], [85.4, 368.0], [85.5, 373.0], [85.6, 376.0], [85.7, 378.0], [85.8, 380.0], [85.9, 385.0], [86.0, 386.0], [86.1, 388.0], [86.2, 389.0], [86.3, 390.0], [86.4, 393.0], [86.5, 398.0], [86.6, 401.0], [86.7, 404.0], [86.8, 406.0], [86.9, 408.0], [87.0, 409.0], [87.1, 410.0], [87.2, 411.0], [87.3, 411.0], [87.4, 412.0], [87.5, 412.0], [87.6, 413.0], [87.7, 415.0], [87.8, 416.0], [87.9, 418.0], [88.0, 420.0], [88.1, 423.0], [88.2, 426.0], [88.3, 426.0], [88.4, 428.0], [88.5, 429.0], [88.6, 433.0], [88.7, 433.0], [88.8, 437.0], [88.9, 438.0], [89.0, 441.0], [89.1, 442.0], [89.2, 447.0], [89.3, 454.0], [89.4, 462.0], [89.5, 465.0], [89.6, 469.0], [89.7, 471.0], [89.8, 475.0], [89.9, 477.0], [90.0, 479.0], [90.1, 481.0], [90.2, 482.0], [90.3, 492.0], [90.4, 494.0], [90.5, 496.0], [90.6, 503.0], [90.7, 507.0], [90.8, 508.0], [90.9, 510.0], [91.0, 512.0], [91.1, 513.0], [91.2, 513.0], [91.3, 514.0], [91.4, 514.0], [91.5, 515.0], [91.6, 515.0], [91.7, 517.0], [91.8, 518.0], [91.9, 520.0], [92.0, 521.0], [92.1, 525.0], [92.2, 526.0], [92.3, 528.0], [92.4, 529.0], [92.5, 532.0], [92.6, 536.0], [92.7, 539.0], [92.8, 541.0], [92.9, 547.0], [93.0, 548.0], [93.1, 550.0], [93.2, 551.0], [93.3, 554.0], [93.4, 558.0], [93.5, 559.0], [93.6, 562.0], [93.7, 564.0], [93.8, 569.0], [93.9, 573.0], [94.0, 580.0], [94.1, 581.0], [94.2, 584.0], [94.3, 590.0], [94.4, 595.0], [94.5, 598.0], [94.6, 604.0], [94.7, 605.0], [94.8, 607.0], [94.9, 609.0], [95.0, 620.0], [95.1, 664.0], [95.2, 862.0], [95.3, 4111.0], [95.4, 7315.0], [95.5, 7748.0], [95.6, 8890.0], [95.7, 9922.0], [95.8, 11535.0], [95.9, 12028.0], [96.0, 13448.0], [96.1, 13721.0], [96.2, 14671.0], [96.3, 15503.0], [96.4, 16181.0], [96.5, 16803.0], [96.6, 18142.0], [96.7, 18731.0], [96.8, 19178.0], [96.9, 19561.0], [97.0, 19788.0], [97.1, 20113.0], [97.2, 20693.0], [97.3, 21063.0], [97.4, 21680.0], [97.5, 22096.0], [97.6, 22610.0], [97.7, 22911.0], [97.8, 23050.0], [97.9, 23789.0], [98.0, 24857.0], [98.1, 25689.0], [98.2, 26197.0], [98.3, 27866.0], [98.4, 28631.0], [98.5, 29713.0], [98.6, 30995.0], [98.7, 31760.0], [98.8, 33105.0], [98.9, 35876.0], [99.0, 37694.0], [99.1, 40708.0], [99.2, 41276.0], [99.3, 43278.0], [99.4, 45826.0], [99.5, 48478.0], [99.6, 49669.0], [99.7, 55600.0], [99.8, 56319.0], [99.9, 60587.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 102.0], [0.1, 102.0], [0.2, 102.0], [0.3, 102.0], [0.4, 102.0], [0.5, 102.0], [0.6, 102.0], [0.7, 103.0], [0.8, 103.0], [0.9, 103.0], [1.0, 103.0], [1.1, 103.0], [1.2, 103.0], [1.3, 103.0], [1.4, 103.0], [1.5, 103.0], [1.6, 103.0], [1.7, 103.0], [1.8, 103.0], [1.9, 103.0], [2.0, 103.0], [2.1, 103.0], [2.2, 103.0], [2.3, 103.0], [2.4, 103.0], [2.5, 103.0], [2.6, 103.0], [2.7, 103.0], [2.8, 103.0], [2.9, 103.0], [3.0, 103.0], [3.1, 103.0], [3.2, 103.0], [3.3, 103.0], [3.4, 103.0], [3.5, 103.0], [3.6, 103.0], [3.7, 103.0], [3.8, 103.0], [3.9, 103.0], [4.0, 103.0], [4.1, 103.0], [4.2, 103.0], [4.3, 103.0], [4.4, 103.0], [4.5, 103.0], [4.6, 103.0], [4.7, 103.0], [4.8, 103.0], [4.9, 103.0], [5.0, 103.0], [5.1, 103.0], [5.2, 103.0], [5.3, 103.0], [5.4, 103.0], [5.5, 103.0], [5.6, 103.0], [5.7, 103.0], [5.8, 103.0], [5.9, 103.0], [6.0, 103.0], [6.1, 103.0], [6.2, 103.0], [6.3, 103.0], [6.4, 103.0], [6.5, 103.0], [6.6, 104.0], [6.7, 104.0], [6.8, 104.0], [6.9, 104.0], [7.0, 104.0], [7.1, 104.0], [7.2, 104.0], [7.3, 104.0], [7.4, 104.0], [7.5, 104.0], [7.6, 104.0], [7.7, 104.0], [7.8, 104.0], [7.9, 104.0], [8.0, 104.0], [8.1, 104.0], [8.2, 104.0], [8.3, 104.0], [8.4, 104.0], [8.5, 104.0], [8.6, 104.0], [8.7, 104.0], [8.8, 104.0], [8.9, 104.0], [9.0, 104.0], [9.1, 104.0], [9.2, 104.0], [9.3, 104.0], [9.4, 104.0], [9.5, 104.0], [9.6, 104.0], [9.7, 104.0], [9.8, 104.0], [9.9, 104.0], [10.0, 104.0], [10.1, 104.0], [10.2, 104.0], [10.3, 104.0], [10.4, 104.0], [10.5, 104.0], [10.6, 104.0], [10.7, 104.0], [10.8, 104.0], [10.9, 104.0], [11.0, 104.0], [11.1, 104.0], [11.2, 104.0], [11.3, 104.0], [11.4, 104.0], [11.5, 104.0], [11.6, 104.0], [11.7, 104.0], [11.8, 104.0], [11.9, 104.0], [12.0, 104.0], [12.1, 104.0], [12.2, 104.0], [12.3, 104.0], [12.4, 104.0], [12.5, 104.0], [12.6, 104.0], [12.7, 104.0], [12.8, 104.0], [12.9, 104.0], [13.0, 104.0], [13.1, 104.0], [13.2, 104.0], [13.3, 104.0], [13.4, 104.0], [13.5, 104.0], [13.6, 104.0], [13.7, 104.0], [13.8, 104.0], [13.9, 104.0], [14.0, 104.0], [14.1, 104.0], [14.2, 104.0], [14.3, 104.0], [14.4, 104.0], [14.5, 104.0], [14.6, 104.0], [14.7, 104.0], [14.8, 104.0], [14.9, 104.0], [15.0, 104.0], [15.1, 104.0], [15.2, 104.0], [15.3, 104.0], [15.4, 104.0], [15.5, 104.0], [15.6, 104.0], [15.7, 104.0], [15.8, 104.0], [15.9, 104.0], [16.0, 104.0], [16.1, 104.0], [16.2, 104.0], [16.3, 104.0], [16.4, 104.0], [16.5, 104.0], [16.6, 104.0], [16.7, 104.0], [16.8, 104.0], [16.9, 104.0], [17.0, 104.0], [17.1, 104.0], [17.2, 104.0], [17.3, 104.0], [17.4, 104.0], [17.5, 104.0], [17.6, 104.0], [17.7, 104.0], [17.8, 104.0], [17.9, 104.0], [18.0, 104.0], [18.1, 104.0], [18.2, 104.0], [18.3, 104.0], [18.4, 104.0], [18.5, 104.0], [18.6, 104.0], [18.7, 104.0], [18.8, 104.0], [18.9, 104.0], [19.0, 104.0], [19.1, 104.0], [19.2, 104.0], [19.3, 104.0], [19.4, 104.0], [19.5, 104.0], [19.6, 104.0], [19.7, 104.0], [19.8, 104.0], [19.9, 104.0], [20.0, 104.0], [20.1, 104.0], [20.2, 104.0], [20.3, 104.0], [20.4, 104.0], [20.5, 104.0], [20.6, 104.0], [20.7, 104.0], [20.8, 104.0], [20.9, 104.0], [21.0, 104.0], [21.1, 104.0], [21.2, 104.0], [21.3, 104.0], [21.4, 104.0], [21.5, 104.0], [21.6, 104.0], [21.7, 104.0], [21.8, 104.0], [21.9, 104.0], [22.0, 104.0], [22.1, 104.0], [22.2, 104.0], [22.3, 104.0], [22.4, 104.0], [22.5, 104.0], [22.6, 104.0], [22.7, 104.0], [22.8, 104.0], [22.9, 104.0], [23.0, 105.0], [23.1, 105.0], [23.2, 105.0], [23.3, 105.0], [23.4, 105.0], [23.5, 105.0], [23.6, 105.0], [23.7, 105.0], [23.8, 105.0], [23.9, 105.0], [24.0, 105.0], [24.1, 105.0], [24.2, 105.0], [24.3, 105.0], [24.4, 105.0], [24.5, 105.0], [24.6, 105.0], [24.7, 105.0], [24.8, 105.0], [24.9, 105.0], [25.0, 105.0], [25.1, 105.0], [25.2, 105.0], [25.3, 105.0], [25.4, 105.0], [25.5, 105.0], [25.6, 105.0], [25.7, 105.0], [25.8, 105.0], [25.9, 105.0], [26.0, 105.0], [26.1, 105.0], [26.2, 105.0], [26.3, 105.0], [26.4, 105.0], [26.5, 105.0], [26.6, 105.0], [26.7, 105.0], [26.8, 105.0], [26.9, 105.0], [27.0, 105.0], [27.1, 105.0], [27.2, 105.0], [27.3, 105.0], [27.4, 105.0], [27.5, 105.0], [27.6, 105.0], [27.7, 105.0], [27.8, 105.0], [27.9, 105.0], [28.0, 105.0], [28.1, 105.0], [28.2, 105.0], [28.3, 105.0], [28.4, 105.0], [28.5, 105.0], [28.6, 105.0], [28.7, 105.0], [28.8, 105.0], [28.9, 105.0], [29.0, 105.0], [29.1, 105.0], [29.2, 105.0], [29.3, 105.0], [29.4, 105.0], [29.5, 105.0], [29.6, 105.0], [29.7, 105.0], [29.8, 105.0], [29.9, 105.0], [30.0, 105.0], [30.1, 105.0], [30.2, 105.0], [30.3, 105.0], [30.4, 105.0], [30.5, 105.0], [30.6, 105.0], [30.7, 105.0], [30.8, 105.0], [30.9, 105.0], [31.0, 105.0], [31.1, 105.0], [31.2, 105.0], [31.3, 105.0], [31.4, 105.0], [31.5, 105.0], [31.6, 105.0], [31.7, 105.0], [31.8, 105.0], [31.9, 105.0], [32.0, 105.0], [32.1, 105.0], [32.2, 105.0], [32.3, 105.0], [32.4, 105.0], [32.5, 105.0], [32.6, 105.0], [32.7, 105.0], [32.8, 105.0], [32.9, 105.0], [33.0, 105.0], [33.1, 105.0], [33.2, 105.0], [33.3, 105.0], [33.4, 105.0], [33.5, 105.0], [33.6, 105.0], [33.7, 105.0], [33.8, 105.0], [33.9, 105.0], [34.0, 105.0], [34.1, 105.0], [34.2, 105.0], [34.3, 105.0], [34.4, 105.0], [34.5, 105.0], [34.6, 105.0], [34.7, 105.0], [34.8, 105.0], [34.9, 105.0], [35.0, 105.0], [35.1, 105.0], [35.2, 105.0], [35.3, 105.0], [35.4, 105.0], [35.5, 105.0], [35.6, 105.0], [35.7, 105.0], [35.8, 105.0], [35.9, 105.0], [36.0, 105.0], [36.1, 105.0], [36.2, 105.0], [36.3, 105.0], [36.4, 105.0], [36.5, 105.0], [36.6, 105.0], [36.7, 105.0], [36.8, 105.0], [36.9, 105.0], [37.0, 105.0], [37.1, 105.0], [37.2, 105.0], [37.3, 105.0], [37.4, 105.0], [37.5, 105.0], [37.6, 105.0], [37.7, 105.0], [37.8, 105.0], [37.9, 105.0], [38.0, 105.0], [38.1, 105.0], [38.2, 105.0], [38.3, 105.0], [38.4, 105.0], [38.5, 105.0], [38.6, 105.0], [38.7, 105.0], [38.8, 105.0], [38.9, 105.0], [39.0, 105.0], [39.1, 105.0], [39.2, 105.0], [39.3, 105.0], [39.4, 105.0], [39.5, 105.0], [39.6, 105.0], [39.7, 105.0], [39.8, 105.0], [39.9, 105.0], [40.0, 105.0], [40.1, 105.0], [40.2, 105.0], [40.3, 105.0], [40.4, 105.0], [40.5, 105.0], [40.6, 105.0], [40.7, 105.0], [40.8, 105.0], [40.9, 105.0], [41.0, 105.0], [41.1, 105.0], [41.2, 105.0], [41.3, 105.0], [41.4, 105.0], [41.5, 105.0], [41.6, 105.0], [41.7, 105.0], [41.8, 105.0], [41.9, 105.0], [42.0, 105.0], [42.1, 105.0], [42.2, 105.0], [42.3, 105.0], [42.4, 105.0], [42.5, 105.0], [42.6, 105.0], [42.7, 105.0], [42.8, 105.0], [42.9, 105.0], [43.0, 105.0], [43.1, 105.0], [43.2, 105.0], [43.3, 105.0], [43.4, 105.0], [43.5, 105.0], [43.6, 105.0], [43.7, 105.0], [43.8, 105.0], [43.9, 105.0], [44.0, 105.0], [44.1, 105.0], [44.2, 105.0], [44.3, 105.0], [44.4, 105.0], [44.5, 105.0], [44.6, 105.0], [44.7, 105.0], [44.8, 105.0], [44.9, 106.0], [45.0, 106.0], [45.1, 106.0], [45.2, 106.0], [45.3, 106.0], [45.4, 106.0], [45.5, 106.0], [45.6, 106.0], [45.7, 106.0], [45.8, 106.0], [45.9, 106.0], [46.0, 106.0], [46.1, 106.0], [46.2, 106.0], [46.3, 106.0], [46.4, 106.0], [46.5, 106.0], [46.6, 106.0], [46.7, 106.0], [46.8, 106.0], [46.9, 106.0], [47.0, 106.0], [47.1, 106.0], [47.2, 106.0], [47.3, 106.0], [47.4, 106.0], [47.5, 106.0], [47.6, 106.0], [47.7, 106.0], [47.8, 106.0], [47.9, 106.0], [48.0, 106.0], [48.1, 106.0], [48.2, 106.0], [48.3, 106.0], [48.4, 106.0], [48.5, 106.0], [48.6, 106.0], [48.7, 106.0], [48.8, 106.0], [48.9, 106.0], [49.0, 106.0], [49.1, 106.0], [49.2, 106.0], [49.3, 106.0], [49.4, 106.0], [49.5, 106.0], [49.6, 106.0], [49.7, 106.0], [49.8, 106.0], [49.9, 106.0], [50.0, 106.0], [50.1, 106.0], [50.2, 106.0], [50.3, 106.0], [50.4, 106.0], [50.5, 106.0], [50.6, 106.0], [50.7, 106.0], [50.8, 106.0], [50.9, 106.0], [51.0, 106.0], [51.1, 106.0], [51.2, 106.0], [51.3, 106.0], [51.4, 106.0], [51.5, 106.0], [51.6, 106.0], [51.7, 106.0], [51.8, 106.0], [51.9, 106.0], [52.0, 106.0], [52.1, 106.0], [52.2, 106.0], [52.3, 106.0], [52.4, 106.0], [52.5, 106.0], [52.6, 106.0], [52.7, 106.0], [52.8, 106.0], [52.9, 106.0], [53.0, 106.0], [53.1, 106.0], [53.2, 106.0], [53.3, 106.0], [53.4, 106.0], [53.5, 106.0], [53.6, 106.0], [53.7, 106.0], [53.8, 106.0], [53.9, 106.0], [54.0, 106.0], [54.1, 106.0], [54.2, 106.0], [54.3, 106.0], [54.4, 106.0], [54.5, 106.0], [54.6, 106.0], [54.7, 106.0], [54.8, 106.0], [54.9, 106.0], [55.0, 106.0], [55.1, 106.0], [55.2, 106.0], [55.3, 106.0], [55.4, 106.0], [55.5, 106.0], [55.6, 106.0], [55.7, 106.0], [55.8, 106.0], [55.9, 106.0], [56.0, 106.0], [56.1, 106.0], [56.2, 106.0], [56.3, 106.0], [56.4, 106.0], [56.5, 106.0], [56.6, 106.0], [56.7, 106.0], [56.8, 106.0], [56.9, 106.0], [57.0, 106.0], [57.1, 106.0], [57.2, 106.0], [57.3, 106.0], [57.4, 106.0], [57.5, 106.0], [57.6, 106.0], [57.7, 106.0], [57.8, 106.0], [57.9, 106.0], [58.0, 106.0], [58.1, 106.0], [58.2, 106.0], [58.3, 106.0], [58.4, 106.0], [58.5, 106.0], [58.6, 106.0], [58.7, 106.0], [58.8, 106.0], [58.9, 106.0], [59.0, 106.0], [59.1, 106.0], [59.2, 106.0], [59.3, 106.0], [59.4, 106.0], [59.5, 106.0], [59.6, 106.0], [59.7, 106.0], [59.8, 106.0], [59.9, 106.0], [60.0, 106.0], [60.1, 106.0], [60.2, 106.0], [60.3, 106.0], [60.4, 106.0], [60.5, 106.0], [60.6, 106.0], [60.7, 106.0], [60.8, 106.0], [60.9, 106.0], [61.0, 106.0], [61.1, 106.0], [61.2, 106.0], [61.3, 106.0], [61.4, 106.0], [61.5, 106.0], [61.6, 106.0], [61.7, 106.0], [61.8, 106.0], [61.9, 106.0], [62.0, 106.0], [62.1, 106.0], [62.2, 107.0], [62.3, 107.0], [62.4, 107.0], [62.5, 107.0], [62.6, 107.0], [62.7, 107.0], [62.8, 107.0], [62.9, 107.0], [63.0, 107.0], [63.1, 107.0], [63.2, 107.0], [63.3, 107.0], [63.4, 107.0], [63.5, 107.0], [63.6, 107.0], [63.7, 107.0], [63.8, 107.0], [63.9, 107.0], [64.0, 107.0], [64.1, 107.0], [64.2, 107.0], [64.3, 107.0], [64.4, 107.0], [64.5, 107.0], [64.6, 107.0], [64.7, 107.0], [64.8, 107.0], [64.9, 107.0], [65.0, 107.0], [65.1, 107.0], [65.2, 107.0], [65.3, 107.0], [65.4, 107.0], [65.5, 107.0], [65.6, 107.0], [65.7, 107.0], [65.8, 107.0], [65.9, 107.0], [66.0, 107.0], [66.1, 107.0], [66.2, 107.0], [66.3, 107.0], [66.4, 107.0], [66.5, 107.0], [66.6, 107.0], [66.7, 107.0], [66.8, 107.0], [66.9, 107.0], [67.0, 107.0], [67.1, 107.0], [67.2, 107.0], [67.3, 107.0], [67.4, 107.0], [67.5, 107.0], [67.6, 107.0], [67.7, 107.0], [67.8, 107.0], [67.9, 107.0], [68.0, 107.0], [68.1, 107.0], [68.2, 107.0], [68.3, 107.0], [68.4, 107.0], [68.5, 107.0], [68.6, 107.0], [68.7, 107.0], [68.8, 107.0], [68.9, 107.0], [69.0, 107.0], [69.1, 107.0], [69.2, 107.0], [69.3, 107.0], [69.4, 107.0], [69.5, 107.0], [69.6, 107.0], [69.7, 107.0], [69.8, 107.0], [69.9, 107.0], [70.0, 107.0], [70.1, 107.0], [70.2, 107.0], [70.3, 107.0], [70.4, 107.0], [70.5, 107.0], [70.6, 107.0], [70.7, 107.0], [70.8, 107.0], [70.9, 107.0], [71.0, 107.0], [71.1, 107.0], [71.2, 107.0], [71.3, 107.0], [71.4, 107.0], [71.5, 107.0], [71.6, 107.0], [71.7, 107.0], [71.8, 107.0], [71.9, 108.0], [72.0, 108.0], [72.1, 108.0], [72.2, 108.0], [72.3, 108.0], [72.4, 108.0], [72.5, 108.0], [72.6, 108.0], [72.7, 108.0], [72.8, 108.0], [72.9, 108.0], [73.0, 108.0], [73.1, 108.0], [73.2, 108.0], [73.3, 108.0], [73.4, 108.0], [73.5, 108.0], [73.6, 108.0], [73.7, 108.0], [73.8, 108.0], [73.9, 108.0], [74.0, 108.0], [74.1, 108.0], [74.2, 108.0], [74.3, 108.0], [74.4, 108.0], [74.5, 108.0], [74.6, 108.0], [74.7, 108.0], [74.8, 108.0], [74.9, 108.0], [75.0, 108.0], [75.1, 108.0], [75.2, 108.0], [75.3, 108.0], [75.4, 108.0], [75.5, 108.0], [75.6, 108.0], [75.7, 108.0], [75.8, 108.0], [75.9, 108.0], [76.0, 108.0], [76.1, 108.0], [76.2, 108.0], [76.3, 108.0], [76.4, 108.0], [76.5, 108.0], [76.6, 108.0], [76.7, 108.0], [76.8, 108.0], [76.9, 108.0], [77.0, 108.0], [77.1, 109.0], [77.2, 109.0], [77.3, 109.0], [77.4, 109.0], [77.5, 109.0], [77.6, 109.0], [77.7, 109.0], [77.8, 109.0], [77.9, 109.0], [78.0, 109.0], [78.1, 109.0], [78.2, 109.0], [78.3, 109.0], [78.4, 109.0], [78.5, 109.0], [78.6, 109.0], [78.7, 109.0], [78.8, 109.0], [78.9, 109.0], [79.0, 109.0], [79.1, 109.0], [79.2, 109.0], [79.3, 109.0], [79.4, 109.0], [79.5, 109.0], [79.6, 109.0], [79.7, 109.0], [79.8, 109.0], [79.9, 109.0], [80.0, 109.0], [80.1, 109.0], [80.2, 110.0], [80.3, 110.0], [80.4, 110.0], [80.5, 110.0], [80.6, 110.0], [80.7, 110.0], [80.8, 110.0], [80.9, 110.0], [81.0, 110.0], [81.1, 110.0], [81.2, 110.0], [81.3, 110.0], [81.4, 110.0], [81.5, 110.0], [81.6, 110.0], [81.7, 110.0], [81.8, 110.0], [81.9, 110.0], [82.0, 110.0], [82.1, 111.0], [82.2, 111.0], [82.3, 111.0], [82.4, 111.0], [82.5, 111.0], [82.6, 111.0], [82.7, 111.0], [82.8, 111.0], [82.9, 111.0], [83.0, 111.0], [83.1, 111.0], [83.2, 111.0], [83.3, 111.0], [83.4, 112.0], [83.5, 112.0], [83.6, 112.0], [83.7, 112.0], [83.8, 112.0], [83.9, 112.0], [84.0, 112.0], [84.1, 113.0], [84.2, 113.0], [84.3, 113.0], [84.4, 113.0], [84.5, 113.0], [84.6, 113.0], [84.7, 113.0], [84.8, 113.0], [84.9, 114.0], [85.0, 114.0], [85.1, 114.0], [85.2, 114.0], [85.3, 114.0], [85.4, 115.0], [85.5, 115.0], [85.6, 115.0], [85.7, 116.0], [85.8, 116.0], [85.9, 116.0], [86.0, 116.0], [86.1, 117.0], [86.2, 117.0], [86.3, 117.0], [86.4, 117.0], [86.5, 118.0], [86.6, 119.0], [86.7, 119.0], [86.8, 120.0], [86.9, 120.0], [87.0, 121.0], [87.1, 121.0], [87.2, 122.0], [87.3, 123.0], [87.4, 123.0], [87.5, 124.0], [87.6, 125.0], [87.7, 126.0], [87.8, 126.0], [87.9, 127.0], [88.0, 128.0], [88.1, 128.0], [88.2, 130.0], [88.3, 130.0], [88.4, 131.0], [88.5, 131.0], [88.6, 132.0], [88.7, 133.0], [88.8, 135.0], [88.9, 136.0], [89.0, 137.0], [89.1, 137.0], [89.2, 139.0], [89.3, 139.0], [89.4, 140.0], [89.5, 140.0], [89.6, 142.0], [89.7, 142.0], [89.8, 144.0], [89.9, 144.0], [90.0, 146.0], [90.1, 146.0], [90.2, 147.0], [90.3, 147.0], [90.4, 148.0], [90.5, 148.0], [90.6, 150.0], [90.7, 151.0], [90.8, 153.0], [90.9, 155.0], [91.0, 155.0], [91.1, 158.0], [91.2, 159.0], [91.3, 159.0], [91.4, 160.0], [91.5, 161.0], [91.6, 161.0], [91.7, 165.0], [91.8, 169.0], [91.9, 171.0], [92.0, 172.0], [92.1, 172.0], [92.2, 174.0], [92.3, 174.0], [92.4, 176.0], [92.5, 179.0], [92.6, 179.0], [92.7, 180.0], [92.8, 181.0], [92.9, 182.0], [93.0, 184.0], [93.1, 186.0], [93.2, 188.0], [93.3, 189.0], [93.4, 190.0], [93.5, 193.0], [93.6, 193.0], [93.7, 195.0], [93.8, 196.0], [93.9, 197.0], [94.0, 198.0], [94.1, 199.0], [94.2, 200.0], [94.3, 201.0], [94.4, 205.0], [94.5, 207.0], [94.6, 209.0], [94.7, 213.0], [94.8, 220.0], [94.9, 225.0], [95.0, 300.0], [95.1, 344.0], [95.2, 655.0], [95.3, 4490.0], [95.4, 6895.0], [95.5, 7401.0], [95.6, 8676.0], [95.7, 9777.0], [95.8, 11334.0], [95.9, 12058.0], [96.0, 13225.0], [96.1, 13716.0], [96.2, 15008.0], [96.3, 15159.0], [96.4, 16042.0], [96.5, 16504.0], [96.6, 17790.0], [96.7, 18136.0], [96.8, 18820.0], [96.9, 19159.0], [97.0, 19495.0], [97.1, 19709.0], [97.2, 20480.0], [97.3, 20698.0], [97.4, 21334.0], [97.5, 21690.0], [97.6, 22439.0], [97.7, 22640.0], [97.8, 22782.0], [97.9, 23481.0], [98.0, 25104.0], [98.1, 25294.0], [98.2, 26977.0], [98.3, 27462.0], [98.4, 28826.0], [98.5, 29495.0], [98.6, 30783.0], [98.7, 31437.0], [98.8, 32852.0], [98.9, 35511.0], [99.0, 37286.0], [99.1, 40300.0], [99.2, 40969.0], [99.3, 42871.0], [99.4, 45610.0], [99.5, 48094.0], [99.6, 50242.0], [99.7, 55376.0], [99.8, 60166.0], [99.9, 60216.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[0.0, 204.0], [0.1, 204.0], [0.2, 204.0], [0.3, 204.0], [0.4, 204.0], [0.5, 204.0], [0.6, 204.0], [0.7, 204.0], [0.8, 204.0], [0.9, 204.0], [1.0, 204.0], [1.1, 204.0], [1.2, 204.0], [1.3, 204.0], [1.4, 204.0], [1.5, 204.0], [1.6, 204.0], [1.7, 204.0], [1.8, 204.0], [1.9, 204.0], [2.0, 204.0], [2.1, 205.0], [2.2, 205.0], [2.3, 205.0], [2.4, 205.0], [2.5, 205.0], [2.6, 205.0], [2.7, 205.0], [2.8, 205.0], [2.9, 205.0], [3.0, 205.0], [3.1, 205.0], [3.2, 205.0], [3.3, 205.0], [3.4, 205.0], [3.5, 205.0], [3.6, 205.0], [3.7, 205.0], [3.8, 205.0], [3.9, 205.0], [4.0, 205.0], [4.1, 205.0], [4.2, 205.0], [4.3, 205.0], [4.4, 205.0], [4.5, 205.0], [4.6, 205.0], [4.7, 205.0], [4.8, 205.0], [4.9, 205.0], [5.0, 205.0], [5.1, 205.0], [5.2, 205.0], [5.3, 205.0], [5.4, 205.0], [5.5, 205.0], [5.6, 205.0], [5.7, 205.0], [5.8, 205.0], [5.9, 205.0], [6.0, 205.0], [6.1, 205.0], [6.2, 205.0], [6.3, 205.0], [6.4, 205.0], [6.5, 205.0], [6.6, 205.0], [6.7, 205.0], [6.8, 205.0], [6.9, 205.0], [7.0, 205.0], [7.1, 205.0], [7.2, 205.0], [7.3, 205.0], [7.4, 205.0], [7.5, 205.0], [7.6, 205.0], [7.7, 205.0], [7.8, 205.0], [7.9, 205.0], [8.0, 205.0], [8.1, 205.0], [8.2, 205.0], [8.3, 205.0], [8.4, 205.0], [8.5, 205.0], [8.6, 205.0], [8.7, 205.0], [8.8, 205.0], [8.9, 205.0], [9.0, 205.0], [9.1, 205.0], [9.2, 205.0], [9.3, 205.0], [9.4, 205.0], [9.5, 205.0], [9.6, 205.0], [9.7, 205.0], [9.8, 205.0], [9.9, 205.0], [10.0, 205.0], [10.1, 205.0], [10.2, 205.0], [10.3, 205.0], [10.4, 205.0], [10.5, 205.0], [10.6, 205.0], [10.7, 205.0], [10.8, 205.0], [10.9, 205.0], [11.0, 205.0], [11.1, 205.0], [11.2, 205.0], [11.3, 205.0], [11.4, 205.0], [11.5, 205.0], [11.6, 205.0], [11.7, 205.0], [11.8, 205.0], [11.9, 205.0], [12.0, 205.0], [12.1, 205.0], [12.2, 205.0], [12.3, 205.0], [12.4, 205.0], [12.5, 205.0], [12.6, 205.0], [12.7, 205.0], [12.8, 205.0], [12.9, 205.0], [13.0, 205.0], [13.1, 205.0], [13.2, 205.0], [13.3, 205.0], [13.4, 206.0], [13.5, 206.0], [13.6, 206.0], [13.7, 206.0], [13.8, 206.0], [13.9, 206.0], [14.0, 206.0], [14.1, 206.0], [14.2, 206.0], [14.3, 206.0], [14.4, 206.0], [14.5, 206.0], [14.6, 206.0], [14.7, 206.0], [14.8, 206.0], [14.9, 206.0], [15.0, 206.0], [15.1, 206.0], [15.2, 206.0], [15.3, 206.0], [15.4, 206.0], [15.5, 206.0], [15.6, 206.0], [15.7, 206.0], [15.8, 206.0], [15.9, 206.0], [16.0, 206.0], [16.1, 206.0], [16.2, 206.0], [16.3, 206.0], [16.4, 206.0], [16.5, 206.0], [16.6, 206.0], [16.7, 206.0], [16.8, 206.0], [16.9, 206.0], [17.0, 206.0], [17.1, 206.0], [17.2, 206.0], [17.3, 206.0], [17.4, 206.0], [17.5, 206.0], [17.6, 206.0], [17.7, 206.0], [17.8, 206.0], [17.9, 206.0], [18.0, 206.0], [18.1, 206.0], [18.2, 206.0], [18.3, 206.0], [18.4, 206.0], [18.5, 206.0], [18.6, 206.0], [18.7, 206.0], [18.8, 206.0], [18.9, 206.0], [19.0, 206.0], [19.1, 206.0], [19.2, 206.0], [19.3, 206.0], [19.4, 206.0], [19.5, 206.0], [19.6, 206.0], [19.7, 206.0], [19.8, 206.0], [19.9, 206.0], [20.0, 206.0], [20.1, 206.0], [20.2, 206.0], [20.3, 206.0], [20.4, 206.0], [20.5, 206.0], [20.6, 206.0], [20.7, 206.0], [20.8, 206.0], [20.9, 206.0], [21.0, 206.0], [21.1, 206.0], [21.2, 206.0], [21.3, 206.0], [21.4, 206.0], [21.5, 206.0], [21.6, 206.0], [21.7, 206.0], [21.8, 206.0], [21.9, 206.0], [22.0, 206.0], [22.1, 206.0], [22.2, 206.0], [22.3, 206.0], [22.4, 206.0], [22.5, 206.0], [22.6, 206.0], [22.7, 206.0], [22.8, 206.0], [22.9, 206.0], [23.0, 206.0], [23.1, 206.0], [23.2, 206.0], [23.3, 206.0], [23.4, 206.0], [23.5, 206.0], [23.6, 206.0], [23.7, 206.0], [23.8, 206.0], [23.9, 206.0], [24.0, 206.0], [24.1, 206.0], [24.2, 206.0], [24.3, 206.0], [24.4, 206.0], [24.5, 206.0], [24.6, 206.0], [24.7, 206.0], [24.8, 206.0], [24.9, 206.0], [25.0, 206.0], [25.1, 206.0], [25.2, 206.0], [25.3, 206.0], [25.4, 206.0], [25.5, 206.0], [25.6, 206.0], [25.7, 206.0], [25.8, 206.0], [25.9, 206.0], [26.0, 206.0], [26.1, 206.0], [26.2, 206.0], [26.3, 206.0], [26.4, 206.0], [26.5, 206.0], [26.6, 206.0], [26.7, 206.0], [26.8, 206.0], [26.9, 206.0], [27.0, 206.0], [27.1, 206.0], [27.2, 206.0], [27.3, 206.0], [27.4, 206.0], [27.5, 206.0], [27.6, 206.0], [27.7, 206.0], [27.8, 206.0], [27.9, 206.0], [28.0, 206.0], [28.1, 206.0], [28.2, 206.0], [28.3, 206.0], [28.4, 206.0], [28.5, 206.0], [28.6, 206.0], [28.7, 206.0], [28.8, 206.0], [28.9, 206.0], [29.0, 206.0], [29.1, 206.0], [29.2, 206.0], [29.3, 206.0], [29.4, 206.0], [29.5, 206.0], [29.6, 206.0], [29.7, 206.0], [29.8, 206.0], [29.9, 206.0], [30.0, 206.0], [30.1, 206.0], [30.2, 206.0], [30.3, 206.0], [30.4, 206.0], [30.5, 206.0], [30.6, 206.0], [30.7, 206.0], [30.8, 206.0], [30.9, 206.0], [31.0, 206.0], [31.1, 206.0], [31.2, 206.0], [31.3, 206.0], [31.4, 206.0], [31.5, 206.0], [31.6, 206.0], [31.7, 206.0], [31.8, 206.0], [31.9, 206.0], [32.0, 206.0], [32.1, 206.0], [32.2, 206.0], [32.3, 207.0], [32.4, 207.0], [32.5, 207.0], [32.6, 207.0], [32.7, 207.0], [32.8, 207.0], [32.9, 207.0], [33.0, 207.0], [33.1, 207.0], [33.2, 207.0], [33.3, 207.0], [33.4, 207.0], [33.5, 207.0], [33.6, 207.0], [33.7, 207.0], [33.8, 207.0], [33.9, 207.0], [34.0, 207.0], [34.1, 207.0], [34.2, 207.0], [34.3, 207.0], [34.4, 207.0], [34.5, 207.0], [34.6, 207.0], [34.7, 207.0], [34.8, 207.0], [34.9, 207.0], [35.0, 207.0], [35.1, 207.0], [35.2, 207.0], [35.3, 207.0], [35.4, 207.0], [35.5, 207.0], [35.6, 207.0], [35.7, 207.0], [35.8, 207.0], [35.9, 207.0], [36.0, 207.0], [36.1, 207.0], [36.2, 207.0], [36.3, 207.0], [36.4, 207.0], [36.5, 207.0], [36.6, 207.0], [36.7, 207.0], [36.8, 207.0], [36.9, 207.0], [37.0, 207.0], [37.1, 207.0], [37.2, 207.0], [37.3, 207.0], [37.4, 207.0], [37.5, 207.0], [37.6, 207.0], [37.7, 207.0], [37.8, 207.0], [37.9, 207.0], [38.0, 207.0], [38.1, 207.0], [38.2, 207.0], [38.3, 207.0], [38.4, 207.0], [38.5, 207.0], [38.6, 207.0], [38.7, 207.0], [38.8, 207.0], [38.9, 207.0], [39.0, 207.0], [39.1, 207.0], [39.2, 207.0], [39.3, 207.0], [39.4, 207.0], [39.5, 207.0], [39.6, 207.0], [39.7, 207.0], [39.8, 207.0], [39.9, 207.0], [40.0, 207.0], [40.1, 207.0], [40.2, 207.0], [40.3, 207.0], [40.4, 207.0], [40.5, 207.0], [40.6, 207.0], [40.7, 207.0], [40.8, 207.0], [40.9, 207.0], [41.0, 207.0], [41.1, 207.0], [41.2, 207.0], [41.3, 207.0], [41.4, 207.0], [41.5, 207.0], [41.6, 207.0], [41.7, 207.0], [41.8, 207.0], [41.9, 207.0], [42.0, 207.0], [42.1, 207.0], [42.2, 207.0], [42.3, 207.0], [42.4, 207.0], [42.5, 207.0], [42.6, 207.0], [42.7, 207.0], [42.8, 207.0], [42.9, 207.0], [43.0, 207.0], [43.1, 207.0], [43.2, 207.0], [43.3, 207.0], [43.4, 207.0], [43.5, 207.0], [43.6, 207.0], [43.7, 207.0], [43.8, 207.0], [43.9, 207.0], [44.0, 207.0], [44.1, 207.0], [44.2, 207.0], [44.3, 207.0], [44.4, 207.0], [44.5, 207.0], [44.6, 207.0], [44.7, 207.0], [44.8, 207.0], [44.9, 207.0], [45.0, 207.0], [45.1, 207.0], [45.2, 207.0], [45.3, 207.0], [45.4, 207.0], [45.5, 207.0], [45.6, 207.0], [45.7, 207.0], [45.8, 207.0], [45.9, 207.0], [46.0, 207.0], [46.1, 207.0], [46.2, 207.0], [46.3, 207.0], [46.4, 207.0], [46.5, 207.0], [46.6, 207.0], [46.7, 207.0], [46.8, 207.0], [46.9, 207.0], [47.0, 207.0], [47.1, 207.0], [47.2, 207.0], [47.3, 207.0], [47.4, 207.0], [47.5, 207.0], [47.6, 207.0], [47.7, 207.0], [47.8, 207.0], [47.9, 207.0], [48.0, 207.0], [48.1, 207.0], [48.2, 207.0], [48.3, 207.0], [48.4, 207.0], [48.5, 207.0], [48.6, 207.0], [48.7, 207.0], [48.8, 207.0], [48.9, 207.0], [49.0, 207.0], [49.1, 207.0], [49.2, 207.0], [49.3, 207.0], [49.4, 207.0], [49.5, 207.0], [49.6, 207.0], [49.7, 207.0], [49.8, 207.0], [49.9, 207.0], [50.0, 207.0], [50.1, 208.0], [50.2, 208.0], [50.3, 208.0], [50.4, 208.0], [50.5, 208.0], [50.6, 208.0], [50.7, 208.0], [50.8, 208.0], [50.9, 208.0], [51.0, 208.0], [51.1, 208.0], [51.2, 208.0], [51.3, 208.0], [51.4, 208.0], [51.5, 208.0], [51.6, 208.0], [51.7, 208.0], [51.8, 208.0], [51.9, 208.0], [52.0, 208.0], [52.1, 208.0], [52.2, 208.0], [52.3, 208.0], [52.4, 208.0], [52.5, 208.0], [52.6, 208.0], [52.7, 208.0], [52.8, 208.0], [52.9, 208.0], [53.0, 208.0], [53.1, 208.0], [53.2, 208.0], [53.3, 208.0], [53.4, 208.0], [53.5, 208.0], [53.6, 208.0], [53.7, 208.0], [53.8, 208.0], [53.9, 208.0], [54.0, 208.0], [54.1, 208.0], [54.2, 208.0], [54.3, 208.0], [54.4, 208.0], [54.5, 208.0], [54.6, 208.0], [54.7, 208.0], [54.8, 208.0], [54.9, 208.0], [55.0, 208.0], [55.1, 208.0], [55.2, 208.0], [55.3, 208.0], [55.4, 208.0], [55.5, 208.0], [55.6, 208.0], [55.7, 208.0], [55.8, 208.0], [55.9, 208.0], [56.0, 208.0], [56.1, 208.0], [56.2, 208.0], [56.3, 208.0], [56.4, 208.0], [56.5, 208.0], [56.6, 208.0], [56.7, 208.0], [56.8, 208.0], [56.9, 208.0], [57.0, 208.0], [57.1, 208.0], [57.2, 208.0], [57.3, 208.0], [57.4, 208.0], [57.5, 208.0], [57.6, 208.0], [57.7, 208.0], [57.8, 208.0], [57.9, 208.0], [58.0, 208.0], [58.1, 208.0], [58.2, 208.0], [58.3, 208.0], [58.4, 208.0], [58.5, 208.0], [58.6, 208.0], [58.7, 208.0], [58.8, 208.0], [58.9, 208.0], [59.0, 208.0], [59.1, 208.0], [59.2, 208.0], [59.3, 208.0], [59.4, 208.0], [59.5, 208.0], [59.6, 208.0], [59.7, 208.0], [59.8, 208.0], [59.9, 208.0], [60.0, 208.0], [60.1, 208.0], [60.2, 208.0], [60.3, 208.0], [60.4, 208.0], [60.5, 208.0], [60.6, 208.0], [60.7, 208.0], [60.8, 208.0], [60.9, 208.0], [61.0, 208.0], [61.1, 208.0], [61.2, 208.0], [61.3, 208.0], [61.4, 208.0], [61.5, 208.0], [61.6, 208.0], [61.7, 208.0], [61.8, 208.0], [61.9, 208.0], [62.0, 208.0], [62.1, 208.0], [62.2, 208.0], [62.3, 208.0], [62.4, 208.0], [62.5, 208.0], [62.6, 208.0], [62.7, 208.0], [62.8, 208.0], [62.9, 208.0], [63.0, 208.0], [63.1, 208.0], [63.2, 209.0], [63.3, 209.0], [63.4, 209.0], [63.5, 209.0], [63.6, 209.0], [63.7, 209.0], [63.8, 209.0], [63.9, 209.0], [64.0, 209.0], [64.1, 209.0], [64.2, 209.0], [64.3, 209.0], [64.4, 209.0], [64.5, 209.0], [64.6, 209.0], [64.7, 209.0], [64.8, 209.0], [64.9, 209.0], [65.0, 209.0], [65.1, 209.0], [65.2, 209.0], [65.3, 209.0], [65.4, 209.0], [65.5, 209.0], [65.6, 209.0], [65.7, 209.0], [65.8, 209.0], [65.9, 209.0], [66.0, 209.0], [66.1, 209.0], [66.2, 209.0], [66.3, 209.0], [66.4, 209.0], [66.5, 209.0], [66.6, 209.0], [66.7, 209.0], [66.8, 209.0], [66.9, 209.0], [67.0, 209.0], [67.1, 209.0], [67.2, 209.0], [67.3, 209.0], [67.4, 209.0], [67.5, 209.0], [67.6, 209.0], [67.7, 209.0], [67.8, 209.0], [67.9, 209.0], [68.0, 209.0], [68.1, 209.0], [68.2, 209.0], [68.3, 209.0], [68.4, 209.0], [68.5, 209.0], [68.6, 209.0], [68.7, 209.0], [68.8, 209.0], [68.9, 209.0], [69.0, 209.0], [69.1, 209.0], [69.2, 209.0], [69.3, 209.0], [69.4, 209.0], [69.5, 209.0], [69.6, 209.0], [69.7, 209.0], [69.8, 209.0], [69.9, 209.0], [70.0, 209.0], [70.1, 209.0], [70.2, 209.0], [70.3, 209.0], [70.4, 209.0], [70.5, 209.0], [70.6, 209.0], [70.7, 209.0], [70.8, 209.0], [70.9, 209.0], [71.0, 209.0], [71.1, 209.0], [71.2, 209.0], [71.3, 209.0], [71.4, 209.0], [71.5, 209.0], [71.6, 209.0], [71.7, 210.0], [71.8, 210.0], [71.9, 210.0], [72.0, 210.0], [72.1, 210.0], [72.2, 210.0], [72.3, 210.0], [72.4, 210.0], [72.5, 210.0], [72.6, 210.0], [72.7, 210.0], [72.8, 210.0], [72.9, 210.0], [73.0, 210.0], [73.1, 210.0], [73.2, 210.0], [73.3, 210.0], [73.4, 210.0], [73.5, 210.0], [73.6, 210.0], [73.7, 210.0], [73.8, 210.0], [73.9, 210.0], [74.0, 210.0], [74.1, 210.0], [74.2, 210.0], [74.3, 210.0], [74.4, 210.0], [74.5, 210.0], [74.6, 210.0], [74.7, 210.0], [74.8, 210.0], [74.9, 210.0], [75.0, 210.0], [75.1, 210.0], [75.2, 210.0], [75.3, 210.0], [75.4, 210.0], [75.5, 210.0], [75.6, 210.0], [75.7, 210.0], [75.8, 210.0], [75.9, 210.0], [76.0, 210.0], [76.1, 210.0], [76.2, 210.0], [76.3, 210.0], [76.4, 210.0], [76.5, 211.0], [76.6, 211.0], [76.7, 211.0], [76.8, 211.0], [76.9, 211.0], [77.0, 211.0], [77.1, 211.0], [77.2, 211.0], [77.3, 211.0], [77.4, 211.0], [77.5, 211.0], [77.6, 211.0], [77.7, 211.0], [77.8, 211.0], [77.9, 211.0], [78.0, 211.0], [78.1, 211.0], [78.2, 211.0], [78.3, 211.0], [78.4, 211.0], [78.5, 211.0], [78.6, 211.0], [78.7, 211.0], [78.8, 211.0], [78.9, 211.0], [79.0, 211.0], [79.1, 211.0], [79.2, 211.0], [79.3, 212.0], [79.4, 212.0], [79.5, 212.0], [79.6, 212.0], [79.7, 212.0], [79.8, 212.0], [79.9, 212.0], [80.0, 212.0], [80.1, 212.0], [80.2, 212.0], [80.3, 212.0], [80.4, 212.0], [80.5, 213.0], [80.6, 213.0], [80.7, 213.0], [80.8, 213.0], [80.9, 213.0], [81.0, 213.0], [81.1, 213.0], [81.2, 213.0], [81.3, 213.0], [81.4, 213.0], [81.5, 213.0], [81.6, 213.0], [81.7, 213.0], [81.8, 214.0], [81.9, 214.0], [82.0, 214.0], [82.1, 214.0], [82.2, 214.0], [82.3, 214.0], [82.4, 214.0], [82.5, 214.0], [82.6, 215.0], [82.7, 215.0], [82.8, 215.0], [82.9, 215.0], [83.0, 215.0], [83.1, 215.0], [83.2, 216.0], [83.3, 216.0], [83.4, 216.0], [83.5, 216.0], [83.6, 216.0], [83.7, 217.0], [83.8, 217.0], [83.9, 218.0], [84.0, 218.0], [84.1, 218.0], [84.2, 218.0], [84.3, 219.0], [84.4, 220.0], [84.5, 220.0], [84.6, 220.0], [84.7, 221.0], [84.8, 222.0], [84.9, 223.0], [85.0, 224.0], [85.1, 224.0], [85.2, 225.0], [85.3, 226.0], [85.4, 226.0], [85.5, 227.0], [85.6, 228.0], [85.7, 229.0], [85.8, 229.0], [85.9, 230.0], [86.0, 230.0], [86.1, 231.0], [86.2, 232.0], [86.3, 232.0], [86.4, 232.0], [86.5, 233.0], [86.6, 234.0], [86.7, 237.0], [86.8, 239.0], [86.9, 242.0], [87.0, 243.0], [87.1, 245.0], [87.2, 250.0], [87.3, 252.0], [87.4, 256.0], [87.5, 260.0], [87.6, 265.0], [87.7, 269.0], [87.8, 275.0], [87.9, 283.0], [88.0, 287.0], [88.1, 289.0], [88.2, 293.0], [88.3, 296.0], [88.4, 300.0], [88.5, 302.0], [88.6, 303.0], [88.7, 303.0], [88.8, 304.0], [88.9, 304.0], [89.0, 305.0], [89.1, 305.0], [89.2, 306.0], [89.3, 306.0], [89.4, 306.0], [89.5, 306.0], [89.6, 306.0], [89.7, 306.0], [89.8, 306.0], [89.9, 307.0], [90.0, 307.0], [90.1, 307.0], [90.2, 307.0], [90.3, 308.0], [90.4, 308.0], [90.5, 309.0], [90.6, 311.0], [90.7, 312.0], [90.8, 314.0], [90.9, 317.0], [91.0, 319.0], [91.1, 319.0], [91.2, 321.0], [91.3, 323.0], [91.4, 324.0], [91.5, 326.0], [91.6, 331.0], [91.7, 333.0], [91.8, 336.0], [91.9, 341.0], [92.0, 347.0], [92.1, 352.0], [92.2, 356.0], [92.3, 357.0], [92.4, 361.0], [92.5, 365.0], [92.6, 366.0], [92.7, 374.0], [92.8, 375.0], [92.9, 377.0], [93.0, 379.0], [93.1, 385.0], [93.2, 386.0], [93.3, 393.0], [93.4, 396.0], [93.5, 397.0], [93.6, 399.0], [93.7, 401.0], [93.8, 402.0], [93.9, 403.0], [94.0, 403.0], [94.1, 403.0], [94.2, 404.0], [94.3, 404.0], [94.4, 405.0], [94.5, 405.0], [94.6, 406.0], [94.7, 406.0], [94.8, 406.0], [94.9, 406.0], [95.0, 406.0], [95.1, 407.0], [95.2, 407.0], [95.3, 407.0], [95.4, 407.0], [95.5, 407.0], [95.6, 407.0], [95.7, 407.0], [95.8, 407.0], [95.9, 407.0], [96.0, 408.0], [96.1, 408.0], [96.2, 408.0], [96.3, 408.0], [96.4, 408.0], [96.5, 408.0], [96.6, 408.0], [96.7, 408.0], [96.8, 408.0], [96.9, 408.0], [97.0, 408.0], [97.1, 408.0], [97.2, 408.0], [97.3, 408.0], [97.4, 409.0], [97.5, 409.0], [97.6, 409.0], [97.7, 409.0], [97.8, 409.0], [97.9, 409.0], [98.0, 409.0], [98.1, 409.0], [98.2, 409.0], [98.3, 409.0], [98.4, 410.0], [98.5, 410.0], [98.6, 410.0], [98.7, 411.0], [98.8, 411.0], [98.9, 411.0], [99.0, 412.0], [99.1, 413.0], [99.2, 415.0], [99.3, 419.0], [99.4, 420.0], [99.5, 438.0], [99.6, 471.0], [99.7, 507.0], [99.8, 510.0], [99.9, 516.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 3286.0, "series": [{"data": [[33100.0, 1.0], [37700.0, 1.0], [40900.0, 1.0], [40700.0, 1.0], [40300.0, 1.0], [41300.0, 1.0], [41100.0, 1.0], [45300.0, 1.0], [45900.0, 2.0], [47500.0, 1.0], [48900.0, 1.0], [48500.0, 1.0], [200.0, 20.0], [54300.0, 1.0], [56300.0, 1.0], [55900.0, 1.0], [60500.0, 3.0], [60700.0, 1.0], [300.0, 3021.0], [400.0, 142.0], [500.0, 139.0], [600.0, 23.0], [700.0, 1.0], [800.0, 3.0], [4100.0, 1.0], [4800.0, 1.0], [5800.0, 1.0], [7000.0, 1.0], [7400.0, 1.0], [7300.0, 2.0], [7700.0, 2.0], [8100.0, 1.0], [9000.0, 1.0], [8800.0, 2.0], [9500.0, 1.0], [10100.0, 1.0], [9900.0, 1.0], [11100.0, 1.0], [11200.0, 1.0], [11700.0, 2.0], [11500.0, 1.0], [12000.0, 1.0], [12700.0, 1.0], [12300.0, 1.0], [13200.0, 1.0], [13700.0, 2.0], [13400.0, 2.0], [14100.0, 2.0], [14300.0, 1.0], [14600.0, 1.0], [15800.0, 1.0], [15400.0, 2.0], [15500.0, 3.0], [16100.0, 1.0], [16400.0, 2.0], [16800.0, 2.0], [17800.0, 2.0], [18400.0, 1.0], [18200.0, 2.0], [18100.0, 1.0], [18700.0, 2.0], [19100.0, 3.0], [19200.0, 1.0], [19400.0, 1.0], [19700.0, 1.0], [19500.0, 1.0], [19600.0, 2.0], [19900.0, 2.0], [19800.0, 1.0], [20100.0, 2.0], [20800.0, 2.0], [20900.0, 1.0], [20600.0, 2.0], [21300.0, 2.0], [21000.0, 1.0], [22000.0, 1.0], [22200.0, 1.0], [21600.0, 1.0], [22400.0, 1.0], [21800.0, 1.0], [21700.0, 1.0], [21900.0, 1.0], [22800.0, 2.0], [22700.0, 1.0], [23400.0, 1.0], [23000.0, 3.0], [22900.0, 1.0], [23100.0, 2.0], [22600.0, 1.0], [24100.0, 1.0], [23700.0, 1.0], [24800.0, 1.0], [25300.0, 1.0], [24600.0, 1.0], [25500.0, 1.0], [25600.0, 3.0], [26100.0, 1.0], [25800.0, 1.0], [27600.0, 1.0], [27300.0, 1.0], [27400.0, 1.0], [28600.0, 1.0], [27900.0, 1.0], [28200.0, 1.0], [27800.0, 1.0], [29200.0, 1.0], [29600.0, 2.0], [29700.0, 1.0], [30600.0, 1.0], [30100.0, 1.0], [30900.0, 1.0], [31600.0, 1.0], [31700.0, 1.0], [31000.0, 2.0], [32600.0, 1.0], [32500.0, 1.0], [33200.0, 2.0], [36000.0, 1.0], [35800.0, 1.0], [36200.0, 1.0], [35600.0, 1.0], [37600.0, 1.0], [39200.0, 1.0], [41200.0, 1.0], [43000.0, 1.0], [44600.0, 1.0], [43200.0, 2.0], [45800.0, 1.0], [48400.0, 1.0], [49600.0, 1.0], [50400.0, 1.0], [52600.0, 1.0], [56200.0, 1.0], [55600.0, 1.0], [60600.0, 2.0], [60400.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[100.0, 3286.0], [35500.0, 1.0], [35900.0, 1.0], [35100.0, 1.0], [38900.0, 1.0], [40900.0, 1.0], [40700.0, 3.0], [40300.0, 1.0], [39900.0, 1.0], [42700.0, 1.0], [44900.0, 1.0], [47100.0, 1.0], [48500.0, 1.0], [48100.0, 1.0], [49300.0, 1.0], [200.0, 29.0], [54100.0, 1.0], [55500.0, 1.0], [55900.0, 1.0], [55700.0, 1.0], [55300.0, 1.0], [60100.0, 2.0], [60300.0, 1.0], [300.0, 5.0], [400.0, 1.0], [600.0, 3.0], [3700.0, 1.0], [4400.0, 1.0], [5400.0, 1.0], [6700.0, 1.0], [6800.0, 2.0], [7000.0, 1.0], [7300.0, 1.0], [7400.0, 1.0], [7700.0, 1.0], [8600.0, 1.0], [8400.0, 1.0], [8500.0, 1.0], [9100.0, 1.0], [9700.0, 1.0], [9500.0, 1.0], [10900.0, 2.0], [10800.0, 1.0], [11600.0, 1.0], [11300.0, 2.0], [12000.0, 1.0], [12300.0, 1.0], [13300.0, 2.0], [13100.0, 1.0], [13200.0, 1.0], [12800.0, 1.0], [13700.0, 2.0], [14300.0, 1.0], [14000.0, 1.0], [15000.0, 2.0], [15100.0, 3.0], [15500.0, 1.0], [15700.0, 1.0], [16000.0, 2.0], [16300.0, 1.0], [17400.0, 2.0], [16500.0, 1.0], [18100.0, 1.0], [18200.0, 1.0], [17700.0, 2.0], [17800.0, 1.0], [17900.0, 1.0], [19400.0, 2.0], [19100.0, 1.0], [19300.0, 1.0], [19200.0, 1.0], [18700.0, 2.0], [18800.0, 1.0], [19000.0, 2.0], [20400.0, 1.0], [19600.0, 2.0], [20200.0, 2.0], [19800.0, 1.0], [19700.0, 1.0], [20500.0, 1.0], [20600.0, 2.0], [21000.0, 1.0], [20800.0, 1.0], [21200.0, 1.0], [21300.0, 2.0], [22500.0, 1.0], [22400.0, 2.0], [21600.0, 2.0], [21800.0, 1.0], [21900.0, 1.0], [22100.0, 1.0], [23000.0, 1.0], [22600.0, 3.0], [23400.0, 1.0], [22700.0, 2.0], [22800.0, 1.0], [24400.0, 1.0], [23700.0, 1.0], [24200.0, 1.0], [25200.0, 2.0], [25100.0, 2.0], [25400.0, 2.0], [25700.0, 1.0], [27300.0, 1.0], [26900.0, 1.0], [27500.0, 1.0], [27000.0, 1.0], [27400.0, 1.0], [28300.0, 1.0], [28000.0, 1.0], [29400.0, 1.0], [28800.0, 1.0], [29100.0, 1.0], [29200.0, 1.0], [30500.0, 1.0], [30300.0, 1.0], [29900.0, 1.0], [30700.0, 1.0], [31300.0, 1.0], [31400.0, 1.0], [30800.0, 1.0], [32300.0, 1.0], [32100.0, 1.0], [32800.0, 3.0], [35600.0, 1.0], [37200.0, 2.0], [42600.0, 1.0], [42800.0, 1.0], [44400.0, 1.0], [45600.0, 2.0], [45400.0, 1.0], [48000.0, 1.0], [50200.0, 1.0], [52200.0, 1.0], [60200.0, 4.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[300.0, 184.0], [600.0, 1.0], [400.0, 211.0], [200.0, 3107.0], [800.0, 1.0], [500.0, 11.0]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6663.0, "series": [{"data": [[0.0, 187.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 9.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 146.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 6663.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.4, "minX": 1.68546756E12, "maxY": 25.0, "series": [{"data": [[1.68546852E12, 20.39956803455727], [1.68546786E12, 10.0], [1.68546816E12, 19.438858695652154], [1.68546822E12, 20.0], [1.68546882E12, 5.0], [1.68546756E12, 1.4], [1.68546762E12, 4.333333333333332], [1.68546792E12, 10.437125748502998], [1.68546888E12, 4.604166666666664], [1.68546798E12, 13.745283018867926], [1.68546858E12, 18.443262411347543], [1.68546828E12, 20.449260042283292], [1.68546834E12, 24.182648401826494], [1.6854687E12, 11.602061855670108], [1.68546768E12, 5.0], [1.68546864E12, 15.0], [1.68546774E12, 5.157894736842105], [1.68546804E12, 15.0], [1.68546876E12, 9.49890590809628], [1.6854681E12, 15.527093596059114], [1.6854684E12, 25.0], [1.68546846E12, 24.98419666374012], [1.6854678E12, 8.925373134328359]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68546888E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 105.99999999999999, "minX": 1.0, "maxY": 24450.0, "series": [{"data": [[2.0, 393.3333333333333], [3.0, 4402.5], [4.0, 7935.4], [5.0, 4268.333333333336], [6.0, 13717.0], [7.0, 8423.0], [8.0, 8853.526315789473], [9.0, 4359.666666666666], [10.0, 3274.5429447852753], [11.0, 11764.285714285714], [12.0, 2331.9565217391305], [13.0, 9963.999999999998], [14.0, 13511.666666666666], [15.0, 4275.7028985507295], [1.0, 3952.0], [16.0, 4401.5], [17.0, 368.11111111111114], [18.0, 350.075], [19.0, 9746.857142857143], [20.0, 315.43097345132816], [21.0, 320.112676056338], [22.0, 312.5882352941177], [23.0, 323.8356164383561], [24.0, 316.3775510204082], [25.0, 318.13660062565197]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[19.111806543385462, 1568.2605974395483]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 125.0], [3.0, 5412.666666666666], [4.0, 9457.5], [5.0, 3949.021428571428], [6.0, 13310.0], [7.0, 24450.0], [8.0, 9033.333333333332], [9.0, 6095.0], [10.0, 3011.7415384615356], [11.0, 12347.76923076923], [12.0, 2134.59090909091], [13.0, 10511.363636363634], [14.0, 15823.4], [15.0, 4045.7627118644127], [1.0, 7048.0], [16.0, 4268.13043478261], [17.0, 130.03846153846152], [18.0, 112.1794871794872], [19.0, 9684.375], [20.0, 106.86979627989358], [21.0, 113.51428571428568], [22.0, 106.37313432835819], [23.0, 118.08333333333337], [24.0, 105.99999999999999], [25.0, 108.56889352818371]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[19.155300859598842, 1349.0011461318077]], "isOverall": false, "label": "HTTP Request POST-Aggregated", "isController": false}, {"data": [[2.0, 370.3333333333333], [3.0, 368.25], [4.0, 354.2], [5.0, 349.9577464788731], [6.0, 411.5], [7.0, 304.5], [8.0, 314.37500000000006], [9.0, 315.25], [10.0, 271.2423312883438], [11.0, 339.9285714285714], [12.0, 311.5238095238095], [13.0, 325.2307692307693], [14.0, 342.74999999999994], [15.0, 239.92251815980654], [1.0, 428.0], [16.0, 280.95833333333337], [17.0, 255.84615384615384], [18.0, 222.35000000000002], [19.0, 232.25000000000003], [20.0, 208.69449378330356], [21.0, 208.2083333333334], [22.0, 207.30000000000004], [23.0, 211.75], [24.0, 208.1340206185567], [25.0, 209.70490093847746]], "isOverall": false, "label": "HTTP Request GET", "isController": false}, {"data": [[19.106970128022766, 228.85376955903305]], "isOverall": false, "label": "HTTP Request GET-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 106.91666666666667, "minX": 1.68546756E12, "maxY": 55514.73333333333, "series": [{"data": [[1.68546852E12, 6993.7], [1.68546786E12, 1768.4333333333334], [1.68546816E12, 5709.316666666667], [1.68546822E12, 6835.266666666666], [1.68546882E12, 1652.2333333333333], [1.68546756E12, 145.95], [1.68546762E12, 916.0666666666667], [1.68546792E12, 2717.4], [1.68546888E12, 724.2666666666667], [1.68546798E12, 2345.35], [1.68546858E12, 6371.283333333334], [1.68546828E12, 7140.816666666667], [1.68546834E12, 8238.533333333333], [1.6854687E12, 3666.6], [1.68546768E12, 953.9833333333333], [1.68546864E12, 4854.85], [1.68546774E12, 953.1666666666666], [1.68546804E12, 1684.6], [1.68546876E12, 3440.266666666667], [1.6854681E12, 2449.25], [1.6854684E12, 8702.516666666666], [1.68546846E12, 8600.666666666666], [1.6854678E12, 1068.3166666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68546852E12, 44772.05], [1.68546786E12, 6933.833333333333], [1.68546816E12, 33474.63333333333], [1.68546822E12, 43595.85], [1.68546882E12, 8976.25], [1.68546756E12, 106.91666666666667], [1.68546762E12, 1810.1833333333334], [1.68546792E12, 7288.683333333333], [1.68546888E12, 4689.416666666667], [1.68546798E12, 4642.45], [1.68546858E12, 42568.933333333334], [1.68546828E12, 46328.21666666667], [1.68546834E12, 50560.2], [1.6854687E12, 23589.8], [1.68546768E12, 1729.2166666666667], [1.68546864E12, 31579.0], [1.68546774E12, 1443.35], [1.68546804E12, 3564.8166666666666], [1.68546876E12, 20586.516666666666], [1.6854681E12, 9022.783333333333], [1.6854684E12, 55514.73333333333], [1.68546846E12, 55024.61666666667], [1.6854678E12, 3458.0333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68546888E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 105.70312499999997, "minX": 1.68546756E12, "maxY": 29825.624999999996, "series": [{"data": [[1.68546852E12, 312.2954545454543], [1.68546786E12, 13556.874999999998], [1.68546816E12, 2156.5357142857133], [1.68546822E12, 317.1155115511553], [1.68546882E12, 507.98630136986304], [1.68546756E12, 7495.0], [1.68546762E12, 14965.272727272728], [1.68546792E12, 7773.185185185185], [1.68546888E12, 441.43749999999994], [1.68546798E12, 16235.757575757576], [1.68546858E12, 311.6007067137809], [1.68546828E12, 317.409523809524], [1.68546834E12, 325.3133514986375], [1.6854687E12, 344.6273291925466], [1.68546768E12, 19030.615384615387], [1.68546864E12, 313.4651162790698], [1.68546774E12, 17103.583333333336], [1.68546804E12, 28692.875000000004], [1.68546876E12, 364.7516339869282], [1.6854681E12, 10803.802816901407], [1.6854684E12, 314.3610389610394], [1.68546846E12, 316.4511873350924], [1.6854678E12, 14162.90909090909]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68546852E12, 105.87662337662341], [1.68546786E12, 12273.222222222219], [1.68546816E12, 2016.2157676348536], [1.68546822E12, 108.17549668874167], [1.68546882E12, 153.08219178082197], [1.68546756E12, 7048.0], [1.68546762E12, 14593.181818181818], [1.68546792E12, 8271.109090909093], [1.68546888E12, 146.74999999999997], [1.68546798E12, 14641.0], [1.68546858E12, 106.06382978723408], [1.68546828E12, 108.48571428571435], [1.68546834E12, 114.19889502762436], [1.6854687E12, 113.74846625766872], [1.68546768E12, 18670.30769230769], [1.68546864E12, 105.82710280373834], [1.68546774E12, 16679.583333333336], [1.68546804E12, 29825.624999999996], [1.68546876E12, 120.37086092715236], [1.6854681E12, 11470.815384615387], [1.6854684E12, 105.70312499999997], [1.68546846E12, 107.32020997375332], [1.6854678E12, 14437.57142857143]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68546852E12, 208.0064516129034], [1.68546786E12, 341.9318181818181], [1.68546816E12, 219.6831275720165], [1.68546822E12, 208.97682119205285], [1.68546882E12, 355.1506849315069], [1.68546756E12, 402.0], [1.68546762E12, 351.0714285714286], [1.68546792E12, 324.6724137931035], [1.68546888E12, 317.65625], [1.68546798E12, 366.05263157894734], [1.68546858E12, 207.57651245551608], [1.68546828E12, 208.80063291139246], [1.68546834E12, 211.34153005464478], [1.6854687E12, 233.82608695652164], [1.68546768E12, 410.76923076923083], [1.68546864E12, 207.71162790697673], [1.68546774E12, 393.07142857142856], [1.68546804E12, 389.0], [1.68546876E12, 246.72549019607843], [1.6854681E12, 342.6119402985074], [1.6854684E12, 208.65454545454537], [1.68546846E12, 209.1108179419526], [1.6854678E12, 375.58333333333326]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68546888E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 105.68749999999994, "minX": 1.68546756E12, "maxY": 29825.58333333333, "series": [{"data": [[1.68546852E12, 312.2629870129872], [1.68546786E12, 13556.645833333328], [1.68546816E12, 2156.408730158732], [1.68546822E12, 317.04290429042936], [1.68546882E12, 507.98630136986304], [1.68546756E12, 7485.0], [1.68546762E12, 14964.81818181818], [1.68546792E12, 7772.407407407408], [1.68546888E12, 441.43749999999994], [1.68546798E12, 16235.393939393942], [1.68546858E12, 311.5547703180212], [1.68546828E12, 317.35873015873005], [1.68546834E12, 325.2697547683926], [1.6854687E12, 344.59006211180144], [1.68546768E12, 19029.615384615383], [1.68546864E12, 313.44651162790706], [1.68546774E12, 17103.25], [1.68546804E12, 28692.500000000004], [1.68546876E12, 364.71895424836623], [1.6854681E12, 10803.605633802821], [1.6854684E12, 314.3194805194807], [1.68546846E12, 316.4089709762537], [1.6854678E12, 14162.409090909097]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68546852E12, 105.8538961038961], [1.68546786E12, 12273.088888888888], [1.68546816E12, 2016.161825726142], [1.68546822E12, 108.13245033112574], [1.68546882E12, 153.08219178082197], [1.68546756E12, 7048.0], [1.68546762E12, 14592.90909090909], [1.68546792E12, 8270.945454545456], [1.68546888E12, 146.74999999999997], [1.68546798E12, 14640.8], [1.68546858E12, 106.03546099290777], [1.68546828E12, 108.46349206349196], [1.68546834E12, 114.17679558011051], [1.6854687E12, 113.73006134969324], [1.68546768E12, 18669.615384615383], [1.68546864E12, 105.81308411214955], [1.68546774E12, 16679.416666666664], [1.68546804E12, 29825.58333333333], [1.68546876E12, 120.35761589403977], [1.6854681E12, 11470.769230769241], [1.6854684E12, 105.68749999999994], [1.68546846E12, 107.29921259842529], [1.6854678E12, 14437.42857142857]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68546852E12, 207.99677419354836], [1.68546786E12, 341.84090909090907], [1.68546816E12, 219.62962962962948], [1.68546822E12, 208.94370860927157], [1.68546882E12, 355.1506849315069], [1.68546756E12, 398.6666666666667], [1.68546762E12, 350.7142857142858], [1.68546792E12, 324.103448275862], [1.68546888E12, 317.65625], [1.68546798E12, 365.736842105263], [1.68546858E12, 207.56227758007103], [1.68546828E12, 208.77531645569624], [1.68546834E12, 211.31693989071036], [1.6854687E12, 233.80745341614897], [1.68546768E12, 410.61538461538464], [1.68546864E12, 207.70232558139537], [1.68546774E12, 392.7857142857142], [1.68546804E12, 388.7916666666667], [1.68546876E12, 246.7058823529412], [1.6854681E12, 342.44776119402974], [1.6854684E12, 208.63116883116896], [1.68546846E12, 209.0870712401056], [1.6854678E12, 375.33333333333337]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68546888E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68546756E12, "maxY": 230.83333333333334, "series": [{"data": [[1.68546852E12, 103.30194805194809], [1.68546786E12, 174.37500000000006], [1.68546816E12, 112.16666666666661], [1.68546822E12, 103.45874587458746], [1.68546882E12, 175.06849315068493], [1.68546756E12, 216.0], [1.68546762E12, 170.63636363636363], [1.68546792E12, 164.3148148148148], [1.68546888E12, 164.59374999999997], [1.68546798E12, 178.54545454545453], [1.68546858E12, 103.00000000000001], [1.68546828E12, 103.48571428571428], [1.68546834E12, 104.6076294277929], [1.6854687E12, 116.19875776397517], [1.68546768E12, 170.53846153846152], [1.68546864E12, 103.36744186046512], [1.68546774E12, 230.83333333333334], [1.68546804E12, 191.20833333333331], [1.68546876E12, 124.35947712418304], [1.6854681E12, 165.99999999999994], [1.6854684E12, 103.76883116883126], [1.68546846E12, 103.67018469656995], [1.6854678E12, 187.59090909090912]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.68546852E12, 0.0], [1.68546786E12, 0.0], [1.68546816E12, 0.0], [1.68546822E12, 0.0], [1.68546882E12, 0.0], [1.68546756E12, 0.0], [1.68546762E12, 0.0], [1.68546792E12, 0.0], [1.68546888E12, 0.0], [1.68546798E12, 0.0], [1.68546858E12, 0.0], [1.68546828E12, 0.0], [1.68546834E12, 0.0], [1.6854687E12, 0.0], [1.68546768E12, 0.0], [1.68546864E12, 0.0], [1.68546774E12, 0.0], [1.68546804E12, 0.0], [1.68546876E12, 0.0], [1.6854681E12, 0.0], [1.6854684E12, 0.0], [1.68546846E12, 0.0], [1.6854678E12, 0.0]], "isOverall": false, "label": "HTTP Request POST", "isController": false}, {"data": [[1.68546852E12, 103.29354838709678], [1.68546786E12, 175.52272727272728], [1.68546816E12, 109.92181069958842], [1.68546822E12, 103.46026490066218], [1.68546882E12, 175.06849315068484], [1.68546756E12, 188.33333333333334], [1.68546762E12, 162.78571428571425], [1.68546792E12, 162.62068965517238], [1.68546888E12, 164.59375], [1.68546798E12, 185.2894736842105], [1.68546858E12, 103.00711743772241], [1.68546828E12, 103.48734177215194], [1.68546834E12, 104.60928961748637], [1.6854687E12, 116.19875776397518], [1.68546768E12, 210.0], [1.68546864E12, 103.36744186046512], [1.68546774E12, 203.64285714285717], [1.68546804E12, 194.75], [1.68546876E12, 124.35947712418297], [1.6854681E12, 159.50746268656715], [1.6854684E12, 103.76883116883118], [1.68546846E12, 103.67018469657002], [1.6854678E12, 183.04166666666663]], "isOverall": false, "label": "HTTP Request GET", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68546888E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 208.0, "minX": 1.68546756E12, "maxY": 55912.0, "series": [{"data": [[1.68546786E12, 49308.0], [1.68546768E12, 22554.0], [1.68546816E12, 55912.0], [1.68546774E12, 21690.0], [1.68546756E12, 7048.0], [1.68546804E12, 45676.0], [1.68546762E12, 20526.0], [1.6854681E12, 25405.0], [1.68546792E12, 44477.0], [1.68546798E12, 35674.0], [1.6854678E12, 31344.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68546786E12, 47030.200000000004], [1.68546768E12, 21220.300000000003], [1.68546816E12, 55912.0], [1.68546774E12, 20521.9], [1.68546756E12, 7048.0], [1.68546804E12, 38466.399999999994], [1.68546762E12, 19889.000000000004], [1.6854681E12, 22257.3], [1.68546792E12, 29499.600000000006], [1.68546798E12, 22810.8], [1.6854678E12, 30258.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68546786E12, 49308.0], [1.68546768E12, 22554.0], [1.68546816E12, 55912.0], [1.68546774E12, 21690.0], [1.68546756E12, 7048.0], [1.68546804E12, 45676.0], [1.68546762E12, 20526.0], [1.6854681E12, 25405.0], [1.68546792E12, 44477.0], [1.68546798E12, 35674.0], [1.6854678E12, 31344.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68546786E12, 48640.299999999996], [1.68546768E12, 22513.75], [1.68546816E12, 55912.0], [1.68546774E12, 21473.0], [1.68546756E12, 7048.0], [1.68546804E12, 42174.899999999994], [1.68546762E12, 20512.2], [1.6854681E12, 25119.05], [1.68546792E12, 33336.799999999974], [1.68546798E12, 32024.999999999985], [1.6854678E12, 31230.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68546786E12, 234.0], [1.68546768E12, 299.0], [1.68546816E12, 39932.0], [1.68546774E12, 302.0], [1.68546756E12, 375.0], [1.68546804E12, 211.0], [1.68546762E12, 271.0], [1.6854681E12, 224.0], [1.68546792E12, 208.0], [1.68546798E12, 211.0], [1.6854678E12, 362.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68546786E12, 6809.5], [1.68546768E12, 6968.0], [1.68546816E12, 54130.0], [1.68546774E12, 464.0], [1.68546756E12, 415.5], [1.68546804E12, 420.0], [1.68546762E12, 406.0], [1.6854681E12, 408.0], [1.68546792E12, 407.0], [1.68546798E12, 430.5], [1.6854678E12, 16478.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68546816E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 108.5, "minX": 1.0, "maxY": 49213.0, "series": [{"data": [[1.0, 408.0], [4.0, 409.0], [2.0, 408.5], [8.0, 22199.0], [5.0, 407.0], [10.0, 24202.0], [3.0, 454.5], [6.0, 8422.0], [13.0, 411.0], [7.0, 14211.0], [15.0, 49213.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 190.5], [3.0, 205.0], [4.0, 204.0], [5.0, 205.0], [6.0, 193.0], [7.0, 204.0], [8.0, 205.0], [9.0, 197.0], [10.0, 204.0], [11.0, 146.0], [12.0, 139.5], [13.0, 205.0], [14.0, 205.0], [15.0, 136.0], [1.0, 207.0], [16.0, 114.0], [17.0, 114.0], [18.0, 205.0], [19.0, 112.0], [20.0, 168.5], [21.0, 204.0], [22.0, 111.5], [23.0, 205.0], [25.0, 206.0], [26.0, 108.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 108.5, "minX": 1.0, "maxY": 49210.5, "series": [{"data": [[1.0, 407.0], [4.0, 409.0], [2.0, 408.0], [8.0, 22199.0], [5.0, 406.0], [10.0, 24202.0], [3.0, 454.5], [6.0, 8417.0], [13.0, 411.0], [7.0, 14210.5], [15.0, 49210.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 190.5], [3.0, 205.0], [4.0, 204.0], [5.0, 205.0], [6.0, 193.0], [7.0, 204.0], [8.0, 205.0], [9.0, 197.0], [10.0, 204.0], [11.0, 146.0], [12.0, 139.5], [13.0, 205.0], [14.0, 205.0], [15.0, 136.0], [1.0, 207.0], [16.0, 114.0], [17.0, 114.0], [18.0, 205.0], [19.0, 112.0], [20.0, 168.5], [21.0, 204.0], [22.0, 111.5], [23.0, 205.0], [25.0, 206.0], [26.0, 108.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.68546756E12, "maxY": 12.85, "series": [{"data": [[1.68546852E12, 10.266666666666667], [1.68546786E12, 1.45], [1.68546816E12, 7.933333333333334], [1.68546822E12, 10.066666666666666], [1.68546882E12, 2.433333333333333], [1.68546756E12, 0.08333333333333333], [1.68546762E12, 0.4666666666666667], [1.68546792E12, 1.9166666666666667], [1.68546888E12, 1.0666666666666667], [1.68546798E12, 1.3166666666666667], [1.68546858E12, 9.383333333333333], [1.68546828E12, 10.533333333333333], [1.68546834E12, 12.116666666666667], [1.6854687E12, 5.433333333333334], [1.68546768E12, 0.43333333333333335], [1.68546864E12, 7.133333333333334], [1.68546774E12, 0.48333333333333334], [1.68546804E12, 0.7666666666666667], [1.68546876E12, 5.033333333333333], [1.6854681E12, 2.1333333333333333], [1.6854684E12, 12.85], [1.68546846E12, 12.666666666666666], [1.6854678E12, 0.7833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68546888E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68546756E12, "maxY": 12.816666666666666, "series": [{"data": [[1.68546786E12, 0.5], [1.68546768E12, 0.43333333333333335], [1.68546816E12, 0.15], [1.68546774E12, 0.43333333333333335], [1.68546756E12, 0.06666666666666667], [1.68546804E12, 0.75], [1.68546762E12, 0.4166666666666667], [1.6854681E12, 0.6333333333333333], [1.68546792E12, 0.95], [1.68546798E12, 1.0], [1.6854678E12, 0.36666666666666664]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68546852E12, 10.3], [1.68546786E12, 0.9833333333333333], [1.68546816E12, 7.916666666666667], [1.68546822E12, 10.066666666666666], [1.68546882E12, 2.433333333333333], [1.68546792E12, 0.9333333333333333], [1.68546888E12, 1.0666666666666667], [1.68546798E12, 0.21666666666666667], [1.68546858E12, 9.383333333333333], [1.68546828E12, 10.516666666666667], [1.68546834E12, 12.133333333333333], [1.6854687E12, 5.4], [1.68546864E12, 7.15], [1.68546876E12, 5.066666666666666], [1.6854681E12, 1.5], [1.6854684E12, 12.816666666666666], [1.68546846E12, 12.666666666666666], [1.6854678E12, 0.38333333333333336]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68546804E12, 0.05], [1.6854681E12, 0.06666666666666667]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68546888E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68546756E12, "maxY": 6.416666666666667, "series": [{"data": [[1.68546786E12, 0.25], [1.68546768E12, 0.21666666666666667], [1.68546774E12, 0.23333333333333334], [1.68546756E12, 0.05], [1.68546804E12, 0.4], [1.68546762E12, 0.23333333333333334], [1.6854681E12, 0.5166666666666667], [1.68546792E12, 0.6333333333333333], [1.68546798E12, 0.5666666666666667], [1.6854678E12, 0.16666666666666666]], "isOverall": false, "label": "HTTP Request GET-success", "isController": false}, {"data": [[1.68546852E12, 5.166666666666667], [1.68546786E12, 0.48333333333333334], [1.68546816E12, 4.05], [1.68546822E12, 5.033333333333333], [1.68546882E12, 1.2166666666666666], [1.68546792E12, 0.3333333333333333], [1.68546888E12, 0.5333333333333333], [1.68546798E12, 0.06666666666666667], [1.68546858E12, 4.683333333333334], [1.68546828E12, 5.266666666666667], [1.68546834E12, 6.1], [1.6854687E12, 2.683333333333333], [1.68546864E12, 3.5833333333333335], [1.68546876E12, 2.55], [1.6854681E12, 0.6], [1.6854684E12, 6.416666666666667], [1.68546846E12, 6.316666666666666], [1.6854678E12, 0.23333333333333334]], "isOverall": false, "label": "HTTP Request GET-failure", "isController": false}, {"data": [[1.68546852E12, 5.133333333333334], [1.68546786E12, 0.5], [1.68546816E12, 3.8666666666666667], [1.68546822E12, 5.033333333333333], [1.68546882E12, 1.2166666666666666], [1.68546792E12, 0.6], [1.68546888E12, 0.5333333333333333], [1.68546798E12, 0.15], [1.68546858E12, 4.7], [1.68546828E12, 5.25], [1.68546834E12, 6.033333333333333], [1.6854687E12, 2.716666666666667], [1.68546864E12, 3.566666666666667], [1.68546804E12, 0.05], [1.68546876E12, 2.5166666666666666], [1.6854681E12, 0.9666666666666667], [1.6854684E12, 6.4], [1.68546846E12, 6.35], [1.6854678E12, 0.15]], "isOverall": false, "label": "HTTP Request POST-failure", "isController": false}, {"data": [[1.68546786E12, 0.05], [1.68546768E12, 0.21666666666666667], [1.68546816E12, 0.1], [1.68546774E12, 0.2], [1.68546756E12, 0.016666666666666666], [1.68546804E12, 0.35], [1.68546762E12, 0.18333333333333332], [1.6854681E12, 0.05], [1.68546792E12, 0.13333333333333333], [1.68546798E12, 0.3], [1.6854678E12, 0.15]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.68546852E12, 5.133333333333334], [1.68546786E12, 0.75], [1.68546816E12, 4.1], [1.68546822E12, 5.05], [1.68546882E12, 1.2166666666666666], [1.68546792E12, 0.7666666666666667], [1.68546888E12, 0.5333333333333333], [1.68546798E12, 0.25], [1.68546858E12, 4.716666666666667], [1.68546828E12, 5.25], [1.68546834E12, 6.116666666666666], [1.6854687E12, 2.683333333333333], [1.68546864E12, 3.5833333333333335], [1.68546804E12, 0.05], [1.68546876E12, 2.55], [1.6854681E12, 1.1333333333333333], [1.6854684E12, 6.416666666666667], [1.68546846E12, 6.316666666666666], [1.6854678E12, 0.21666666666666667]], "isOverall": false, "label": "Test-failure", "isController": true}, {"data": [[1.68546786E12, 0.25], [1.68546768E12, 0.21666666666666667], [1.68546816E12, 0.15], [1.68546774E12, 0.2], [1.68546756E12, 0.016666666666666666], [1.68546804E12, 0.35], [1.68546762E12, 0.18333333333333332], [1.6854681E12, 0.11666666666666667], [1.68546792E12, 0.31666666666666665], [1.68546798E12, 0.43333333333333335], [1.6854678E12, 0.2]], "isOverall": false, "label": "HTTP Request POST-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68546888E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.68546756E12, "maxY": 19.233333333333334, "series": [{"data": [[1.68546786E12, 0.55], [1.68546768E12, 0.65], [1.68546816E12, 0.25], [1.68546774E12, 0.6333333333333333], [1.68546756E12, 0.08333333333333333], [1.68546804E12, 1.1], [1.68546762E12, 0.6], [1.6854681E12, 0.6833333333333333], [1.68546792E12, 1.0833333333333333], [1.68546798E12, 1.3], [1.6854678E12, 0.5166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68546852E12, 15.433333333333334], [1.68546786E12, 1.7333333333333334], [1.68546816E12, 12.016666666666667], [1.68546822E12, 15.116666666666667], [1.68546882E12, 3.65], [1.68546792E12, 1.7], [1.68546888E12, 1.6], [1.68546798E12, 0.4666666666666667], [1.68546858E12, 14.1], [1.68546828E12, 15.766666666666667], [1.68546834E12, 18.25], [1.6854687E12, 8.083333333333334], [1.68546864E12, 10.733333333333333], [1.68546804E12, 0.1], [1.68546876E12, 7.616666666666666], [1.6854681E12, 2.7], [1.6854684E12, 19.233333333333334], [1.68546846E12, 18.983333333333334], [1.6854678E12, 0.6]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68546888E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

